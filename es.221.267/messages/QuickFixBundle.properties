add.import=Agregar importación
class.to.import.chooser.title=Clase para importar
method.to.import.chooser.title=Método para importar
field.to.import.chooser.title=Campo para importar
access.static.via.class.reference.family=Acceso estático a través de la referencia de clase
access.static.via.class.reference.text=Acceder estático ''{1}.{0}'' mediante referencia a la clase ''{2}''.
add.default.constructor.family=Agregar constructor predeterminado
add.default.constructor.text={0} Agrega un constructor sin argumentos a {1}.
add.catch.clause.family=Agregue una excepción a la cláusula catch
add.catch.clause.text=Agrega una cláusula ''catch''.
add.finally.block.family=''finally'' añadir bloque
add.exception.to.throws.inherited.method.warning.text=El método ''{0}'' se hereda.\n\
method.is.inherited.warning.title=El método es heredado
add.exception.to.throws.text={0, choice, 0\#exception|2\#exception} a la firma del método
add.exception.to.throws.family=Agregar excepción a la firma del método
add.exception.to.existing.catch.family=Agregar una excepción a la cláusula catch existente
add.exception.to.existing.catch.generic=Agregar una excepción a la cláusula catch existente
add.exception.to.existing.catch.replacement=Reemplazar ''{0}'' con el más genérico ''{1}''
add.exception.to.existing.catch.no.replacement=Agregue ''{1}'' para capturar con ''{0}''
add.exception.to.existing.catch.chooser.title=Selección de bloque de captura
add.method.body.text=Agregar el cuerpo del método.
add.method.family=Agregar método
add.method.text=Agregar método ''{0}'' a la clase ''{1}''.
add.new.array.family=Agregar nueva expresión faltante
add.new.array.text=Añadir ''new {0}[]''
add.return.statement.text=Agregue la declaración ''return''.
add.runtime.exception.to.throws.text=Agregar excepción de tiempo de ejecución a la firma del método.
add.runtime.exception.to.throws.family=Agregar excepción de tiempo de ejecución a la firma del método
add.typecast.family=Agregar TypeCast
add.typecast.text=Transmitir a ''{0}''.
add.qualifier.typecast.text=calificador de conversión a ''{0}''.
add.docTag.to.custom.tags=Agregar {0} a las etiquetas personalizadas
fix.javadoc.family=Modificar Javadoc
adjust.package.family=Ajustar el nombre del paquete
adjust.package.text=Establezca el nombre del paquete en ''{0}''.
bring.variable.to.scope.family=Traer variable al alcance
bring.variable.to.scope.text=''{0}'' al alcance.
cast.parameter.text={0, choice,1\#1ro|2\#2do|3\#3er|4\#{0,number}to} parámetro ''{1}'' para emitir.
cast.single.parameter.text=parámetro de conversión a ''{0}''.
add.type.arguments.text={0, choice,1\#1ro|2\#2do|3\#3er|4\#{0,number} th} Agrega un argumento de tipo explícito al argumento.
add.type.arguments.single.argument.text=Agregar argumento de tipo explícito.
change.class.signature.text=Cambia la firma de ''{0}'' para que coincida con ''{1}''.
change.class.signature.family=Cambiar la firma de la clase
uidesigner.change.bound.field.type=Cambiar el tipo de campo vinculado
cannot.change.field.exception=No se puede cambiar el tipo de campo ''{0}''.\n\
exchange.extends.implements.keyword='{1} {2}'' a ''{0} {2}'
uidesigner.change.gui.component.type=Cambiar el tipo de componente de la GUI
change.method.signature.from.usage.family=Cambiar la firma del método en uso
change.method.signature.from.usage.text=Cambiar la firma de ''{0}'' a ''{1} ({2}) ''.
add.parameter.from.usage.text='{0}'' as {1, number, ordinal} th {2} to {3}''{4}'
remove.parameter.from.usage.text={2} Eliminar {0, number, ordinal} th {1} de ''{3}''
change.parameter.from.usage.text=\ {2} {0, number, ordinal} {1} in ''{3}'' in ''{4}'' to ''{5} 'change to'
searching.for.usages.progress.title=Buscando usos...
create.class.from.new.family=Crear clase desde nueva
create.class.from.usage.family=Crear clase a partir del uso
create.class.from.usage.text={0} Crea ''{1}''.
create.inner.class.from.usage.text=Crear {0} ''{1}'' interno.
create.element.in.class='{2}'' para crear {0} ''{1}'
create.constant.from.usage.family=Crear constante desde la ubicación de uso
create.constructor.from.new.family=Crear constructor a partir de nuevo
create.constructor.from.new.text=Crea un constructor.
create.constructor.from.super.call.family=Crear constructor a partir de la llamada super ()
create.constructor.from.this.call.family=Crear constructor a partir de la llamada this()
create.constructor.family=Crear constructor
create.constructor.text=Cree un constructor a partir de ''{0}''.
create.constructor.matching.super=Crear constructor coincidente super
super.class.constructors.chooser.title=Elija constructor de superclase
create.field.from.usage.family=Crear campo desde la ubicación de uso
target.class.chooser.title=Seleccionar clase de destino
new.method.body.template.error.text=Edite la plantilla "Nuevo cuerpo del método"
new.method.body.template.error.title=Error de plantilla de archivo
cannot.create.java.file.error.text=No se pudo crear {0}.java desde {1}. {2}
cannot.create.java.file.error.title=No se pudo crear el archivo
cannot.create.java.package.error.text=No se pudo crear {0} desde {1}. {2}
cannot.create.java.package.error.title=No se pudo crear el paquete
create.accessor.for.unused.field.family=Crea un acceso para un campo no utilizado
create.getter.for.field=Crear captador de ''{0}''
create.setter.for.field=Crear setter de ''{0}''
create.getter.and.setter.for.field=''{0}'' crear getter y setter
create.local.from.usage.family=Crear local desde la ubicación de uso
create.local.from.instanceof.usage.family=Cree una variable local a partir del uso de instanceof
create.local.from.instanceof.usage.text=Inserte la declaración ''({0}){1}''.
create.member.from.usage.family=Crear miembro desde la ubicación de uso
create.method.from.usage.family=Crear método a partir del uso
create.method.from.usage.text=Crear método ''{0}''.
create.type.parameter.from.usage.family=Crear parámetro de tipo desde la ubicación de uso
create.type.parameter.from.usage.text=Crear parámetro de tipo ''{0}''.
create.type.parameter.from.usage.chooser.title=Dónde agregar el parámetro de tipo
create.parameter.from.usage.family=Crear parámetro desde la ubicación de uso
create.property.from.usage.family=Crear propiedad desde la ubicación de uso
create.property.from.usage.text=Crear propiedad ''{0}''.
create.property.from.usage.full.text=Crear propiedad ''{0}'' desde ''{1}''.
create.read.only.property.from.usage.text=Crear propiedad de solo lectura ''{0}''.
create.read.only.property.from.usage.full.text=''{1}'' crea la propiedad de solo lectura ''{0}''.
create.write.only.property.from.usage.text=Crear propiedad de solo escritura ''{0}''.
create.write.only.property.from.usage.full.text=''{1}'' crea propiedad de solo escritura ''{0}''.
create.getter=Crear captador
create.setter=Crear setter
create.annotation.family=Agregar anotación a la declaración
create.annotation.text=Agregar @''{0}''
defer.final.assignment.with.temp.family=Usar variable temporal para aplazar la asignación final
defer.final.assignment.with.temp.text=Aplazar la asignación a ''{0}'' mediante la variable temp.
delete.catch.family=Eliminar captura
delete.catch.text=''{0}'' Elimina la captura.
delete.body.text=Eliminar el cuerpo del método.
enable.optimize.imports.on.the.fly=' Configuración | editor | General | Importación automática | Habilitar '' optimización inmediata de declaraciones de importación 
generify.family=Generalizar archivos
generify.text=''{0}''.
implement.methods.fix=Implementar método
import.class.fix=Importar clase
insert.new.fix=Insertar nuevo
insert.super.constructor.call.family=Llamar al constructor predeterminado
insert.super.constructor.call.text=Insertar ''{0}''.
make.class.an.interface.family=Hacer de una clase una interfaz
make.class.an.interface.text=''{0}'' como interfaz.
make.interface.an.class.text=''{0}'' como clase.
make.vararg.parameter.last.family=poner el parámetro vararg al final
make.vararg.parameter.last.text=mueva ''{0}'' al final de la lista.
make.receiver.parameter.first.family=리시버 매개변수를 처음으로 설정
make.receiver.parameter.first.text='this'를 목록 맨 앞으로 이동
fix.parameter.type.family=Modificar el tipo de parámetro
fix.parameter.type.text=''{0}'' Hace que tome un parámetro de tipo ''{1}''.
fix.return.type.family=Corregir el tipo de retorno
fix.return.type.or.predecessor.text=make ''{0}'' return ''{1}'' o el valor anterior.
fix.return.type.text=''{0}'' hace que ''{1}'' vuelva.
fix.throws.list.family=Modificar lista de lanzamientos
fix.throws.list.add.exception=Agregar ''{0}'' a la lista de lanzamientos ''{1}''
fix.throws.list.remove.exception=Eliminar ''{0}'' de la lista de lanzamientos ''{1}''
fix.modifiers.family=Modificar modificadores
anonymous.class.presentation=Clase anónima derivada de {0}
class.initializer.presentation={0} inicializador de clase
add.modifier.fix=''{0}'' a {1}
remove.modifier.fix=Hacer ''{0}'' no {1}
add.modifier.fix.family={0}(으)로 만들기
remove.modifier.fix.family={0}(으)로 만들지 않음
change.inheritors.visibility.warning.text=¿Está seguro de que desea cambiar la visibilidad de la herencia a la visibilidad del método principal?
change.inheritors.visibility.warning.title=Cambiar herederos
move.class.in.extend.list.family=Mover clase en lista extendida
move.bound.class.to.front.fix.text=Mover el límite ''{0}'' al inicio de la lista de límites para el parámetro de tipo ''{1}''.
move.catch.up.family=Mover ponerse al día
move.catch.up.text=Mover captura para ''{0}'' antes de ''{1}''.
move.class.to.separate.file.family=Mover la clase a un archivo separado
move.class.to.separate.file.text=Mover la clase ''{0}'' a ''{0} .java ''.
move.class.to.package.family=Mover la clase al paquete
move.class.to.package.text=Mover al paquete ''{0}''.
negation.broader.scope.family=Amplio alcance negativo
negation.broader.scope.text=Cambie a ''\!({0})''.
optimize.imports.fix=Optimizar declaraciones de importación
remove.qualifier.fix=Eliminar calificador
remove.unused.element.family=Eliminar {0} no utilizado
rename.wrong.reference.family=Cambiar el nombre de la referencia no válida
rename.wrong.reference.text=Cambiar el nombre de la referencia.
reuse.variable.declaration.family=Reutilizar declaraciones de variables
reuse.variable.declaration.text=Reutilizar la declaración de variable anterior ''{0}''.
navigate.variable.declaration.family=Navegar a la declaración de variable
navigate.variable.declaration.text=Navegar a la variable declarada previamente ''{0}''.
navigate.duplicate.element.text=중복 {0}(으)로 이동
safe.delete.family=Eliminación segura
safe.delete.text=Eliminación segura ''{0}''
setup.jdk.location.family=Establecer la ubicación del JDK
setup.jdk.location.text=Establecer el JDK.
side.effects.warning.dialog.title=Efectos secundarios detectados
simplify.boolean.expression.family=Simplificar expresiones booleanas
simplify.boolean.expression.text=''{0}'' a {1}.
fix.super.method.return.type.family=Modificar el tipo de retorno del método principal
fix.super.method.return.type.text=''{0}'' hace que ''{1}'' vuelva.
surround.with.try.catch.fix=Envolver con try/catch
make.final.family=Establecer final
make.final.copy.to.temp=''{0}'' a {1} variable temporal
fix.variable.type.family=Modificar el tipo de variable
fix.variable.type.text={0} Cambiar tipo ''{1}'' a ''{2}''.
fix.receiver.parameter.type.family=리시버 매개변수 타입 수정
fix.receiver.parameter.type.text=둘러싸는 클래스 타입으로 변경
wrap.expression.using.static.accessor.family=Ajustar expresión
wrap.expression.using.static.accessor.text=Utilice ''{0}()'' para ajustar.
side.effect.action.remove=Elimina&r
side.effect.action.transform=&Transformar
side.effect.action.cancel=&Cancelar
side.effect.message1=<html><body> Una expresión asignada a la variable ''{0}'' puede tener efectos secundarios. <br> Puede realizar las siguientes acciones. <ul><li> Relacionado <b> eliminar el uso de variables con todas las expresiones</b></li></body></html>
change.parameter.class.family=Cambiar clase de parámetro
change.extends.list.family=Ampliar clase desde
add.class.to.extends.list='{0}'' establecido para extender ''{1}'
remove.class.from.extends.list='{0}'' no extiende ''{1}'
add.interface.to.implements.list='{0}'' configurado para implementar ''{1}'
remove.interface.from.implements.list='{0}'' no implementa ''{1}'
convert.method.to.constructor=Crear constructor de método
create.field.text=Crea el campo {0}.
create.property.text=Crear propiedad {0}.
add.constructor.parameter.name=Agregar parámetro de constructor
remove.suppression.action.name=''{0}'' Eliminar la supresión
remove.suppression.action.family=Eliminar supresión
remove.qualifier.action.text=Eliminar calificador
fix.argument.family=Modificar argumentos
change.new.operator.type.text='{0}'' a '' nuevo {1}{2}'
change.new.operator.type.family=Cambiar nuevo tipo de operador
fix.unused.symbol.injection.family=Agregar a la anotación de inyección de dependencia
fix.unused.symbol.injection.text=Suprima las advertencias obsoletas cuando se anotan con ''{0}''
fix.add.special.annotation.family=Agregar a una anotación especial
fix.add.special.annotation.text=agregue ''{0}'' a la lista de anotaciones especiales
orderEntry.fix.add.dependency.on.module=Agregar dependencia al módulo ''{0}''
orderEntry.fix.add.dependency.on.module.choose=Agregar dependencia al módulo...
orderEntry.fix.choose.module.to.add.dependency.on=Seleccionar módulo para agregar dependencia
orderEntry.fix.family.add.module.dependency=Agregar dependencia del módulo
orderEntry.fix.add.library.to.classpath=Agregar biblioteca ''{0}'' a classpath
orderEntry.fix.family.add.library.to.classpath=Agregar biblioteca a classpath
orderEntry.fix.circular.dependency.warning=Agregar una dependencia al módulo ''{0}'' inserta una dependencia circular entre los módulos ''{1}'' y ''{2}''.\n\
orderEntry.fix.title.circular.dependency.warning=Advertencia de dependencia circular
static.import.method.text=método de importación estático
static.import.method.choose.method.to.import=Elija el método para importar
static.import.constant.text=constante de importación estática.
add.library.title.dialog=Agregar biblioteca ''{0}'' al proyecto
add.library.title.choose.folder=Elija directorio
add.library.description.choose.folder=Elija el directorio para copiar la biblioteca
add.library.error.not.found=El archivo de biblioteca ''{0}'' no existe.
add.library.error.cannot.copy=No se pudo copiar ''{0}'' a ''{1}''.\n\
add.library.use.bundled.library.radio.button=&Usar ''{0}'' de distribución {1}
add.library.copy.files.to.radio.button=&Copiar archivos de biblioteca a ''{0}''
permute.arguments=Argumentos de permutación
fix.single.character.string.to.char.literal.text=Cambie {0} a {1} (con {2} literales).
fix.single.character.string.to.char.literal.family=Corregir el tipo de literal
change.to.append.family=StringBuilder agregar editar
change.to.append.text=Cambiar a ''{0}''
convert.to.string.family=Modificar literales de caracteres
convert.to.string.text=Convertir a literal de cadena.
initialize.final.field.in.constructor.name=Inicializar en constructor
initialize.final.field.in.constructor.choose.dialog.title=Elija el constructor para agregar la inicialización
remove.redundant.arguments.text=Elimine los argumentos redundantes para llamar a ''{0}''.
remove.redundant.arguments.family=Eliminar argumentos duplicados
replace.with.list.access.text=Reemplazar con acceso a la lista.
add.qualifier=Agregar calificador
add.qualifier.original.class.chooser.title=Clase original
annotations.fix=<html>Anotaciones</html>
add.missing.annotation.parameters.fix=Agregar parámetro de anotación faltante {0}
add.missing.annotation.single.parameter.fix=Agregar parámetro de anotación faltante ''{0}''
add.method.qualifier.fix.text=Agregar calificador ''{0}'' al método
add.method.qualifier.fix.family=Agregar calificador de método
collection.addall.can.be.replaced.with.constructor.fix.options.column.title=확인된 클래스
collection.addall.can.be.replaced.with.constructor.fix.options.dialog.title=확인할 클래스 추가
collection.addall.can.be.replaced.with.constructor.fix.options.label=확인할 클래스:
collection.addall.can.be.replaced.with.constructor.fix.description=Puede reemplazar la llamada ''\# ref()'' con una llamada al constructor parametrizada.
collection.addall.can.be.replaced.with.constructor.fix.family.name='' addAll ()/putAll()'' llamadas a llamadas de constructor parametrizadas
collection.addall.can.be.replaced.with.constructor.fix.name=Reemplazar llamadas a ''{0}()'' con llamadas de constructor parametrizadas
add.exception.from.field.initializer.to.constructor.throws.text=Class {0, choice, 0\#default constructor |1\#constructor|2\#constructor} Agregar excepción a la firma.
add.exception.from.field.initializer.to.constructor.throws.family.text=Agregar excepción a la firma del constructor de la clase
java.8.map.api.inspection.fix.text=Reemplácelo con la llamada al método ''{0}''.
java.8.map.api.inspection.description=Puede ser reemplazado con una sola llamada al método '' Map. {0}''.
java.8.map.api.inspection.fix.family.name=Reemplazar con una sola llamada al método Map
java.8.collection.removeif.inspection.description=Puede reemplazar el bucle con Collection.removeIf.
java.8.collection.removeif.inspection.fix.name=Reemplazar bucle con Collection.removeIf
java.8.list.sort.inspection.description=Puede reemplazar Collections.sort con List.sort.
java.8.list.sort.inspection.fix.name=Reemplazar con List.sort
wrap.with.optional.parameter.text={0, choice,1\#1ro|2\#2do|3\#3er|4\#{0 usando '' java.util.Optional '', number} th} para envolver el parámetro.
wrap.with.optional.single.parameter.text=Utilice ''java.util.Optional'' para ajustar.
move.file.to.source.root.text=Mueve el archivo a la raíz de origen.
delete.return.fix.family=Regresar Eliminar
delete.return.fix.text=Eliminar retorno {0}.
delete.return.fix.side.effects.text=Eliminar retorno {0} y extraer efectos secundarios.
delete.reference.fix.text=Eliminar referencia.
delete.unreachable.statement.fix.text=Eliminar declaración inalcanzable
extract.side.effects.convert.to.if=Extraiga los efectos secundarios como declaración '' if ''
extract.side.effects=Extraer {0, choice,1\#efectos secundarios|2\# efectos secundarios}
extract.side.effects.family.name=Eliminar frase para extraer efectos secundarios
module.info.add.directive.family.name=Agregar directiva a module-info.java
module.info.add.requires.name=Agregue la directiva '' requiere {0}'' a module-info.java
module.info.add.exports.name=Agregue la directiva '' export {0}'' a module-info.java
module.info.add.uses.name=Agregue la directiva '' uses {0}'' a module-info.java
collection.to.array.text=Aplicar transformación ''.toArray ({0})''
collection.to.array.family.name=Aplicar transformación ''.toArray()''
insert.sam.method.call.fix.name=''.{0}'' para llamar a un método de interfaz de función
insert.sam.method.call.fix.family.name=Insertar una única llamada de método abstracto
wrap.with.adapter.call.family.name=Ajustar usando una llamada de adaptador o un objeto
wrap.with.adapter.text=Envuelva usando ''{0}''
wrap.with.adapter.parameter.single.text=Utilice ''{0}'' para ajustar los parámetros.
wrap.with.adapter.parameter.multiple.text=Utilice ''{1}'' para ajustar el parámetro {0, choice,1\#1ro|2\#2do|3\#3er|4\#{0,number}to}.
java.9.merge.module.statements.fix.family.name=Fusionar con otra directiva ''{0}''
java.9.merge.module.statements.fix.name=Fusionar con otra directiva ''{0} {1}''
adjust.method.accepting.functional.expression.fix.family.name=Método de ajuste que acepta una expresión de función
adjust.method.accepting.functional.expression.fix.text=Reemplace ''{0}()'' por ''{1}()''.
add.compiler.option.fix.name=''{0}'' a las opciones del compilador del módulo
create.service.implementation.fix.family.name=Crear clase de implementación de servicio
create.service.implementation.fix.name=Crear clase ''{0}''
create.service.interface.fix.family.name=Crear servicio
create.service.interface.fix.name=Crear servicio ''{0}''
convert.variable.to.field.in.anonymous.class.fix.name=''{0}'' mover a objeto anónimo
change.method.parameters.text=Cambiar los parámetros del método a ''{0}''.
change.method.parameters.family=Cambiar los parámetros del método
add.default.branch.to.variable.initializing.switch.fix.name=Agregue la rama '' predeterminada '' a la declaración '' cambiar '' que inicializa ''{0}''
insert.empty.parenthesis=''()'' insertar
remove.parameter.list=Eliminar lista de parámetros
convert.primitive.to.boxed.type=Convertir tipo primitivo en tipo en caja
choose.class.to.move.popup.title=Elige la clase para mover
move.0.in.1=Mover ''{0}'' de ''{1}''...
move.0.from.module.1.to.2=Mover ''{0}'' del módulo ''{1}'' a ''{2}''
add.0.to.classpath=Agregar ''{0}'' a classpath
iterate.iterable=Iterar
choose.fields.to.generate.constructor.parameters.for=Elija campos para generar parámetros de constructor para
choose.constructors.to.add.parameter.to=Elija el constructor para agregar el parámetro al
add.constructor.parameters=Agregar parámetros de constructor
add.annotation.attribute.name.family.name=Agregar nombre de atributo de anotación
add.annotation.attribute.name=Agregar ''{0}\=''
replace.with.getter.setter=Reemplazar con captador/establecedor
replace.with.getter=Reemplazar con captador
replace.with.setter=Reemplazar con establecedor
wrap.with.block=Envolver con bloque
create.block=Crear bloque
replace.for.each.loop.with.iterator.for.loop=Reemplazar ''for each'' bucle con iterador bucle ''for''
surround.annotation.parameter.value.with.quotes=Incluya los valores de los parámetros de anotación entre comillas
surround.with.array.initialization=Envolvente con inicializador de matriz
create.service.implementation=Crear implementación de servicio
create.service=Crear servicio
choose.default.value.parameters.popup.title=Elija parámetros de valor predeterminado
generate.overloaded.method.or.constructor.with.default.parameter.values=Genera {0} sobrecargado con valores de parámetro predeterminados
generate.overloaded.method.with.default.parameter.values=Genera métodos sobrecargados con valores de parámetros predeterminados
remove.unreachable.branches=Eliminar ramas inalcanzables
set.inspection.option.fix=Establecer opciones de inspección
simplify.boolean.expression.extracting.side.effects=\ Extraer efectos secundarios
intention.move.parenthesis.name=Modificar la ubicación del paréntesis de cierre
extend.sealed.title=Extienda la clase sellada y marque como
implement.sealed.title=implementar la interfaz sellada y marcarla como
implement.or.extend.fix.family=implementar/extender la clase base requerida
implement.or.extend.fix.implement.text=''{0}'' implementación
implement.or.extend.fix.extend.text=''{0}'' extensión
seal.class.from.permits.list.fix=상속자 봉인
unwrap.array.initializer.fix=배열 이니셜라이저를 해당 요소로 바꾸기
orderEntry.fix.family.add.library.to.classpath.options=라이브러리를 클래스 경로에 추가...
popup.title.choose.library.to.add.dependency.on=종속성을 추가할 라이브러리 선택
replace.with.type.pattern.fix=타입 패턴으로 바꾸기
merge.duplicate.attributes.family=중복 속성 병합
move.switch.branch.up.family=switch 브랜치를 위로 이동
move.switch.branch.up.text=switch 브랜치 ''{0}''을(를) ''{1}'' 앞으로 이동
change.type.family=타입 변경
change.type.text=타입을 ''{0}''(으)로 변경
make.annotation.applicable.to.0.fix=어노테이션을 {0}에 적용 가능하도록 만들기
set.inspection.option.description.uncheck=검사 옵션 선택 해제:
set.inspection.option.description.check=검사 옵션 선택:
java.8.list.replaceall.inspection.description=루프는 'List.replaceAll'로 대체될 수 있습니다
java.8.list.replaceall.inspection.fix.name=루프를 'List.replaceAll'로 대체
fix.receiver.parameter.name.family=리시버 매개변수의 이름 고치기
qualify.method.call.fix=''{0}''(으)로 호출 정규화
qualify.method.call.family=메서드 호출 정규화
