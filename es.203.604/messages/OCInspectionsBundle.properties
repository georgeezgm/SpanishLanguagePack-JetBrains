clang.tidy.update.notification.title=Clang-Tidy 업데이트 완료
clang.tidy.update.notification.message={0}개의 새로운 {1, choice,1\#검사|2\#검사}가 추가{1, choice,1\#되었습니다|2\#되었습니다}
clang.tidy.update.review.new.checks.link=검토
clang.tidy.update.new.checks.dialog.title=삽입된 검사
clang.tidy.update.check.enabled.column.title=Habilitado
clang.tidy.update.check.name.column.title=검사 이름
clang.tidy.update.go.to.help.page=도움말 페이지 참조
clang.tidy.update.settings.override=.clang-tidy 파일이 IDE의 기본 검사 설정을 덮어쓸 수 있습니다
configurable.naming.convention.header.guard.style=헤더 가드 스타일\:
configurable.naming.convention.several.rules.hint=하나의 엔티티 유형에 대해 여러 규칙이 있는 경우 목록의 마지막 규칙이 사용됩니다.
configurable.clangTidy.executable=Clang-Tidy 실행 파일 지정
configurable.clangTidy.checks.hint=쉼표로 구분된 활성화/비활성화된 검사 목록
configurable.clangTidy.prefer.files.over.ide.settings=IDE 설정보다 .clang-tidy 파일 선호
configurable.clangTidy.checks.options.button=Clang-Tidy 검사 옵션 구성...
configurable.clangTidy.use.external.binary.checkbox=기본 도구 대신 외부 Clang-Tidy 사용\:
configurable.clangTidy.use.external.binary.path=Clang-Tidy 경로
configurable.clangTidy.checks.options.dialog.title=Clang-Tidy 검사 옵션 구성
configurable.clangTidy.checks.options.example.hint=예\: 옵션 - modernize-use-nullptr.NullMacros, 값 - NULL_MACRO
configurable.clangTidy.checks.options.learnMore.button=심화 학습
configurable.clangTidy.checks.options.option.column=옵션
configurable.clangTidy.checks.options.value.column=값
configurable.clangTidy.min.supported.clangTidy.version=참고\: Clang-Tidy 7.0.0 이후 버전이 지원됩니다.
configurable.clangTool.version.task.title={0} 버전 확인 중
configurable.clangTool.version.checking=기본 {0} 버전\: 검사 중...
configurable.clangTool.version=기본 {0} 버전\: {1}
configurable.clangTool.revision.internal=리비전\: {0}
configurable.clangTool.revision=LLVM 리비전\: {0}
configurable.clangTool.version.unable.check=기본 {0} 버전\: 검사 불가
configurable.clangTidy.example.link=예
configurable.clangTidyMisra.c.checks=C 검사
configurable.clangTidyMisra.c.format=형식\: ''clion-misra-c2012-X-Y''
configurable.clangTidyMisra.cpp.checks=C++ 검사
configurable.clangTidyMisra.cpp.format=형식\: ''clion-misra-cpp2008-X-Y-Z''
configurable.clangTidyMisra.confluence.link=지원되는 검사
clang.tidy.check.for.update.task=Clang-Tidy 업데이트 확인 중
inspection.argument.selection.defects.display.name=인수 선택 결함
inspection.argument.selection.defects.checkbox=짧은 이름을 가진 매개변수/인수 검사(심볼 3개 미만)
inspection.argument.selection.defects.quick.fix=인수 전환
inspection.empty.decl.or.stmt.display.name=빈 선언 또는 구문
inspection.clangTidy.name=Clang-Tidy
inspection.clangTidy.message=Clang-Tidy\: {0}
inspection.clangTidy.open.settings.action=설정 열기
inspection.clangTidy.suppress.check.for.line=줄에 대한 {0} 억제
inspection.clangTidy.suppress.for.line=줄 억제
inspection.clangTidy.not.found=Clang-Tidy를 찾을 수 없거나 실행할 수 없습니다.
inspection.clangTidy.failed=Clang-Tidy를 실행할 수 없습니다. {0}
inspection.disable.clangTidy.check={0} 검사 비활성화
inspection.disable.all.clangTidy.checks=모든 {0} 검사 비활성화
inspection.naming.convention.edit.settings.link=코드 스타일 설정 편집
inspection.naming.convention.rename.fix={0}(으)로 이름 변경
inspection.naming.convention.rename.header.guard.fix=헤더 가드 이름을 {0}(으)로 변경
inspection.context.sensitive.analysis=컨텍스트 기반 분석
inspection.global.unused.analysis=사용되지 않는 전역 분석
inspection.inconsistent.naming=일관되지 않은 이름 지정
inspection.general=일반
inspection.modern.syntax=최신 구문을 사용할 수 있습니다.
inspection.loop.condition.is.not.updated=루프 조건이 루프 내에서 업데이트되지 않습니다.
inspection.arc.issues=ARC 문제
inspection.sending.dealloc=''dealloc'' 전송
inspection.assign.in.condition.with.self="self"가 있는 조건식 내 ''\=''
inspection.usage.of.api.unavailable=배포 대상에서 사용할 수 없는 API 사용 위치
inspection.deprecated.api=더 이상 사용되지 않는 API의 사용 위치
inspection.assign.in.condition=조건식 내 ''\=''
inspection.kr.unspecified.parameters=K 및 R이 지정되지 않은 매개변수 구문이 사용된 함수에 인수 전달
inspection.hiding.non.virtual.function=가상이 아닌 함수 숨기기
inspection.constant.conditions=상수 조건
inspection.unused.code=사용되지 않는 코드
inspection.non.localized.string=로컬화되지 않은 문자열
inspection.simplifiable.statement=단순화 가능한 구문
inspection.simplify={0} 단순화
inspection.replace.enable_if.with.require=enable_if를 필수로 바꾸기
inspection.simplify.condition="condition \=\= true" 단순화
inspection.simplify.ternary="condition1 ? true\: condition2" 단순화
inspection.not.released.var=릴리스는 dealloc에 또는 해당 피호출자 중 하나에 있어야 합니다.
inspection.works.only.when.clangd.disabled.hint=단, Clangd가 꺼져 있을 때만 검사를 조정할 수 있습니다.
unused.inspection.run.in.headers=헤더 파일에서 검사 실행
clang.based.inspection.arc.and.properties=ARC 및 @properties
clang.based.inspection.lexical.or.preprocessor.issue=어휘 또는 전처리기 문제
clang.based.inspection.api.notes.issue=API 노트 문제
clang.based.inspection.openmp.issue=OpenMP 문제
clang.based.inspection.vtable.issue=VTable ABI 문제
clang.based.inspection.coroutines.issue=코루틴 문제
clang.based.inspection.concepts.issue=컨셉 이슈
clang.based.inspection.dependency.directive.source.minimization.issue=종속성 지시문 소스 최소화 이슈
open.clangd.settings.link=Clangd 설정 열기
inspection.message.modern.syntax.can.be.used=최신 구문을 사용할 수 있습니다
inspection.message.non.localized.string=로컬화되지 않은 문자열\: {0}
inspection.message.not.released.in.dealloc.method={0}이(가) ''dealloc'' 메서드로 릴리스되지 않았습니다
inspection.message.misses.call.to.super.dealloc.at.last.statement={0}의 마지막 구문에서 [super dealloc] 호출이 노락되었습니다
intention.family.name.add.call.to.super.dealloc=[super dealloc] 호출 추가
intention.family.name.delete.method=메서드 삭제
0.1.choice.0.is.assigned.but.never.accessed.1.is.never.used={0}은(는){1, choice, 0\# 대입되었으나 전혀 액세스되지 않습니다|1\# 전혀 사용되지 않습니다}
inspection.display.name.simplifiable.statement=단순화 가능한 구문
checkbox.simplify.if.true.while.false="if (true)", "while (false)" 단순화
checkbox.simplify.condition.true="condition \=\= true" 단순화
checkbox.simplify.condition1.true.condition2="condition1 ? true\: condition2" 단순화
checkbox.simplify.if.condition1.return.true.return.condition2="if (condition1) return true; return condition2;" 단순화
intention.family.name.simplify={0} 단순화
intention.family.name.simplify.expression=표현식 단순화
intention.name.simplify={0} 단순화
inspection.name.unconstrained.variable.type=제약되지 않은 변수 유형
inspection.display.name.virtual.call.from.constructor.or.destructor=생성자 또는 소멸자로부터의 가상 호출
inspection.name.misra.checks=MISRA 검사
quick.fix.place.parentheses.around=소괄호를 주위에 배치
quick.fix.send.release.message.instead.dealloc="dealloc" 대신 "release" 메시지를 전송
quick.fix.append.nil.argument="nil" 인수 추가
quick.fix.remove.extra.declarators=추가 선언자 제거
quick.fix.remove.statement=구문 제거
quick.fix.remove.pure.specifier=순수 지정자 제거
quick.fix.change.pure.specifier=순수 지정자를 ''\= 0''으로 변경
quick.fix.remove.from.base.classes.list=''{0}''을(를) 기본 클래스 목록에서 제거
quick.fix.remove.redundant.cast=중복 형 변환 제거
quick.fix.remove.initializer=이니셜라이저 제거
quick.fix.insert.keyword=''{0}'' 삽입
quick.fix.remove.property=프로퍼티 제거
quick.fix.remove.declaration=선언 제거
inspection.message.unterminated.string.literal=종료되지 않은 문자열 리터럴
inspection.message.invalid.suffix.on.raw.string=원시 문자열의 잘못된 접미사
quick.fix.remove.attribute=Eliminar atributo
quick.fix.remove.useless.import=필요 없는 import 문 제거
quick.fix.remove.useless.include=필요 없는 인클루드 제거
quick.fix.optimize.imports=import 문 최적화
quick.fix.optimize.includes=인클루드 최적화
quick.fix.change.format.specifier=서식 지정자 변경
quick.fix.remove.arguments=인수 제거
quick.fix.copy.superclass.from.interface=상위 클래스를 인터페이스에서 복사
quick.fix.copy.superclass.to.interface=상위 클래스를 인터페이스로 복사
quick.fix.remove.superclass=상위 클래스 제거
quick.fix.remove.user.defined.getter.method=사용자 정의된 getter 메서드 제거
quick.fix.remove.user.defined.setter.method=사용자 정의된 setter 메서드 제거
quick.fix.remove.superclass.reference=상위 클래스 참조 제거
quick.fix.remove.instance.variable.list=인스턴스 변수 목록 제거
quick.fix.remove.protocols.list=프로토콜 목록 제거
quick.fix.remove.method.body=메서드 본문 제거
quick.fix.remove.synthesize.dynamic.statement=''@synthesize''/''@dynamic'' 구문 제거
quick.fix.remove.synthesize.statement=''@synthesize'' 구문 제거
quick.fix.remove.accessor=접근자 제거
inspection.message.error.after.macro.substitution=매크로 치환 후 오류 발생\: 
inspection.message.was.not.declared.in={0}이(가) {1}에 선언되어 있지 않습니다
inspection.message.hides.non.virtual.function={0}이(가) {1}에서 비 가상 함수를 숨깁니다
intention.name.make.function.const={0}을(를){1, choice, 0\# 상수|1\# 비 상수}로 설정
quick.fix.make_default={0}을(를) 디폴트로 설정
quick.fix.add_return_statement=return 문 추가
intentions.add.constructor.initializer.for.field=필드에 대한 생성자 이니셜라이저 추가
intentions.add.initializer=이니셜라이저 추가
intentions.add.parameters.to.constructor={0}을(를) 매개변수로서 생성자에 추가
intentions.add.parameter.initWith=매개변수로서 ''initWith...''에 추가...
intentions.check.raw.string=원시 문자열 검사
intentions.add.super.constructor.call=누락된 기본 생성자 호출 추가
intentions.add.super.protocol.by.class=클래스별 프로토콜 채택
intentions.add.super.protocol.by.private.category=비공개 카테고리별 프로토콜 채택
intentions.add.mofifier=''{0}'' 추가
intentions.change.arc.attribute=ARC 속성 변경
intentions.change.function.signature=함수 시그니처 변경
intentions.change.type.capitalized=유형 변경
intentions.change.type=유형 변경
intentions.change.visibility=가시성 변경
intentions.convert.id.to.instance=''id'' 반환 유형을 ''instancetype''으로 바꾸기
intentions.replace.if.else.with.ternary=''if else''를 ''?\:''으로 바꾸기
intentions.replace.ternary.with.if.else=''?\:''을 ''if else''로 바꾸기
intentions.convert.objc.literal=Objective-C 리터럴로 전환
intentions.convert.to.instance.variable=인스턴스 변수로 변환
intentions.convert.to.property=속성으로 변환
intentions.convert.type=유형 변환
intentions.create.matching.constructor=기본 클래스와 일치하는 생성자 생성
intentions.create.matching.constructor.in={0}에서 디폴트 생성자 생성
intentions.create.new.matching.constructor={0}개의 일치하는 기본 클래스에서 새로운 생성자 생성
intentions.create.new.constructor=새 생성자 ''{0}()'' 생성
intentions.predeclare.function={0} 사전 선언
intentions.create.interface={0}에 대한 인터페이스 생성
intentions.create.missing.default.switch.case=누락된 디폴트 case 생성
intentions.create.missing.switch.cases=누락된 switch case 생성
intentions.declare.method.in.interface=인터페이스 내 메서드 선언
intentions.declare.method.in.private.category=비공개 카테고리 내 메서드 선언
intentions.declare.method.in={0} 내 메서드 선언
intentions.declare.property.as.readwrite=비공개 카테고리 내 프로퍼티를 ''readwrite''로서 선언
intentions.replace.and.with.or=''\\&\\&''를 ''||''로 바꾸기
intentions.replace.or.with.and=''||''를 ''\\&\\&''로 바꾸기
intentions.deMorgan.law=드모르간 법칙
intentions.declare.member.in=다음에서 선언\: 
intentions.remove.private.category.message=빈 비공개 카테고리를 제거하시겠어요?
intentions.remove.private.category.title=비공개 카테고리 제거
intentions.extract.category=이 클래스의 카테고리 추출
intentions.extract.if=''if'' 추출
intentions.extract.if.with.text=''if ({0})'' 추출
intentions.extract.private.category=이 클래스의 비공개 카테고리 추출
intentions.extract.protocol=이 클래스의 프로토콜 추출
intentions.extract.super.class=상위 클래스 추출
intentions.extract.super.protocol=상위 프로토콜 추출
intentions.flip.operator={0} 반전
intentions.flip.operator.to={0}을(를) {1}(으)로 반전
intentions.flip.binary.operation=2진 연산 반전
intentions.generate.property=프로퍼티 생성
intentions.implement.required.methods=인터페이스 ''{0}''의 필수 메서드 구현
intentions.create.implementation={0}의 구현 생성
intentions.implement.method={0} 구현
intentions.implement.accessor.methods=접근자 메서드 구현
intentions.implement.accessor.methods.for={0}에 대한 접근자 메서드 구현
intentions.cast.expression=표현식 형 변환
intentions.introduce.typedef=typedef 삽입
intentions.introduce.typedef.for.type=유형 {0}에 대한 typedef 삽입
intentions.invert.if.condition=''if'' 조건 반전
intentions.merge.if.else=If else 병합
intentions.merge.nested.ifs=중첩된 if 문 병합
intentions.migrate.to.arc=ARC로 마이그레이션
intentions.move.instance.variables=인스턴스 변수를 구현으로 이동
intentions.move.to.interface=인터페이스로 이동
intentions.move.to.private.category=비공개 카테고리로 이동
intentions.import.predeclare.symbol=심볼 가져오기/사전 선언
intentions.release.variables=변수 릴리스
intentions.remove.suppression=억제 제거
intentions.remove.subj=''{0}'' 제거
intentions.remove.unnecessary.parentheses=불필요한 소괄호 제거
intentions.rename.reference=참조 이름 변경
intentions.rename.symbol=심볼 이름 변경
intentions.replace.type.with.auto=유형을 ''auto''로 바꾸기
intentions.reuse.declaration=선언 재사용
intentions.change.superclass=상위 클래스 변경
intentions.split.declaration=선언 및 대입으로 분할
intentions.split.function=함수를 선언 및 정의로 분할
intentions.split.into.separate.declarations=개별 선언으로 분할
intentions.suppress.for={0}에 대해 억제
intentions.suppress.option.for={1}에 대해 "{0}" 억제
intentions.suppress.for.statement=구문에 대해 억제
intentions.suppress.for.method=메서드/함수에 대해 억제
intentions.suppress.for.file=파일에 대해 억제
intentions.surround.with.if.responds="if ([ respondsToSelector\: ])"로 감싸기
intentions.switch.property.dot.method=''.'' 및 메서드 표기 전환
intentions.switch.to.getter.notation=getter 메서드 표기로 전환
intentions.switch.to.setter.notation=setter 메서드 표기로 전환
intentions.switch.to.dot.notation=''.'' 표기로 전환
intentions.synthesize.property=프로퍼티 통합
intentions.wrap.with.stringFormat=stringWithFormat으로 감싸기
intentions.insert.cast.use.modern=C++ 형 변환 연산자 사용
intentions.split.function.progress.text=정의 위치 파악 중...
intentions.change.function.const.action=const 한정자 변경
intentions.change.function.volatile.action=volatile 한정자 변경
intentions.change.gcc.attribute.action=속성 ''{0}'' 변경
intentions.change.method.signature.add.parameters=매개변수 추가
intentions.change.method.staticness.action=메서드 인스턴스/클래스 생성
intentions.change.property.attribute.action=프로퍼티 속성 변경
intention.name.make.function.volatile={0}을(를){1, choice, 0\# volatile|1\# 비 volatile}로 설정
intention.name.change.type={1}의 {0, choice, 0\#반환 |1\#}유형을 ''{2}''{3}(으)로 변경
intention.name.initialize={0} 초기화
intention.name.remove.type.modifier={0}을(를) 비 {1}(으)로 설정
intention.name.add.constructor.initializer={0}에 대한 생성자 이니셜라이저 추가
intention.name.change.superclass={0}의 상위 클래스를 ''{1}''에서 ''{2}''(으)로 변경
intention.name.add.last.parameter=마지막 ''{0}'' 매개변수를 {1}에 추가
intention.name.remove.last.parameter=마지막 ''{0}'' 매개변수를 {1}에서 제거
intention.name.change.signature={0}의 시그니처를 ''{1}''(으)로 변경
intention.dialog.message.existing.default.values.removed={0}의 매개변수에 대한 기존 디폴트 값이 제거됩니다. 계속하시겠어요?
intention.family.name.remove.declaration={1, choice, 0\#{0}|1\#다음의 선언} 제거
intention.name.safe.delete={0} 안전한 삭제
intention.family.name.safe.delete=안전한 삭제
intention.name.remove={0} 제거
intention.family.name.remove={0} 제거
intention.name.leave.initializer={0} 후 이니셜라이저 남겨두기
intention.family.name.leave.initializer={0} 후 이니셜라이저 남겨두기
intention.name.add.type.modifier={0}을(를) {1}(으)로 설정
intention.name.reuse.previous.declaration={0}의 이전 선언 재사용
intention.name.rename={0} 이름 변경
intention.name.rename.reference=참조 이름 변경
intention.name.predeclare.protocol.class={0, choice, 0\#프로토콜 ''|1\#클래스 ''|2\#구조체 ''}{1}'' 사전 선언
intention.name.change.visibility={0}을(를) {1}(으)로 설정
intention.name.cast.expression.to=표현식을 ''{0}''(으)로 형 변환
intention.family.name.extract.assignment=대입 추출
intention.name.class=클래스
intention.name.static=정적
intention.name.cpp.class=C++ 클래스
intention.name.create.new.category={1}(으)로 {0}에 새 카테고리 생성
intention.name.create.new=새 {0} 생성
intention.name.add.suffix=접미사 추가
intention.name.add.call.to.base.constructor=''{0}''의 기본 생성자 호출 추가
intention.name.make={0}을(를) {1}(으)로 설정
intention.name.choice.enable.disable={2}에 대한 ''{1}{0, choice, 0\#'' 활성화|1\#'' 비활성화}
intention.name.add.parameters=매개변수를 {0}에 추가
intention.name.make.class.method.instance.method=''{0}{1, choice, 0\#''을(를) 클래스 메서드|1\#''을(를) 인스턴스 메서드}로 설정
intention.dialog.message.change.type.as.well=''{0}''의 유형도 변경하시겠어요?
intention.family.name.convert.literal.type=리터럴 유형 변환\: ''@'' 추가
intention.name.call={0} 호출
intention.name.import.which={0, choice, 0\#어느|1\#심볼} ''{1}''
intention.name.import={0} 가져오기
intention.name.import.from=Desde {0}
intention.import.popup.title=가져올 심볼
intention.import.command.name={0} 가져오기
intention.name.make.function.virtual={0}\:\:{1}을(를){2, choice, 0\# 순수 가상|1\# 가상}으로 설정
intention.name.move.declaration={0}{1}의 선언으로 이동
intention.family.name.remove.extra.initializers=추가 이니셜라이저 제거
intention.family.name.remove.initializer=이니셜라이저 제거
intention.family.name.send.message=''{0}'' 메시지 전송
intention.family.name.add.return.statement=return 문 추가
intention.family.name.simplify.condition=''{0}''에 대한 조건 단순화
intention.name.change.format.specifier=서식 지정자를 ''{0}''(으)로 변경
intention.family.name.remove.statement=구문 제거
intention.family.name.remove.directive=지시문 제거
intention.family.name.simplify.choice={1, choice, 0\#표현식|1\#{0}} 단순화
intention.family.name.change.type.to.auto=유형 ''{0}''을(를) ''auto''로 변경
intention.family.name.change.to.nil=''nil''로 변경
intention.name.use.constant=상수 ''{0}'' 사용
intention.family.name.use.enum.constant=열거형 상수 사용
intention.name.add="{0}" 추가
intention.family.name.add.bridge.cast=브릿지 형 변환 추가
intention.family.name.make.default={0}을(를) 디폴트로 설정
inspection.message.condition.always.true=조건이 항상 true입니다
inspection.message.condition.always.false=조건이 항상 false입니다
inspection.message.condition.always.true.when.reached=조건이 도달 시 항상 true입니다
inspection.message.condition.always.false.when.reached=조건이 도달 시 항상 false입니다
inspection.message.reference.may.be.choice.null=참조가 {0, choice, 0\#nil|1\#null}일 수 있습니다
inspection.message.infinite.recursion=무한 재귀
inspection.message.value.never.used=값이 전혀 사용되지 않습니다
inspection.message.address.local.variable.may.escape.function=지역 변수의 주소가 함수를 이스케이프할 수 있습니다
inspection.message.file.too.complex.to.perform.context.sensitive.data.flow.analysis=파일이 너무 복잡하여 컨텍스트별 데이터 흐름 분석을 수행할 수 없습니다
inspection.message.file.too.complex.to.perform.data.flow.analysis=파일이 너무 복잡하여 데이터 흐름 분석을 수행할 수 없습니다
inspection.message.unreachable.code=도달할 수 없는 코드
inspection.message.endless.loop=무한 루프
inspection.group.name.general=일반
objective.c=Objective-C
c.cpp=C/C++
progress.text.evaluating.unused.symbols=사용되지 않는 심볼 평가 중
intention.name.delete={0} 삭제
intention.name.choice.superclass={2}의 {1, choice, 0\#{0} |1\#}상위 클래스
intention.name.set.superclass=''{0}''을(를) {1}(으)로 설정
inspection.message.if.statement.has.identical.branches=''if'' 문에 동일한 브랜치가 있습니다
inspection.message.statement.can.be.simplified=구문을 단순화할 수 있습니다
inspection.message.expression.can.be.simplified.to=표현식을 ''{0}''(으)로 단순화할 수 있습니다
inspection.option.unused.variable.initializers=사용되지 않는 변수 이니셜라이저에 대해 경고

