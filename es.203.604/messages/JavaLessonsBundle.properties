readme.shared.indexes.remark=공유된 색인을 다운로드하라는 메시지가 표시될 수 있습니다. 인터넷 연결 상태가 좋은 경우 이 제안을 수락하면 프로젝트 초기화 속도를 높일 수 있습니다.

java.surround.and.unwrap.help.unwrapping.and.removing.statements=코드 구문 작업 중

java.basic.completion.choose.first={0} 을(를) 눌러 조회 메뉴에서 첫 번째 항목을 선택할 수 있습니다.
java.basic.completion.activate=기본 완료를 활성화하기 위해 {0} 을(를) 누르면 조회 메뉴를 다시 확인할 수 있습니다.
java.basic.completion.choose.item=조회 메뉴 내에서 {0} 을(를) 선택한 후 {1} 을(를) 누릅니다.
java.basic.completion.complete={0} 을(를) 눌러 이 구문을 완료하세요.
java.basic.completion.deeper.level=static 상수 또는 메서드에 대한 제안 목록을 확인해야 하는 경우가 있습니다. 조회 목록에 표시하려면 {0} 을(를) 두 번 누르세요.
java.basic.completion.module.promotion={0} 모듈에서 리팩터링에 관한 더 자세한 내용을 찾을 수 있습니다.

java.run.configuration.lets.run={0} (으)로 표시된 임의의 코드를 실행할 수 있습니다. {1} 을(를) 사용하여 간단한 예시를 실행해봅시다. 아니면 {0} 을(를) 클릭하여 {2} 항목을 선택할 수 있습니다.

java.postfix.completion.apply=접미사 완성은 코드를 작성할 때 후방 캐럿 이동을 줄이는 데 도움이 됩니다. 추가한 접미사, 표현식 유형 및 해당 컨텍스트를 기반으로 이미 입력된 표현식을 다른 표현식으로 변환할 수 있습니다. 괄호 뒤에 {0} 을(를) 입력하여 접미사 완성 제안 목록을 확인하세요. 목록에서 {1} 을(를) 선택하거나 에디터에 입력한 후 {2} 을(를) 눌러 구문을 완성하세요.

java.smart.type.completion.lesson.name=스마트 유형 완성
java.smart.type.completion.apply=스마트 유형 완성은 제안 목록을 필터링하여 현재 컨텍스트 내에서 적용 가능한 유형만을 포함합니다. {0} 을(를) 눌러 일치하는 제안 목록을 확인하세요. {1} 을(를) 눌러 첫 번째 항목을 선택합니다.
java.smart.type.completion.return=스마트 유형 완성은 return 문의 코드를 제안할 수도 있습니다. {0} 을(를) 눌러 return 문을 위한 조회 메뉴를 확인하세요. {1} 을(를) 눌러 첫 번째 항목을 선택하세요.

java.statement.completion.lesson.name=구문 완성
java.statement.completion.complete.for={0} 을(를) 눌러 {1} 구문을 완료하세요.
java.statement.completion.complete.if={0} 을(를) 입력한 후 {1} 을(를) 눌러 구문을 생성하세요.
java.statement.completion.complete.condition=괄호 {0} 안에 조건을 추가한 후 {1} 을(를) 눌러 {2} 구문 안으로 이동하세요.
java.statement.completion.complete.finish.body=한 줄에 {0} 을(를) 입력한 후 {1} 을(를) 눌러 구문을 완성하여 서식 지정을 적용하세요.

java.rename.press.rename={0} 을(를) 눌러 필드 {1} 의 이름을 변경하세요.
java.rename.type.new.name=이 필드의 새 이름(예\: {0})을 입력한 후 {1} 을(를) 누르세요.
java.rename.confirm.accessors.rename=<ide/>는 해당 getter/setter를 탐지하고 이에 따라 이름을 변경할 것을 제안합니다. 이제 {0} 을(를) 누르거나 {1} 을(를) 클릭하세요.

java.refactoring.menu.inline.variable=이제 변수 {0} 을(를) 인라인화하여 사용 위치를 하나로 줄여봅시다. {1} 을(를) 누르고 <strong>iv</strong>(<strong>i</strong>nline <strong>v</strong>ariable)로 리팩터링 메뉴를 필터링할 수 있습니다. 이 항목을 선택하거나 {2} 을(를) 누르세요.
java.refactoring.menu.introduce.constant=마지막으로 파일 이름에서 확장자를 추출해봅시다. 마찬가지로 {0} 을(를) 누르고 <strong>ic</strong>으로 필터링(<strong>i</strong>ntroduce <strong>c</strong>onstant)하거나 {1} 을(를) 누르세요.
java.refactoring.menu.confirm.constant=이 대화상자에서는 새 상수의 이름, 부모 클래스 및 가시성을 선택할 수 있습니다. 기본값을 유지하고 {0} 을(를) 누르거나 {1} 을(를) 클릭하세요.

java.inheritance.hierarchy.lesson.name=상속 계층 구조
java.inheritance.hierarchy.goto.implementation={0} 을(를) 눌러 {1} 구현을 검색하세요.
java.inheritance.hierarchy.choose.any.implementation=구현를 선택하고 {0} 을(를) 누르거나 마우스로 클릭하세요.
java.inheritance.hierarchy.navigate.to.base=파생된 메서드에서 슈퍼메서드로 이동할 수 있습니다. {0} 을(를) 누르거나 에디터 여백에서 {1} 아이콘을 누르세요.
java.inheritance.hierarchy.invoke.implementations.again=기본 메서드의 선언에는 자체 여백 아이콘 {0} 이(가) 있습니다. 클릭하거나 다시한번 {1} 을(를) 누르세요.
java.inheritance.hierarchy.open.in.find.tool.window=큰 계층 구조의 경우 {0} 도구 창에서 구현을 검색하는 것이 좋습니다. {1} 을(를) 클릭하세요.
java.inheritance.hierarchy.hide.find.tool.window={0} 을(를) 눌러 {1} 도구 창을 숨기세요.
java.inheritance.hierarchy.open.method.hierarchy=이 메서드의 전체 계층 구조를 살펴보는 것이 좋습니다. {0} 을(를) 누르세요.
java.inheritance.hierarchy.hide.method.hierarchy={0} 또한 숨겨봅시다. {1} 을(를) 다시 누르세요.
java.inheritance.hierarchy.open.class.hierarchy=클래스 계층의 개요를 미리보기하려면 {0} 을(를) 누르세요.
java.inheritance.hierarchy.last.note=<strong>참고\:</strong> 액션 {0} 와(과) {1} 은(는) 클래스에도 적용이 가능합니다.액션 {2} 와(과) {3} 은(는) 거의 사용되지 않으나 {5} 필터를 사용해 {4} (으)로 언제든지 찾을 수 있습니다.

java.find.occurrences.lesson.name=다음/이전 사용 위치
java.find.occurrences.invoke.find=이번 수업에서는 {0} 을(를) 선택했습니다. {1} 을(를) 눌러 현재 파일의 전체 텍스트 검색을 시작하세요.
java.find.occurrences.find.previous=이전 사용 위치로 이동하려면 {0} 을(를) 누르세요.
java.find.occurrences.search.closed.warning={0} 을(를) 눌러 검색 필드를 다시 여세요.
java.find.occurrences.find.next=<ide/>는 선택한 텍스트를 검색 필드에 자동으로 복사합니다. 다음 사용 위치를 찾아봅시다. {0} 또는 {1} 을(를) 누르세요.
java.find.occurrences.close.search.tool=검색 패널을 닫은 상태에서도 이 단축키를 사용하여 최근에 발견한 사용 위치 사이를 이동할 수 있습니다. {0} 을(를) 눌러 검색 패널을 닫으세요.
java.find.occurrences.find.next.in.editor={0} (으)로 다음 사용 위치를 찾으세요.
java.find.occurrences.find.previous.in.editor={0} 을(를) 눌러 뒤로 이동하세요.
java.find.occurrences.note.about.cyclic=<strong>참고\:</strong> 검색은 순환적이며 마지막 사용 위치에서 {0} 을(를) 두 번 누르면 마지막 사용 위치가 선택 범위로 설정됩니다. {1} 도 순환적입니다.

java.debug.workflow.rebuild=큰 프로그램의 경우 다시 실행하는 데 시간이 오래 걸릴 수 있습니다. 순수 메서드에서 실수를 발견했다면 프로젝트를 다시 빌드하여 <strong>핫스왑</strong> JVM 기능을 적용하기만 하면 됩니다. 프로젝트 {0} 또는 {1} 을(를) 빌드해봅시다.
java.debug.workflow.confirm.hot.swap=<strong>핫스왑</strong> 교체를 확인하세요.
java.debug.workflow.drop.frame=메서드에 패치를 적용했으나 사용이 중단된 {0} 을(를) 여전히 실행하고 있어 예외가 다시 던져집니다. 프레임을 삭제하고 {1} 호출 전 상태로 돌아가봅시다. {2} 디버그 패널을 클릭하거나 {3} 을(를) 누르세요.
