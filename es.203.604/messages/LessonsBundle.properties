### README.md strings

readme.welcome.header=대화형 기능 트레이너 만나보기
readme.ift.description=이 대화형 교육과정에서는 수많은 IDE 워크플로와 사용 사례를 안내합니다. 여기에서 유용한 액션 단축키가 다양하게 제공되지만 모두 외울 필요는 없습니다. 대신, 액션을 사용해 보고 가장 유용한 것을 자신의 서비스에 적용하십시오. 그리고 일상 작업 중에 새로운 문제에 당면할 수 있으므로 이 교육과정을 다시 방문하여 다른 기능도 다시 사용해보십시오. {0} 을(를) 사용해 생산성을 높일 수 있도록 도와주는 새로운 강의 소식을 기대해주십시오.
readme.usage.header=교육과정 이용 방법
readme.toolwindow.description=''{0}'' 도구 창에는 순서에 관계없이 수강할 수 있는 해당 학습 세트가 담긴 몇가지 모듈이 있습니다. 강의 학습을 마치면 강의가 ''완료''로 표시됩니다. 완료한 강의는 증명서용으로 사용할 수도 있고 지식을 상기시키고 싶을 때 다시 시작할 수도 있습니다.
readme.experienced.users.remark=강의가 아는 내용처럼 보여도 한 번 들어보세요. 자주 사용하는 기능의 유용한 예시와 몰랐던 단축키를 발견할 수도 있습니다\!
readme.start.header=시작하기
readme.indexing.description=학습 프로젝트를 초기화하는 동안 이 ''README.md''를 읽고 계실 수도 있겠습니다. 일반적으로 ''색인 생성''은 프로젝트 초기화 중에 시간이 가장 많이 소요되는 작업입니다. IDE는 사용자의 환경, 프로젝트{0, choice,1\#, 라이브러리|2\#}에 대한 정보를 수집한 후 내부 재현을 구성해야 합니다. 이 작업은 빠른 탐색 및 검색을 위해 필요합니다.
readme.navigation.hint=이 교육과정의 ''{0}'' 모듈에서는 사용 방법을 보여줍니다.
readme.shortcuts.header=단축키 관리
readme.shortcuts.problem.description=이 교육과정에서 일부 단축키는 시스템 또는 다른 애플리케이션의 단축키와 충돌할 수 있습니다. 이 경우 강의 텍스트에서 문제가 있는 단축키를 클릭할 수 있습니다. 열린 팝업에는 액션 이름과 대체 단축키가 표시됩니다. 여기에서 액션을 적용하거나 새 단축키를 지정할 수 있습니다.
readme.bug.tracker.remark=다른 문제가 발생한 경우 강의를 다시 시작하거나 [버그 트래커]({0})에서 버그를 신고하세요.
readme.conclusion.header=프로젝트로 돌아가기
readme.exit.options=시작 화면으로 돌아가려면, 메인 메뉴에서 ''{0} | {1}''을(를) 선택하세요. 또한 ''{0}'' 메뉴를 사용해 새 프로젝트를 열거나 생성할 수도 있습니다. 기본적으로 ''{2}'' 도구 창은 숨겨져 있습니다. 이 창은 메인 메뉴에서 ''{3} | {4}''을(를) 선택하면 열 수 있습니다.
readme.feedback.request=이 학습 과정에 관한 의견을 남겨주시면 감사하겠습니다\!

### This file contains strings from lessons.

###############################################################################
## Common lessons
###############################################################################

## Essential module
essential.module.name=필수 요소
essential.module.description={0} 의 가장 필수적인 기능 발견하기

context.actions.lesson.name=컨텍스트 액션
context.actions.invoke.intentions.for.warning=많은 경우 <ide/>은(는) 사용자의 <strong>의도</strong>를 추측하거나 경고나 오류에 대한 수정을 제안할 수 있습니다. 가장 유용한 액션 중 하나인 {0} 을(를) 호출해봅시다. {1} 을(를) 누르세요.
context.actions.fix.warning=이 경고에 첫 번째 빠른 수정을 적용해봅시다\: {0}.
context.actions.invoke.general.intentions=<ide/>에는 많은 인텐션이 있습니다. 좋은 해결책이나 인텐션이 있다고 생각될 때마다 {0} 을(를) 호출해보세요. 시간을 절약할 수 있고 코딩 과정도 훨씬 재밌어질 것 입니다\! 캐럿이 위치한 코드 조각에 무엇을 적용할 수 있는지 살펴보세요. {1} 을(를) 다시 누르세요.
context.actions.apply.intention={0} 인텐션을 적용해봅시다.
context.actions.refactorings.promotion=많은 유용한 리팩터링은 {0} 을(를) 통해 사용할 수 없습니다. {1} 모듈에 이동하여 리팩터링 호출 및 사용법을 학습하세요.

## Editor basics module
editor.basics.module.name=에디터 기초
editor.basics.module.description=스마트 단축키로 코드를 추가, 삭제, 선택, 이동, 복제하세요

goto.action.lesson.name=액션 검색
goto.action.mac.workaround={0} 대신 <strong>터미널</strong> 검색이 열리는 경우, <a href\="{1}">이 글</a>을 참고하세요.
goto.action.use.find.action.1=가장 유용한 단축키 중 하나는 {0} 입니다. 이 단축키를 사용하면 사용 가능한 모든 작업을 검색할 수 있어 개별 작업의 단축키를 알 필요가 없습니다. {1} (으)로 이용해보세요.
goto.action.use.find.action.2=대신 {1} 을(를) 연속으로 두 번 눌러 {0} 을(를) 호출할 수 있습니다. {0} 을(를) 사용해 프로젝트 코드 엔티티 <strong>및</strong> 다른 IDE 객체를 동시에 검색할 수 있습니다. 무엇을 사용할지는 고객님의 선택입니다.
goto.action.invoke.about.action=예를 들어, <ide/>에 관해 알고 싶다면, {0} 을(를) 입력한 후 {1} 을(를) 누르세요.
goto.action.to.return.to.the.editor={0} 을(를) 눌러 에디터로 되돌아가세요.
goto.action.invoke.again=그리고 {0} 이나 더블 {1} 을(를) 사용하여 설정을 변경할 수 있습니다. 다시 호출해보세요. 다시 호출해보세요.
goto.action.show.line.numbers.request={1} 선택자를 보려면 {0} 을(를) 입력하세요.
goto.action.first.lines.toggle=줄 번호 표시를 {0, choice, 0 \#끄기|1 \#켜기}로 전환하세요.
goto.action.second.lines.toggle=이제 줄 번호 표시를 {0, choice, 0 \#켜기|1 \#끄기}로 전환하세요.
goto.action.propose.to.go.next.new.ui=좋습니다\! {0} 을(를) 누르거나 아래 버튼을 클릭하고 다음 강의를 시작하세요.
goto.action.popup.closed.warning.message={0} 을(를) 누르거나 {1} 을(를) 두 번 눌러 검색 창을 다시 여세요.
# This message will be removed soon
goto.action.propose.to.go.next=좋습니다\! 아래 버튼을 클릭하고 다음 강의를 시작하세요.

collapse.lesson.name=접기
collapse.try.collapse=더 나은 가독성을 위해 코드의 일부를 접어야 하는 경우가 있습니다. {0} (으)로 코드 조각을 접어보세요.
collapse.hit.expand=코드 영역을 확장하려면 {0}을 누르세요.
collapse.all.collapse=파일 내 모든 영역을 접고자 할 경우 {0} 을(를) 누르세요.
collapse.all.expand=마찬가지로 {0} 을(를) 눌러 사용 가능한 모든 영역을 확장하세요.

duplicate.and.delete.lines.lesson.name=줄 복제 및 삭제
duplicate.and.delete.lines.duplicate.line={0} (으)로 어느 줄이든 복제하세요.
duplicate.and.delete.lines.duplicate.several.lines=같은 액션을 여러 줄에 적용할 수 있습니다. 둘 이상의 줄을 선택한 후 {0} (으)로 복제하기만 하면 됩니다.
duplicate.and.delete.lines.delete.line=현재 줄을 삭제하기 위해 액션 {0} 을(를) 사용할 수 있습니다.

move.lesson.name=코드 조각 이동
move.pull.down=줄 재배치는 보통 잘라내기와 붙여넣기의 두 가지 액션을 포함합니다. <ide/>를 사용하면 하나의 액션만으로 실행할 수 있습니다. {0} 을(를) 눌러 현재 줄을 아래로 이동하세요.
move.pull.up=마찬가지로 줄을 위로 이동하려면 {0} 을(를) 누르세요.
move.whole.method.up={0} (으)로 전체 메서드를 위로 이동해보세요. 캐럿이 메서드 헤더에 위치해야 합니다.
move.whole.method.down=이제 {0} (으)로 아래로 이동하세요.

multiple.selections.lesson.name=여러 선택 범위
multiple.selections.select.symbol={0} 을(를) 눌러 캐럿에 위치한 심볼을 선택하세요.
multiple.selections.select.next.symbol={0} 을(를) 눌러 이 심볼의 다음 사용 위치를 선택하세요.
multiple.selections.deselect.symbol={0}을(를) 눌러 마지막 사용 위치를 선택 해제하세요.
multiple.selections.select.all={0} 을(를) 눌러 이 파일의 모든 사용 위치를 선택하세요.
multiple.selections.replace={0} 을(를) 눌러 {1} 사용 위치를 {0} (으)로 교체하세요.

selection.lesson.name=코드 선택 범위 확장 및 축소
selection.select.word=캐럿을 단어 앞에 배치하세요. {0} 을(를) 눌러 캐럿을 다음 단어로 이동하고 그 사이의 모든 것을 선택하세요.
selection.extend.selection={0} 을(를) 눌러 선택 범위를 다음 코드 블록으로 확장하세요.
selection.extend.until.whole.file=파일 전체가 선택될 때까지 {0} (으)로 선택 범위를 늘려보세요.
selection.shrink.selection={0} 은(는) 선택 범위를 축소합니다. 시도해보세요.

new.selection.select.word={0} 을(를) 눌러 캐럿 아래 위치한 단어를 선택하세요.
new.selection.select.string=전체 문자열을 선택하려면 {0} 을(를) 다시 누르세요.
new.selection.add.quotes={0} 을(를) 세 번 누르고 선택 범위에 따옴표를 추가하세요.
new.selection.select.call={0} 을(를) {1, choice, 1\#1|2\#2| 3\#1| 4\#4} 번 더 눌러 전체 호출을 선택하세요.
new.selection.unselect=사실 전체 호출이 아니라 인수를 선택하고 싶다고 가정합시다. {0} 을(를) 눌러 선택 범위를 축소하여 인수로 되돌리세요.
new.selection.select.if=캐럿의 위치를 {0} 문의 시작 부분으로 이동했습니다. {1} 을(를) 두 번 눌러 선택하세요. 키워드는 단 몇 번의 키 조작으로 해당 구문을 선택하기 위한 좋은 시작점입니다.

comment.line.lesson.name=주석 줄
comment.line.comment.any.line={0} (으)로 어느 줄이든 주석 처리하세요.
comment.line.uncomment.that.line=같은 단축키로 주석 처리된 줄의 주석 처리를 해제하세요. {0} 을(를) 누르세요.
comment.line.comment.several.lines=여러 줄을 선택한 후 {0} (으)로 주석 처리하세요.

surround.and.unwrap.lesson.name=둘러싸기 및 래핑 해제
surround.and.unwrap.invoke.surround={0} 을(를) 눌러 선택한 코드 조각을 일부 템플릿 코드로 둘러싸세요.
surround.and.unwrap.choose.surround.item={0} 항목을 선택하세요.
surround.and.unwrap.invoke.unwrap={0} 의 래핑 해제 액션으로 초기 파일로 되돌아가봅시다.
surround.and.unwrap.choose.unwrap.item={0} 항목을 선택하세요.
surround.and.unwrap.help.surround.code.fragments=코드 조각 둘러싸기
surround.and.unwrap.help.unwrapping.and.removing.statements=구문 래핑 해제 및 제거

## Completion module
code.completion.module.name=코드 완성
code.completion.module.description=IDE가 코드를 완성합니다. 기본, 스마트 및 기타 유형의 코드 완성 기능을 사용해보세요.

basic.completion.lesson.name=기본 코드 완성
basic.completion.start.typing=기본적으로 <ide/>는 코드 완성을 즉시 제안합니다. 캐릿이 위치한 곳에서 {0} 을(를) 입력하기 시작하면 일치하는 제안 항목을 포함하는 완료 목록이 나타납니다.
basic.completion.just.press.to.complete=이제 {0} 을(를) 눌러 이 구문을 완료하세요.
basic.completion.activate.explicitly=기본 코드 완성 기능을 명시적으로 활성화하려면, {0} 을(를) 누르세요.
basic.completion.finish.explicit.completion={0} 을(를) 선택한 후 {1} 을(를) 누르세요.

completion.with.tab.lesson.name=탭 코드 완성
completion.with.tab.begin.completion={0} 을(를) 눌러 코드 완성 제안 목록을 표시하세요.
completion.with.tab.finish.with.tab=예를 들어, {0} 을(를) 선택한 후 {1} 을(를) 누르세요. 이는 단순히 단어를 삽입하는 것이 아니라 캐럿에 위치한 단어를 교체합니다.

postfix.completion.lesson.name=접미사 완성
postfix.completion.type.template=<ide/>는 접미사 단축키를 제공할 수 있습니다. {0} 을(를) 입력하세요.

## Refactoring module
refactorings.module.name=리팩터링
refactorings.module.description=이름 변경, 추출 및 기타 유형의 리팩터링을 사용하여 코드를 정리하세요.

rename.lesson.name=이름 변경

refactoring.menu.lesson.name=메뉴 리팩터링 중
refactoring.menu.show.refactoring.list=<ide/>는 다양한 리팩터링을 지원합니다. 대부분의 리팩터링은 자체 단축키가 있습니다. 하지만 드문 리팩터링의 경우 {0} 을(를) 눌러 일부 목록을 미리보기할 수 있습니다.
refactoring.menu.introduce.parameter=이 표현식을 매개변수로 교체하고자 한다고 가정해봅시다. 그러면 {0} 을(를) 선택해야 합니다. 이제 제안 목록을 줄이기 위해 <strong>pa</strong> (introduce <strong>pa</strong>rameter) 또는 <strong>ip</strong> (<strong>i<strong>ntroduce <strong>p</strong>areameter)를 입력하세요.
refactoring.menu.start.refactoring={0} 을(를) 눌러 {1} 리팩터링을 시작하세요. 리팩터링 메뉴에서 리팩터링 단축키를 학습할 수 있다는 점을 <strong>참고</strong>하세요.
refactoring.menu.finish.refactoring=리팩터링을 완료하려면 이름을 선택하거나 기본 상태를 유지한 채 {0} 을(를) 눌러야 합니다.

## Code Assistance module
code.assistance.module.name=코드 지원
code.assistance.module.description=코드 서식 지정 방법, 매개변수 정보를 얻는 방법, 빠른 팝업 미리보기 방법을 배워보세요.

code.format.lesson.name=코드 서식
code.format.reformat.selection=<ide/>를 사용하여 단 하나의 액션만으로 코드 서식을 수정할 수 있습니다. 선택한 코드 조각의 서식을 {0} (으)로 다시 지정하세요.
code.format.reformat.file=줄이 선택되지 않은 경우 전체 파일의 서식을 다시 지정하려면, {0} 을(를) 사용하세요.
code.format.show.reformat.file.dialog=서식 다시 지정 설정을 표시하려면 {0} 을(를) 사용하세요.
code.format.optimize.imports=여기서 서식 다시 지정 옵션을 구성할 수 있습니다. 예를 들어 {0} 을(를) 켜고 {1} 을(를) 클릭하세요.

parameter.info.lesson.name=매개변수 정보
parameter.info.use.action={0} 을(를) 눌러 메서드 시그니처를 확인하세요.
parameter.info.add.parameters={0} 의 width 및 {1} 의 height를 사용하세요.

quick.popups.lesson.name=빠른 팝업
quick.popups.show.documentation={0} 을(를) 눌러 캐럿에 위치한 심볼에 대한 문서를 확인하세요.
quick.popups.press.escape={0} 을(를) 눌러 팝업을 닫으세요.
quick.popups.show.implementation={0} 을(를) 눌러 캐럿에 위치한 심볼의 정의를 확인하세요.

editor.coding.assistance.lesson.name=에디터 코딩 지원
editor.coding.assistance.goto.next.error={0} 을(를) 눌러 파일 내 강조 표시된 다음 오류로 이동하세요.
editor.coding.assistance.fix.error=이 오류를 수정해봅시다\! {0} 을(를) 누른 후 {1} 을(를) 선택하세요.
editor.coding.assistance.goto.next.warning=다음 경고로 이동해봅시다. {0} (을)를 누르세요.
editor.coding.assistance.show.warning.description=또한 {0} 을(를) 사용하여 캐럿에 위치한 항목의 경고 또는 오류 설명을 표시할 수 있습니다. {0} 을(를) 눌러 짧은 설명을 확인한 뒤 {0} 을(를) 다시 눌러 설명을 확장하세요.
editor.coding.assistance.fix.warning=이 경고도 수정해봅시다\! {0} 을(를) 누른 후 {1} 을(를) 선택하세요.
editor.coding.assistance.highlight.usages=또 하나의 편리한 도구는 사용 위치 강조 표시입니다. {0} 을(를) 눌러 파일 내 캐럿에 위치한 모든 심볼 사용 위치를 강조 표시하세요.

## Navigation module
navigation.module.name=탐색
navigation.module.description=소스로 이동하여 선언, 구현 및 파일 구조로 이동하세요.

declaration.and.usages.lesson.name=선언 및 사용 위치
declaration.and.usages.jump.to.declaration={0} 을(를) 눌러 메서드 선언으로 이동하세요.
declaration.and.usages.show.usages=이제 캐럿은 메서드 선언에 위치합니다. 같은 단축키 {0} 을(를) 사용하여 모든 사용 위치를 확인하고 그 중 하나를 선택하세요.
declaration.and.usages.find.usages={0} 을(를) 눌러 사용 위치에 대한 세부 정보를 확인하세요. 선언 또는 사용 위치 중 하나에서 {0} 을(를) 호출 할 수 있습니다.
declaration.and.usages.pin.motivation={0} 뷰에서 선언 및 사용 위치 모두로 이동할 수 있습니다. 다음 검색에서는 {0} 뷰에서 이러한 결과를 덮어씁니다. 이를 방지하려면, 결과를 고정하세요\:
declaration.and.usages.right.click.tab=탭 제목, {0} 을(를) 오른쪽 클릭하세요.
declaration.and.usages.select.pin.item={0} 을(를) 선택하세요.
declaration.and.usages.hide.view=사용 위치 찾아보기가 종료된 경우 {0} 을(를) 눌러 뷰를 숨기세요.
declaration.and.usages.open.find.view={0} 을(를) {1} 뷰를 다시 여세요.

file.structure.lesson.name=파일 구조
file.structure.open.popup=큰 소스 파일은 읽기와 탐색이 어려울 수 있어 미리보기만 해야하는 경우가 있습니다. {0} 을(를) 눌러 파일 구조를 여세요.
file.structure.request.prefixes=이름에 {0} 과 {1} 단어가 포함된 메서드를 찾고자 한다고 가정해봅시다. {2}(필요한 단어의 접두사)을(를) 입력하여 파일 구조를 필터링하세요.
file.structure.navigate=남아있는 아이템은 하나 뿐입니다. 이제 {0} 을(를) 눌러 선택한 항목으로 이동하세요.
file.structure.toolwindow=<ide/>는 파일 구조를 도구 창으로서 표시할 수도 있습니다. {0} (으)로 여세요.

recent.files.lesson.name=최근 파일 및 위치
recent.files.first.transition={0} 메서드의 구현 방식이 궁금하시나요? {1} 을(를) 사용해 메서드 선언으로 이동해봅시다.
recent.files.dialog.message=기본 워크플로\: 파일 간 빠른 이동을 시뮬레이션해보고자 합니다. 완료할 때까지 마우스를 움직이지 마세요.
recent.files.dialog.title=워크플로 시뮬레이션
recent.files.show.recent.files=라이브러리 파일에 대해 자세히 알아보았습니다. 파일로 되돌아가려면 어떻게 해야 할까요? <ide/>에는 최근 열었던 파일을 표시해주는 기능이 있습니다. {0} 을(를) 누르세요.
recent.files.search.typing=이름으로 파일을 검색할 수 있습니다. {0}(필요한 단어의 접두사)을(를) 입력하세요.
recent.files.search.jump=오직 하나의 파일만 남아 있습니다. 이제 {0} 을(를) 눌러 선택한 항목으로 이동하세요.
recent.files.use.recent.files.again=파일로 되돌아왔습니다. 하지만 {0} 을(를) 사용해 최근 파일을 다시 확인해봅시다.
recent.files.delete=이 목록에는 더 이상 방문하지 않는 다수의 소스 파일이 포함되어 있습니다. {1} 을(를) 사용해 최근 파일 기록에서 {0} 파일을 삭제해봅시다.
recent.files.close.popup=이제 최근 파일 기록이 더 깔끔해졌습니다. 팝업 바깥 어딘가를 클릭하여 팝업을 닫거나 {0} 을(를) 사용하세요.
recent.files.show.recent.locations=다른 유용한 액션으로 최근 방문한 위치의 코드를 확인할 수 있습니다. {0} 을(를) 사용하세요.
recent.files.locations.search.typing=여기서 기억나는 코드 조각으로 검색할 수 있습니다. {0} 을(를) 입력하세요.
recent.files.locations.search.jump=이제 {0} 을(를) 눌러 선택한 코드 조각으로 이동하세요.

search.everywhere.lesson.name=전체 검색
search.everywhere.invoke.search.everywhere={0} 을(를) 열려면 {1} 을(를) 두 번 눌러야 합니다.
search.everywhere.type.prefixes=이름에 {0} 및 {1} 단어가 포함된 클래스를 찾고 있다고 가정해봅시다. 검색 필드에 {2}(필요한 단어의 접두사)을(를) 입력하세요.
search.everywhere.navigate.to.class=키보드 화살표로 {0} 을(를) 선택한 다음 {1} 을(를) 눌러 이 클래스의 정의로 이동하세요.
search.everywhere.popup.closed.warning.message={0} 을(를) 두 번 눌러 검색 창을 다시 여세요.
search.everywhere.goto.class=좋습니다\! 단지 클래스만 또는 특정 디렉토리로만 검색해야 할 경우가 있습니다. 검색 범위를 좁히려면 {0} 을(를) 사용하세요.
search.everywhere.type.class.name=버퍼를 사용한 입력 스트림 읽기를 담당하는 라이브러리 클래스가 필요하다고 가정해봅시다. {0}(필요한 단어의 접두사)을(를) 입력하세요. 하지만 아직 해당 클래스로 이동하지 마십시요.
search.everywhere.use.all.places=이제 이 데모 프로젝트 내에 클래스가 표시됩니다. 하지만 라이브러리에서 해당 클래스의 구현을 찾아야 합니다. {0} 필터를 {1} (으)로 전환하고 사용 가능한 라이브러리의 콘텐츠를 확인해봅시다.
search.everywhere.class.popup.closed.warning.message={0} 을(를) 눌러 검색 창을 다시 여세요.
search.everywhere.quick.documentation={0} 을(를) 눌러 사용 가능한 문서를 미리보기하세요.
search.everywhere.close.documentation.popup={0} 을(를) 눌러 팝업을 닫으세요.
search.everywhere.finish=<strong>완료했습니다\!</strong> 비슷한 방식으로 {0} 을(를) 사용해 메서드 또는 글로벌 변수를 검색하고 {1} 을(를) 사용해 파일을 검색할 수 있습니다.
search.everywhere.navigation.promotion={0} 모듈에서 다른 이동 액션 및 워크플로 사용 사례를 찾을 수 있습니다.

find.in.files.lesson.name=파일에서 찾기 및 바꾸기
find.in.files.show.find.popup=프로젝트 내에서 어떤 문자열의 사용 위치를 모두 찾으려 한다고 가정해봅시다. {0} 을(를) 눌러 {1} 창을 여세요.
find.in.files.type.to.find={0} 을(를) 입력하여 학습 프로젝트 내 모든 텍스트 사용 위치를 검색하세요.
find.in.files.whole.words=<code>apple</code> 문자열을 찾으려 했으나 <code>pineapple</code> 항목 또한 검색되었습니다. 검색 범위를 단어 단위로 좁히세요. {0} 을(를) 클릭하거나 {1} 을(를) 누르세요.
find.in.files.select.row=발견된 문자열의 컨텍스트가 임베디드 에디터에 표시됩니다. 강조 표시된 행을 클릭하거나 {0} 및 {1} 버튼을 사용해 그곳으로 이동하세요.
find.in.files.go.to.file=메인 에디터에서 선택한 파일을 열 수도 있습니다. {0} 을(를) 누르거나 해당 행을 두 번 클릭하여 이 파일을 이동하세요.
find.in.files.show.replace.popup=검색한 모든 사용 위치를 다른 문자열로 바꾸려 한다고 가정해봅시다. 각 파일을 순차적으로 바꾸는 일은 매우 지루할 것입니다. <ide/>이(가) 이 작업을 돕습니다. {0} 을(를) 눌러 {1} 창을 여세요.
find.in.files.type.to.replace=모든 {0} 사용 위치를 {1} 로 바꿔봅시다. 강조 표시된 필드에 {1} 을 입력하세요.
find.in.files.select.directory=검색 및 교체 범위를 정의할 수 있습니다. 대체 대상을 현재 디렉터리로만 좁히려면 {0} 버튼을 클릭하거나 {1} 을(를) 클릭하세요.
find.in.files.press.replace.all={0} 을(를) 눌러 리팩터링을 시작하세요.
find.in.files.confirm.replace=마지막으로 {0} 을(를) 눌러 리팩터링을 확인하세요.
find.in.files.popup.closed.warning.message={0} 을(를) 눌러 {1} 창을 다시 여세요.

extract.method.lesson.name=메서드 추출
extract.method.invoke.action={0} 을(를) 눌러 선택한 코드 블록을 메서드로 추출하세요.
extract.method.start.refactoring={0} 을(를) 클릭하여 리팩터링을 시작하세요.
extract.method.confirm.several.replaces=칵테일 정렬에는 2개의 스왑 장소가 있습니다. 첫 조각이 추출되었습니다. {0} 을(를) 클릭하여 둘 다 추출하세요.
extract.method.second.fragment=이제 두 번째 조각의 바꾸기를 확인 또는 거부할 수 있습니다.

extract.variable.lesson.name=변수 추출
extract.variable.start.refactoring={0} 을(를) 눌러 표현식 {1} 에서 지역 변수를 추출하세요.
extract.variable.replace.all=이 코드 블록에는 선택한 표현식이 3번 사용되었습니다. 목록의 두 번째 항목을 선택하여 모두 교체하세요.
extract.variable.choose.name=새 변수의 이름을 선택하거나 그대로 두세요. {0} 을(를) 눌러 리팩터링을 완료하세요.

## Run/Debug module
run.debug.module.name=실행 및 디버그
run.debug.module.description=코드를 실행하고 IDE 비주얼 디버거로 오류를 수정하세요.

run.configuration.lesson.name=실행 구성
run.configuration.hide.toolwindow=<ide/>는 자동으로 {0} 도구 창을 열었습니다. 팁\: {0} 도구 창 상단에 전체 실행 명령어가 표시됩니다. 이제 {1} (으)로 도구 창을 숨겨봅시다.
run.configuration.temporary.to.permanent=새로 실행할 때마다 <ide/>가 임시 실행 구성을 생성합니다. 기본 제한인 5에 도달하면 임시 구성은 자동으로 삭제됩니다. 임시 구성을 영구 구성으로 변환해봅시다. 실행 구성에서 드롭다운 메뉴를 여세요.
run.configuration.select.save.configuration={0} 을(를) 선택하세요.
run.configuration.edit.configuration=구성을 변경하거나 다른 구성을 수동으로 작성하고자 한다고 가정해봅시다. 드롭다운 메뉴를 다시 열고 {0} 을(를) 클릭해야 합니다. 아니면 {1} 액션을 사용할 수도 있습니다.
run.configuration.settings.description=Run/Debug 구성을 관리하기 위한 곳입니다. 이곳에서 프로그램 매개변수, JVM 인수, 환경 변수 등을 설정할 수 있습니다.
run.configuration.tip.about.save.configuration.into.file=힌트\: 때때로 구성을 자체 파일로 저장하고 싶을 수 있습니다. 이러한 구성은 동료들끼리 (보통 버전 관리 시스템을 사용해) 쉽게 공유할 수 있습니다. 이제 설정 대화상자를 닫고 이 강의를 종료하세요.

debug.workflow.lesson.name=디버그 워크플로
debug.workflow.incorrect.breakpoints=이 수업의 중단점이 잘못 설정되어 있습니다.
debug.workflow.run.program=디버그하기 전에 프로그램을 실행하여 무엇이 잘못되는지 확인해봅시다 {0}.
debug.workflow.toggle.breakpoint=그래서 문제가 있습니다. 중단점을 배치하여 조사를 시작해봅시다. 중단점을 설정하려면 에디터 여백을 클릭하거나 {0} 을(를) 누르세요.
debug.workflow.start.debug=선택한 실행 구성 디버그를 시작하려면 {0} 을(를) 클릭하거나 {1} 을(를) 누르세요.
debug.workflow.need.restart.lesson=디버그 세션이 중지되었습니다. 수업을 다시 시작하세요.
debug.workflow.return.to.editor=많은 트레이스 액션은 디버그 도구 창에 초점을 전환합니다. {0} (으)로 에디터로 되돌아갑시다.
debug.workflow.use.watches=<ide/>에는 변수 값을 표시하는 여러 방법이 있습니다. 이 단계에서는 호출을 선택했습니다. {0} 에 추가해봅시다. 표현식을 클립보드에 복사한 후 디버그 도구창의 {1} 버튼을 눌러 복사한 텍스트를 붙여넣을 수 있습니다. 아니면 액션 {2} {3} 을(를) 사용할 수도 있습니다.
debug.workflow.consider.to.add.a.shortcut=(나중에 단축키 할당을 검토해보세요)
debug.workflow.step.into=스텝인투하세요. 디버그 패널에서 {0} 액션 또는 {1} 옵션을 사용할 수 있습니다.
debug.workflow.choose.method.to.step.in=대부분의 경우 인수 계산을 건너뛸 필요가 있기 때문에 스마트 스텝인투 기능은 기본적으로 래핑 메서드를 제안합니다. 단, 여기서는 두번째 {0} 을(를) 선택해야 합니다. 키보드 {1} (으)로 선택한 후 {2} 를 누르거나 호출을 클릭할 수 있습니다.
debug.workflow.quick.evaluate={0} 에 무엇을 전달할지 봅시다. 선택한 인수의 표현식 {1} 빠른 평가를 호출하세요.
debug.workflow.fix.error=배열 색인에 실수가 있습니다\! 지금 바로 수정해봅시다. ({0}) 팝업을 닫고 0을 1로 변경하세요.
debug.workflow.step.over={0} 호출이 예외를 던지지 않는지 확인해봅시다. 스텝오버 액션 {1} 을(를) 사용하거나 {2} 옵션을 클릭하세요.
debug.workflow.mute.breakpoints=다시 동일한 중단점입니다. 이제 이 중단점에서 중지할 필요가 없습니다. 그러므로 {0} 옵션을 클릭하거나 {1} 액션을 사용하여 중단점을 끄세요.
debug.workflow.run.to.cursor={0}의 결과를 확인해봅시다. 에디터 커서를 {1} 문으로 이동했습니다. {2}을(를) 누르거나 {3}을(를) 클릭하세요. {4}은(는) 중단점이 꺼진 경우에도 작동합니다.
debug.workflow.evaluate.expression={0} 값은 우리가 찾는 평균값이 아닌 것 같습니다. 길이로 쪼개는 것을 잊었습니다. {1} 을(를) 반환해야 할 것 같습니다. 추측을 확인해봅시다. {2} 을(를) 누르거나 {3} 옵션을 클릭합니다.
debug.workflow.type.result={1} 필드에 {0} 을(를) 입력하면 코드 완성 기능이 작동합니다.
debug.workflow.evaluate.it={0} 을(를) 누르거나 {1} 을(를) 클릭하세요.
debug.workflow.stop.debug=정답입니다\! 대화상자를 닫고 {0} 또는 {1} 버튼으로 디버그를 정지하세요.
debug.workflow.resume=지금은 예외가 없는 것 같습니다. {0} 을(를) 사용하거나 {1} 버튼을 클릭하여 계속 수행해봅시다.
