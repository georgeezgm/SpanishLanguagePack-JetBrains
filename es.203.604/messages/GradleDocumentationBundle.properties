## Language plugins
gradle.documentation.org.gradle.api.Project.apply.plugin.java.non-html=프로젝트에 Java 컴파일, 테스트 및 번들링 기능을 추가합니다. 이는 다른 많은 Gradle 플러그인의 기초 역할을 합니다.
gradle.documentation.org.gradle.api.Project.apply.plugin.java=<p>프로젝트에 Java 컴파일, 테스트 및 번들링 기능을 추가합니다. 이는 다른 많은 Gradle 플러그인의 기초 역할을 합니다. 또한 다음을 참조하세요. <a class\="xref" href\="http\://www.gradle.org/docs/current/userguide/tutorial_java_projects.html">7장, <i>Java 빠른 시작</i></a></p><p>자동으로 적용\: java-base</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.groovy.non-html=Groovy 프로젝트 구축 지원을 추가합니다.
gradle.documentation.org.gradle.api.Project.apply.plugin.groovy=<p> Groovy 프로젝트 구축 지원을 추가합니다. 또한 다음을 참조하세요. <a class\="xref" href\="http\://www.gradle.org/docs/current/userguide/tutorial_groovy_projects.html">9장, <i> Groovy 빠른 시작</i></a></p><p>자동으로 적용\: java, groovy-base</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.scala.non-html=Scala 프로젝트 구축 지원을 추가합니다.
gradle.documentation.org.gradle.api.Project.apply.plugin.scala=<p>Scala 프로젝트 구축 지원을 추가합니다.</p><p>자동으로 적용\: java, scala-base</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.antlr.non-html=Antlr를 사용한 파서 생성 지원을 추가합니다.
gradle.documentation.org.gradle.api.Project.apply.plugin.antlr=<p><a class\="ulink" href\="http\://www.antlr.org/" target\="_top">Antlr</a>를 사용한 파서 생성 지원을 추가합니다.</p><p>자동으로 적용\: java </p>

## Integration plugins
gradle.documentation.org.gradle.api.Project.apply.plugin.application.non-html=Java 프로젝트 실행 및 번들링 작업을 명령줄 애플리케이션으로 추가합니다.
gradle.documentation.org.gradle.api.Project.apply.plugin.application=<p>Java 프로젝트 실행 및 번들링 작업을 명령줄 애플리케이션으로 추가합니다.</p><p>자동으로 적용\: java</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.ear.non-html=J2EE 애플리케이션 빌드 지원을 추가합니다.
gradle.documentation.org.gradle.api.Project.apply.plugin.ear=<p>J2EE 애플리케이션 빌드 지원을 추가합니다.</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.jetty.non-html=빌드에 포함된 Jetty 웹 컨테이너에 웹 애플리케이션을 배포합니다.
gradle.documentation.org.gradle.api.Project.apply.plugin.jetty=<p>빌드에 포함된 Jetty 웹 컨테이너에 웹 애플리케이션을 배포합니다. 또한 다음을 참조하세요. <a class\="xref" href\="http\://www.gradle.org/docs/current/userguide/web_project_tutorial.html">10 장, <i>웹 애플리케이션 빠른 시작</i></a></p><p>자동으로 적용\: war</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.maven.non-html=Maven 리포지토리에 아티팩트 게시 지원을 추가합니다.
gradle.documentation.org.gradle.api.Project.apply.plugin.maven=<p>Maven 리포지토리에 아티팩트 게시 지원을 추가합니다.</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.osgi.non-html=OSGi 번들 빌드 지원을 추가합니다.
gradle.documentation.org.gradle.api.Project.apply.plugin.osgi=<p>OSGi 번들 빌드 지원을 추가합니다.</p><p>자동으로 적용\: java-base</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.war.non-html=웹 애플리케이션 WAR 파일 조합 지원을 추가합니다.
gradle.documentation.org.gradle.api.Project.apply.plugin.war=<p>웹 애플리케이션 WAR 파일 조합 지원을 추가합니다. 또한 다음을 참조하세요. <a class\="xref" href\="http\://www.gradle.org/docs/current/userguide/web_project_tutorial.html">10장, <i>웹 애플리케이션 빠른 시작</i></a></p><p>자동으로 적용\: java</p>

## Software development plugins
gradle.documentation.org.gradle.api.Project.apply.plugin.announce.non-html=Twitter 또는 Growl 등 즐겨찾는 플랫폼에 메시지를 게시합니다.
gradle.documentation.org.gradle.api.Project.apply.plugin.announce=<p>Twitter 또는 Growl 등 즐겨찾는 플랫폼에 메시지를 게시합니다.</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.build-announcements.non-html=빌드 생명 주기의 흥미로운 이벤트에 대한 로컬 공지를 데스크톱에 보냅니다.
gradle.documentation.org.gradle.api.Project.apply.plugin.build-announcements=<p>빌드 생명 주기의 흥미로운 이벤트에 대한 로컬 공지를 데스크톱에 보냅니다.</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.checkstyle.non-html=Checkstyle을 사용하여 프로젝트 Java 소스 파일 품질 검사를 수행하고 검사 보고서를 생성합니다.
gradle.documentation.org.gradle.api.Project.apply.plugin.checkstyle=<p><a class\="ulink" href\="http\://checkstyle.sourceforge.net/index.html" target\="_top">Checkstyle</a>을 사용하여 프로젝트 Java 소스 파일 품질 검사를 수행하고 검사 보고서를 생성합니다.</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.codenarc.non-html=CodeNarc를 사용하여 프로젝트 Groovy 소스 파일 품질 검사를 수행하고 검사 보고서를 생성합니다.
gradle.documentation.org.gradle.api.Project.apply.plugin.codenarc=<p><a class\="ulink" href\="http\://codenarc.sourceforge.net/index.html" target\="_top">CodeNarc</a>를 사용하여 프로젝트 Groovy 소스 파일 품질 검사를 수행하고 검사 보고서를 생성합니다.</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.eclipse.non-html=프로젝트를 Eclipse로 가져올 수 있도록 Eclipse IDE에서 사용하는 파일을 생성합니다.
gradle.documentation.org.gradle.api.Project.apply.plugin.eclipse=<p>프로젝트를 Eclipse로 가져올 수 있도록 <a class\="ulink" href\="http\://eclipse.org" target\="_top">Eclipse IDE</a>에서 사용하는 파일을 생성합니다. 또한 다음을 참조하세요. <a class\="xref" href\="http\://www.gradle.org/docs/current/userguide/tutorial_java_projects.html">7장, <i>Java 빠른 시작</i></a></p>
gradle.documentation.org.gradle.api.Project.apply.plugin.eclipse-wtp.non-html=Eclipse 플러그인 플러스가 Eclipse WTP(웹 도구 플랫폼) 설정 파일을 생성 하는 것과 동일하게 작동합니다. Eclipse로 가져온 후 war/ear 프로젝트를 WTP와 함께 작동하도록 설정해야 합니다.
gradle.documentation.org.gradle.api.Project.apply.plugin.eclipse-wtp=<p>Eclipse 플러그인 플러스가 Eclipse WTP(웹 도구 플랫폼) 설정 파일을 생성 하는 것과 동일하게 작동합니다. Eclipse로 가져온 후 war/ear 프로젝트를 WTP와 함께 작동하도록 설정해야 합니다. 또한 다음을 참조하세요. <a class\="xref" href\="http\://www.gradle.org/docs/current/userguide/tutorial_java_projects.html">7장, <i>Java 빠른 시작</i></a> </p>
gradle.documentation.org.gradle.api.Project.apply.plugin.findbugs.non-html=FindBugs를 사용하여 프로젝트 Java 소스 파일 품질 검사를 수행하고 검사 보고서를 생성합니다.
gradle.documentation.org.gradle.api.Project.apply.plugin.findbugs=<p><a class\="ulink" href\="http\://findbugs.sourceforge.net" target\="_top">FindBugs</a>를 사용하여 프로젝트 Java 소스 파일 품질 검사를 수행하고 검사 보고서를 생성합니다.</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.idea.non-html=프로젝트를 IDEA로 가져올 수 있도록 파일을 생성하고 Intellij IDEA IDE에서 사용하는 IDEA 특정 사용자 지정을 적용합니다.
gradle.documentation.org.gradle.api.Project.apply.plugin.idea=<p>프로젝트를 IDEA로 가져올 수 있도록 파일을 생성하고 <a class\="ulink" href\="https\://www.jetbrains.com/idea/index.html" target\="_top">IntelliJ IDEA IDE</a>에서 사용하는 IDEA 특정 사용자 지정을 적용합니다.</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.jdepend.non-html=JDepend를 사용하여 프로젝트 원본 파일 품질 검사를 수행하고 검사 보고서를 생성합니다.
gradle.documentation.org.gradle.api.Project.apply.plugin.jdepend=<p><a class\="ulink" href\="http\://clarkware.com/software/JDepend.html" target\="_top">JDepend</a>를 사용하여 프로젝트 원본 파일 품질 검사를 수행하고 검사 보고서를 생성합니다.</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.pmd.non-html=PMD를 사용하여 프로젝트 Java 소스 파일 품질 검사를 수행하고 검사 보고서를 생성합니다.
gradle.documentation.org.gradle.api.Project.apply.plugin.pmd=<p><a class\="ulink" href\="http\://pmd.sourceforge.net" target\="_top">PMD</a>를 사용하여 프로젝트 Java 소스 파일 품질 검사를 수행하고 검사 보고서를 생성합니다.</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.project-report.non-html=Gradle 빌드에 대한 유용한 정보가 포함된 보고서를 생성합니다.
gradle.documentation.org.gradle.api.Project.apply.plugin.project-report=<p>Gradle 빌드에 대한 유용한 정보가 포함된 보고서를 생성합니다.</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.signing.non-html=빌드된 파일 및 아티팩트에 디지털 서명하는 기능을 추가합니다.
gradle.documentation.org.gradle.api.Project.apply.plugin.signing=<p>빌드된 파일 및 아티팩트에 디지털 서명하는 기능을 추가합니다.</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.sonar.non-html=Sonar 코드 품질 플랫폼과의 통합 도구를 제공합니다. sonar-runner 플러그인으로 대체됩니다.
gradle.documentation.org.gradle.api.Project.apply.plugin.sonar=<p><a class\="ulink" href\="http\://www.sonarsource.org" target\="_top">Sonar</a> 코드 품질 플랫폼과의 통합 도구를 제공합니다. <a class\="link" href\="http\://www.gradle.org/docs/current/userguide/sonar_runner_plugin.html"> <code class\="literal">sonar-runner</code></a> 플러그인으로 대체됩니다.</p>

gradle.cmd.option.full.stacktrace=어떤 예외든 완전한(매우 상세한) 스택트레이스 출력
gradle.cmd.option.stacktrace=사용자 예외의 스택트레이스도 출력(예\: 컴파일 오류)
gradle.cmd.option.scan=Gradle 빌드의 모든 측면에 대한 상세한 정보가 있는 빌드 스캔 생성
gradle.cmd.option.build.cache=Gradle 빌드 캐시를 전환합니다. Gradle이 이전 빌드의 출력을 다시 사용합니다. 기본값으로 꺼져있습니다.
gradle.cmd.option.no.build.cache=Gradle 빌드 캐시를 전환합니다. Gradle이 이전 빌드의 출력을 다시 사용합니다. 기본값으로 꺼져있습니다.
gradle.cmd.option.configure.on.demand=온디맨드 구성을 전환합니다. 이 빌드 실행에서는 관련된 프로젝트만 구성됩니다. 기본값으로 꺼져있습니다.
gradle.cmd.option.no.configure.on.demand=온디맨드 구성을 전환합니다. 이 빌드 실행에서는 관련된 프로젝트만 구성됩니다. 기본값으로 꺼져있습니다.
gradle.cmd.option.max.workers=Gradle이 사용할 수 있는 워커의 최대 개수를 설정합니다. 기본값은 프로세서 수입니다.
gradle.cmd.option.parallel=프로젝트 병렬 빌드
gradle.cmd.option.no.parallel=병렬 빌드 해제
gradle.cmd.option.priority=Gradle 데몬과 이를 통해 실행되는 모든 프로세스의 예약 우선순위를 지정합니다. 값은 일반 또는 낮음입니다. 기본값은 일반입니다.
gradle.cmd.option.profile=빌드 실행 시간을 프로파일링하고 buildDir/reports/profile 디렉터리에 보고서를 생성합니다.
gradle.cmd.option.quiet=오류만 로그에 표시합니다.
gradle.cmd.option.warn=로그 레벨을 경고로 설정합니다.
gradle.cmd.option.info=로그 레벨을 정보로 설정합니다. 
gradle.cmd.option.debug=디버그 모드(일반 스택트레이스 포함)에서 로그인합니다.
gradle.cmd.option.warning.mode=경고 로그 모드를 지정합니다. 기본값은 요약입니다. 사용 가능 모드(모두, 실패, 없음, 요약)
gradle.cmd.option.include.build=지정된 빌드를 포함한 복합 빌드를 실행합니다.
gradle.cmd.option.offline=네트워크 리소스에 액세스하지 않고 빌드가 작동해야 함을 명시합니다.
gradle.cmd.option.refresh.dependencies=종속성 상태를 새로고침합니다.
gradle.cmd.option.dry.run=모든 작업 액션이 비활성화하고 빌드를 실행합니다. 
gradle.cmd.option.write.locks=잠금 가능한 모든 해결된 구성의 잠금 상태를 유지해야 함을 나타냅니다.
gradle.cmd.option.update.locks=지정한 모듈의 버전을 잠금 파일로 갱신해야 함을 나타냅니다. 이 플래그는 --write-locks도 의미합니다. 
gradle.cmd.option.no.rebuild=프로젝트 종속성 다시 빌드하지 않습니다.
gradle.cmd.option.build.file=빌드 파일을 지정하세요.
gradle.cmd.option.settings.file=설정 파일을 지정하세요.
gradle.cmd.option.gradle.user.home=Gradle 사용자 홈 디렉터리를 지정하세요. 기본값은 사용자 홈 디렉터리 안의 .gradle 디렉터리입니다.
gradle.cmd.option.project.dir=Gradle 시작 디렉터리를 지정하세요. 기본값은 현재 디렉터리입니다.
gradle.cmd.option.project.cache.dir=프로젝트 전용 캐시 디렉터리를 지정하세요. 기본값은 루트 프로젝트 디렉터리의 .gradle입니다.
gradle.cmd.option.system.prop=JVM의 시스템 프로퍼티를 설정합니다. 예\: -Dmyprop\=myvalue
gradle.cmd.option.init.script=초기화 스크립스를 지정하세요. 
gradle.cmd.option.project.prop=루트 프로젝트의 프로젝트 프로퍼티를 설정하세요. 예\: -Pmyprop\=myvalue
gradle.cmd.option.exclude.task=실행 항목에서 제외할 작업을 지정하세요.
gradle.cmd.option.rerun.tasks=작업 최적화가 무시되었음을 명시합니다.
gradle.cmd.option.continue=작업 실패 뒤 작업 실행을 계속 진행합니다.