js.readme.description=이 대화형 교육과정에서는 코드 리팩터링 또는 프로젝트 간 이동과 같은 일반적인 작업 수행 방법을 몇가지 배울 수 있습니다.\n\n이 교육과정은 {0}을(를) 처음 접하는 사용자에게 가장 유용합니다. 또한 {0}을(를) 사용해본 적이 있고 모든 기본 단축키에 대한 자신의 지식을 확인하려는 사용자에게도 권장합니다.
js.readme.usage.header=교육과정 진행 방법
js.readme.feedback.header=피드백 공유
js.editor.basics.module.name=Conceptos básicos del editor
js.editor.basics.module.description=Aprenda las características esenciales del editor para comenzar a escribir mejor código y ahorrar tiempo desde el primer día en tareas comunes.
js.editor.completion.title=Código completo
js.editor.completion.choose.lookup=<ide /> está lleno de características que lo ayudarán a ser más productivo escribiendo un mejor código. Comencemos con la finalización del código. Acelere la codificación completando palabras clave y símbolos a través de API de lenguaje y dependencias de proyectos. Ingrese {0} y presione {1} para autocompletar {2}.
js.editor.completion.choose.method=Entonces, cuando habilita la finalización del código, aparecen sugerencias sensibles al contexto a medida que escribe el código. Para agregar una de estas sugerencias, puede usar {0} como lo hicimos antes o presionar {1} para reemplazar una existente. Ahora agregue {2} después de {3} y escriba {4} para autocompletar el método {5} con {0}.
js.editor.completion.parameter.info=Puede recuperar rápidamente los nombres de los parámetros de métodos y funciones utilizando la información sobre herramientas ({0}) obtenida al colocar el signo de intercalación dentro de {1}. Dependiendo de la situación, le recomendamos que consulte la documentación más detallada. Presione {2} para ver la documentación detallada.
js.editor.completion.add.parameter=Esta es una forma de recuperar documentos JavaScript directamente desde <ide />. Ahora continúe agregando {0} dentro de {1}.
js.editor.completion.console.log.argument=Finalmente, completemos la declaración {0}. Coloque el signo de intercalación dentro de {1} en la línea 8 y agregue {2} usando la finalización del código.
js.editor.completion.next=Esta lección termina aquí. Haga clic en el botón de abajo o use {0} para comenzar la siguiente lección.
js.editor.code.editing.tips.and.tricks.title=Consejos e información sobre la edición de código
js.editor.code.editing.reformat.start=Aquí hay algunos consejos y trucos que le ayudarán a editar su código más rápido. Primero, no necesita modificar manualmente el formato de su código usando <ide />. Vuelva a formatear el código con {0}.
js.editor.code.editing.select.word=¡Más que esto \! Ahora veamos cómo seleccionar rápidamente el código dentro de un archivo. Presione {0} varias veces para seleccionar el segundo elemento tr completo (líneas 14-18).
js.editor.code.editing.comment.delete.unselect.move.up.1=Ahora que ha seleccionado el código, puede comentar (deseleccionar) ({0}), eliminar ({1}) o contraer la selección ({2).}) Puede.
js.editor.code.editing.comment.delete.unselect.move.up.2=También puede mover este código hacia arriba y hacia abajo en el archivo. Mueva el código hasta {0}.
js.editor.code.editing.multi.caret.1=Esta es una edición de múltiples signos de intercalación. Úselo para ahorrar tiempo al cambiar el código en varios lugares a la vez. Coloque el signo de intercalación dentro de la primera etiqueta {0} (línea 10). Luego, seleccione todas las etiquetas {1} dentro del mismo elemento tr (líneas 10-12). Presione {2} 6 veces hasta que se seleccionen todas las etiquetas requeridas.
js.editor.code.editing.multi.caret.2=Reemplaza {0} con {1} y presiona {2} para salir del modo de múltiples signos de intercalación.
js.editor.code.editing.duplicate.delete.comment=Finalmente, intentemos las acciones de línea más comunes fácilmente: duplicar línea, eliminar línea, descomentar. Utilice {0} para duplicar la línea seleccionada. Luego presione {1} y {2} para intentar otra acción de fila.
js.editor.code.editing.next=Esta lección termina aquí. Haga clic en el botón de abajo para comenzar su próxima lección o use {0}.
js.editor.code.inspection.title=Poder de inspección de código
js.editor.code.inspection.intro=Mientras trabaja como editor, <ide /> analiza continuamente su código para detectar varios problemas en su código y sugerir formas de mejorarlo. Se destacan dos cuestiones en las líneas 4 y 5 del archivo abierto. Presione {0} para confirmar el problema.
js.editor.code.inspection.show.intentions.1=También puede usar {0} para saltar de un error a otro. Alternativamente, puede colocar el cursor sobre el error para ver el problema que encontró.
js.editor.code.inspection.show.intentions.2=En este archivo, el IDE encontró variables no resueltas (variables que no están definidas en ninguna parte del código). Como una posible solución, sugeriría crear una nueva variable, {0}, pero debería agregar un libro de parámetros en su lugar. Coloque el signo de intercalación en {1} y presione {2} para mostrar la lista de edición completa.
js.editor.code.inspection.run.intention=Seleccione {0} y presione {1}.
js.editor.code.inspection.checkmark=Si miras en la esquina superior derecha del editor, verás una marca de verificación verde ({0}) que confirma que el archivo no es problemático. Sin embargo, todavía hay algunos detalles que se pueden optimizar para acortar el código. Coloque el signo de intercalación en {1} (tercera línea) y presione {2}.
js.editor.code.inspection.make.shorter=Ahora reduzcamos la expresión de la función. Seleccione {0} Solución rápida y presione {1}.
js.editor.code.inspection.next=Esta lección termina aquí. Haga clic en el botón de abajo para comenzar su próxima lección o use {0}.
js.editor.navigation.title=Navegación eficiente
js.editor.navigation.recent.files=Comencemos moviéndonos dentro del proyecto. Presione {0} para invocar la ventana emergente {1}.
js.editor.navigation.choose.structure=Esta ventana emergente le permite navegar rápidamente entre los archivos recientes y la ventana de herramientas IDE. Una de estas ventanas de herramientas le ayuda a navegar entre archivos individuales, que son pequeñas partes de su proyecto. Haga clic en la pestaña {0} para obtener más detalles.
js.editor.navigation.activate.structure=Entonces, la ventana de herramientas {0} le ayuda a escanear archivos más rápido. Proporciona una descripción general de la estructura y le permite saltar a un elemento específico simplemente ingresando un nombre. En cualquier área de la ventana de herramientas, escriba {1}, presione {2}, luego presione {3} para cerrar el panel y acceder a su código.
js.editor.navigation.find.usages=El cursor del resultado de la acción se movió a {0} (línea 9). Con el símbolo de intercalación allí, presione {1} para abrir otra ventana de herramientas que le ayudará a encontrar rápidamente el uso de un elemento.
js.editor.navigation.hide.tool.window=Bien \! Ahora puede ver dónde se usa giveTreat en proyectos y bibliotecas. Cierre la ventana de herramientas con {0}.
js.editor.navigation.search.everywhere=Ahora toca dos veces {0} para encontrar otras funciones que te ayuden a buscar más rápido.
js.editor.navigation.search.everywhere.tabs=Esta es la ventana emergente {0}. Puede encontrar instantáneamente una acción, archivo, clase o símbolo y mostrar todas las coincidencias en un solo lugar. Para una búsqueda más específica, puede presionar {1} para cambiar de {2} a otra pestaña, como {3} o {4}. Alternativamente, puede usar un atajo para abrir la pestaña específica que necesita. Probemos lo último con {5}.
js.editor.navigation.search.action={0} La pestaña está activa, así que escriba {1} en la barra de búsqueda para encontrar accesos directos a otras funciones de navegación flexibles.
js.editor.navigation.go.to.declaration=Tenga en cuenta el {0} junto a <strong> Ir a declaración o uso</strong>. Indica dónde se usa la definición y viceversa. Cierre la ventana emergente, coloque el símbolo de intercalación en {1} (línea 16) y presione {0} para encontrar la declaración.
js.editor.navigation.keymap.reference=¡Felicitaciones \! Se ha llegado al final de {0}. Imprime <a href\="{1}"> referencia del mapa de teclas</a> para acceder cómodamente a todos los atajos en <ide />. Seleccione el botón de abajo para pasar al siguiente módulo.
js.editor.refactorings.title=Refactorizar de forma concisa
js.editor.refactorings.this=<ide /> tiene <a href\=''{0}''> varias refactorizaciones</a> que pueden reconstruir automáticamente el código existente sin cambiar el comportamiento a lo largo del proyecto. Obtengamos una vista previa de la lista de refactorizaciones disponibles para el parámetro {1}. Presione {2} o seleccione {3} en el menú principal.
js.editor.refactorings.rename=Con {0} no tiene que recordar todas las refactorizaciones o atajos. Haga clic en {1} para ver una de nuestras refactorizaciones más populares.
js.editor.refactorings.rename.apply={0} Cambie el nombre del parámetro a {1} y presione {2}. Luego, el cambio se aplicará a todos los archivos del proyecto.
js.editor.refactorings.shortcut=¡Buen trabajo \! Refactoricemos nuestro código usando atajos de teclado. Coloque el signo de intercalación en la propiedad {0} (cuarta línea) y presione {1}.
js.editor.refactoring.replace=Ahora reemplace ambos usos con la variable {0} llamada {1}.
js.editor.refactoring.select.expression=Creemos una nueva variable {0} para contener {1}. Seleccione la expresión {1} de la lista y presione {2}.
js.editor.refactorings.next=Observamos dos formas de refactorizar el código en <ide />. Imprime <a href\="{0}"> referencia de mapa de teclas</a> si prefieres usar atajos; de lo contrario, sigue usando el menú {1}. Haga clic en el botón de abajo para comenzar su próxima lección o use {2}.
js.getting.started.module.name=Iniciar la prueba
js.getting.started.module.description=Eche un vistazo a un ejemplo con Jest y vea cómo {0} puede simplificar las pruebas unitarias.
js.testing.jest.title={0} Conceptos básicos de la prueba
js.testing.jest.prepare=<ide /> facilita cualquier flujo de trabajo de prueba. Veamos el principio. En este módulo usaremos uno de <a href\="{0}"> Jest</a> y <a href\="{1}"> proyecto de muestra</a> como ejemplo, por lo que Jest y npm/Yarn Asegúrese de que esté instalado en su máquina (consulte <a href\="{2}"> esta</a> página web para obtener más información). Comencemos con una configuración de ejecución/depuración que solo se aplicará a Jest Seleccione {3}> {4} en el menú principal. Luego haga clic en {5} y agregue la configuración {6} como parámetros predeterminados y presione {7} para guardar.
js.testing.jest.run=La nueva configuración {0} ahora está seleccionada de forma predeterminada. Haga clic en el botón {1} ({2}) junto a él.
js.testing.jest.navigate.1=Ahora, en la ventana de herramientas {0}, puede ver los resultados de las pruebas ejecutadas por el ejecutor de pruebas y los seguimientos de la pila de las pruebas fallidas. No solo puede realizar un seguimiento del progreso de sus pruebas, sino que también puede hacer muchas otras cosas. <a href\="{4}"> para volver a ejecutar todas ({1}) pruebas o solo las pruebas fallidas ({2}) y para verificar las pruebas aprobadas ({3}) o para volver a ejecutar automáticamente las pruebas al cambiar. Puede habilitar el reloj modo</a>. También puede buscar rápidamente una prueba específica en.
js.testing.jest.navigate.2=También puede encontrar rápidamente una prueba específica en {0}. Probémoslo ahora. Coloque el signo de intercalación en cualquier lugar del área {0}, escriba {1} y luego presione {2} para ir a la prueba.
js.testing.jest.fix.test.1=Hacer doble clic en la prueba en {0} lo lleva directamente a esa ubicación en el código. Al pasar el cursor sobre {1}, aparece una ventana emergente que explica por qué falló la prueba. También puede depurar sus pruebas aquí si es necesario.
js.testing.jest.fix.test.2=Ahora reemplacemos el valor incorrecto usado para {0}. Reemplace {1} en la línea 6 con {2}.
js.testing.jest.re.run.test.1=Ahora que tiene los valores correctos para los resultados esperados, puede ejecutar la prueba nuevamente. Probémoslo de una manera diferente esta vez. ¿Ves el icono {0} a la izquierda de la prueba en el editor? Este icono se utiliza para ejecutar y depurar rápidamente pruebas específicas, así como para mostrar el estado de las pruebas ejecutadas recientemente.
js.testing.jest.re.run.test.2=Haga clic y seleccione {0}.
js.testing.jest.success.run.coverage.1=¡Buen trabajo \! La prueba pasó con éxito.
js.testing.jest.success.run.coverage.2=Echemos un vistazo a otra herramienta útil. Haga clic en el ícono {0} ubicado junto al menú Ejecutar/Depurar configuración.
js.testing.jest.coverage.result=Esto le permite crear rápidamente un informe de cobertura de código que muestra cuántos archivos se probaron, incluidos y qué porcentaje de líneas se probaron en el archivo. Ahora cierre el informe de cobertura con {0}.
js.testing.jest.end=¡Felicitaciones \! Ha llegado al final de este módulo. Lo que ha aprendido hasta ahora también se aplica a otros corredores de prueba compatibles con <ide /> (excepto la cobertura de código y el modo de reloj). Para obtener más sugerencias e información sobre cómo probar su aplicación con Jest, consulte el <a href\="{0}"> este</a> blog. Si está utilizando un corredor de prueba diferente, consulte la <a href\="{1}"> ayuda web</a>.
