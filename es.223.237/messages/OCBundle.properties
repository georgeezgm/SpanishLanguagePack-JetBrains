method=메서드
function=함수
block=블록
lambda=람다
callable.type.title=호출 가능 유형
annotator.type.literals.are.not.supported={0} 리터럴은 컴파일러에서 지원되지 않습니다.
extract.category.dialog=카테고리 추출
extract.category.unable.create.file=파일을 생성할 수 없습니다.
extract.unavailable.for.protocols=이 액션은 프로토콜에 사용할 수 없습니다.
extract.method.selected.block.hint=선택한 블록은 구문 또는 표현식 모음을 나타내야 합니다.
extract.method.cannot.determine.hint=선택한 표현식의 유형을 파악할 수 없습니다.
extract.class.use.protocol.instead=대신 "상위 프로토콜 추출" 사용
extract.class.element.not.located.hint=선택된 요소는 프로젝트 내부에 없는 클래스의 카테고리입니다.
extract.subclass.dialog.title=하위 클래스 추출
extract.symbol.already.exist={0} 이(가) 이미 존재합니다
create.file.title=파일
create.file.description=새 파일을 생성합니다.
create.field.name.category=카테고리 이름(&N)\:
create.field.language=&Lenguaje\:
create.field.class=클래스(&C)\:
create.class.title=Objective-C 클래스
create.class.dialog.title=새 Objective-C 클래스
create.class.objc=Objective-C(.m)
create.class.objcpp=Objective-C++(.mm)
create.class.description=새 Objective-C 클래스 및 헤더 파일을 생성합니다.
create.protocol.title=Objective-C 프로토콜
create.protocol.description=새 Objective-C 프로토콜을 생성합니다.
create.protocol.dialog.title=새 Objective-C 프로토콜
create.category.title=Objective-C 카테고리
create.category.description=새 Objective-C 카테고리를 생성합니다.
create.category.dialog.title=새 Objective-C 카테고리
create.checkbox.category.interface=인터페이스 파일 생성(&I)
create.category.no.class.dialog=클래스 ''{0}''을(를) 찾을 수 없습니다.\n카테고리를 생성하시겠어요?
create.category.no.class.dialog.title=잘못된 클래스
create.implementation.title=구현
create.implementation.description=새 구현을 생성합니다.
create.interface.title=인터페이스
create.interface.description=새 인터페이스를 생성합니다.
codeassists.surroundwith.expression=다음으로 둘러싸기
copy.files.handler.fail=파일을 ''{0}''(으)로 복사하지 못했습니다.
code.style.remember.choice=선택 항목 기억
refactoring.categoryElement.not.in.project=선택된 요소는 프로젝트 내부에 없는 클래스의 카테고리입니다.
refactoring.category.not.in.project=선택된 요소는 프로젝트 내부에 없는 클래스의 카테고리입니다.
navigation.import.hierarchy.including.title={0} 포함 파일
navigation.import.hierarchy.including.action=계층 구조 포함
navigation.import.hierarchy.including.action.description=계층 구조 포함으로 전환합니다.
navigation.import.hierarchy.included.title={0}(으)로 포함된 파일
navigation.import.hierarchy.included.action=포함된 계층 구조
navigation.import.hierarchy.included.action.description=포함된 계층 구조으로 전환합니다.
navigation.import.hierarchy.next.occurence=다음 파일로 이동
navigation.import.hierarchy.previous.occurence=이전 파일로 이동
navigation.goto.please.wait=기다려주세요...
navigation.goto.resolving.target=대상 해결 중...
naming.convention.title=이름 지정 규칙
naming.convention.header.guard.style.help=다음과 같은 <br><b>${PROJECT_NAME}</b>, <b>${PROJECT_REL_PATH}</b>, <b>${FILE_NAME}</b>, <b>${EXT}</b>, <b>${UUID}</b> 등의 사전 정의된 변수를 사용할 수 있습니다.<br><i>에디터/파일 및 코드 템플릿</i>(<i>파일 탭</i>)<br>에서 사전 정의된 변수도 모두 사용할 수 있습니다(예\: <b>${USER}</b>, <b>${DATE}</b> 등)
naming.convention.entity.kind=엔티티 종류
naming.convention.visibility=가시성
naming.convention.specifier=지정자
naming.convention.entity.any=임의
naming.convention.entity.namespace=Espacio de nombres
naming.convention.entity.macro=매크로
naming.convention.entity.class=클래스
naming.convention.entity.struct=구조체
naming.convention.entity.enumeration=열거형
naming.convention.entity.union=공용체
naming.convention.entity.typedef=Typedef
naming.convention.entity.global.function=전역 함수
naming.convention.entity.global.variable=전역 변수
naming.convention.entity.class.member.function=클래스 멤버 함수
naming.convention.entity.struct.member.function=구조체 멤버 함수
naming.convention.entity.class.member.field=클래스 멤버 필드
naming.convention.entity.struct.member.field=구조체 멤버 필드
naming.convention.entity.enumerator=열거자
naming.convention.entity.parameter=Parámetro
naming.convention.entity.local.variable=지역 변수
naming.convention.prefix=접두사
naming.convention.suffix=접미사
refactoring.convertIvarUsagesToProperties=ivar 사용 위치를 프로퍼티로 변환(&C)
refactoring.ambiguous=모호한 함수는 리팩터링할 수 없습니다.
title.function.return.type.group=함수 반환 유형 뒤
title.function.top.return.type=전역 및 네임스페이스 범위 내
title.function.nontop.return.type=클래스 범위 내
title.function.parameters.group=함수 선언 매개변수
title.function.call.arguments.group=함수 호출 인수
title.template.decl.class.group=템플릿 클래스 선언
title.template.decl.func.group=템플릿 함수 선언
title.template.parameters.group=템플릿 선언 매개변수
title.template.call.arguments.group=템플릿 인스턴스화 인수
title.ctor.init.list.group=생성자 초기화 목록
title.superclass.list.group=기본 클레스 목록
title.shift.operators.group=''<<'', ''>>'' 연산자
title.capture.list.group=람다 캡처 목록
wrapping.new.line.after.lt=''<'' 뒤에 새 줄
wrapping.gt.on.new.line=새 줄에 ''>'' 배치
wrapping.align.multiline.parentheses=여러 줄의 소괄호 정렬
wrapping.align.multiline.brackets=여러 줄의 대괄호 정렬
wrapping.align.multiline.lt.gt=여러 줄 정렬 ''<'',''>''
wrapping.keep.simple.case.inline=간단한 case를 한 줄로 유지
wrapping.keep.simple.methods.in.one.line=간단한 함수를 한 줄로
wrapping.keep.simple.methods.in.one.line.oc=간단한 메서드 및 함수를 한 줄로
wrapping.keep.simple.blocks.in.one.line=한 줄의 간단한 람다
wrapping.keep.simple.blocks.in.one.line.oc=간단한 블록 및 람다를 한 줄로
wrapping.keep.nested.namespaces.in.one.line=중첩된 네임스페이스를 한 줄로 유지
wrapping.keep.directive.at.first.column=지시문을 첫 번째 열에
wrapping.brace.placement.class.declaration=클래스 및 구조 내
wrapping.property.declaration.oc=@property 선언
wrapping.try.statement=''try'' 문
wrapping.catch.on.new.line=새 줄에 ''catch''
wrapping.array.initializer=이니셜라이저 목록
wrapping.array.initializer.oc=컬렉션 리터럴 및 이니셜라이저 목록
wrapping.align.multiline.fields.groups=변수 그룹
wrapping.align.in.columns=열에 정렬
wrapping.structures.in.one.line=클래스 및 구조를 한 줄로
wrapping.before.brace.namespace=네임스페이스 내
wrapping.ternary.short.inline='a ?\: b''에서 줄 바꿈 없는 ''?\:'
wrapping.try.statement.oc=''@try'' 문
wrapping.catch.on.new.line.oc=새 줄에 ''@catch''
wrapping.finally.on.new.line.oc=새 줄에 ''@finally''
wrapping.array.initializer.lbrace.on.next.line.oc=''{'', ''['' 뒤에 새 줄
wrapping.array.initializer.rbrace.on.next.line.oc=새 줄에 ''}'', '']'' 배치
wrapping.method.brace.placement=메서드 내
wrapping.function.brace.placement=함수 내
wrapping.block.brace.placement=람다 내
wrapping.block.brace.placement.oc=블록 및 람다 내
wrapping.method.parameters.align.by.colons=콜론으로 정렬
wrapping.method.call.arguments.special.dictionary.pairs.treatment=특별 NSDictionary 초기화 처리
wrapping.indent.template.body.if.wrapped=줄 바꿈 시 템플릿 본문 들여쓰기
wrapping.new.line.after.colon=''\:'' 뒤에 새 줄
wrapping.new.line.before.colon=새 줄에 ''\:'' 배치
wrapping.new.line.never=Nunca
wrapping.new.line.always=Siempre
wrapping.new.line.if.long=긴 경우
align.dictionary.values=열에 사전 값 정렬
align.init.list.values=열에 이니셜라이저 목록 값 정렬
space.within.empty.code.blocks=빈 코드 중괄호
space.within.template=Ámbito <...>
space.within.empty.diamond=빈 <> 내
space.within.template.double.gt=템플릿에서 >> 연결 방지
space.within.bracket=배열 대괄호
space.within.array.initializer.braces=이니셜라이저 목록 중괄호
space.within.array.empty.initializer.braces=빈 이니셜라이저 목록 중괄호
space.within.array.initializer.braces.oc=컬렉션 리터럴 및 이니셜라이저 목록 중괄호
space.within.array.empty.initializer.braces.oc=빈 컬렉션 리터럴 및 이니셜라이저 목록 중괄호
space.within.function.declaration.parentheses=함수 선언 소괄호
space.within.empty.function.declaration.parentheses=빈 함수 선언 소괄호
space.within.function.call.parentheses=함수 호출 소괄호
space.within.empty.function.call.parentheses=빈 함수 호출 소괄호
space.within.lambda.capture.list.brackets=람다 캡처 목록 대괄호
space.within.empty.lambda.capture.list.brackets=빈 람다 캡처 목록 대괄호
space.within.catch.parentheses.oc=''@catch'' 소괄호
space.within.synchronized.parentheses.oc=''@synchronized'' 소괄호
space.within.protocols.brackets.oc=프로토콜 목록 대괄호
space.within.property.attributes.parentheses.oc=''@property'' 속성 소괄호
space.within.method.return.type.parentheses.oc=메서드 반환 유형 소괄호
space.within.method.parameter.type.parentheses.oc=메서드 매개변수 유형 소괄호
space.within.send.message.brackets.oc=메시지 전송 대괄호
space.within.template.declaration=클래스 선언 내
space.within.template.inst=템플릿 인스턴스화 내
space.within.class=클래스/구조 내
space.before.initialization.lists.colon=생성자 초기화 목록 콜론 앞
space.after.initialization.lists.colon=생성자 초기화 목록 콜론 뒤
space.before.lt.template=''<'' 앞
space.before.function.call.parentheses=함수 호출 소괄호
space.before.function.parentheses=함수 선언 소괄호
space.before.class.lbrace=클래스/구조 왼쪽 중괄호
space.before.method.lbrace=함수 왼쪽 중괄호
space.before.method.lbrace.oc=메서드/함수 왼쪽 중괄호
space.before.namespace.lbrace=네임스페이스 왼쪽 중괄호
space.before.init.list.lbrace=이니셜라이저 목록 왼쪽 중괄호
space.before.superclass.colon=기본 클래스 콜론 앞
space.before.pointer.in.declaration=선언 내 ''*'' 앞
space.before.reference.in.declaration=선언 내 ''\\&'' 앞
space.before.catch.parentheses.oc=''@catch'' 소괄호
space.before.try.lbrace.oc=''@try'' 왼쪽 중괄호
space.before.catch.lbrace.oc=''@catch'' 왼쪽 중괄호
space.before.finally.lbrace.oc=''@finally'' 왼쪽 중괄호
space.before.synchronized.lbrace.oc=''@synchronized'' 왼쪽 중괄호
space.before.catch.keyword.oc=''@catch'' 키워드
space.before.finally.keyword.oc=''@finally'' 키워드
space.before.synchronized.parentheses.oc=''@synchronized'' 소괄호
space.before.autorelease.pool.lbrace.oc=''@autoreleasepool'' 왼쪽 중괄호
space.before.category.parentheses.oc=카테고리 소괄호 앞
space.before.protocols.brackets.oc=프로토콜 목록 대괄호 앞
space.before.chained.send.message.oc=체인 메시지 전송 앞
space.before.property.attributes.parentheses.oc=''@property'' 속성 소괄호
space.before.dictionary.literal.colon=비트 필드 내 콜론 앞
space.before.dictionary.literal.colon.oc=사전 리터럴 ''key\:value'' 쌍 및 비트 필드 내 콜론 앞
space.after.superclass.colon=기본 클래스 콜론 뒤
space.after.structures.rbrace=구조 내 오른쪽 중괄호 뒤
space.after.pointer.in.declaration=선언 내 ''*'' 뒤
space.after.reference.in.declaration=선언 내 ''\\&'' 뒤
space.after.reference.in.rvalue=역참조 및 address-of 뒤
space.after.method.return.type.parentheses.oc=메서드 반환 유형 소괄호 뒤
space.after.method.parameter.type.parentheses.oc=메서드 매개변수 유형 소괄호 뒤
space.after.visibility.sign.in.method.declaration.oc=메서드 선언 내 +/- 뒤
space.after.colon.in.selector.oc=선택자 내 콜론 뒤
space.after.cup.in.blocks.oc=블록 내 ''^'' 뒤
space.after.dictionary.literal.colon=비트 필드 내 콜론 뒤
space.after.dictionary.literal.colon.oc=사전 리터럴 ''key\:value'' 쌍 및 비트 필드 내 콜론 뒤
space.between.adjacent.brackets=동일한 유형의 대괄호 사이에 공백 유지
space.between.operator.punctuator=''operator'' 키워드 및 구두점 사이
space.discharged.short.ternary.operator=''a ?\: b'' 내 ''?'' 및 ''\:'' 사이에 공백
space.around.relational.operators=관계형 연산자 (<, >, <\=, >\=, <\=>)
space.around.shift.operators=시프트 연산자(<<, >>)
space.around.lambda.arrow=반환 유형 내 ''->''
space.around.pm.operators=멤버를 가리키는 포인터 연산자(->, ., ->*, .*)
blank.lines.before.includes=include 앞\:
blank.lines.after.includes=include 뒤\:
blank.lines.around.classes=클래스/구조 주위\:
blank.lines.after.class.header=클래스/구조 헤더 뒤\:
blank.lines.around.member.variable=주변 영역\:
blank.lines.around.member.variable.oc=인스턴스 변수/필드 주위\:
blank.lines.around.global.variable=전역 변수 주위\:
blank.lines.around.function.declaration=함수 선언 주위\:
blank.lines.around.function.declaration.oc=메서드/함수 선언 주위\:
blank.lines.around.function.definition=함수 정의 주위\:
blank.lines.around.function.definition.oc=메서드/함수 정의 주위\:
blank.lines.before.function.body=함수 본문 앞\:
blank.lines.before.function.body.oc=메서드/함수 본문 앞\:
completion.press.keyboard.shortcut.for.all.methods.selectors=전체 메서드 선택자를 확인하려면 {0}을(를) 다시 누릅니다.
completion.press.keyboard.shortcut.to.filter.results.by.type=결과를 유형별로 필터링하려면 {0}을(를) 누릅니다.
completion.press.keyboard.shortcut.for.non.imported.symbols=가져오지 않은 심볼을 확인하려면 {0}을(를) 다시 누릅니다.
completion.press.keyboard.shortcut.for.global.symbols=전역 심볼을 확인하려면 {0}을(를) 다시 누릅니다.
completion.press.shortcut.again.for.non.public.members=public이 아닌 멤버인 경우 {0}을(를) {1, choice, 0\#|1\#다시 }누르세요
completion.press.shortcut.again.for.non.imported.members=가져오지 않은 멤버 및 NSObject 카테고리의 멤버인 경우 {0}을(를) {1, choice, 0\#|1\#다시 }누르세요
collapse.ivars=인스턴스 변수
collapse.synthesizes=통합 구문
collapse.localized.strings=로컬화된 문자열
collapse.multiline.comments=여러 줄 주석
collapse.block.expressions.oc=블록 및 람다
collapse.block.expressions=람다
collapse.conditionally.non-compiled=조건적으로 컴파일되지 않은 코드
collapse.template.param.list=템플릿 매개변수
collapse.new.line.before.lbrace=접힌 경우 ''{'' 앞에 새 줄 대신 공백
color.this.keywords=''this'' 키워드
color.preprocessor.directive=전처리기//지시문
color.preprocessor.path=전처리기//헤더 경로
color.format.string.token=문자열 인수 내 서식 지정자
color.conditionally.non-compiled=조건적으로 컴파일되지 않은 코드
color.macro.name=매크로 이름
color.macro.parameter=매크로 매개변수
color.global.variable=전역 변수
color.extern.variable=Extern 변수
color.struct.union.oc=구조체/열거형/공용체
color.struct.union=클래스/구조체/열거형/공용체
color.struct.field=구조체 필드
color.concept=컨셉
color.template.type=Tipo de plantilla
color.template.value=템플릿 값
color.namespace=Espacio de nombres
color.enum.const=열거형 상수
color.function.declaration=함수 선언
color.function.call=함수 호출
color.overloaded.operator=괄호 및 연산자//오버로드된 연산자
color.typedef=Typedef
color.label=라벨
color.dependent_code=종속 코드
color.deduction_guide=템플릿//추론 가이드
color.this.keywords.oc=''self'', ''super'', ''this'' 키워드
color.instance.variable.oc=인스턴스 변수
color.method.declaration.oc=메서드 선언
color.method.call.oc=메서드 호출
color.property.oc=프로퍼티
color.property.attribute.oc=프로퍼티 속성
color.class.reference.oc=클래스
color.protocol.reference.oc=프로토콜
color.generic.parameter.oc=제네릭 매개변수
indent.namespace=네임스페이스 멤버 들여쓰기
indent.interface.protocol=''@interface'' 및 ''@protocol''의 멤버 들여쓰기
indent.not.ivar=인스턴스 변수 목록 제외
indent.implementation=''@implementation''의 멤버 들여쓰기
indent.visibility.keywords=클래스/구조 내 가시성 키워드 들여쓰기
indent.block=람다 내 들여쓰기
indent.block.oc=블록 및 람다 내 들여쓰기
indent.c.struct=일반 구조의 멤버 들여쓰기
indent.class=클래스 멤버 들여쓰기
indent.class.oc=C++ 클래스 멤버 들여쓰기
indent.preprocessor.directive=전처리기 지시문 들여쓰기
indent.preprocessor.directive.as.code=코드 들여쓰기 준수
inline.handler.check.for.validness=유효성 검사 중
checkbox.block.comment.indent=블록 주석 내 새 줄 들여쓰기
override.implement.show.no.optional.members=선택적 멤버 표시(선택적 항목 없음)
override.implement.show.only.optional.members=선택적 멤버 표시(선택적 항목만)
override.implement.show.no.synthesized.accessors=통합된 접근자 표시(접근자 없음)
override.implement.show.only.synthesized.accessors=통합된 접근자 표시(접근자만)
override.implement.cpp.action.title=함수 재정의/구현
override.implement.cpp.action.name=함수 재정의...
override.implement.cpp.action.memberChooserTitle=재정의/구현할 함수 선택
override.implement.cpp.action.noMember={0}에 재정의/구현할 함수가 없습니다.
override.implement.cpp.action.noParent=재정의/구현할 함수가 없습니다.
override.implement.cpp.action.insertOverride="override" 속성 삽입(&I)
override.implement.cpp.action.showNonVirtual=가상이 아닌 함수 표시(&N)
override.implement.cpp.action.insertVirtualWithOverride="virtual"과 "override" 속성을 함께 삽입
implement.cpp.action.name=함수 구현...
implement.cpp.action.memberChooserTitle=구현할 함수 선택
implement.cpp.action.noMember={0}에 구현할 함수가 없습니다.
implement.cpp.action.noParent=구현할 함수가 없습니다.
changeSignature.usages.cantBeUnnamed=매개변수 {0}이(가) 사용 중이므로 이름을 변경할 수 없습니다.
changeSignature.usages.cantBeRemoved=매개변수 {0}이(가) 사용 중이므로 제거할 수 없습니다.
changeSignature.usages.cantConvertSelectorToFuncBlock=선택자 표현식을 함수/블록으로 변환할 수 없습니다.
changeSignature.usages.cantConvertToBlock=블록으로 변환할 수 없습니다.
changeSignature.usages.cantConvertLanguage={0} 코드 내 사용 위치를 변환할 수 없습니다.
changeSignature.usages.noUsagesFound=사용 위치를 찾을 수 없습니다.
changeSignature.usages.moreThan1Found=2개 이상의 사용 위치가 발견되었습니다.
changeSignature.usages.usageInsideFunction=사용 위치가 함수/메서드 내에 있습니다.
changeSignature.usages.functionHasSeveralDefinitions=함수 ''{0}''에 여러 개의 정의가 있습니다.
changeSignature.usages.atLeasTwoParams=이름이 ''{0}''인 매개변수가 2개 이상입니다.
changeSignature.usages.conflictsWithNewParameter={0}이(가) 새 매개변수와 충돌합니다.
changeSignature.usages.unrelatedSelector=이름이 같지만 관계없을 가능성이 있는 선택자의 이름이 변경됩니다.
changeSignature.usages.willConflictWith={0}이(가) {1}와(과) 충돌합니다.
changeSignature.usages.willConflictWithMethod={0}이(가) {1}의 메서드와 충돌합니다.
changeSignature.targetNotFound=캐럿은 함수, 메서드 또는 블록의 위치에 있어야 합니다.
changeSignature.dialog.containing.class=포함 클래스\:
changeSignature.dialog.callable.type=호출 가능 유형\:
changeSignature.parameter.selector.part=선택자 부문\:
rename.renameAssociatedFiles=관련 파일 이름도 변경하시겠어요?
rename.renameContainingFile=포함하는 파일 이름도 변경하시겠어요?
rename.renameAssociatedClass=관련 클래스/구조체 이름도 변경
find.existing.operators.progress.title=기존 연산자 검색 중
generate.definitions.intention.familyName=정의 생성
generate.definitions.intention.outsideText=정의 생성
generate.definitions.intention.inlineText=그 자리에서 정의 생성
generate.definitions.action.name=정의 생성...
generate.definitions.action.title=정의 생성
generate.definitions.action.memberChooserTitle=정의를 생성할 함수 선택
generate.definitions.action.noParent=정의를 생성할 함수가 없습니다.
generate.definitions.action.noMembers={0}에 정의를 생성할 함수가 없습니다.
generate.definitions.quickfix.inlineText=그 자리에서 {0}의 정의 생성
generate.definitions.quickfix.outsideText={0}의 정의 생성
generate.definitions.progress.text=기존 정의 검색 중...
generate.comparison.operators.action.title=비교 연산자 생성
generate.comparison.operators.action.title.eq=상등 연산자 생성
generate.comparison.operators.action.title.rel=관계 연산자 생성
generate.comparison.operators.member.chooser.title=사용할 필드 선택
generate.comparison.operators.as.member.option=클래스 멤버로서 생성(&M)
generate.comparison.operators.use.std.tie=std\:\:&tie 사용
generate.comparison.operators.additional.eq.option=\=\=와 함께 \!\= 생성(&W)
generate.comparison.operators.additional.eq.option.desc=\=\=와 함께 \!\= 생성
generate.comparison.operators.additional.rel.option=<와 함께 >, <\=, >\= 생성(&W)
generate.comparison.operators.additional.rel.option.desc=<와 함께 >, <\=, >\= 생성
generate.comparison.operators.usages.all.defined=모든 연산자가 이미 정의되어 있습니다.
generate.comparison.operators.usages.some.defined=일부 연산자가 이미 정의되어 있습니다.
generate.comparison.operators.usages.existing.text=기존 연산자
generate.getter.add.prefix=get/is 접두사를 getter에 추가
generate.setter.add.prefix=set 접두사를 setter에 추가
generate.stream.output.action.title=스트림 출력 연산자 생성
generate.stream.output.member.chooser.title=사용할 필드 선택
generate.stream.output.usages.all.defined=스트림 출력 연산자가 이미 정의되어 있습니다.
generate.stream.output.usages.existing.text=기존 연산자
generate.configurable.retain.parameters=initWith 내 객체 매개변수 보존...
generate.configurable.use.property.setters=initWith에서 프로퍼티 setter 사용...
generate.configurable.put.ivars=가능한 경우 ivars를 구현에 배치
generate.configurable.semicolon.after.method=구현 내 메서드 시그니처 뒤에 세미콜론
generate.configurable.use.nsinteger.and.cgfloat=변수 삽입에서 NSInteger 및 CGFloat 사용
generate.configurable.instance.variable.prefix=인스턴스 변수의 접두사\:
generate.configurable.instance.variable.suffix=인스턴스 변수의 접미사\:
generate.configurable.add.brief.tag=@brief 태그 추가
generate.configurable.const.volatile.placement=const/volatile 한정자 배치
generate.configurable.top.level.declarations.order=최상위 수준 선언 순서
generate.configurable.ivars.release.style=Ivars 릴리스 스타일(''dealloc''용)
generate.configurable.ivars.generation=프로퍼티용 ivar 선언 생성
generate.configurable.ivars.generation.always=항상 생성
generate.configurable.ivars.generation.never=생성 안 함
generate.configurable.ivars.generation.ask=확인하기
generate.configurable.tag.prefix.comments=줄 주석 내 태그 접두사
generate.configuralble.tag.prefix.block.comments=블록 주석 내 태그 접두사
generate.configurable.documentation.title=문서 주석
inspections.templateArguments.tooFew=템플릿 인수 개수가 너무 적습니다. 필요한 수는 {0}개입니다.
inspections.templateArguments.tooFewAtLeast=템플릿 인수 개수가 너무 적습니다. 필요한 수는 최소 {0}개입니다.
inspections.templateArguments.tooMany=템플릿 인수 개수가 너무 많습니다. 필요한 수는 {0}개입니다.
inspections.templateArguments.tooManyAtMost=템플릿 인수 개수가 너무 많습니다. 필요한 수는 최대 {0}개입니다.
inspections.templateArguments.valueInsteadOfType=유형 대신 값이 필요합니다.
inspections.templateArguments.typeInsteadOfValue=값 대신 유형이 필요합니다.
inspections.typeChecks.volatileConflict=volatile이 아닌 구조를 volatile 구조에 대입
inspections.duplicate.explicitInstantiation=명시적 인스턴스화 중복
inspections.typeChecks.neitherNumericNorPointer=유형 ''{0}''의 표현식이 숫자나 포인터가 아닙니다.
inspections.typeChecks.notNumeric=유형 ''{0}''의 표현식이 숫자가 아닙니다.
inspections.fileChecks.outOfProject=이 파일은 프로젝트 대상에 속하지 않으며 코드 분석 기능이 제대로 작동하지 않을 수 있습니다.
inspections.fileChecks.allContextsUnloaded=이 대상에서 사용할 수 있는 모든 해결 컨텍스트에 대해 색인 생성이 비활성화되어 있으므로, 코드 분석 기능이 제대로 작동하지 않을 수 있습니다.
inspections.fileChecks.sourceTooLarge=파일 크기({0})가 {1}에 대해 구성된 한도({1})를 초과합니다. 코드 분석 기능을 이용할 수 없습니다.
inspections.fileChecks.headerTooLarge={1} ({2})에 대해 구성된 한도를 초과하는 길이({0})의 인라인 헤더({3})가 파일에 포함되어 있습니다. 헤더가 분석되지 않습니다.
inspections.fileChecks.headerTooLargePlatform=구성된 한도{1})를 초과하는 길이({0})의 인라인 헤더({2})가 파일에 포함되어 있습니다. 헤더가 분석되지 않습니다.
checkbox.allow.import.in.completion=코드 완성에서 자동 가져오기
group.option.predefine=.m의 .h/Import에서 사전 선언
group.option.import=.h에서 가져오기
progressbar.long.resolve.description=해결 작업에 더 많은 시간이 필요합니다.\n취소하면 해결에 의존하는 에디터 액션을 사용할 수 없게 됩니다.
action.invalid.title=올바르지 않음
change.signature.convert.action={0}(으)로 변환할 구현 선택
header.source.looking.for.the.best.file=연결된 파일 검색 중
resolve.contexts.select.automatically=자동 선택
oc.inlay.hints.blacklist.pattern.explanation=<html>메서드 힌트를 비활성화하려면 다음과 같은 적절한 패턴을 사용하세요. <p><code><b>(*info)<b></code> - 매개변수 이름이 info로 끝나는 단일 매개변수 메서드<br><code><b>(key, value)<b></code> - 키 및 값 매개변수를 가진 메서드<br><code><b>*\:\:put(key, value)<b></code> - 키 및 값 매개변수를 가진 put 메서드<br></p></html>
oc.inlay.hints.show.hints.for.enum.constants=열거형 상수의 힌트 표시
oc.inlay.hints.show.hints.for.constructors=생성자 표현식의 힌트 표시
oc.inlay.hints.show.amp.nonconst.references=상수가 아닌 참조에 대해 ''\\&'' 표시
include.cpp.message=''\#include <C++>''는 C++에 관심이 있는 개발자를 위한 포괄적이며 다양성을 지닌 글로벌 커뮤니티입니다.
include.cpp.url=https\://www.includecpp.org/
include.cpp.intention.text=더 알아보기
usage.properties.search.message.delete={0}도 삭제하시겠어요?
usage.properties.search.message.find.usages={0}의 사용 위치도 검색하시겠어요?
usage.properties.search.title=프로퍼티 검색
usage.instance.variables.search.message.delete={0}도 삭제하시겠어요?
usage.instance.variables.search.message.find.usages={0} 의 사용 위치도 검색하시겠어요?
usage.instance.variables.search.title=인스턴스 변수 검색
usage.method.search.title=메서드 검색
usage.method.search.message.delete={0}\n\n기본 {1}도 삭제하시겠어요?
usage.method.search.message.find.usages={0}\n\n기본 {1}의 사용 위치도 검색하시겠어요?
usage.delete.out.of.project.title=경고
usage.delete.out.of.project.message={0} 리팩터링을 계속 진행하시겠어요?
usage.overrides.message={0}이(가) {2}에서 {1}을(를) 재정의합니다.
usage.overrides.out.of.project.message={0}이(가) 프로젝트 외부의 {2}에서 {1}을(를) 재정의합니다.
usage.include.property.checkbox.text={0} 포함
usage.include.ivar.checkbox.text={0} 포함
usage.include.derived.classes.checkbox.text=파생 클래스 포함
switch.header.source.popup.title=헤더/소스로 이동
switch.header.source.no.results=관계없는 파일
command.line.parser.unknown.exception=명령줄 구문 분석 중 문제가 발생했습니다.
command.line.parser.cancellation.exception=명령줄 구문 분석이 중단되었습니다.
command.line.parser.invalid.exception=명령줄을 분석할 수 없습니다.\n{0}\n옵션 \#{1} 내 오류\: ''{2}''
configurable.OCGenerateCodeConfigurable.display.name=코드 생성
abstract.extract.dialog.class.name={0} 이름\:
abstract.extract.dialog.unable.create.file=파일을 생성할 수 없습니다.
browse.include.hierarchy.action=Jerarquía de importación
escalate.visibility=가시성 에스컬레이션
escalate.visibility.description=다음 멤버의 가시성을 에스컬레이션하시겠어요?
dump.file.symbol.stats=파일 심볼 통계
dump.symbol.stats=심볼 통계
highlighter.change.file.length.limit=최대 파일 길이 변경
highlighter.change.file.length.limit.input={0} 파일의 새로운 최대 길이를 문자로 입력하세요.
highlighter.max.file.length.title=최대 파일 길이
if.responds.to.surround.error.hint=선택한 코드에 메시지 전송 표현식이 없습니다.
quickfixes.implement.missing.getter=누락된 getter 메서드 구현
quickfixes.implement.missing.setter=누락된 setter 메서드 구현
quickfixes.import.symbol=심볼 가져오기
quickfixes.make.function.virtual=함수를 가상으로 설정
quickfixes.make.property.dynamic={0}을(를) @dynamic으로 설정
quickfixes.synthesize=통합 {0}
move.dialog.move.members.to.class=멤버를 클래스로 이동(기존 또는 신규)\:
move.dialog.move.declarations.to.file=선언을 파일로 이동(기존 또는 신규)\:
move.dialog.put.to.namespace=네임스페이스에 배치(기존 또는 신규)\:
move.dialog.move.declarations=선언 이동
move.dialog.destination=대상\:
move.dialog.target.file.does.not.exist=대상 파일 ''{0}''이(가) 아직 없습니다.
move.dialog.create.new.file=새 파일 작성
move.dialog.create.new.class=새 클래스 생성
move.processor.skip=건너뛰기
push.down.members.dialog={0}의 멤버를 아래로 이동\:
push.down.dialog.searching.inheritors=상속자 검색 중
resolve.show.related.contexts=관련 컨텍스트만 표시
resolve.show.all.contexts=모든 컨텍스트 표시…
symbol.table.activity.building.symbols=심볼 빌드 중...
symbol.table.activity.loading.symbols=심볼 로드 중...
symbol.table.activity.updating.symbols=심볼 업데이트 중...
symbol.table.activity.loading.header.maps=헤더 맵 로드 중...
symbol.table.dump.stats.action={0}에 쓰기된 통계
action.CIDR.DebugDumpBuildingSymbols.text=C/C++\: 심볼 빌드 상태 덤프
action.CIDR.Lang.Format.Extractor.text=코드 서식 추출
action.CIDR.Lang.DropPsiForOpenedFiles.text=열린 파일 PSI 삭제
action.CIDR.Lang.RemoveBodiesAndComments.text=함수 본문 및 주석 제거
action.CIDR.Lang.DumpFileSymbolStats.text=파일 심볼 통계 덤프
action.CIDR.Lang.DumpSymbolStats.text=일반 심볼 통계 덤프
action.CIDR.Lang.CompactSymbols.text=심볼 업데이트/컴팩트
action.CIDR.Lang.ImportsHierarchy.text=Jerarquía de importación
action.CIDR.Lang.ObjC.GenerateSharedInstance.text=+sharedInstance
action.CIDR.Lang.ObjC.GenerateSharedInstance.description=공유 인스턴스 생성
action.CIDR.Lang.ObjC.GenerateDescription.text=-설명...
action.CIDR.Lang.ObjC.GenerateDescription.description=클래스 멤버에서 설명 생성(-D)
action.CIDR.Lang.ObjC.GenerateIsEqualAndHash.text=-isEqual\: 및 -hash...
action.CIDR.Lang.ObjC.GenerateIsEqualAndHash.description=클래스 멤버에서 -isEqual\: 및  -hash 생성
action.CIDR.Lang.ObjC.GenerateCopy.text=-copyWithZone\:...
action.CIDR.Lang.ObjC.GenerateCopy.description=클래스 멤버에서 -copyWithZone\: 생성
action.CIDR.Lang.ObjC.GenerateEncode.text=-init/encodeWithCoder\:...
action.CIDR.Lang.ObjC.GenerateEncode.description=클래스 멤버에서 -encodeWithCoder\: 및 initWithCoder\: 생성
action.CIDR.Lang.ObjC.GenerateInitWith.text=-initWith...
action.CIDR.Lang.ObjC.GenerateInitWith.description=클래스 멤버에서 -initWith... 생성
action.CIDR.Lang.Cpp.GenerateDefinitions.text=정의 생성...
action.CIDR.Lang.Cpp.GenerateDefinitions.description=정의 생성
action.CIDR.Lang.Cpp.GenerateStreamOutputOperator.text=스트림 출력 연산자
action.CIDR.Lang.Cpp.GenerateStreamOutputOperator.description=스트림 출력 연산자 생성
action.CIDR.Lang.Cpp.GenerateRelationalOperators.text=관계형 연산자
action.CIDR.Lang.Cpp.GenerateRelationalOperators.description=관계 연산자 생성
action.CIDR.Lang.Cpp.GenerateEqualityOperators.text=상등 연산자
action.CIDR.Lang.Cpp.GenerateEqualityOperators.description=상등 연산자 생성
action.CIDR.Lang.Cpp.GenerateGetterAndSetter.text=Getter 및 Setter
action.CIDR.Lang.Cpp.GenerateGetterAndSetter.description=필드에 대한 getter 및 setter 함수 생성
action.CIDR.Lang.Cpp.GenerateSetter.text=Setter
action.CIDR.Lang.Cpp.GenerateSetter.description=필드에 대한 setter 함수 생성
action.CIDR.Lang.Cpp.GenerateGetter.text=Getter
action.CIDR.Lang.Cpp.GenerateGetter.description=필드에 대한 getter 함수 생성
action.CIDR.Lang.Cpp.GenerateDestructor.text=소멸자
action.CIDR.Lang.Cpp.GenerateDestructor.description=소멸자 생성
action.CIDR.Lang.Cpp.GenerateConstructor.text=생성자
action.CIDR.Lang.Cpp.GenerateConstructor.description=클래스 멤버에서 생성자 생성
action.CIDR.Lang.ObjC.Synthesize.text=@synthesize...
action.CIDR.Lang.ObjC.Synthesize.description=합성 및 인스턴스 변수 생성(선택 사항)
action.CIDR.Lang.ObjC.DeclareMembers.text=멤버 선언...
action.CIDR.Lang.ObjC.DeclareMembers.description=인터페이스 또는 개인 카테고리에서 클래스 멤버 선언
action.CIDR.Lang.ObjC.ConvertToIvar.text=인스턴스 변수로 변환...
action.CIDR.Lang.ObjC.ConvertToIvar.description=프로퍼티를 인스턴스 변수로 변환
action.CIDR.Lang.ObjC.ConvertToProperty.text=프로퍼티로 변환...
action.CIDR.Lang.ObjC.ConvertToProperty.description=인스턴스 변수를 프로퍼티로 변환
action.CIDR.Lang.ObjC.ConvertToBlock.text=블록으로 변환...
action.CIDR.Lang.ObjC.ConvertToBlock.description=블록으로 변환
action.CIDR.Lang.ObjC.ConvertToFunction.text=함수로 변환...
action.CIDR.Lang.ObjC.ConvertToFunction.description=함수로 변환
action.CIDR.Lang.ObjC.ConvertToMethod.text=메서드로 변환...
action.CIDR.Lang.ObjC.ConvertToMethod.description=메서드로 변환
action.CIDR.Lang.ObjC.ExtractCategory.text=카테고리...
action.CIDR.Lang.ObjC.ExtractCategory.description=새 카테고리로 멤버 추출
action.CIDR.Lang.ObjC.ExtractProtocol.text=프로토콜...
action.CIDR.Lang.ObjC.ExtractProtocol.description=새 프로토콜로 멤버 추출
action.CIDR.Lang.ObjC.ExtractSubclass.text=하위 클래스...
action.CIDR.Lang.ObjC.ExtractSubclass.description=새 하위 클래스로 멤버 추출
action.CIDR.Lang.ObjC.ExtractBlock.text=블록 매개변수...
action.CIDR.Lang.ObjC.ExtractBlock.description=블록 매개변수 추출
action.CIDR.Lang.Cpp.ExtractLambda.text=람다 매개변수...
action.CIDR.Lang.Cpp.ExtractLambda.description=람다 매개변수 추출
action.CIDR.Lang.IntroduceTypedef.text=Typedef...
action.CIDR.Lang.IntroduceTypedef.description=Typedef 삽입
action.CIDR.Lang.IntroduceDefine.text=정의...
action.CIDR.Lang.IntroduceDefine.description=정의 삽입
action.CIDR.Lang.IntroduceParameter.text=Parámetro...
action.CIDR.Lang.IntroduceParameter.description=매개변수 삽입
action.CIDR.Lang.ObjC.IntroduceProperty.text=프로퍼티...
action.CIDR.Lang.ObjC.IntroduceProperty.description=프로퍼티 삽입
action.CIDR.Lang.ObjC.IntroduceIvar.text=인스턴스 변수...
action.CIDR.Lang.ObjC.IntroduceIvar.description=인스턴스 변수 삽입
action.CIDR.Lang.IntroduceConstant.text=상수...
action.CIDR.Lang.IntroduceConstant.description=상수 삽입
action.CIDR.Lang.IntroduceVariable.text=변수...
action.CIDR.Lang.IntroduceVariable.description=변수 삽입
action.CIDR.Lang.SwitchHeaderSourceDebug.text=헤더/소스 디버그
action.CIDR.Lang.SwitchHeaderSource.text=Cabecera/origen
action.CIDR.Lang.Wrap.By.Pragma.Region=\#pragma region...endregion
action.CIDR.Lang.goto.definition.declaration=정의/선언으로 이동
action.CIDR.Lang.goto.super.definition=상위 정의(&U)
action.CIDR.Lang.goto.definition=정의(&E)
loading.module.maps=모듈 맵 로드 중...
saving.module.maps=모듈 맵 저장 중...
building.module.maps=모듈 맵 빌드 중
processing.module.maps=모듈 맵 처리 중
loading.headers.search.roots=헤더 검색 루트 로드 중
goto.definition.settings.title=선언 또는 사용 위치로 이동
goto.definition.settings.toggle.assoc.title=사전 선언된 심볼에서 호출된 경우\:
goto.definition.settings.toggle.assoc.on=사전 선언으로 건너뛰기
goto.definition.settings.toggle.assoc.off=사용 위치 팝업 표시
goto.symbol=이동
goto.symbol.ellipsis=이동...
goto.related.symbol.name1=정의로 이동
goto.related.symbol.name2=''{1}''의 {0}(으)로 이동
goto.related.symbol.name3={0}의 사전 정의로 이동
goto.related.symbol.name4={0}의 정의로 이동
goto.related.symbol.name5={0}의 선언으로 이동
goto.related.symbol.name6=관련 {0}(으)로 이동
goto.super.type.name1={1} 내 상위 {0}(으)로 이동
goto.super.type.name2={0} 내 기본 함수로 이동
goto.super.type.name3=상위 유형으로 이동
goto.subclass=하위 클래스로 이동
goto.overridden=재정의된 {0} (으)로 이동
goto.overridden.methods=재정의된 메서드로 이동
goto.overridden.functions=재정의된 함수로 이동
saving.symbols=심볼 저장 중...
progress.text.updating.symbols=심볼 업데이트 중
inspection.message.function.not.implemented={0}이(가) 구현되지 않았습니다
command.name.add.parameter.to.constructor=생성자에 매개변수 추가
dialog.title.select.constructor.to.update=업데이트할 생성자 선택
command.name.add.parameter.to.initwith=매개변수를 ''initWith...''에 추가
dialog.title.select.initwith.method.to.update=업데이트할 ''initWith...'' 메서드 선택
dialog.message.objc.do.you.want.to.generate.instance.variables.for.chosen.properties=선택한 프로퍼티에 대한 인스턴스 변수를 생성하시겠어요?
dialog.title.objc.generate.instance.variables=인스턴스 변수 생성
dialog.message.do.you.want.to.move.class.member.definitions=클래스 멤버 정의로 이동하시겠어요?
dialog.title.move.refactoring.adding.imports=import 문 추가 중
filetype.asm.description=어셈블리 언어 파일
filetype.qt.ui.designer.form.description=Qt UI Designer 양식
statement.name=구문
expression.name=표현식
declaration.name=선언
surround.with.block.expression.template=^{ return expr; }
surround.with.do.while.template=do/while
surround.with.for.template=for
surround.with.while.template=while
surround.with.if.else.template=if/else
surround.with.if.template=if
surround.with.not.expr.template=\!(expr)
surround.with.parenthesis.template=(expr)
surround.with.if.respondsToSelector.template=if respondsToSelector
refactoring.dialog.no.target.file.selected=대상 파일이 선택되지 않았습니다
refactoring.dialog.file.name.invalid=파일 이름이 잘못되었습니다
refactoring.dialog.file.not.located.inside.project=파일 "{0}"이(가) 프로젝트 내에 없습니다
refactoring.dialog.source.and.target.should.be.different=원본 및 대상은 서로 달라야 합니다
refactoring.dialog.target.namespace.name.invalid=대상 네임스페이스 이름이 잘못되었습니다
refactoring.dialog.target.ns.is.part.of.qualified.ns=대상 네임스페이스가 정규화된 네임스페이스에 속해 있습니다
refactoring.dialog.can.t.move.to.itself={0}을(를) 자신으로 이동할 수 없습니다
inspection.name.is.never.used={0} 은(는) 전혀 사용되지 않습니다
element.description.provider.symbol.of.parent={1}의 {0}
element.description.provider.predefinition.of={0}의 사전 정의
qdoc.definition=정의\:
qdoc.declared.in=다음에서 선언됨\:
qdoc.replacement=대체\:
qdoc.description.copied.from=다음에서 복사된 설명\:
formatter.item.allman.braces=Allman 중괄호
formatter.item.kr.braces=K\\&R 중괄호
formatter.item.whitesmiths.braces=Whitesmiths 중괄호
formatter.item.stroustrup.braces=Stroustrup
formatter.title.code.generation=코드 생성
settings.title.objective.c.class.order=Objective-C 클래스 순서
settings.prefix.must.start.with.letter.or.symbol=접두사는 문자 또는 ''_'' 기호로 시작해야 합니다
settings.hint.choice.prefix.suffix.must.contain.only.letters.or.digits.or.symbols={0, choice, 0\#접두사|1\#접미사}는 문자나 숫자, ''_'' 기호만 포함해야 합니다
settings.title.naming.convention=이름 지정 규칙
settings.naming.convention=이름 지정 규칙
resolve.contexts.all.contexts=모든 프로젝트 컨텍스트가 나열되었습니다
resolve.contexts.available=사용 가능한 해결 컨텍스트
resolve.contexts.current.file=현재 {0} 파일이 ''{1}''의 컨텍스트에서 해결되었습니다
resolve.contexts.file.resolved.in=파일이 선택한 컨텍스트에서 해결됩니다
resolve.contexts.loading=해결 컨텍스트 로드 중...
resolve.contexts.name=해결 컨텍스트
resolve.contexts.no.context=<컨텍스트 없음>
resolve.contexts.prefix.no.context=현재 파일에 대한 해결 컨텍스트가 없습니다
resolve.contexts.prefix=컨텍스트
resolve.contexts.unindexed.contexts=색인 생성되지 않은 컨텍스트
hmap.description={0} 헤더 맵
search.scope.project.source.files=프로젝트 소스 파일
search.scope.project.non.source.files=프로젝트 비 소스 파일
header.search.root.custom.headers=사용자 지정 헤더
header.search.root.frameworks=프레임워크
header.search.root.explicit.frameworks=명시적 프레임워크
find.usages.unknown.type=알 수 없음
switch.header.source.separator.headers=헤더
switch.header.source.separator.sources=소스
new.definition.dialog.title.create.new.constructor=새 생성자 생성
new.definition.dialog.title.create.new.function=새 함수 생성
new.definition.button.create=생성
new.definition.dialog.title.create.new.method=새 메서드 생성
action.context.file.name=파일 ''{0}''
oc.declare.members.implementation.undeclared=구현(선언되지 않음)
dialog.message.some.members.are.defined=일부가 정의되어 있습니다
dialog.message.all.members.are.defined=모두 정의되어 있습니다
tab.title.existing=Existente
label.copy.depth=깊이
copy.depths.option.deep=깊음
copy.depths.option.shallow=얕음
button.generate=생성
other.categories.and.inherited.members=기타 카테고리 및 상속된 멤버
action.show.inherited.text=상속된 항목 표시
action.show.inherited.members.members.in.other.categories.description=상속된 멤버 및 다른 카테고리의 멤버를 표시합니다
polymorphic.call=(다형성 호출)
symbol.kind.name.uppercase.type=유형
symbol.kind.name.uppercase.enum.constant=열거형 상수
symbol.kind.name.uppercase.field=필드
symbol.kind.name.uppercase.function=함수
symbol.kind.name.uppercase.constructor=생성자
symbol.kind.name.uppercase.parameter=Parámetro
symbol.kind.name.uppercase.global.variable=전역 변수
symbol.kind.name.uppercase.built.in.symbol=기본 제공 심볼
symbol.kind.name.uppercase.local.variable=지역 변수
symbol.kind.name.uppercase.exception.variable=예외 변수
symbol.kind.name.uppercase.implementation=구현
symbol.kind.name.uppercase.instance.variable=인스턴스 변수
symbol.kind.name.uppercase.interface=인터페이스
symbol.kind.name.uppercase.label=라벨
symbol.kind.name.uppercase.macro=매크로
symbol.kind.name.uppercase.macro.parameter=매크로 매개변수
symbol.kind.name.uppercase.import=Import 문
symbol.kind.name.uppercase.compatibility.alias=호환성 별칭
symbol.kind.name.uppercase.method1=메서드
symbol.kind.name.uppercase.block=블록
symbol.kind.name.uppercase.lambda=람다
symbol.kind.name.uppercase.property=프로퍼티
symbol.kind.name.uppercase.synthesize.statement=통합 구문
symbol.kind.name.uppercase.protocol=프로토콜
symbol.kind.name.uppercase.struct=구조체
symbol.kind.name.uppercase.union=공용체
symbol.kind.name.uppercase.enum=열거형
symbol.kind.name.uppercase.namespace=네임스페이스
symbol.kind.name.uppercase.type.parameter=유형 매개변수
symbol.kind.name.uppercase.template.parameter=템플릿 매개변수
symbol.kind.name.uppercase.using=Using
symbol.kind.name.uppercase.localized.string=로컬화된 문자열
symbol.kind.name.uppercase.expression=표현식
symbol.kind.name.uppercase.generic.parameter=제네릭 매개변수
symbol.kind.name.uppercase.concept=컨셉
symbol.kind.name.uppercase.keyword=키워드
symbol.kind.name.uppercase.file=파일
symbol.kind.name.uppercase.folder=폴더
symbol.kind.name.uppercase.default=심볼
symbol.kind.name.lowercase.type=유형
symbol.kind.name.lowercase.enum.constant=열거형 상수
symbol.kind.name.lowercase.field=필드
symbol.kind.name.lowercase.function=함수
symbol.kind.name.lowercase.constructor=생성자
symbol.kind.name.lowercase.parameter=Parámetro
symbol.kind.name.lowercase.global.variable=전역 변수
symbol.kind.name.lowercase.built.in.symbol=기본 제공 심볼
symbol.kind.name.lowercase.local.variable=지역 변수
symbol.kind.name.lowercase.exception.variable=예외 변수
symbol.kind.name.lowercase.implementation=구현
symbol.kind.name.lowercase.instance.variable=인스턴스 변수
symbol.kind.name.lowercase.interface=인터페이스
symbol.kind.name.lowercase.label=라벨
symbol.kind.name.lowercase.macro=매크로
symbol.kind.name.lowercase.macro.parameter=매크로 매개변수
symbol.kind.name.lowercase.import=import 문
symbol.kind.name.lowercase.compatibility.alias=호환성 별칭
symbol.kind.name.lowercase.method1=메서드
symbol.kind.name.lowercase.block=블록
symbol.kind.name.lowercase.lambda=람다
symbol.kind.name.lowercase.property=프로퍼티
symbol.kind.name.lowercase.synthesize.statement=통합 구문
symbol.kind.name.lowercase.protocol=프로토콜
symbol.kind.name.lowercase.namespace=네임스페이스
symbol.kind.name.lowercase.type.parameter=유형 매개변수
symbol.kind.name.lowercase.template.parameter=템플릿 매개변수
symbol.kind.name.lowercase.using=using
symbol.kind.name.lowercase.localized.string=로컬화된 문자열
symbol.kind.name.lowercase.expression=표현식
symbol.kind.name.lowercase.generic.parameter=제네릭 매개변수
symbol.kind.name.lowercase.concept=컨셉
symbol.kind.name.lowercase.keyword=키워드
symbol.kind.name.lowercase.file=파일
symbol.kind.name.lowercase.folder=폴더
symbol.kind.name.lowercase.default=심볼
command.name.codestylesettings.extractor=코드 스타일 설정 추출기
symbol.kind.name.uppercase.destructor=소멸자
symbol.kind.name.lowercase.destructor=소멸자
popup.title.element.found.singular={0}({1} 요소 발견)
popup.title.elements.found.plural={0}({1} 요소 발견)
resource.language.unknown=알 수 없음
color.doxygen.comment=주석//Doxygen//텍스트
color.doxygen.tag=주석//Doxygen//태그
color.doxygen.tag.value=주석//Doxygen//태그 값
oc.inlay.hints.type.name=타입
oc.inlay.hints.type.for.variables=변수
oc.inlay.hints.type.for.lambdas=람다
oc.inlay.hints.type.deduced.return.types=추론된 반환 타입
oc.inlay.hints.type.main.checkbox=다음에 대한 타입 힌트 표시:
completion.no.suggestions.press.for.not.imported=제안이 없습니다. 가져오지 않은 멤버를 입력하려면 {0}을(를) 누르세요
color.std.initializer.list.oc=괄호 및 연산자//이니셜라이저 목록
action.CIDR.Lang.goto.definition.declaration.tooltip=정의/선언으로 이동
goto.related.symbol.name1.tooltip=정의로 이동
goto.related.symbol.name2.tooltip=''{1}''의 {0}(으)로 이동
goto.related.symbol.name3.tooltip={0}의 사전 정의로 이동
goto.related.symbol.name4.tooltip={0}의 정의로 이동
goto.related.symbol.name5.tooltip={0}의 선언으로 이동
goto.related.symbol.name6.tooltip=관련 {0}(으)로 이동
goto.subclass.title=하위 클래스로 이동
goto.overridden.title=재정의된 {0}(으)로 이동
goto.overridden.methods.title=재정의된 메서드로 이동
goto.overridden.functions.title=재정의된 함수로 이동
oc.inlay.hints.show.settings=힌트 설정…
cache.downloader.updating.title=캐시 업데이트
cache.downloader.not.now.option=캐시를 로컬에 빌드
cache.downloader.download.option=Descargar
cache.downloader.always.download.option=항상 다운로드
oc.inlay.hints.type.obvious.types=명백한 타입
checkbox.local.files.with.quotes=따옴표를 사용하여 로컬 파일 자동 가져오기
popup.title.element.found.so.far.singular={0}(지금까지 {1}개 요소 발견)
popup.title.elements.found.so.far.plural={0}(지금까지 {1}개 요소 발견)
space.before.colon.in.foreach='for' 콜론 앞에
space.after.colon.in.foreach='for' 콜론 뒤에
action.CIDR.Lang.QualifiedNames.text=정규화된 이름 그룹화
action.CIDR.Lang.QualifiedNames.description=정규화된 이름을 그룹화합니다
checkbox.try.to.sort=include 정렬
rename.searchForMacros=전역 범위에서 매크로 ''{0}''(이름이 변경된 요소 포함)의 사용 위치를 검색하겠어요?
checkbox.try.to.sort.tooltip=.clang-format 코드 스타일을 통해 활성화
oc.inlay.hints.show.array.indices=배열 색인에 대한 힌트 표시
oc.inlay.hints.disable.function={0, choice, 0#메서드|1#함수|2#생성자} ''{1}''에 대한 힌트 비활성화
title.structured.binding.list.group=구조화된 바인딩 목록
space.within.structured.binding.list.brackets=구조화된 바인딩 목록 대괄호
inlay.parameters.oc.clangd.namehints.enums=열거형 상수의 힌트 표시
inlay.parameters.oc.clangd.namehints.construct.expr=다양한 초기화 형태의 생성자 표현식에 대한 힌트 표시(...) , {...}, ... .
inlay.parameters.oc.clangd.namehints.non.const.references=매개변수 이름 대신 '\\&'를 표시합니다. 이 옵션은 두 가지 사이에서 전환하지만, '\\&'는 항상 표시되며 매개변수 이름은 예를 들어 앞선 주석 때문에 숨겨질 수도 있습니다.
inlay.parameters.oc.clangd.namehints.array.indices=배열 색인을 표시합니다. 지정된 이니셜라이저는 힌트가 표시되지 않습니다.
inlay.oc.type.hints.variables=추정된 타입의 변수에 대한 힌트 표시
inlay.oc.type.hints.lambdas=Lamda의 호출-연산자 서명에 대한 힌트 표시
inlay.oc.type.hints.return.types=함수의 유추된 반환 타입에 대한 힌트를 표시합니다. 생략된 Lamda 반환 타입에도 영향을 줍니다
inlay.oc.type.hints.obvious.types=명확한 타입에 대한 힌트를 표시합니다. 여기에는 생성자 같은 표현식, 명시적 형 변환, 새로운 표현식, 범위가 있는 열거형 값, 평문 정수 타입이 포함됩니다
symbol.table.activity.collecting.files=파일 수집 중…
qdoc.offset=오프셋
qdoc.size=크기
qdoc.padding=패딩
qdoc.value=값
qdoc.value.range=값 범위
qdoc.possible.values=가능한 값
qdoc.byte.0={0, choice, 1#바이트|2#바이트}
qdoc.copy=복사
qdoc.move=이동
qdoc.construction=생성
qdoc.assignment=대입
oc.inlay.hints.type.deduced.parameter.types=추론된 매개변수 유형
inlay.oc.type.hints.parameter.types=추론된 매개변수 유형에 대한 힌트 표시
symbol.kind.name.lowercase.struct=구조체
symbol.kind.name.lowercase.union=공용체
symbol.kind.name.lowercase.enum=열거형
symbol.kind.name.uppercase.class=클래스
symbol.kind.name.lowercase.class=클래스
changeSignature.explicit.constructor.checkbox=명시적인 생성자
refactoring.changeSignature.destructor=소멸자는 리팩터링될 수 없습니다
add.to.project.intention.family=프로젝트에 추가
qdoc.on.cppreference=cppreference.com의 "{0}"
color.keyword=키워드//키워드
color.local.variable=변수//지역
icon.tooltip.const.decl=상수 {0}
space.before.export.lbrace=내보내기 왼쪽 중괄호
