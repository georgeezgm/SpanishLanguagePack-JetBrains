GuiceClassAnnotator.popup.title=이동할 표현식 선택
GuiceClassAnnotator.popup.tooltip.text=Guice 바인드 표현식으로 이동
ImplicitSubclassInspection.display.forMethod.annotated=@Transactional 메서드는 private일 수 없습니다
binding.annotation.without.inject.display.name=@Inject 없는 바인딩 어노테이션
binding.annotation.without.inject.problem.descriptor=@Inject가 선언되지 않은 바인딩 어노테이션 \#ref \#loc
class.provided=제공된 클래스\:
conflicting.annotations.display.name=충돌하는 Guice 어노테이션
conflicting.annotations.problem.descriptor=어노테이션 \#ref이(가) 선언된 다른 어노테이션과 충돌합니다 \#loc
delete.binding=바인딩 삭제
group.GuiceActionGroup.description=Google Guice 구성 요소
group.GuiceActionGroup.text=Google Guice
group.guice.inspections.name=Guice
guice.intentions=Guice
gutter.choose.injected.point=삽입점 선택
gutter.navigate.to.injection.point=주입점으로 이동
interception.annotation.without.runtime.retention.display.name=런타임 보존 기간이 없는 인터셉션 어노테이션
interception.annotation.without.runtime.retention.problem.descriptor=어노테이션 \#ref에 런타임 보존 기간이 없습니다 \#loc
invalid.implemented.by.display.name=잘못된 @ImplementedBy 어노테이션
invalid.implemented.by.problem.descriptor=클래스 \#ref이(가) 어노테이션 추가된 클래스를 구현하지 않습니다 \#loc
invalid.provided.by.display.name=잘못된 @ProvidedBy 어노테이션
invalid.provided.by.problem.descriptor=클래스 \#ref이(가) 어노테이션 추가된 클래스를 제공하지 않습니다 \#loc
invalid.request.parameters.display.name=@RequestParameters 매개변수의 올바르지 않은 타입
invalid.request.parameters.problem.descriptor=\#ref(으)로 라벨 지정된 변수 또는 매개변수는 Map<String, String[]> 타입을 가져야 합니다 \#loc
make.injection.mandatory=삽입을 필수로 만들기
make.injection.optional=삽입을 선택 사항으로 만들기
move.binding.scope.to.class.family.name=클래스로 바인딩 범위 이동
move.binding.scope.to.class.text=클래스로 바인딩 범위 이동
move.binding.to.class.family.name=클래스로 바인딩 이동
move.binding.to.class.text=클래스로 바인딩 클래스 이동
move.provider.binding.to.class.family.name=공급자 바인딩을 클래스로 이동
move.provider.binding.to.class.text=공급자 바인딩을 클래스로 이동
multiple.binding.annotations.display.name=변수에 있는 여러 개의 바인딩 어노테이션
multiple.binding.annotations.problem.descriptor=변수 \#ref에 여러 개의 바인딩 어노테이션이 있습니다 \#loc
multiple.injected.constructors.for.class.display.name=클래스에 대한 여러 개의 @Inject 생성자
multiple.injected.constructors.for.class.problem.descriptor=클래스 \#ref에 여러 개의 @Inject 생성자가 있습니다 \#loc
new.guice.binding.annotation.action.name=Guice 바인딩 어노테이션 생성
new.guice.binding.annotation.error=Guice 바인딩 어노테이션을 생성할 수 없습니다
new.guice.binding.annotation.name=Guice 바인딩 어노테이션 생성 중\: {0}.{1}
new.guice.method.interceptor.action.name=Guice 메서드 인터셉터 생성
new.guice.method.interceptor.error=Guice 메서드 인터셉터를 생성할 수 없습니다
new.guice.method.interceptor.name=Guice 메서드 인터셉터 생성 중\: {0}.{1}
new.guice.module.action.name=Guice 모듈 생성
new.guice.module.error=Guice 모듈을 생성할 수 없습니다
new.guice.module.name=Guice 모듈 생성 중\: {0}.{1}
new.guice.provider=새 Guice 공급자
new.guice.provider.action.name=Guice 공급자 생성
new.guice.provider.error=Guice 공급자를 생성할 수 없습니다
new.guice.provider.name=Guice 공급자 생성 중\: {0}.{1}
new.guice.scope.annotation.action.name=Guice 범위 어노테이션 생성
new.guice.scope.annotation.error=Guice 범위 어노테이션을 생성할 수 없습니다
pointless.binding.display.name=의미 없는 바인딩
pointless.binding.problem.descriptor=바인딩이 불필요하며 제거될 수 있습니다 \#loc
provider.class.name=공급자 클래스 이름\:
redundant.scope.binding.display.name=불필요한 범위 바인딩
redundant.scope.binding.problem.descriptor=범위 \#ref(으)로의 바인딩은 불필요합니다 \#loc
redundant.to.binding.display.name=불필요한 바인딩
redundant.to.binding.problem.descriptor=클래스 \#ref(으)로의 바인딩은 불필요합니다 \#loc
redundant.to.provider.binding.display.name=불필요한 공급자 바인딩
redundant.to.provider.binding.problem.descriptor=클래스 \#ref(으)로의 바인딩은 불필요합니다 \#loc
select.provided.class=제공할 클래스 선택
session.scoped.injects.request.scoped.display.name=@SessionScoped 구성 요소가 @RequestScoped 구성 요소를 삽입합니다
session.scoped.injects.request.scoped.problem.descriptor=@SessionScoped 클래스에서 @RequestScoped 클래스 \#ref의 @Inject \#loc
singleton.injects.scoped.display.name=@Singleton 구성 요소가 범위 지정된 구성 요소를 삽입합니다
singleton.injects.scoped.problem.descriptor=@Singleton 클래스에서 범위 지정된 클래스 \#ref의 @Inject \#loc
toggle.injection.required.family.name=삽입 전환
toggle.required='선택적'으로 전환
uninstantiable.binding.display.name=인스턴스화할 수 없는 바인딩
uninstantiable.binding.problem.descriptor=클래스 \#ref이(가) 인스턴스화될 수 없으므로 바인드될 수 없습니다 \#loc
uninstantiable.implemented.by.class.display.name=인스턴스화할 수 없는 @ImplementedBy 클래스
uninstantiable.implemented.by.class.problem.descriptor=클래스 \#ref이(가) 인스턴스화될 수 없으므로 @ImplementedBy가 될 수 없습니다 \#loc
uninstantiable.provided.by.class.display.name=인스턴스화할 수 없는 @ProvidedBy 클래스
uninstantiable.provided.by.class.problem.descriptor=클래스 \#ref이(가) 인스턴스화될 수 없으므로 @ ProvidedBy가 될 수 없습니다 \#loc
unnecessary.static.injection.display.name=불필요한 static 삽입
unnecessary.static.injection.problem.descriptor=클래스 \#ref에 static @Inject 멤버가 없습니다 \#loc
