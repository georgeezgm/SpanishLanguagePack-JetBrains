change.signature.dialog.title=시그니처 변경
clion.assembly.compile.arguments=상단의 어셈블리 탭에서 컴파일러 인수 필드를 찾을 수 있습니다. {0} 플래그를 추가하고 {1}을(를) 눌러 어셈블리 뷰를 새로고침 하세요
clion.assembly.help.link=어셈블리 뷰
clion.assembly.invoke={0}을(를) 호출할 때 <ide/>이(가) 선택된 구성의 컴파일러 설정을 사용하여 어셈블리로 코드를 컴파일합니다.
clion.assembly.invoke.context.menu=<ide/>에서는 디버그 세션을 시작하지 않고 내재된 어셈블리 코드를 살펴볼 수 있습니다. 현재 파일을 오른쪽 클릭한 다음 컨텍스트 메뉴에서 {0}을(를) 선택하세요.
clion.assembly.lesson.name=파일의 어셈블리 뷰
clion.assembly.note=ARM 아키텍쳐 및 MSVC 툴체인의 경우 Intel 구문 사용 옵션은 비활성화됩니다.
clion.assembly.options=옵션 메뉴를 사용해서 x86 어셈블리(Intel) 구문으로 전환하거나/하고 심볼 이름은 포함하지만 특정한 구문은 포함하지 않는 원시 출력을 표시합니다
clion.assembly.preview=미리보기에서는 어떤 코드가 어떤 어셈블리를 생성하는지 볼 수 있습니다
clion.basic.editing.module.description=코드를 수정하는 데 도움이 될 만한 액션
clion.basic.editing.module.name=코드 편집
clion.change.signature.click.refactor={0} 버튼을 눌러 리팩터링을 수행하세요.
clion.change.signature.conclusion=<ide/>이(가) 모든 호출 위치를 이에 맞춰 조절하여 문자열 리터럴 {0}을(를) 두 번째 매개변수로서 {1}에 전달한다는 점에 유의하세요.
clion.change.signature.extract.parameter=이제 {0}을(를) 눌러 매개변수 리팩터링을 사용합니다.
clion.change.signature.help.link=시그니처 리팩터링 변경
clion.change.signature.lesson.intro=시그니처 리팩터링 변경은 함수 시그니처에 적용될 수 있는 서로 다른 수정 사항을 여러 개 조합합니다. 이 리팩터링을 사용하면 함수 이름, 반환 타입을 변경하고 매개변수를 삭제, 제거하거나 순서를 변경할 수 있습니다.\n함수 시그니처를 변경할 때 변경 사항을 반영하기 위해 CLion이 함수의 모든 사용 위치를 검색하고 안전하게 수정될 수 있는 모든 호출, 구현 및 함수의 대체 재정의를 업데이트합니다.
clion.change.signature.lesson.name=시그니처 변경
clion.change.signature.move.parameter.down=아래 버튼을 클릭하거나 {2}을(를) 눌러 {0} 매개변수를 {1} 매개변수 아래로 옮기세요.
clion.change.signature.next.button=다음
clion.change.signature.open.dialog=이 예시에서 {0} 함수에는 첫 번째 매개변수로서 타깃이 필요하고, 두 번째 매개변수로서 소스가 필요합니다. 이는 일부 사용자에게는 직관적이지 않으므로 순서를 바꿔보겠습니다.
clion.change.signature.open.dialog.press={0}을(를) 눌러 시그니처 변경 대화상자를 엽니다.
clion.change.signature.refactor.button=리팩터링
clion.change.signature.select.parameter.1=시그니처 변경을 사용하면 하나의 대화상자에서 여러 가지를 변경할 수 있지만, 함수 시그니처를 변경하는 일부 구체적인 리팩터링을 위한 전용 액션도 있습니다.
clion.change.signature.select.parameter.2=<strong>매개변수</strong> 리팩터링을 사용하면 지역 변수나 표현식을 함수 매개변수로 변환할 수 있습니다. 이 예시에서 함수 {0}은(는) 범위 내의 요소를 쉼표로 구분하여 표시합니다. 구분 기호 문자열을 새로운 매개변수로 변환해 보겠습니다.
clion.change.signature.select.parameter.3={0}을(를) 눌러 구분 기호 문자열을 선택하세요.
clion.change.signature.type.new.parameter.name=<ide/>이(가) 문자열 리터럴을 새로운 함수 매개변수로 변환했습니다. 이제 의미 있는 이름을 지어주기만 하면 됩니다. {0}을(를) 입력하세요.
clion.change.signature.type.new.parameter.refactor={0}을(를) 눌러 리팩터링을 실행하세요.
clion.code.assistance.module.description=로컬 기록 및 어셈블리 뷰 사용법, 매개변수 정보 획득 방법 및 미리보기 팝업 사용법을 알아보세요.
clion.code.assistance.module.name=코드 작성 지원
clion.collapse.all.collapse=파일 내 모든 영역을 접으려면 {0}을(를) 누르세요.
clion.collapse.all.expand=이처럼 {0}을(를) 누르고 사용 가능한 모든 영역을 펼치세요.
clion.collapse.help.link=코드 요소 펼치거나 접기
clion.collapse.hit.expand=코드 영역을 펼치려면 {0}을(를) 누르세요.
clion.collapse.lesson.name=접기
clion.collapse.region.collapse=선택된 코드 조각을 접고 원하는 접기 영역을 생성하여 ''접을 수 있도록'' 만들 수 있습니다. 6~8번 줄에 있는 세 개의 멤버 변수를 선택하고 {0}(으)로 선택 영역을 접으세요.
clion.collapse.try.collapse=때로는 가독성을 높이기 위해 코드 조각을 접어야 할 수도 있습니다. {0}(으)로 코드 조각을 접어 보세요.
clion.comments.comment.block=코드 블록을 주석처리할 수 있습니다. 예를 들어 선택된 블록을 주석 처리하려면 {0}을(를) 누르세요.
clion.comments.comment.one.line={0}(으)로 모든 행을 주석 처리할 수 있습니다.
clion.comments.help.link=고급 편집
clion.comments.lesson.name=주석 추가 및 제거
clion.comments.uncomment.line=동일한 단축키 {0}(으)로 주석 처리된 행을 해제
clion.completion.complete.statement={0}을(를) 눌러 구문을 완성하세요.
clion.completion.module.description=IDE가 코드를 완성하게 하세요. 기본, 스마트 및 다른 타입의 코드 완성을 사용해 보세요.
clion.completion.module.name=코드 완성
clion.debug.lesson.name=디버그 워크플로
clion.debug.workflow.evaluate.expression=final 표현식을 확인하려면 평가를 해 볼 수 있습니다. {0}을(를) 복사하고 디버그 창의 강조 표시된 필드에 붙여 넣어 보세요.
clion.debug.workflow.exception.description=프로그램이 예외를 던졌으며, 실행 창에서 확인할 수 있습니다.
clion.debug.workflow.fix.error=문자열 대체에 실수가 있습니다\! 바로 고쳐보겠습니다. {1}에서 첫 번째 인수 {0}을(를) 삭제하세요.
clion.debug.workflow.lesson.name=디버그 워크플로
clion.debug.workflow.rerun.debug={0}을(를) 누르거나 툴바에서 {1}을(를) 클릭하여 디버그를 완료합니다.
clion.debug.workflow.step.into=예외의 원인을 찾기 위해 현재의 호출로 스텝인투해 보겠습니다. {0}을(를) 누르거나 디버그 창에서 {1}을(를) 클릭하세요.
clion.essential.module.description={0}의 가장 필수적인 기능을 발견합니다
clion.essential.module.name=필수적
clion.extract.and.inline.lesson.name=추출하고 인라인화
clion.extract.constant={0}을(를) 눌러 이곳에서 사용된 파이의 리터럴 값을 추출하고 원 안의 영역을 계산하여 상수로 출력합니다.
clion.extract.constant.help.link=상수 추출
clion.extract.constant.intro=<ide/>에는 C++ 코드에 사용할 수 있는 유용한 리팩터링이 많습니다. 예를 들어 <strong>상수 추출</strong> 리팩터링을 사용하면 코드를 쉽게 읽고 관리할 수 있도록 하드 코딩된 상수를 제거합니다.
clion.extract.constant.replace.occurrences=동일한 숫자 리터럴이 여러 번 사용되기 때문에 <ide/>은(는) 모든 위치를 대체할지, 이 하나만 변경할지 선택할 수 있는 옵션을 제공합니다. {0}을(를) 선택하세요.
clion.extract.constant.replace.occurrences.item=모든 2개의 찾은 항목 바꾸기
clion.extract.extend.selection={1}을(를) 세 번 눌러 {0}을(를) 선택하세요.
clion.extract.function=이제 {0}을(를) 눌러 선택된 코드를 함수로 추출합니다.
clion.extract.function.button.name=추출
clion.extract.function.click.extract=이제 <strong>추출</strong>을 눌러 리팩터링을 실행합니다.
clion.extract.function.click.inline=<strong>인라인화</strong> 버튼을 눌러 확인하세요.
clion.extract.function.conclusion=인라인화 리팩터링을 사용하여 상수와 전처리기 매크로를 인라인화할 수 있습니다.
clion.extract.function.dialog=함수 추출 대화상자를 사용하면 선언 위치, 반환 타입 및 새 함수 이름을 지정할 수 있습니다.
clion.extract.function.inline.button.name=인라인화
clion.extract.function.intro=이제 코드가 훨씬 개선되었습니다. 하지만 아직 적용할 수 있는 리팩터링이 많습니다. <ide/>에서 <strong>함수 추출</strong>을 사용하면 어떤 표현식이나 코드 조각이든 별도의 함수로 추출할 수 있습니다. 다음 줄에 있는 표현식을 지역 변수가 아니라 별도의 함수로 추출해 보겠습니다.
clion.extract.function.new.function.name=이름을 {0}으(로) 설정하세요.
clion.extract.inline={0}을(를) 클릭한 후 {1}을(를) 누르세요.
clion.extract.inline.done=<ide/>이(가) 다시 {0}을(를) 인라인화하여 이전에 했던 함수 추출 리팩터링을 되돌렸습니다.
clion.extract.inline.intro=<ide/>이(가) 둘레의 계산을 새로운 함수로 리팩터링했습니다. 그러나 이것과 반대로 함수를 제거하고 본문을 호출 위치에서 인라인화하고 싶을 수 있습니다. <ide/>에는 이를 위해 함수 호출 리팩터링과는 정반대로 동작하는 <strong>인라인화</strong> 리팩터링이 있습니다.
clion.extract.lesson.name=변수 추출
clion.extract.new.constant.name=새 상수의 이름으로 {0}을(를) 입력하고 {1}을(를) 누르세요.
clion.extract.new.constant.type=새로운 변수 타입을 지정하거나 제안된 대로 두세요. 리팩터링을 계속하려면 {0}을(를) 누르세요.
clion.extract.new.variable.name=새 지역 변수의 이름으로 {0}을(를) 입력하고 {1}을(를) 누르세요.
clion.extract.variable={0}을(를) 눌러 표현식을 변수로 추출하세요.
clion.extract.variable.declare.const=상수 선언
clion.extract.variable.expression=그리고 {0}을(를) 선택합니다.
clion.extract.variable.expression.option=이제 새로운 지역 변수를 선언할 때 추가적인 옵션을 사용할 수 있습니다. '상수 선언'을 선택하세요.
clion.extract.variable.help.link=변수 추출/삽입
clion.extract.variable.intro=이제 값을 하드 코딩할 필요가 없습니다. 그래도 표현식이 너무 깁니다. <strong>변수 추출</strong> 리팩터링으로 원 안의 영역을 지역 변수로 추출해 보겠습니다.
clion.inline.help.link=인라인화
clion.intn.name.replace.if='if else'를 '?\:'로 바꾸기
clion.multiple.selections.deselect.symbol={0}을(를) 눌러 마지막 사용 위치를 선택 해제하세요.
clion.multiple.selections.escape={0}을(를) 눌러 다수의 선택 범위를 재설정하고 단일 캐럿 모드로 되돌아갑니다.
clion.multiple.selections.help.multiple.carets=다중 캐럿 및 선택 범위
clion.multiple.selections.lesson.name=다수의 선택 범위
clion.multiple.selections.replace={0}을(를) 입력하여 모든 {1}이(가) 사용된 모든 위치를 {0}(으)로 바꿉니다.
clion.multiple.selections.select.all={0}을(를) 눌러 파일 내 모든 사용 위치를 선택합니다.
clion.multiple.selections.select.next.symbol={0}을(를) 다시 눌러 다음 사용 위치를 이 심볼로 바꿉니다.
clion.multiple.selections.select.symbol=캐럿 위치의 심볼을 선택하려면 {0}을(를) 누르세요.
clion.navigation.module.description=소스로 이동하고, 선언, 구현 및 파일 구조로 이동합니다.
clion.navigation.module.name=탐색
clion.onboarding.apply.action={0} 액션을 선택하고 {1}을(를) 누르세요.
clion.onboarding.apply.intention=액션을 선택하여 매개변수를 상수 참조로 만든 다음 {0}을(를) 누릅니다.
clion.onboarding.balloon.about.debug.panel={0} 도구 창은 다양한 디버그 액션을 갖춘 툴바를 제공합니다. 나중에 {1} 수업을 수강하여 이 액션을 사용해보세요.
clion.onboarding.balloon.click.here=중단점을 설정하려면 여기를 클릭하세요
clion.onboarding.balloon.open.file={0}을(를) 열려면 더블 클릭하세요
clion.onboarding.balloon.open.learn.toolbar=이 수업을 계속하려면 {0} 도구 창으로 전환하세요
clion.onboarding.balloon.project.directory=프로젝트 디렉터리를 더블클릭하여 펼치고 프로젝트 파일을 표시합니다
clion.onboarding.balloon.project.view=<strong>프로젝트</strong> 뷰를 열려면 클릭하세요
clion.onboarding.balloon.start.debugging=아이콘을 클릭하여 디버그를 시작하거나 {0}을(를) 누르세요.
clion.onboarding.balloon.stop.debugging=디버그를 중단하려면 아이콘을 클릭하세요
clion.onboarding.case.changed=케이스가 변경되었습니다.
clion.onboarding.change.ui.settings=이번 수업에서는 <ide/>이(가) 일부 UI 설정을 기본 상태로 변경합니다. 사용자의 환경설정은 이 수업을 완료하거나 종료하면 복원됩니다.
clion.onboarding.epilogue=축하합니다\! 온보딩 투어를 완료하셨습니다. 이제 다음을 수행하실 수 있습니다.\n  - 학습 프로젝트 {1} <callback id\="{0}">닫기</callback>\n  - 강의 <callback id\="{2}">더보기</callback>
clion.onboarding.feedback.system.found.toolchain=발견된 툴체인\:
clion.onboarding.feedback.system.no.toolchain=none
clion.onboarding.feedback.system.used.toolchain=사용된 툴체인\:
clion.onboarding.indexing.description=처음으로 프로젝트를 열면 <ide/>에서 표준 템플릿 라이브러리 및 프로젝트 자체를 검사하여 코딩 지원에 필요한 세부 정보를 수집합니다. 계속하려면 색인 생성이 완료될 때까지 기다리세요.
clion.onboarding.invoke.completion=이제 {0}을(를) 입력하여 사용할 수 있는 모든 코드 완성 옵션을 표시합니다.
clion.onboarding.invoke.completion.tip=<strong>팁</strong>\: {0}을(를) 눌러 코드 내 어느 곳에서든 자동 완성 항목을 표시할 수 있습니다.
clion.onboarding.invoke.intention.for.code=인텐션을 활용하면 시간도 아끼고, 코딩도 쉽게 하면서 안전하고 효율적인 코드를 작성할 수 있습니다. 여기에서 {0}은(는) 값으로 {1}에 전달되는데, 이는 {1}이(가) 호출될 때마다 복사된다는 의미입니다. 이는 효율적이지 않습니다. 인텐션을 활용하여 불필요한 복사를 제거해 보겠습니다. {2}을(를) 누르세요.
clion.onboarding.invoke.intention.for.warning.1=방금 버그를 수정했지만 이 코드를 더욱 깔끔하게 만들 수 있습니다. <ide/>은(는) 향상될 여지가 있는 코드 줄을 강조 표시하고 노란색 전구를 추가합니다.
clion.onboarding.invoke.intention.for.warning.2={0}을(를) 눌러 경고를 미리 보고 빠른 수정을 적용하세요.
clion.onboarding.invoke.search.everywhere.1=<ide/>에서 작업할 때 프로젝트, 심볼, 클래스 또는 IDE 액션 내에서 파일을 검색하고 싶을 수 있습니다. 이번 강의에서는 {1} 문자열을 소문자로 변경하기 위해 {0} 액션을 검색해 보겠습니다.
clion.onboarding.invoke.search.everywhere.2={1} 대화상자를 열려면 {0}을(를) 두 번 누르세요.
clion.onboarding.lesson.name={0}에 익숙해지기
clion.onboarding.module.description={0} 주요 기능의 간단한 브리핑입니다
clion.onboarding.module.name=온보딩 투어
clion.onboarding.no.toolchain=코드를 컴파일하고 실행하려면 먼저 C/C++ 컴파일러를 <callback id\="{0}">구성</callback>해야 합니다.
clion.onboarding.project.view.description=<strong>프로젝트</strong> 뷰는 주요 도구 창 중 하나입니다. 이 뷰는 프로젝트 디렉터리, 외부 라이브러리, 스크래치 파일을 포함합니다. 줄무늬 버튼을 클릭해 열면 간단한 데모 프로젝트의 콘텐츠 미리보기가 표시됩니다. {0}을(를) 눌러 열어 볼 수도 있습니다.
clion.onboarding.return.to.welcome=\ 시작 화면으로 돌아가기
clion.onboarding.run.options=데모 프로젝트를 열었습니다. 이제 실행해 보겠습니다\! 툴바의 강조 표시된 영역에서 선택된 타깃에 자주 사용되는 실행 액션을 볼 수 있습니다. 예를 들어 코드를 빌드하거나{0}, 디버그하거나{1}, 커버리지를 적용하여 실행하거나{3}, 프로파일링하거나{4}, memcheck으로 실행{5}할 수 있습니다.
clion.onboarding.run.sample=이제 현재 파일을 실행해 보겠습니다. {0}을(를) 클릭하거나 {1}을(를) 누르세요.
clion.onboarding.run.sample.balloon=현재 파일을 실행해 봅시다. {0}을(를) 클릭하거나 {1}을(를) 누르세요.
clion.onboarding.search.everywhere.description=보이는 것처럼 선택된 텍스트 {0}이(가) 입력 문자열로 자동 복사되었습니다. {0} 대신 {1}을(를) 입력해 보겠습니다.
clion.onboarding.select.fix=첫 항목 적용\: {0}. 이 수정 덕분에 코드가 깔끔해 보입니다.
clion.onboarding.select.item=입력과 동시에 <ide/>에 코드 완성 옵션이 자동으로 표시됩니다. 키보드 방향키를 사용하여 {0} 항목을 선택한 다음 {1}을(를) 누르세요.
clion.onboarding.start.debugging=디버그 프로세스를 시작하려면 {0} 아이콘을 클릭하세요.
clion.onboarding.start.typing=이제 {0}을(를) 입력하여 코드 완성 목록을 줄이거나 이 항목을 선택하고 {1}을(를) 누릅니다.
clion.onboarding.stop.debugging=디버그를 중단해 보겠습니다. {0} 아이콘을 클릭하세요.
clion.onboarding.toggle.breakpoint.1={1} 함수가 필요한 값인 {0} 대신 {2}을(를) 반환하는 것을 눈치채셨을 것입니다. return 문으로 가서 문제 코드를 디버그해봅시다.
clion.onboarding.toggle.breakpoint.2=중단점을 설정하려면 강조 표시된 영역 내의 여백을 클릭하세요.
clion.onboarding.toggle.case.part=문자
clion.onboarding.toolchain.description=<ide/>이(가) 이 교육 과정용으로 이미 디폴트 C/C++ 툴체인을 구성해 놓았습니다. 이를 수정하거나 프로젝트용으로 생성할 수도 있습니다. 환경 설정 -> 빌드, 실행, 배포 -> 툴체인으로 이동하세요.
clion.onboarding.toolchain.tip=<strong>팁\:</strong> 빌드, 실행, 배포 -> 툴체인의 <ide/> 환경 설정에서 C/C++ 툴체인을 구성할 수 있습니다.
clion.onboarding.type.division=코드에서 문제를 발견했으니 수정해보겠습니다. 결과 합을 값의 길이로 나눕니다. 학습 스크립트에 이미 {0}이(가) 입력되어 있습니다.
clion.postfix.completion.complete=구문을 완성하려면 목록에서 {0}을(를) 선택하고 {1}을(를) 누르세요.
clion.postfix.completion.type=C++의 경우 C++ 스타일의 형 변환, `make_shared`/`make_unique`, 다양한 루프와 `begin`/`end` 관용구를 사용하여 래핑할 때 접미사 완성이 매우 유용합니다. 클래스 이름 뒤에 {0}을(를) 입력하면 접미사 완성 옵션이 표시됩니다.
clion.qfix.name.remove.parameter=매개변수 'redundant'의 선언 제거
clion.quick.fix.use.range.based.loop="범위 기반 루프를 대신 사용"
clion.rad.change.signature.move.parameter.down=''아래로 이동'' 버튼을 클릭하여 {0} 매개변수를 {1} 매개변수 아래로 옮기세요.
clion.rad.intn.name.replace.if='if' 문을 '?\:' 식으로 변환
clion.rad.qfix.name.remove.parameter=사용되지 않는 매개변수 제거
clion.refactorings.module.description=이름 변경, 추출 및 다른 타입의 리팩터링을 활용하여 코드를 깔끔하게 만듭니다.
clion.refactorings.module.name=리팩터링
clion.rename.again=이름 변경 리팩터링에 추가 옵션이 있습니다. {0}의 이름을 {1}(으)로 변경하세요. 코드 내에서 타입 이름 {0}의 사용 위치를 클릭한 다음 {2}을(를) 누르세요.
clion.rename.applied=<ide/>이(가) 선언/정의와 더불어 모든 사용 위치에서 클래스 템플릿의 이름을 변경했습니다. 전체 프로젝트에 적용됩니다. 이름 변경 리팩터링 {0}은(는) 주석 내 {1}의 사용 위치에서도 자동으로 이름을 변경한다는 점에 유의하세요.
clion.rename.conclusion=<ide/>이(가) 클래스 템플릿의 이름을 변경했습니다. 그러나 이전과는 달리 이번에는 주석은 영향을 받지 않습니다.
clion.rename.description=이름 변경 리팩터링을 활용하면 심볼, 파일 및 디렉터리의 이름을 전역에서 변경하고 코드 내 관련 참조도 자동으로 수정할 수 있습니다.
clion.rename.dialog.next.button=다음
clion.rename.dialog.title=이름 변경
clion.rename.disable.update.option='주석 및 문자열에서도 이름 변경' 비활성화
clion.rename.enable.update.option=''{0}'' 활성화
clion.rename.found.usages=<ide/>이(가) 주석 및 문자열 리터럴에서 발견된 모든 텍스트 사용 위치를 표시합니다.
clion.rename.found.usages.options=툴바 컨트롤을 사용하여 이곳에서 발견된 모든 사용 위치에 대해 이동/그룹화/필터할 수 있습니다.
clion.rename.help.link=이름 변경 리팩터링
clion.rename.lesson.name=이름 변경
clion.rename.option.text=주석 및 문자열 리터럴에서 검색
clion.rename.press.rename={0}을(를) 눌러 클래스 템플릿 {1}의 이름을 변경하세요.
clion.rename.show.option.popup=이름을 변경 중인 요소 옆에 있는 아이콘을 클릭하거나 {0}을(를) 눌러 추가 옵션에 액세스할 수 있습니다.
clion.rename.type.new.name=이 클래스 템플릿의 새 이름(예\: {0})을 입력한 후 {1}을(를) 누릅니다.
clion.rename.undo=다른 리팩터링과 마찬가지로 타입의 이름을 변경하고 실행 취소를 이용하여 쉽게 되돌릴 수 있습니다. {0}을(를) 누르세요.
clion.run.configuration.add.new.program.arguments={0}을(를) 입력하여 인수를 프로그래밍하고 클릭하여 실행하세요
clion.run.configuration.dialog.run.button=실행
clion.run.configuration.dialog.title=실행/디버그 구성
clion.run.configuration.gutters=코드를 실행하는 방법은 여러 가지입니다. {0}을(를) 클릭하고 {1} 항목을 선택하여 여백에서 실행할 수 있습니다. 또는 {2}을(를) 누를 수도 있습니다.
clion.run.configuration.lesson.name=실행 구성
clion.run.configuration.program.arguments=프로그램 인수
clion.run.configuration.run.current=툴바에서 {0}을(를) 클릭하여 이 데모 프로그램을 실행합니다.
clion.run.configuration.run.current.balloon=이 샘플을 실행합니다
clion.run.configuration.settings.description=여기는 모든 실행 구성을 관리하기 위한 곳입니다. 이곳에서 프로그램 매개변수, 작업 디렉터리, 환경 변수 등을 설정할 수 있습니다.
clion.run.debug.module.description=IDE 시각화 디버거로 코드를 실행하고 오류를 수정하세요.
clion.run.debug.module.name=실행 및 디버그
clion.selection.select.string=전체 문자열을 선택하려면 {0}을(를) 다시 누르세요.
clion.smart.completion.finish.completion={0}을(를) 선택한 후 {1}을(를) 누르세요.
clion.smart.completion.help.link=타입 일치 자동 완성
clion.smart.completion.introduction=스마트 타입 완성은 제안 목록에 필터를 적용하여 현재 컨텍스트에 적용할 수 있는 타입만 포함시킵니다.
clion.smart.completion.use.smart.completion=이 경우 열거형 {0}의 값을 함수 {1}에 전달해야 맞습니다. {2}을(를) 눌러 일치하는 제안의 목록을 표시하세요. 단, 여기에는 서로 다른 {0} 열거형 값만 표시됩니다.
clion.statement.completion.complete.condition=소괄호 {0} 내에 조건을 추가하고 {1}을(를) 눌러 {2} 구문으로 이동하세요.
clion.statement.completion.complete.finish.body=코드 한 줄({0})을 입력하고 {1}을(를) 눌러 구문을 완성하고 서식을 적용하세요.
clion.statement.completion.complete.for={0}을(를) 눌러 {1} 구문을 완성하세요.
clion.statement.completion.complete.if={0}을(를) 입력하고 {1}을(를) 눌러 구문을 생성하세요.
clion.statement.completion.help.link=구문 완성
clion.statement.completion.lesson.intro1=구문 완성을 사용하여 문법이 맞는 코드 구문을 생성할 수 있습니다. 필요한 구문 요소(소괄호, 중괄호 및 세미콜론)를 삽입하고 다음 구문을 입력할 수 있는 위치로 이동합니다.
clion.statement.completion.lesson.intro2=구문 완성은 선언(클래스, 네임스페이스, 열거형 등)이나 구문(<code>if/else</code>, <code>while</code>, <code>do</code>, <code>for</code>, <code>switch/case</code>, <code>try/catch</code>)을 완성할 수 있습니다.
clion.statement.completion.lesson.name=구문 완성
clion.tab.completion.lesson.intro=(Return 대신) 'Tab으로 코드 완성'은 선택된 제안을 삽입할 뿐만 아니라 캐럿에 있는 단어를 완전히 대체합니다. 수동으로 단어를 선택하고 삭제할 필요가 없으므로 빠르게 코드를 수정하는 데 유용합니다.
clion.tab.completion.lesson.name=Tab 코드 완성
clion.tab.completion.select.item=키보드 화살표를 사용하여 {0}을(를) 선택하거나 입력을 시작하세요.
clion.tab.completion.start.completion=여기에서 {0}을(를) {1} 클래스 멤버로 대체하려는 경우를 가정해 보겠습니다. {2}을(를) 눌러 완성 제안을 표시하세요.
clion.tab.completion.use.tab.completion={0}을(를) 누르면 {2} 앞에 {1}이(가) 삽입됩니다. 대신 {3}을(를) 눌러 {2}을(를) {1}(으)로 바꾸세요.
toolbar.settings.button=IDE 및 프로젝트 설정
unwrap.try='if...' 래핑 해제
