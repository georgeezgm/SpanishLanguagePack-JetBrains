change.signature.dialog.title=Cambio de firma
clion.assembly.compile.arguments=상단의 어셈블리 탭에서 컴파일러 인수 필드를 찾을 수 있습니다. {0} 플래그를 추가하고 {1}을(를) 눌러 어셈블리 뷰를 새로고침 하세요
clion.assembly.help.link=어셈블리 뷰
clion.assembly.invoke={0}을(를) 호출할 때 <ide/>이(가) 선택된 구성의 컴파일러 설정을 사용하여 어셈블리로 코드를 컴파일합니다.
clion.assembly.invoke.context.menu=<ide/>에서는 디버그 세션을 시작하지 않고 내재된 어셈블리 코드를 살펴볼 수 있습니다. 현재 파일을 오른쪽 클릭한 다음 컨텍스트 메뉴에서 {0}을(를) 선택하세요.
clion.assembly.lesson.name=파일의 어셈블리 뷰
clion.assembly.note=ARM 아키텍쳐 및 MSVC 툴체인의 경우 Intel 구문 사용 옵션은 비활성화됩니다.
clion.assembly.options=옵션 메뉴를 사용해서 x86 어셈블리(Intel) 구문으로 전환하거나/하고 심볼 이름은 포함하지만 특정한 구문은 포함하지 않는 원시 출력을 표시합니다
clion.assembly.preview=미리보기에서는 어떤 코드가 어떤 어셈블리를 생성하는지 볼 수 있습니다
clion.basic.editing.module.description=Acciones para ayudarte a arreglar tu código
clion.basic.editing.module.name=Editar código
clion.change.signature.click.refactor=Haga clic en el botón {0} para realizar la refactorización.
clion.change.signature.conclusion=Tenga en cuenta que <ide/> pasa el literal de cadena {0} como segundo parámetro a {1}, ajustando todas las posiciones de llamada en consecuencia.
clion.change.signature.extract.parameter=Ahora presione {0} para habilitar la refactorización de parámetros.
clion.change.signature.help.link=Cambios de refactorización de firmas
clion.change.signature.lesson.intro=Los cambios de refactorización de firmas combinan varias modificaciones diferentes que se pueden aplicar a la firma de una función. Esta refactorización le permite cambiar el nombre de la función, el tipo de retorno y eliminar, eliminar o reordenar los parámetros.\nCuando cambia la firma de una función, CLion busca todos los usos de la función y los almacena de forma segura para reflejar los cambios. implementaciones y anulaciones alternativas de funciones que pueden modificarse.
clion.change.signature.lesson.name=Cambio de firma
clion.change.signature.move.parameter.down=Haga clic en el botón siguiente o presione {2} para mover el parámetro {0} debajo del parámetro {1}.
clion.change.signature.next.button=próximo
clion.change.signature.open.dialog=En este ejemplo, la función {0} requiere un destino como primer parámetro y una fuente como segundo parámetro. Puede que esto no sea intuitivo para algunos usuarios, así que cambiemos el orden.
clion.change.signature.open.dialog.press=Haga clic en {0} para abrir el cuadro de diálogo Cambiar firma.
clion.change.signature.refactor.button=Refactorización
clion.change.signature.select.parameter.1=Cambiar firma le permite realizar múltiples cambios en un cuadro de diálogo, pero también tiene acciones dedicadas para algunas refactorizaciones específicas que cambian la firma de la función.
clion.change.signature.select.parameter.2=La refactorización de <strong>parámetros</strong> le permite convertir variables o expresiones locales en parámetros de función. En este ejemplo, la función {0} muestra los elementos dentro del rango, separados por comas. Convirtamos la cadena delimitadora en un nuevo parámetro.
clion.change.signature.select.parameter.3=Presione {0} para seleccionar una cadena delimitadora.
clion.change.signature.type.new.parameter.name=<ide/> convirtió un literal de cadena en un nuevo parámetro de función. Ahora todo lo que tienes que hacer es darle un nombre significativo. Por favor ingrese {0}.
clion.change.signature.type.new.parameter.refactor=Haga clic en {0} para realizar la refactorización.
clion.code.assistance.module.description=로컬 기록 및 어셈블리 뷰 사용법, 매개변수 정보 획득 방법 및 미리보기 팝업 사용법을 알아보세요.
clion.code.assistance.module.name=코드 작성 지원
clion.collapse.all.collapse=Presione {0} para contraer todas las áreas del archivo.
clion.collapse.all.expand=De esta manera, presione {0} y expanda todas las áreas disponibles.
clion.collapse.help.link=Expandir o contraer elementos de código
clion.collapse.hit.expand=Presione {0} para expandir el área de código.
clion.collapse.lesson.name=doblar
clion.collapse.region.collapse=Puede hacer que un fragmento de código seleccionado sea "plegable" doblándolo y creando el área de plegado deseada. Seleccione las tres variables miembro en las líneas 6 a 8 y contraiga la selección con {0}.
clion.collapse.try.collapse=A veces es posible que necesites doblar un fragmento de código para mejorar la legibilidad. Intente contraer el fragmento de código con {0}.
clion.comments.comment.block=Puedes comentar bloques de código. Por ejemplo, para comentar el bloque seleccionado, presione {0}.
clion.comments.comment.one.line=Puedes comentar cualquier línea con {0}.
clion.comments.help.link=edición avanzada
clion.comments.lesson.name=Agregar y eliminar comentarios
clion.comments.uncomment.line=Descomentar líneas con el mismo acceso directo {0}
clion.completion.complete.statement=Haga clic en {0} para completar la frase.
clion.completion.module.description=Deje que el IDE complete su código. Pruebe la finalización de código básica, inteligente y de otro tipo.
clion.completion.module.name=Finalización de código
clion.debug.lesson.name=디버그 워크플로
clion.debug.workflow.evaluate.expression=final 표현식을 확인하려면 평가를 해 볼 수 있습니다. {0}을(를) 복사하고 디버그 창의 강조 표시된 필드에 붙여 넣어 보세요.
clion.debug.workflow.exception.description=프로그램이 예외를 던졌으며, 실행 창에서 확인할 수 있습니다.
clion.debug.workflow.fix.error=문자열 대체에 실수가 있습니다\! 바로 고쳐보겠습니다. {1}에서 첫 번째 인수 {0}을(를) 삭제하세요.
clion.debug.workflow.lesson.name=Flujo de trabajo de depuración
clion.debug.workflow.rerun.debug={0}을(를) 누르거나 툴바에서 {1}을(를) 클릭하여 디버그를 완료합니다.
clion.debug.workflow.step.into=예외의 원인을 찾기 위해 현재의 호출로 스텝인투해 보겠습니다. {0}을(를) 누르거나 디버그 창에서 {1}을(를) 클릭하세요.
clion.essential.module.description={0}의 가장 필수적인 기능을 발견합니다
clion.essential.module.name=필수적
clion.extract.and.inline.lesson.name=Extraer y en línea
clion.extract.constant=Presione {0} para extraer el valor literal de pi utilizado aquí, calcular el área dentro del círculo y generarlo como una constante.
clion.extract.constant.help.link=extracción constante
clion.extract.constant.intro=<ide/> tiene muchas refactorizaciones útiles para su código C++. Por ejemplo, la refactorización <strong>Extracción constante</strong> elimina constantes codificadas para que el código sea más fácil de leer y mantener.
clion.extract.constant.replace.occurrences=Debido a que el mismo literal numérico se usa varias veces, <ide/> le brinda la opción de reemplazar todas las posiciones o cambiar solo esta. Seleccione {0}.
clion.extract.constant.replace.occurrences.item=Reemplace los 2 elementos encontrados
clion.extract.extend.selection=Presione {1} tres veces para seleccionar {0}.
clion.extract.function=Ahora presione {0} para extraer el código seleccionado en una función.
clion.extract.function.button.name=extracción
clion.extract.function.click.extract=Ahora presione <strong>Extraer</strong> para ejecutar la refactorización.
clion.extract.function.click.inline=Haga clic en el botón <strong>En línea</strong> para confirmar.
clion.extract.function.conclusion=Puede utilizar la refactorización en línea para incorporar constantes y macros de preprocesador.
clion.extract.function.dialog=El cuadro de diálogo Extraer función le permite especificar la ubicación de la declaración, el tipo de retorno y el nombre de la nueva función.
clion.extract.function.inline.button.name=En línea
clion.extract.function.intro=El código ahora ha mejorado mucho. Sin embargo, todavía quedan muchas refactorizaciones que se pueden aplicar. Usando <strong>Extraer función</strong> en <ide/>, puede extraer cualquier expresión o fragmento de código en una función separada. Extraigamos la expresión de la siguiente línea en una función separada en lugar de una variable local.
clion.extract.function.new.function.name=Establezca el nombre en {0}.
clion.extract.inline=Haga clic en {0} y luego presione {1}.
clion.extract.inline.done=<ide/> insertó {0} nuevamente, revirtiendo cualquier refactorización de extracción de función anterior.
clion.extract.inline.intro=<ide/> refactorizó el cálculo del perímetro en una nueva función. Sin embargo, al contrario de esto, es posible que desees eliminar la función e insertar su cuerpo en la ubicación de la llamada. <ide/> tiene una refactorización <strong>inline</strong> para esto, que hace lo opuesto a la refactorización de llamadas a funciones.
clion.extract.lesson.name=Extracción de variables
clion.extract.new.constant.name=Ingrese {0} como nombre de la nueva constante y presione {1}.
clion.extract.new.constant.type=Especifique un nuevo tipo de variable o déjelo como se sugiere. Presione {0} para continuar con la refactorización.
clion.extract.new.variable.name=Ingrese {0} como nombre de la nueva variable local y presione {1}.
clion.extract.variable=Presione {0} para extraer la expresión como una variable.
clion.extract.variable.declare.const=declaración constante
clion.extract.variable.expression=Luego seleccione {0}.
clion.extract.variable.expression.option=Ahora hay opciones adicionales disponibles al declarar nuevas variables locales. Seleccione "Declarar constante".
clion.extract.variable.help.link=Extraer/Insertar variables
clion.extract.variable.intro=Ahora no es necesario codificar valores. Aún así, la expresión es demasiado larga. Extraigamos el área dentro del círculo como una variable local refactorizando la <strong>Extracción de variables</strong>.
clion.inline.help.link=En línea
clion.intn.name.replace.if=Reemplace 'si más' con '?\:'
clion.multiple.selections.deselect.symbol=Presione {0} para anular la selección de la última ubicación utilizada.
clion.multiple.selections.escape=Presione {0} para restablecer varias selecciones y volver al modo de cursor único.
clion.multiple.selections.help.multiple.carets=Múltiples quilates y rango de selección.
clion.multiple.selections.lesson.name=Múltiples rangos para elegir
clion.multiple.selections.replace=Ingrese {0} para reemplazar todas las apariciones de {1} con {0}.
clion.multiple.selections.select.all=Presione {0} para seleccionar todos los usos en el archivo.
clion.multiple.selections.select.next.symbol=Presione {0} nuevamente para reemplazar el siguiente uso con este símbolo.
clion.multiple.selections.select.symbol=Presione {0} para seleccionar el símbolo en la posición del cursor.
clion.navigation.module.description=Vaya a la fuente, luego a la declaración, implementación y estructura del archivo.
clion.navigation.module.name=búsqueda
clion.onboarding.apply.action=Seleccione la acción {0} y presione {1}.
clion.onboarding.apply.intention=Seleccione una acción para convertir el parámetro en una referencia constante y luego presione {0}.
clion.onboarding.balloon.about.debug.panel=La ventana de herramientas {0} proporciona una barra de herramientas con varias acciones de depuración. Pruebe esta acción más tarde tomando la clase {1}.
clion.onboarding.balloon.click.here=Haga clic aquí para establecer un punto de interrupción
clion.onboarding.balloon.open.file=Haga doble clic para abrir {0}
clion.onboarding.balloon.open.learn.toolbar=Para continuar con esta lección, cambie a la ventana de herramientas {0}
clion.onboarding.balloon.project.directory=Haga doble clic en el directorio del proyecto para expandirlo y mostrar los archivos del proyecto.
clion.onboarding.balloon.project.view=Haga clic para abrir la vista <strong>Proyecto</strong>
clion.onboarding.balloon.start.debugging=Haga clic en el icono para iniciar la depuración o presione {0}.
clion.onboarding.balloon.stop.debugging=Haga clic en el icono para detener la depuración.
clion.onboarding.case.changed=El caso ha cambiado.
clion.onboarding.change.ui.settings=En esta lección, <ide/> cambia algunas configuraciones de la interfaz de usuario a su estado predeterminado. Sus preferencias se restaurarán cuando complete o salga de esta clase.
clion.onboarding.epilogue=Felicidades\! Ha completado el recorrido de incorporación. Ahora puedes:\n - Proyecto de aprendizaje {1} <callback id\="{0}">Cerrar</callback>\n - Conferencia <callback id\="{2}">Ver más</ callback>
clion.onboarding.feedback.system.found.toolchain=Cadena de herramientas encontrada\:
clion.onboarding.feedback.system.no.toolchain=none
clion.onboarding.feedback.system.used.toolchain=Cadena de herramientas utilizada\:
clion.onboarding.indexing.description=Cuando abres un proyecto por primera vez, <ide/> examina la biblioteca de plantillas estándar y el proyecto en sí para recopilar los detalles necesarios para ayudar con la codificación. Espere hasta que se complete la indexación para continuar.
clion.onboarding.invoke.completion=Ahora escriba {0} para mostrar todas las opciones de finalización de código disponibles.
clion.onboarding.invoke.completion.tip=<strong>Consejo</strong>\: Puedes mostrar las entradas de autocompletar en cualquier parte de tu código presionando {0}.
clion.onboarding.invoke.intention.for.code=Al utilizar intenciones, puede ahorrar tiempo, facilitar la codificación y escribir código seguro y eficiente. Aquí {0} se pasa a {1} por valor, lo que significa que {1} se copiará cada vez que se llame. Esto no es eficiente. Utilicemos la intención para eliminar copias innecesarias. Presione {2}.
clion.onboarding.invoke.intention.for.warning.1=Acabamos de corregir un error, pero podemos hacer que este código sea aún más limpio. <ide/> resalta líneas de código que podrían mejorarse y agrega una bombilla de luz amarilla.
clion.onboarding.invoke.intention.for.warning.2=Presione {0} para obtener una vista previa de las advertencias y aplicar soluciones rápidas.
clion.onboarding.invoke.search.everywhere.1=Cuando trabaje en <ide/>, es posible que desee buscar archivos dentro de un proyecto, símbolo, clase o acción IDE. En esta lección, buscaremos la acción {0} para cambiar la cadena {1} a minúsculas.
clion.onboarding.invoke.search.everywhere.2=Presione {0} dos veces para abrir el cuadro de diálogo {1}.
clion.onboarding.lesson.name=Familiarízate con {0}
clion.onboarding.module.description={0} Este es un breve resumen sobre las características principales.
clion.onboarding.module.name=Tour de incorporación
clion.onboarding.no.toolchain=Para compilar y ejecutar código, primero debe <callback id\="{0}">configurar</callback> el compilador C/C++.
clion.onboarding.project.view.description=La vista <strong>Proyecto</strong> es una de las ventanas de herramientas principales. Esta vista incluye directorios de proyectos, bibliotecas externas y archivos borrador. Haga clic en el botón rayado para abrirlo y verá una vista previa del contenido de un proyecto de demostración simple. También puedes abrirlo haciendo clic en {0}.
clion.onboarding.return.to.welcome=\ Volver a la pantalla de inicio
clion.onboarding.run.options=Abrí un proyecto de demostración. ¡Ahora ejecutémoslo! En el área resaltada de la barra de herramientas, puede ver las acciones de ejecución utilizadas con frecuencia para el objetivo seleccionado. Por ejemplo, puede compilar su código{0}, depurarlo{1}, ejecutarlo con cobertura{3}, perfilarlo{4} o ejecutarlo con memcheck{5}.
clion.onboarding.run.sample=Ahora ejecutemos el archivo actual. Haga clic en {0} o presione {1}.
clion.onboarding.run.sample.balloon=Ejecutemos el archivo actual. Haga clic en {0} o presione {1}.
clion.onboarding.search.everywhere.description=Como puede ver, el texto seleccionado {0} se ha copiado automáticamente a la cadena de entrada. Intentemos ingresar {1} en lugar de {0}.
clion.onboarding.select.fix=Aplicar el primer elemento\: {0}. Esta solución hace que el código parezca más limpio.
clion.onboarding.select.item=Las opciones para completar el código aparecerán automáticamente en <ide/> a medida que escriba. Utilice las teclas de flecha del teclado para seleccionar el elemento {0} y luego presione {1}.
clion.onboarding.start.debugging=Haga clic en el icono {0} para iniciar el proceso de depuración.
clion.onboarding.start.typing=Ahora escriba {0} para acortar la lista de finalización de código, o selecciónelo y presione {1}.
clion.onboarding.stop.debugging=Dejemos de depurar. Haga clic en el icono {0}.
clion.onboarding.toggle.breakpoint.1=Quizás hayas notado que la función {1} devuelve {2} en lugar de {0}, que es el valor esperado. Vayamos a la declaración de devolución y depuremos el código problemático.
clion.onboarding.toggle.breakpoint.2=Para establecer un punto de interrupción, haga clic en el margen dentro del área resaltada.
clion.onboarding.toggle.case.part=mensaje
clion.onboarding.toolchain.description=<ide/> ya ha configurado una cadena de herramientas C/C++ predeterminada para este curso. Puedes modificarlos o incluso crearlos para tus proyectos. Vaya a Configuración -> Compilación, ejecución, implementación -> Cadena de herramientas.
clion.onboarding.toolchain.tip=<strong>Consejo\:</strong> Puede configurar su cadena de herramientas C/C++ en las preferencias <ide/> en Construir, Ejecutar, Implementar -> Cadena de herramientas.
clion.onboarding.type.division=Encontré un problema en el código, solucionémoslo. Divida la suma resultante por la longitud de los valores. {0} ya está ingresado en el guión de capacitación.
clion.postfix.completion.complete=Para completar la frase, seleccione {0} de la lista y presione {1}.
clion.postfix.completion.type=Para C++, la finalización de postfix es muy útil al empaquetar conversiones de estilo C++, `make_shared`/`make_unique`, varios bucles y modismos `begin`/`end`. Si escribe {0} después del nombre de la clase, verá opciones para completar el sufijo.
clion.qfix.name.remove.parameter=Eliminar la declaración del parámetro 'redundante'
clion.quick.fix.use.range.based.loop=Utilice bucles basados en rangos en su lugar
clion.rad.change.signature.move.parameter.down=Haga clic en el botón ''Mover hacia abajo'' para mover el parámetro {0} debajo del parámetro {1}.
clion.rad.intn.name.replace.if=Convierta la declaración 'si' en la expresión '?\:'
clion.rad.qfix.name.remove.parameter=Eliminar parámetros no utilizados
clion.refactorings.module.description=Limpie su código aprovechando el cambio de nombre, la extracción y otros tipos de refactorización.
clion.refactorings.module.name=Refactorización
clion.rename.again=La refactorización de cambio de nombre tiene opciones adicionales: Cambie el nombre de {0} a {1}. Haga clic donde usa el nombre de tipo {0} en su código y luego presione {2}.
clion.rename.applied=<ide/> cambió el nombre de la plantilla de clase en todos los usos, incluida su declaración/definición. Se aplica a todo el proyecto. Tenga en cuenta que la refactorización de cambio de nombre {0} también cambia automáticamente el nombre de los usos de {1} en los comentarios.
clion.rename.conclusion=<ide/> cambió el nombre de la plantilla de clase. Sin embargo, a diferencia de antes, los comentarios no se verán afectados esta vez.
clion.rename.description=La refactorización de cambio de nombre le permite cambiar globalmente el nombre de símbolos, archivos y directorios y corregir automáticamente las referencias relacionadas en su código.
clion.rename.dialog.next.button=다음
clion.rename.dialog.title=cambiar nombre
clion.rename.disable.update.option=Deshabilitar 'Cambiar nombres en comentarios y cadenas también'
clion.rename.enable.update.option=Habilitar ''{0}''
clion.rename.found.usages=<ide/>이(가) 주석 및 문자열 리터럴에서 발견된 모든 텍스트 사용 위치를 표시합니다.
clion.rename.found.usages.options=툴바 컨트롤을 사용하여 이곳에서 발견된 모든 사용 위치에 대해 이동/그룹화/필터할 수 있습니다.
clion.rename.help.link=Cambiar el nombre de la refactorización
clion.rename.lesson.name=cambiar nombre
clion.rename.option.text=Buscar en comentarios y literales de cadena
clion.rename.press.rename=Haga clic en {0} para cambiar el nombre de la plantilla de clase {1}.
clion.rename.show.option.popup=Puede acceder a opciones adicionales haciendo clic en el icono junto al elemento cuyo nombre está cambiando o presionando {0}.
clion.rename.type.new.name=Introduzca un nuevo nombre para esta plantilla de clase, por ejemplo {0}, y luego presione {1}.
clion.rename.undo=Al igual que con cualquier refactorización, puede revertirla fácilmente cambiando el nombre de un tipo y usando deshacer. Presione {0}.
clion.run.configuration.add.new.program.arguments={0}을(를) 입력하여 인수를 프로그래밍하고 클릭하여 실행하세요
clion.run.configuration.dialog.run.button=실행
clion.run.configuration.dialog.title=실행/디버그 구성
clion.run.configuration.gutters=코드를 실행하는 방법은 여러 가지입니다. {0}을(를) 클릭하고 {1} 항목을 선택하여 여백에서 실행할 수 있습니다. 또는 {2}을(를) 누를 수도 있습니다.
clion.run.configuration.lesson.name=실행 구성
clion.run.configuration.program.arguments=프로그램 인수
clion.run.configuration.run.current=툴바에서 {0}을(를) 클릭하여 이 데모 프로그램을 실행합니다.
clion.run.configuration.run.current.balloon=이 샘플을 실행합니다
clion.run.configuration.settings.description=여기는 모든 실행 구성을 관리하기 위한 곳입니다. 이곳에서 프로그램 매개변수, 작업 디렉터리, 환경 변수 등을 설정할 수 있습니다.
clion.run.debug.module.description=IDE 시각화 디버거로 코드를 실행하고 오류를 수정하세요.
clion.run.debug.module.name=실행 및 디버그
clion.selection.select.string=Presione {0} nuevamente para seleccionar la cadena completa.
clion.smart.completion.finish.completion=Seleccione {0} y presione {1}.
clion.smart.completion.help.link=Autocompletado de coincidencia de tipos
clion.smart.completion.introduction=La finalización de tipo inteligente filtra la lista de sugerencias para incluir solo los tipos aplicables al contexto actual.
clion.smart.completion.use.smart.completion=En este caso lo correcto es pasar el valor de la enumeración {0} a la función {1}. Presione {2} para mostrar una lista de sugerencias coincidentes. Sin embargo, aquí solo se muestran los diferentes valores de enumeración {0}.
clion.statement.completion.complete.condition=Agregue una condición entre paréntesis {0} y presione {1} para pasar a la declaración {2}.
clion.statement.completion.complete.finish.body=Ingrese una línea de código ({0}) y presione {1} para completar la sintaxis y aplicar el formato.
clion.statement.completion.complete.for=Presione {0} para completar la frase {1}.
clion.statement.completion.complete.if=Ingrese {0} y presione {1} para generar la frase.
clion.statement.completion.help.link=Finalización de sintaxis
clion.statement.completion.lesson.intro1=Puede utilizar la finalización de sintaxis para generar una sintaxis de código gramaticalmente correcta. Inserte los elementos de sintaxis requeridos (paréntesis, llaves y punto y coma) y muévase a una posición donde pueda escribir la siguiente sintaxis.
clion.statement.completion.lesson.intro2=La finalización de la sintaxis se puede realizar mediante declaraciones (clases, espacios de nombres, enumeraciones, etc.) o declaraciones (<code>if/else</code>, <code> while</code>, <code>do</code>, < code>para </code>, <code>switch/case</code>, <code>try/catch</code>).
clion.statement.completion.lesson.name=Finalización de sintaxis
clion.tab.completion.lesson.intro=Completar el código con Tabulador (en lugar de Retorno) no solo inserta la sugerencia seleccionada, sino que también reemplaza completamente la palabra en el cursor. Esto es útil para modificar código rápidamente porque no es necesario seleccionar y eliminar palabras manualmente.
clion.tab.completion.lesson.name=Finalización del código de tabulación
clion.tab.completion.select.item=Utilice las flechas de su teclado para seleccionar {0} o comience a escribir.
clion.tab.completion.start.completion=Aquí, digamos que desea reemplazar {0} con el miembro de la clase {1}. Presione {2} para mostrar sugerencias de finalización.
clion.tab.completion.use.tab.completion=Cuando presiona {0}, {1} se inserta antes de {2}. En su lugar, presione {3} para cambiar {2} a {1}.
toolbar.settings.button=IDE y configuración del proyecto
unwrap.try=Desenvolver 'si...'
