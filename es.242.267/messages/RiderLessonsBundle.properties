alt.enter.invert.condition=inversión condicional
alt.enter.remove.parameter=Eliminar parámetro
basic.completion.activate=Si no se sugiere completar el código automáticamente, invoquelo manualmente presionando {0}.
basic.completion.choose.first=La mejor coincidencia está resaltada en azul en la lista de finalización. Presione {0} para seleccionar.
basic.completion.choose.item=Seleccione {0} en la lista de finalización de código y luego presione {1}.
basic.completion.complete=Inserta automáticamente todos los elementos de sintaxis necesarios (paréntesis, llaves, punto y coma, etc.) y lo lleva a una posición donde puede comenzar a escribir la siguiente sintaxis. Pulsa {0} para completar esta frase.
basic.completion.lesson.name=Finalización de código
basic.completion.start.typing=De forma predeterminada, <ide/> sugiere inmediatamente la finalización del código. Si comienza a escribir {0} justo en la posición del cursor, aparecerán sugerencias de coincidencias.
comment.block.comment=Para anotar un comentario de bloque con {0}, seleccione el bloque de código y presione {1}.
comment.block.uncomment=Para descomentar un bloque, coloque el cursor en cualquier lugar del bloque de comentarios y presione {0}.
comment.lesson.name=Comentar líneas y bloques de código.
comment.line.uncomment.several.lines=Para descomentar varias líneas, seleccione todas las líneas comentadas y presione {0}.
comment.line.uncomment.that.line=Descomentar la línea comentada con el mismo atajo\: coloque el cursor en cualquier lugar de la línea y presione {0}.
docker.balloon.right.click.project=Docker 지원을 {0} 프로젝트에 추가해 보겠습니다. 마우스 오른쪽 버튼으로 클릭한 다음, <strong>추가</strong> | {1}을(를) 선택하세요
docker.check.out.dockerfile={0}이(가) 해당 프로젝트에 대한 모든 필수 지침이 포함된 Dockerfile을 생성했습니다
docker.click.debug={0}을(를) 누르거나 {1}을(를) 클릭하여 디버그를 시작합니다
docker.lesson.name=Docker 기본 사항
docker.module.description=Rider에서 Docker 시작하기
docker.module.name=Docker
docker.open.settings=시작하기 전에 Docker 데몬이 시스템에서 실행 중인지 확인해 보겠습니다. {0}을(를) 누르거나 {1}을(를) 클릭한 후 해당하는 항목을 선택하여 설정을 여세요.
docker.run={0}을(를) 누르거나 이 버튼을 클릭하여 Docker 컨테이너에서 프로젝트를 실행합니다
docker.select.run.config=Docker 컨테이너에서 프로젝트를 실행하려면 Dockerfile 실행 구성을 선택합니다
extract.variable.choose.name=Especifique el nombre de la variable o déjelo como se sugiere. Para completar la refactorización, presione {0} nuevamente.
extract.variable.choose.type=Seleccione si desea utilizar ''var'' o un tipo explícito para la nueva variable y presione {0}.
extract.variable.replace.all=Este código de muestra tiene tres apariciones encontradas de la expresión seleccionada. Seleccione los elementos relevantes para reemplazarlos todos.
file.structure.help.link=Estructura de archivos y otros comandos de navegación contextual
file.structure.lesson.name=Miembros y estructura del archivo
file.structure.open.popup=Los archivos grandes pueden resultar difíciles de navegar. Una buena manera de comenzar es consultar a nuestros miembros. Presione {0} para enumerar todos los miembros del archivo.
file.structure.request.prefixes=Supongamos que desea buscar métodos cuyos nombres contengan las palabras {0} y {1}. Filtre la lista de miembros ingresando {2} (el prefijo de la palabra que necesita).
file.structure.toolwindow=También puede hacer referencia a la estructura del archivo en una ventana de herramientas dedicada. Presione {0} para abrir.
got.it.balloon.button.text=próximo
help.refactor.this=Menú 'Refactorizar siguiente'
onboarding.module.description=Primeros pasos para configurar y utilizar el IDE
onboarding.module.name=Empezando
onboarding.tour.lesson.name=Tour de incorporación
refactoring.menu.extract.interface=Elijamos la refactorización {0}, que nos ayuda a crear rápidamente una nueva interfaz basada en los miembros de la clase actual.
refactoring.menu.extract.interface.dialog=Asigne un nombre a la nueva interfaz, marque la casilla junto a los métodos que deben declararse allí y luego haga clic en <strong>Siguiente</strong> para completar el refactorizador.
refactoring.menu.finish=Para ver las refactorizaciones disponibles en otros contextos, presione {0} cuando el cursor esté en un miembro, variable o literal de cadena.
rename.dialog.title=rebautizar
rename.epilogue=Observe que la refactorización no tocó la propiedad <code>Name</code> de <strong>Person</strong>. Esto significa que es seguro utilizar la refactorización incluso si tiene símbolos con nombres similares en el mismo contexto.
rename.press.rename=La refactorización <strong>Rename</strong> actualiza automáticamente todas las referencias al símbolo renombrado. Puede comenzar a refactorizar en la declaración del símbolo o en cualquier ubicación de uso. Presione {0} para cambiar el nombre de la propiedad {1} de la clase <code>Car</code>.
rename.type.new.name=Introduzca un nuevo nombre para esta propiedad, como {0}, y luego presione {1}.
rider.onboarding.alt.enter={0} es la tecla de acceso directo más importante del editor. Por ejemplo, puede eliminar de forma segura el parámetro {1} presionando esta tecla.
rider.onboarding.alt.enter.menu=Antes de aplicar la solución {0}, piensa en qué otras cosas útiles podrías hacer con esta ventana emergente.
rider.onboarding.balloon.open.file=Haga doble clic para abrir {0}
rider.onboarding.balloon.open.learn.window=Cambie a la ventana de herramientas {0} para continuar con esta lección
rider.onboarding.balloon.project.directory=Haga doble clic en el nodo de la solución y luego expanda el proyecto <strong>Aprendizaje</strong>.
rider.onboarding.change.ui.settings=En esta clase, algunas de las configuraciones de la interfaz de usuario de Rider se cambiarán a sus valores predeterminados. Sus preferencias se restaurarán cuando complete o salga de esta clase.
rider.onboarding.debug.window.toolbar=The <strong>Debug</strong> window has all necessary controls. Let''s press {0} or click {1} to step over the {2} call and check how the value of {3} changes.
rider.onboarding.finish=Esto concluye esta clase. Ahora, en el menú principal, seleccione <strong>Archivo</strong> | Seleccione <strong>Nueva solución</strong> para iniciar su propia solución o seleccione <strong>Archivo</strong> | Seleccione <strong>Abrir</strong> para abrir una solución existente.
rider.onboarding.online.help=Ayuda en linea
rider.onboarding.project.view.description=Use the {0} view to access your solution files\: click the sidebar icon or press {1}
rider.onboarding.resume=Presione {0} o haga clic en {1} para reiniciar el programa.
rider.onboarding.run.configuration.widget=With the ''run'' widget, you can configure and launch run configurations.  Press {0} or click {1} to start debugging with the current configuration.
rider.onboarding.search.everywhere=Para navegar, haga doble clic en {0} o haga clic en {1}
rider.onboarding.search.everywhere.query=Hay varias pestañas para limitar su búsqueda a cosas como acciones de archivos. Por ahora, ingresemos {0} en la pestaña <strong>Todos</strong>.
rider.onboarding.search.everywhere.result=Este término de búsqueda coincide con las primeras letras del nombre combinado con {0}. Seleccione este elemento de la lista y presione {1}.
rider.onboarding.settings=Finalmente, llega el momento de configurarlo todo. Toque {0} o haga clic en {1} para seleccionar el elemento correspondiente
rider.onboarding.settings.save=Haga clic en {0} para aplicar los cambios.
rider.onboarding.settings.search=Utilice la barra de búsqueda para encontrar una opción específica
rider.onboarding.settings.theme=Por ejemplo, {0} | Puedes cambiar entre temas claros u oscuros en la página {1}
rider.onboarding.toggle.breakpoint=Ahora depuremos el programa. Primero, cambie el punto de interrupción. Haga clic en el número de línea o coloque el cursor en la línea y presione {0}.
