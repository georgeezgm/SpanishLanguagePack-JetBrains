add.annotation.value.intention.family.name=Añadir 'valor\='
add.annotation.value.intention.name=Añadir 'valor\='
change.to.c.style.comment.intention.family.name=Convertir a comentarios de estilo C
change.to.c.style.comment.intention.name=Convertir a comentarios de estilo C
change.to.end.of.line.comment.intention.family.name=Reemplazar con comentarios end-of-line
change.to.end.of.line.comment.intention.name=Reemplazar con comentarios end-of-line
convert.closure.to.method.intention.family.name=Convertir propiedades en métodos
convert.closure.to.method.intention.name=Convertir a método
convert.concatenation.to.gstring.intention.family.name=Convertir concatenación de cadenas a GString
convert.concatenation.to.gstring.intention.name=Convertir a GString
convert.from.geese.braces.intention.family.name=Formatear llaves en líneas separadas
convert.from.geese.braces.intention.name=Formatear llaves en líneas separadas
convert.g.string.to.string.intention.family.name=Convertir GString en cadena
convert.g.string.to.string.intention.name=convertir a cadena
convert.integer.to.binary.intention.family.name=Convertir a número binario
convert.integer.to.binary.intention.name=Convertir a binario
convert.integer.to.decimal.intention.family.name=Convertir a decimal
convert.integer.to.decimal.intention.name=Convertir a decimal
convert.integer.to.hex.intention.family.name=Convertir a hexadecimal
convert.integer.to.hex.intention.name=Convertir a hexadecimal
convert.integer.to.octal.intention.family.name=Convertir a octal
convert.integer.to.octal.intention.name=Convertir a octal
convert.java.style.array.intention.family.name=Convierta la creación de matrices estilo Java a la sintaxis Groovy
convert.java.style.array.intention.name=Conversión de creación de matrices al estilo Java
convert.junit.assertion.to.assert.statement.intention.family.name=Convierta afirmaciones de JUnit en afirmaciones de afirmaciones
convert.junit.assertion.to.assert.statement.intention.name=Convierta afirmaciones de JUnit en afirmaciones de afirmaciones
convert.map.to.class.intention.family.name=Convertir el mapa nativo de Groovy en una instancia de clase
convert.map.to.class.intention.name=convertir a clase
convert.method.to.closure.intention.family.name=Convertir un método en una propiedad de tipo cierre
convert.method.to.closure.intention.name=Convertir a propiedad de cierre
convert.multiline.string.to.single.line.intention.family.name=Convertir una cadena de varias líneas en una sola línea
convert.multiline.string.to.single.line.intention.name=Convertir a literal de una sola línea
convert.parameter.to.map.entry.intention.family.name=Convertir parámetros de método o cierre para asignar elementos
convert.parameter.to.map.entry.intention.name=Convertir parámetros en elementos de mapa
convert.simple.getter.to.property.intention.family.name=Convertir captador simple en propiedad
convert.simple.getter.to.property.intention.name=Convertir a atributo
convert.string.to.g.string.intention.family.name=Convertir cadena a GString
convert.string.to.g.string.intention.name=Convertir a GString
convert.string.to.multiline.intention.family.name=Convertir literal a literal multilínea
convert.string.to.multiline.intention.name=Convertir a varias líneas
convert.to.dollar.slash.regex.intention.family.name=Convertir literal de cadena en cadena de barra diagonal
convert.to.dollar.slash.regex.intention.name=Convertir barra de dólar en cadena
convert.to.geese.braces.intention.family.name=Formato de cierre de llaves en una línea
convert.to.geese.braces.intention.name=Dar formato a llaves en una línea
convert.to.regex.intention.family.name=Convertir literales de cadena en expresiones regulares
convert.to.regex.intention.name=Convertir a expresión regular
create.parameter.for.field.intention.family.name=Agregar parámetros de constructor para campos
create.parameter.for.field.intention.name=Agregar parámetros de constructor para campos
demorgans.intention.name1=Reemplazar ''\\&\\&'' con ''||''
demorgans.intention.name2=Cambiar '||' a '\\&\\&'
demorgans.law.intention.family.name=ley de demorgan
each.to.for.intention.family.name=Cambiar cada uno a for-in
each.to.for.intention.name=cambiar a for-in
expand.boolean.intention.family.name=expansión booleana
expand.boolean.intention.name=Extendiendo el uso de booleanos a declaraciones if-else
flip.comparison.intention.family.name=Invertir operandos de comparación
flip.comparison.intention.name=Invertir ''{0}'' a ''{1}''
flip.conditional.intention.family.name=Invertir condicional
flip.conditional.intention.name=Invertir ''?\:''
flip.conjunction.intention.family.name=Invertir operandos concatenados
flip.if.intention.family.name=si inversión de declaración
flip.if.intention.name=si inversión de declaración
flip.smth.intention.name=Invertir ''{0}''
for.to.each.intention.family.name=Cambiar for-in a cada uno
for.to.each.intention.name=Reemplazar con ".cada uno"
gr.alias.import.intention.family.name=Importación de alias estáticos de miembros importados
gr.alias.import.intention.name=Obtener alias
gr.break.string.on.line.breaks.intention.family.name=Salto de línea de cadena en '\\n'
gr.break.string.on.line.breaks.intention.name=Envolver cadena en '\\n'
gr.convert.string.to.char.intention.family.name=Convertir a carácter
gr.convert.string.to.char.intention.name=Convertir a carácter
gr.convert.type.cast.to.safe.cast.intention.family.name=Convertir una expresión de conversión en una expresión de conversión segura
gr.convert.type.cast.to.safe.cast.intention.name=Convertir a transmisión segura
gr.copy.string.concatenation.content.intention.family.name=Copiar texto de concatenación de cadenas al portapapeles
gr.copy.string.literal.content.intention.text=Copiar texto literal de cadena al portapapeles
gr.create.missing.switch.branches.intention.family.name=Crear rama de 'cambio' faltante
gr.create.missing.switch.branches.intention.name=Crear rama de 'cambio' faltante
gr.introduce.local.variable.intention.family.name=Insertar variables locales
gr.introduce.local.variable.intention.name=Insertar variables locales
gr.make.member.private.intention.family.name=Hazlo 'privado'
gr.make.member.private.intention.name=Hazlo 'privado'
gr.make.member.protected.intention.family.name=Establecer en 'protegido'
gr.make.member.protected.intention.name=Establecer en 'protegido'
gr.make.member.public.intention.family.name=establecido en 'público'
gr.make.member.public.intention.name=establecido en 'público'
gr.redundant.else.intention.family.name=Eliminar la palabra clave duplicada 'else'
gr.redundant.else.intention.name=Eliminar la palabra clave duplicada 'else'
gr.remove.annotation.intention.family.name=Eliminar anotación
gr.remove.annotation.intention.name=Eliminar
gr.remove.explicit.type.declaration.intention.family.name=Eliminar declaración de tipo explícita
gr.remove.explicit.type.declaration.intention.name=Eliminar tipos explícitos
gr.set.strong.type.intention.family.name=declaración de tipo explícita
gr.set.strong.type.intention.name=declaración de tipo explícita
gr.sort.map.keys.intention.family.name=Ordenar las entradas del mapa alfabéticamente
gr.sort.map.keys.intention.name=Ordenar alfabéticamente
gr.split.declaration.intention.family.name=Declaración de variable dividida
import.on.demand.intention.family.name=Agregar declaración de importación estática bajo demanda
import.on.demand.intention.name=Agregar declaración de importación bajo demanda
import.static.intention.family.name=Agregar una declaración de importación estática de un solo miembro
import.static.intention.name=Agregar declaración de importación estática
indexed.expression.conversion.intention.family.name=Convertir el tipo [] al método de índice
indexed.expression.conversion.intention.name=[] Convertir el acceso al formulario de método
indexing.method.conversion.intention.family.name=Convertir el método de indexación al formato []
indexing.method.conversion.intention.name=Convertir al formulario []
invert.if.intention.family.name=Invertir la condición 'si'
invert.if.intention.name=Invertir la condición 'si'
make.closure.call.explicit.intention.family.name=Hacer explícitas las llamadas de cierre
make.closure.call.explicit.intention.name=Establecer explícitamente llamadas de cierre
make.closure.call.implicit.intention.family.name=Hacer implícitas las llamadas de cierre
make.closure.call.implicit.intention.name=Establece implícitamente una llamada de cierre
merge.else.if.intention.family.name=Fusionar declaraciones else if
merge.else.if.intention.name=Fusionar declaraciones else-if
merge.if.and.intention.family.name=Fusionar if anidados en condiciones AND
merge.if.and.intention.name=Fusionar declaraciones 'si'
move.class.to.new.file.intention.family.name=Mover clases a archivos individuales
move.class.to.new.file.intention.name=Ir a archivos individuales
negate.comparison.intention.family.name=Negar comparación
negate.comparison.intention.name=Negar ''{0}'' como ''{1}''
remove.parentheses.from.method.call.intention.family.name=Eliminar paréntesis innecesarios de las llamadas a métodos
remove.parentheses.from.method.call.intention.name=Eliminar paréntesis innecesarios
remove.redundant.class.property.intention.family.name=Eliminar clases duplicadas
remove.redundant.class.property.intention.name=Eliminar clases duplicadas
remove.unnecessary.braces.in.g.string.intention.family.name=Eliminar llaves innecesarias de GString
remove.unnecessary.braces.in.g.string.intention.name=Eliminar llaves innecesarias de GString
remove.unnecessary.escape.characters.intention.family.name=Eliminar caracteres innecesarios que se escapan
remove.unnecessary.escape.characters.intention.name=Eliminar caracteres innecesarios que se escapan
remove.unnecessary.return.intention.family.name=Elimine la palabra clave "retorno" innecesaria.
remove.unnecessary.return.intention.name=Eliminar la palabra clave 'retorno'
rename.class.to.0=Cambiar el nombre de la clase a ''{0}''
rename.class.to.file.name.intention.family.name=Cambie el nombre de la clase al nombre del archivo correspondiente
rename.file.with.class.intention.family.name=Cambie el nombre del archivo al nombre de clase correspondiente
rename.file.with.class.intention.name=Cambiar el nombre del archivo al nombre de la clase
replace.abstract.class.instance.by.map.intention.family.name=Cambiar clase anónima a instanciación dinámica
replace.abstract.class.instance.by.map.intention.name=Cambiar a instanciación dinámica
replace.if.with.ternary.intention.family.name=Convertir declaración if a operador ternario
replace.if.with.ternary.intention.name=Reemplazar con ?\:
replace.qualified.reference.with.import.intention.family.name=Reemplazo de referencias completas con declaraciones de importación
replace.qualified.reference.with.import.intention.name=Reemplazar con declaración de importación
replace.ternary.with.if.else.intention.family.name=Cambie '?\:' por si no
replace.ternary.with.if.else.intention.name=Cambie '?\:' por si no
simplify.ternary.operator.intention.family.name=Simplificar expresiones condicionales
simplify.ternary.operator.intention.name=Simplificar expresiones condicionales
split.else.if.intention.family.name=Dividir otra declaración si
split.else.if.intention.name=Dividir declaración else-if
split.if.intention.family.name=Dividir en dos declaraciones 'si'
split.if.intention.name=Dividir en dos declaraciones 'si'
split.into.declaration.and.assignment=Dividir en declaración y asignación
split.into.separate.declaration=Dividido en declaraciones individuales
