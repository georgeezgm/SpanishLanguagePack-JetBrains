choose.python.sdk.to.start.learning.header=Necesitas un intérprete de Python
no.interpreter.in.learning.project=No se puede configurar el intérprete. Pruebe <callback id\="{0}">Manualmente</callback>.
no.interpreter.in.user.project=No se encontró el intérprete de Python. Abra el proyecto de demostración de Python <callback id\="{0}"></callback> o haga clic <callback id\="{1}">aquí</callback> para hacerlo manualmente.
python.3.required.warning.message=Para completar esta lección, configure un <callback id\="{0}">intérprete</callback> basado en Python 3.
python.debug.workflow.help.link=Parte 1. Depurar código Python
python.debug.workflow.rerun=Ejecutemos el programa nuevamente. Haga clic en {0} nuevamente o use {1}.
python.editor.coding.assistance.fix.error=¡Arreglemos este error! Presione {0} y luego seleccione {1} o {2} <strong>→ matemáticas</strong>
python.editor.coding.assistance.press.to.fix=Presione {0} para convertir la tupla en una lista.
python.f.string.completion.complete.it=Completa la frase con {0}. Simplemente presione {1} y el primer elemento entrará en vigor.
python.f.string.completion.help.link=cuerda f completa
python.f.string.completion.invoke.manually=Puedes invocar manualmente la finalización de código usando {0}.
python.f.string.completion.lesson.name=finalización del código de cadena f
python.f.string.completion.result.message=Después de completar el código, puede ver que la cadena simple de Python ha sido reemplazada por una cadena f.
python.f.string.completion.type.prefix=<ide/> admite la conversión automática de cadenas f. Por favor ingrese {0}.
python.in.place.refactoring.add.parameter=Agreguemos un argumento a este método. Coloque el cursor del editor inmediatamente después del primer parámetro. Ahora ingrese una coma y el nombre del parámetro de la siguiente manera: {0}
python.in.place.refactoring.finish.rename=Presione {0} para completar el cambio de nombre.
python.in.place.refactoring.help.rename.link=Cambiar el nombre del código en su lugar
python.in.place.refactoring.help.signature.link=Cambiar firma en su lugar
python.in.place.refactoring.invoke.intention.for.parameter=<ide/> espera que el usuario cambie la firma del método. Esto se indica con el mismo icono {0} en el margen. Cuando haya terminado de ingresar nuevos parámetros, presione {1} para llamar la intención.
python.in.place.refactoring.invoke.intentions=<ide/> supone que estás intentando cambiar el nombre de una variable. Esto se puede confirmar con el icono {0} en el margen. Después de ingresar el nuevo nombre, llame a la intención con {1}.
python.in.place.refactoring.lesson.name=Refactorización in situ
python.in.place.refactoring.remark.about.application.scope=Nota\: La refactorización local solo se puede aplicar en la ubicación de la definición, mientras que la refactorización de cambio de nombre o firma se puede invocar directamente tanto en las ubicaciones de definición como de uso.
python.in.place.refactoring.set.default.value=Ahora necesitamos ingresar los valores que se insertan como argumentos en cada llamada. En este ejemplo puede seleccionar {0}. Luego presione {1} para continuar.
python.in.place.refactoring.signature.preview=<ide/> muestra una breve vista previa de la firma. Presione {0} para continuar.
python.in.place.refactoring.start.type.new.name=Consideremos otra forma de realizar la refactorización. Supongamos que desea cambiar el nombre de la variable local {0} a {1}. Por favor ingrese un nuevo nombre.
python.in.place.refactoring.update.callers=Presione {0} para actualizar la persona que llama.
python.onboarding.apply.action=Seleccione la acción {0} y presione {1}.
python.onboarding.apply.intention=Seleccione {0} y presione {1}.
python.onboarding.balloon.about.debug.panel=La ventana de herramientas {0} proporciona una barra de herramientas con varias acciones de depuración. Pruebe esta acción más tarde tomando la clase {1}.
python.onboarding.balloon.click.here=Haga clic aquí para establecer un punto de interrupción
python.onboarding.balloon.open.file=Haga doble clic para abrir {0}
python.onboarding.balloon.open.learn.toolbar=Cambie a la ventana de herramientas {0} para continuar con esta lección
python.onboarding.balloon.project.directory=Expanda el directorio del proyecto para ver los archivos del proyecto
python.onboarding.balloon.project.view=Haga clic para abrir <strong>Vista del proyecto</strong>
python.onboarding.balloon.start.debugging=Haga clic en el icono para comenzar a depurar
python.onboarding.balloon.stop.debugging=Haga clic en el icono para comenzar a depurar
python.onboarding.case.changed=El caso ha sido cambiado.
python.onboarding.change.ui.settings=Para esta lección, PyCharm cambia algunas configuraciones de la interfaz de usuario a sus estados predeterminados. Sus preferencias se restaurarán cuando complete o salga de esta clase.
python.onboarding.choose.values.item=Seleccione {0} y presione {1}.
python.onboarding.complete.template=Ingrese {0} y luego presione {1}.
python.onboarding.epilog=Felicidades. Ha completado el recorrido de incorporación. Ahora puede continuar con lo siguiente:\n -Cerrar proyecto de aprendizaje{1} <callback id\="{0}"></callback>\n -Ver más clases <callback id\="{2}">< /devolución de llamada>
python.onboarding.feedback.system.found.interpreters=Intérprete encontrado\:
python.onboarding.feedback.system.no.interpreters=no existe
python.onboarding.feedback.system.start.interpreter=Iniciar intérprete\:
python.onboarding.feedback.system.used.interpreter=Intérprete utilizado\:
python.onboarding.indexing.description=Cuando abres un proyecto por primera vez, <ide/> examina el SDK de Python y el proyecto en sí para recopilar los detalles necesarios para ayudarte con la codificación. Espere hasta que se complete la indexación para continuar.
python.onboarding.interpreter.description=PyCharm ya configuró un intérprete de Python para este curso. Puede modificar el intérprete o crear otro intérprete en su proyecto. La forma más sencilla de hacer esto es utilizar el selector de intérprete de Python en la barra de estado.
python.onboarding.interpreter.tip=<strong>Consejo\:</strong> Puede encontrar la configuración del intérprete de Python aquí
python.onboarding.invoke.completion=Ahora escribamos {0} dentro del paréntesis {1}. <ide/> muestra automáticamente las opciones de finalización de código a medida que escribe. Alternativamente, puede acortar la lista presionando {2} y continuando escribiendo.
python.onboarding.invoke.completion.balloon=Al escribir {0} se mostrarán todas las opciones de finalización de código disponibles.
python.onboarding.invoke.intention.for.code=Las intenciones también le ahorran tiempo y facilitan la escritura de código. Agreguemos rápidamente un tipo de devolución de {0} con intención. Presiona 1}.
python.onboarding.invoke.intention.for.code.balloon=Presione {0} para mostrar las intenciones disponibles
python.onboarding.invoke.intention.for.warning.1=Acabo de solucionar un error, pero este código podría ser más limpio. PyCharm resalta líneas de código que podrían mejorarse y agrega una bombilla de luz amarilla.
python.onboarding.invoke.intention.for.warning.2=Presione {0} para obtener una vista previa de las advertencias y aplicar soluciones rápidas.
python.onboarding.invoke.intention.for.warning.balloon=Presione {0} para ver las soluciones rápidas disponibles
python.onboarding.invoke.search.everywhere.1=Cuando trabaje en <ide/>, es posible que desee buscar archivos dentro de un proyecto, símbolo, clase o acción IDE. En esta lección, busquemos la acción {0} y pongamos en minúscula la cadena {1}.
python.onboarding.invoke.search.everywhere.2=Haga clic en {0} dos veces para abrir el cuadro de diálogo {1}.
python.onboarding.lesson.name=Más información sobre PyCharm
python.onboarding.module.description=Una breve descripción general de las características principales de {0}.
python.onboarding.module.name=Tour de incorporación
python.onboarding.project.view.description=<strong>Vista de proyecto</strong> es una de las ventanas de herramientas principales. Esta vista incluye el directorio del proyecto, bibliotecas externas específicas del SDK y archivos borrador. Puede obtener una vista previa del proyecto de demostración haciendo clic en el botón rayado para abrirlo. También puedes abrirlo presionando {0}.
python.onboarding.run.options.professional=Otras acciones como ''Creación de perfiles'' ({0}) y ''Ejecutar con cobertura'' ({1}) se pueden mostrar haciendo clic en {2}.
python.onboarding.run.sample=Ahora ejecutemos el archivo actual. Haga clic en {0} o presione {1}.
python.onboarding.run.sample.balloon=Intente ejecutar el archivo actual. Haga clic en {0} o presione {1}.
python.onboarding.search.everywhere.description=Como puede ver, el texto seleccionado, {0}, se ha copiado automáticamente a la cadena de entrada. Intentemos ingresar {1} en lugar de {0}.
python.onboarding.select.fix=Aplicar el primer elemento. {0}. La aplicación de esta solución hará que su código sea más limpio.
python.onboarding.start.debugging=Haga clic en el icono {0} para iniciar el proceso de depuración.
python.onboarding.stop.debugging=Comencemos a depurar. Haga clic en el icono {0}.
python.onboarding.temporary.configuration.description=Abrí la muestra de demostración. ¡Ahora ejecutémoslo! Con {0} resaltado, puede ver las acciones de ejecución utilizadas con frecuencia para el objetivo seleccionado. Por ejemplo, puede ejecutar ({1}) o depurar ({2}) su código.
python.onboarding.toggle.breakpoint.1=Quizás hayas notado que el método {1} devuelve {2} en lugar de {0}, que es el valor esperado. Vayamos a la declaración de devolución y depuremos el código problemático.
python.onboarding.toggle.breakpoint.2=Haga clic en el margen del área resaltada para establecer un punto de interrupción.
python.onboarding.type.division=Encontré un problema en el código, solucionémoslo. Divida la suma resultante por la longitud de los valores. El guión de entrenamiento ya ingresa {0}.
python.postfix.completion.complete=Seleccione {0} de la lista y presione {1} para completar la frase.
python.postfix.completion.type=Ingrese {0} después del paréntesis para ver una lista de sugerencias.
python.quick.fix.refactoring.choose.change.signature={0} Seleccione Solución rápida.
python.quick.fix.refactoring.close.completion.list=Actualmente no queremos aplicar ninguna finalización de código. Cierra la lista ({0}).
python.quick.fix.refactoring.finish.refactoring=Haga clic en {0} (o haga clic en {1}) para finalizar la refactorización.
python.quick.fix.refactoring.help.link=Cambio de firma
python.quick.fix.refactoring.invoke.intentions=Como puede ver, <ide/> muestra una advertencia aquí. Presione {0} para llamar la intención.
python.quick.fix.refactoring.lesson.name=Refactorización de solución rápida
python.quick.fix.refactoring.select.new.parameter=Establezcamos un valor predeterminado para el nuevo parámetro. Haga clic en la nueva línea de parámetro. Alternativamente, puede presionar {0} y luego {1} para cambiar el foco al parámetro.
python.quick.fix.refactoring.set.default.value=Puede utilizar {0} para navegar por campos y casillas de verificación. Al marcar esta casilla de verificación, <ide/> integra el valor predeterminado en otras personas que llaman o lo establece como el valor predeterminado para nuevos parámetros. Una vista previa de la firma le ayudará a comprender las diferencias. Ahora establezca el valor predeterminado en 0.
python.quick.fix.refactoring.type.new.argument=Puede implementar alguna refactorización como solución rápida. Digamos que queremos agregar un parámetro al método {0} y pasar la variable {1} al método. Ingresemos {2} después del primer argumento.
python.rename.exclude.item={0} probablemente debería excluirse de la refactorización de cambio de nombre. Después de seleccionar, presione {1}.
python.rename.expand.dynamic.references=En el caso simple, {0} ejecutará una refactorización de cambio de nombre sin confirmación. Sin embargo, en este ejemplo, <ide/> detecta dos llamadas al método {0} en un objeto de tipo desconocido. Expanda el elemento {1}.
python.rename.find.window.closed.warning=Haga clic en {0} para volver a abrir la ventana de la herramienta Buscar.
python.rename.finish.refactoring=Complete el cambio de nombre con el botón {0}.
python.rename.press.rename=Presione {0} para cambiar el nombre del campo {1}, por ejemplo a {2}.
python.run.configuration.help.link=Soporte de ejecución de código
python.run.configuration.lets.run=Ejecutemos un ejemplo simple usando {0}.
python.smart.completion.finish.completion=Ahora seleccione el elemento {0} para completar esta lección.
python.smart.completion.help.link=Coincidencia de tipos completada
python.smart.completion.try.basic.completion=Pruebe la finalización básica de código presionando {0}.
python.smart.completion.use.smart.completion=Desafortunadamente, <ide/> no tiene información directa sobre el tipo {0}. Sin embargo, dependiendo del contexto, a veces puede sugerir la finalización del código. Llame a la finalización inteligente usando {1}.
python.tab.completion.lesson.name=Completar tabulación
python.tab.completion.select.item=Utilice las flechas de su teclado para seleccionar el elemento {0} o ingresar un elemento.
python.tab.completion.start.completion=Supongamos que desea reemplazar {0} con {1}. Invocar la finalización del código presionando {2}.
python.tab.completion.use.tab.completion=Cuando presiona {0}, {1} se inserta antes de {2}. En su lugar, presione {3} para reemplazar {2} con {1}.
toggle.case.part=Letras mayúsculas y minúsculas
