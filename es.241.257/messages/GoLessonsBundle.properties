go.apply.fix=Seleccione {0} y presione {1}.
go.basic.and.smart.type.completion.difference.basic=También puede ejecutar la finalización de código básico presionando {0}.\nDebería devolver un puntero, pero no se sugiere ningún puntero para la finalización de código básico. La finalización inteligente del código de coincidencia de tipos es útil en estos casos. Aplique un filtro a la lista de sugerencias para mostrar solo los tipos aplicables en el contexto actual.\nLas sugerencias seleccionadas se resaltan como errores dentro del archivo. Presione {0} para descubrir por qué.
go.basic.and.smart.type.completion.difference.smart=Debería devolver un puntero, pero la finalización del código básico no sugiere un puntero. La finalización inteligente del código de coincidencia de tipos es útil en estos casos. Filtre la lista de sugerencias para mostrar solo los tipos aplicables en el contexto actual.\nPresione {0} para ejecutar la finalización de código inteligente, seleccione {1} de la lista y luego presione {2}.
go.basic.and.smart.type.completion.goto.next.error=Las sugerencias seleccionadas fueron resaltadas con errores dentro del archivo. Presione {0} para descubrir por qué.
go.basic.and.smart.type.completion.name=Tipos básicos e inteligentes completados.
go.basic.and.smart.type.completion.type.and.choose=De forma predeterminada, <ide/> sugiere inmediatamente la finalización del código. Si comienza a escribir {0} donde está el cursor, aparecerá una lista emergente con las sugerencias correspondientes. Presione {1} para seleccionar {0} de la lista.
go.basic.completion.invoke.completion=<ide/> inserta automáticamente una nueva declaración de importación. Ahora, al presionar {0} para activar la "finalización predeterminada", aparecerá nuevamente el menú de búsqueda.
go.basic.completion.lesson.name=Finalización de código básico
go.choose.name=Introduce un nombre o déjalo como está. Haga clic en {0} para completar la refactorización.
go.code.completion.module.name=Finalización de código
go.comment.navigation.lesson.name=Pasar de la anotación
go.comment.navigation.task=El paquete {0} no es muy grande, por lo que es fácil de navegar. Sin embargo, algunos paquetes pueden ser enormes y contener cientos de líneas de código y comentarios.\nPuedes eliminar comentarios de bloques de código. Por ejemplo, para eliminar un comentario de un bloque seleccionado, presione {0}.
go.comments.comment.one.line=Comente cualquier línea con {0}.
go.comments.lesson.name=Agregar y eliminar comentarios
go.comments.uncomment.block=Para descomentar un bloque de código, presione {0} nuevamente.
go.comments.uncomment.line=Eliminar comentarios de líneas comentadas con el mismo acceso directo {0}
go.completion.for.functions.choose.item=Seleccione {0} de la lista y presione {1}. Cuando vea una lista de sugerencias, puede comenzar a escribir para reducir la cantidad de resultados.
go.completion.for.functions.press.twice=Presione {0} <strong>doble</strong> para buscar todas las funciones que acepten un elemento como primer argumento. Tenga en cuenta que el elemento no es un método, pero el punto hace que parezca así.
go.debug.function.calls.add.arguments.for.evaluation=Introduzca {0} entre paréntesis. El campo debe mostrar {1}.
go.debug.function.calls.click.evaluate=Haga clic en {0} o presione {1}. Luego puede cerrar el cuadro de diálogo.
go.debug.function.calls.enter.expression.to.evaluate=Comience a escribir {1} en el campo {0} y luego seleccione {2} de la lista de sugerencias.
go.debug.function.calls.evaluate.expression=Presione {1} para invocar la acción {0}.
go.debug.function.calls.lesson.name=Llamadas a funciones de depuración
go.debug.function.calls.mac.note=Su sistema operativo puede solicitar una contraseña para iniciar el servidor de depuración.
go.debug.function.calls.run.to.cursor=El cursor se encuentra ahora al final de la línea 15. Presione {0} para ver cómo funciona la acción {1}.
go.debug.function.calls.step.over=Intente utilizar {1} para omitir la declaración {0}.
go.debug.function.calls.toggle.breakpoint=En el modo de depuración, puede pasar diferentes valores a una función y ver qué devuelve la función. Para obtener más información sobre la función de evaluación de expresiones, consulte la <a href\="{0}">documentación</a>.\nPara iniciar el servidor de depuración, su sistema operativo puede solicitar una contraseña.
go.debug.function.context.menu=Hay varias formas de depurar su código. Uno de ellos es usar el menú contextual.\nCompletar etiquetas de estructura JSON automáticamente
go.debug.function.more.menu=Presione el botón {0} para abrir la ventana de herramientas {1}.
go.debug.run.sample=Seleccione el elemento del menú {0} o pruebe {1}.
go.debug.stop.debug=Presione {0} para detener la depuración y finalizar la lección.
go.dump.goroutines.click.button.DlvFilterGoroutinesAction=En la pestaña {0} abierta, haga clic en el botón {1}.
go.dump.goroutines.click.button.more=Haga clic en {1} en la ventana de herramientas {0}.
go.dump.goroutines.dump.tab=La pestaña {0} muestra una lista de gorutinas en su aplicación. Nuestra aplicación enumera algunos, pero su aplicación real puede tener muchos más. En <ide/>, puede aplicar filtros para buscar gorutinas específicas y profundizar en los resultados filtrados.
go.dump.goroutines.filter.goroutines=Ingrese {1} en el campo de búsqueda {0} para filtrar la lista. Este filtro deja solo la pila de ejecución con gorutinas con {1} en su nombre.
go.dump.goroutines.name=Volcado de gorutinas
go.dump.goroutines.toggle.breakpoint=La sección {4} describe algunas de las funciones agregadas a <ide/>. Para conocer otras funciones, consulte la <a href\="{0}">Página de novedades</a>.\nHaga clic en el botón {1} en la pestaña {0} abierta.
go.extract.inline.variables.inline.task=A diferencia de la {0} refactorización, {1} ayuda a eliminar variables innecesarias. Presione {2} para alinear la variable en una única ubicación de uso.
go.extract.inline.variables.lesson.name=Extraer y variables en línea
go.extract.methods.with.returns.complete.refactoring=Ingrese {0} y presione {1}.
go.extract.methods.with.returns.intro={0} La refactorización le permite tomar un fragmento de código, moverlo a un método independiente y reemplazar el código antiguo con una llamada al nuevo método. Si el código termina en una declaración de devolución, se extrae palabra por palabra. {0} Para obtener más información sobre la refactorización, consulte el artículo <a href\="{1}">Extracción de funciones y métodos</a>.
go.extract.methods.with.returns.invoke.refactoring=Asegúrese de que haya un signo de intercalación antes de la cláusula {0} que se pueda extraer. Presiona 1}.
go.extract.methods.with.returns.lesson.name=Método de extracción que contiene retorno
go.feature.trainer.specify.sdk.to.continue.learning.title=Especifique el Go SDK para continuar aprendiendo
go.feature.trainer.too.old.go.sdk.notification.text=El tutorial requiere GoSDK <b>{1}</b> o posterior para la gestión de dependencias con módulos Go. La versión actual de GoSDK es <b>{0}</b>.
go.feature.trainer.too.old.go.sdk.notification.title=Actualizar Go SDK a una versión posterior <b>{0}</b>
go.fmt.lesson.name=ir a correr
go.fmt.task=Si desea formatear su código como {0}, puede ejecutarlo presionando {1}.
go.formatting.clear.selection=Para borrar la selección, presione {0}.
go.formatting.lesson.name=Aplicar estilo de código a su código
go.formatting.reformat.selection=<ide/> admite el formato de código. Para reformatear el bloque de código seleccionado, presione {0}.
go.formatting.whole.file=Para reformatear todo el archivo fuente cuando no hay líneas seleccionadas, use {0}.
go.generics.change.casing=Modifiquemos el estilo del código antes de generar el archivo de prueba. En la documentación oficial de Go, los nombres de los parámetros de tipo se escriben en mayúsculas, mientras que el parámetro {0} en el código está en minúsculas.\nEl siguiente problema en el código es que el tipo se contiene a sí mismo, lo que provoca el error {0}. Para evitar esto, debe incluir un puntero al tipo en lugar del tipo en sí. Hay una solución rápida en el IDE para estos casos.\nAhora que ha eliminado todos los errores en el archivo, puede intentar crear una prueba para la función {0}.\nHaga clic en {0} y en la ventana emergente {1}. arriba Por favor seleccione {2}.
go.generics.click.function=Haga clic en {0} y seleccione {2} en la ventana emergente {1}.
go.generics.fix.type=El siguiente problema con este código es que el tipo se contiene a sí mismo, lo que genera un error {0}. Para evitar esto, debe incluir un puntero al tipo en lugar del tipo en sí. Hay una solución rápida en su IDE para este caso.\nHagamos una refactorización más antes de continuar. Usaremos una interfaz vacía que puede ser reemplazada por {0}. Presione {1} y seleccione {2}.
go.generics.implement.methods.name=Genéricos\: falta la implementación del método
go.generics.inspections.change.interface.to.any=Antes de continuar, refactoricemos una cosa más. Usaremos una interfaz vacía que puede ser reemplazada por {0}. Presione {1} y seleccione {2}.
go.generics.inspections.delete.type.parameters=<ide/> 2022.2 introduce nuevas comprobaciones para ayudarle a encontrar errores que pueda haber pasado por alto.\nSegún el <a href="{0}">equipo de Go</a>, las interfaces y los métodos se agrupan dentro de una unión. No utilice. Por lo tanto, {1} se usa como término entre los elementos de unión.\nEl parámetro de tipo está sombreado porque no se usa en ninguna parte de nuestro código. Solucione este problema reemplazando el tipo {0} con {1} en la sección de parámetros.
go.generics.inspections.title=Inspección de parámetros de tipo
go.generics.inspections.union.interfaces.with.methods=Según el <a href="{0}">equipo de Go</a>, las interfaces y los métodos no se pueden utilizar juntos dentro de una unión. Por lo tanto, {1} no se puede utilizar como término entre elementos de unión.\nEl parámetro de tipo está atenuado porque no se utiliza en ninguna parte de este código. Solucione este problema reemplazando el tipo {0} con {1} en la sección de parámetros.
go.generics.inspections.unused.type.parameter=El parámetro de tipo está atenuado porque no se utiliza en ninguna parte de este código. Solucione este problema reemplazando el tipo {0} con {1} en la sección de parámetros.
go.generics.right.click.function=Ahora que ha eliminado todos los errores en el archivo, puede intentar crear una prueba para la función {0}.\nAhora haga clic en el enlace de resultados para abrir el código en su navegador.\nPara usar parámetros de tipo, {0} ) {1} y por encima. Puede abrir {0} y solucionarlo manualmente o utilizar la solución rápida.\nGenerar pruebas para parámetros de tipo
go.generics.running.code.click.link=Ahora haga clic en el enlace resultante para abrir el código en su navegador.\nPara ejecutar el código usando parámetros de tipo, haga clic en {0}.
go.generics.running.code.missing.go118.download.or.local=Si lo instaló anteriormente, puede usar la lista desplegable para buscar Ir {0}. Alternativamente, puede hacer clic en el botón {1} y elegir si desea descargar la versión SDK requerida ({2}) o moverla a una copia local en su disco duro ({3}).\nPuede usar Go {0} o superior utilizando uno de los métodos mencionados. Seleccione su versión y haga clic en {4} en todos los cuadros de diálogo para aplicar el nuevo SDK.
go.generics.running.code.missing.go118.downloading=<ide/> descarga y descomprime Go SDK. Después de este proceso, el IDE indexará los archivos y los utilizará como asistencia de codificación.
go.generics.running.code.missing.go118.indexing=<ide/> ahora indexa archivos SDK. Espere hasta que se procese. Una vez completado, puede utilizar este Go SDK.
go.generics.running.code.missing.go118.quickfix=Actualmente estás utilizando Go {0}. Para usar genéricos en esta clase, debe instalar Go 1.18 o superior o cambiar a esa versión.\nGenericos: código en ejecución
go.generics.running.code.name=Ejecutando el código
go.generics.running.code.playground=Otra forma de ejecutar el código es usar {0}.\nNo hay errores en el IDE, por lo que el código está listo para ejecutarse. Presione {0}.
go.generics.test.generation.module=Crear pruebas para parámetros de tipo
go.goto.next.error=Presione {0} para pasar al siguiente error resaltado.
go.goto.next.warning=Presione {0} para pasar a la siguiente advertencia resaltada en el archivo.
go.navigation.module.description=Moviéndose por la base del código
go.navigation.module.name=Navegar
go.new.code.coverage.click.create=Haga clic en {1} en el cuadro de diálogo {0}.
go.new.code.coverage.click.gutter=Para ejecutar todas las pruebas para el archivo actual, haga clic en el icono parpadeante en el margen. {0} | Vaya a {1}.
go.new.code.coverage.description=<ide/> admite la ejecución de cobertura de código en aplicaciones y pruebas. La cobertura de código en su programa le permite determinar qué código se ha ejecutado una o varias veces y también puede ayudarlo a identificar el código no utilizado.\nUna de sus pruebas falla porque hay un error en los datos de prueba requeridos. Para corregir la prueba, cambie {0} a {1}.
go.new.code.coverage.fix.test=Una de sus pruebas falla porque hay un error en los datos de prueba requeridos. Para corregir la prueba, cambie {0} a {1}.
go.new.code.coverage.go.to.test=También puede ejecutar cobertura de código en archivos de prueba. Para navegar hasta el archivo de prueba, presione {0}, seleccione la primera opción y luego navegue hasta el archivo {1}.
go.new.code.coverage.in.another.package.name=Cobertura de código
go.new.code.coverage.view=La ventana de la herramienta {0} muestra los resultados y muestra que solo se cubre el 85,7 % del código. La razón por la que la cobertura no es del 100% es porque la función {1} no llama a la función {2}.
go.new.data.flow.analysis.actions=El análisis de flujo de datos (DFA) es un método utilizado durante la programación para comprender cómo fluyen los datos dentro de un programa. Piense en su programa como un mapa con varios puntos, donde cada punto es un fragmento de código (una declaración o directiva). Estos puntos se siguen a lo largo del camino mientras se ejecuta el programa. En GoLand, DFA examina este mapa y analiza el código.\nAl hacer clic en {0}, accederá a la primera advertencia de DFA.
go.new.data.flow.analysis.check.err.for.nil=We need to check the returned value of {0} for {1}.\nType {0} and a dot ({2}), then select {3} from the list of suggestions.
go.new.data.flow.analysis.dereference=El código anterior podría causar pánico debido a una desreferencia del puntero {0}. Si {1} es {0}, entonces parte de la condición que accede a {2} provoca un error de tiempo de ejecución.\nPara solucionar este problema, reemplace la lógica OR({3}) con AND({4}) . Esto garantiza que la segunda condición, la desreferencia del puntero {0}, se evalúe sólo cuando {0} no sea {1}. escriba {4}.
go.new.data.flow.analysis.explain.and.fix=La segunda condición nunca se ejecuta. Presione {0} para eliminar.
go.new.data.flow.analysis.name=Análisis de flujo de datos
go.onboarding.apply.action=Seleccione la acción {0} y presione {1}.
go.onboarding.apply.intention=Seleccione {0} y presione {1}.
go.onboarding.balloon.about.debug.panel=La ventana de herramientas {0} proporciona una barra de herramientas con varias acciones de depuración. Pruebe esta acción más tarde tomando la clase {1}.
go.onboarding.balloon.click.here=Haga clic aquí para establecer un punto de interrupción
go.onboarding.balloon.open.file=Haga doble clic para abrir {0}
go.onboarding.balloon.open.learn.toolbar=Cambie a la ventana de herramientas {0} para continuar con esta lección
go.onboarding.balloon.project.directory=Puede ver los archivos del proyecto haciendo doble clic en el directorio del proyecto para expandirlo.
go.onboarding.balloon.project.view=Haga clic para abrir la vista <strong>Proyecto</strong>
go.onboarding.balloon.start.debugging=Haga clic en el icono para comenzar a depurar
go.onboarding.balloon.stop.debugging=Haga clic en el icono para comenzar a depurar
go.onboarding.case.changed=El caso ha sido cambiado.
go.onboarding.change.ui.settings=Para esta lección, <ide/> cambiará algunas configuraciones de la interfaz de usuario a su estado predeterminado. Sus preferencias se restaurarán cuando complete o salga de esta clase.
go.onboarding.click.run.button=Click the highlighted run button {0} to show run options.
go.onboarding.click.run.button.balloon=Click to show run options
go.onboarding.close.debug.tool.window=Cierre la ventana de la herramienta {0} y presione {1}.
go.onboarding.context.menu=Hay varias formas de ejecutar su código. Uno de ellos es a través del menú contextual.\nSeleccione {0} o pruebe {1}.
go.onboarding.epilog=Felicidades. Ha completado el recorrido de incorporación. Ahora puede continuar con lo siguiente:\n"{0}">Cerrar</callback>\n"{2}">Ver</callback>
go.onboarding.feedback.system.found.sdks=SDK encontrados:
go.onboarding.feedback.system.no.sdks=Ninguno
go.onboarding.feedback.system.used.sdk=SDK utilizados:
go.onboarding.finish.exit=Cerrar proyecto de demostración
go.onboarding.finish.modules=Ver más clases
go.onboarding.finish.text=<ide/> Acaba de completar el recorrido de incorporación.\nCerrar proyecto de demostración
go.onboarding.finish.title=Felicidades
go.onboarding.indexing.description=Cuando abres un proyecto por primera vez, <ide/> examina el SDK de Go y el proyecto en sí para recopilar los detalles necesarios para ayudar con la codificación. Espere hasta que se complete la indexación para continuar.
go.onboarding.invoke.completion.tip=<strong>Tip</strong>: you can press {0} to show completion items in any place of the code.
go.onboarding.invoke.intention.for.code=Las intenciones también le ahorran tiempo y hacen que su código sea más fácil de escribir. Convirtamos rápidamente la función {0} en una función exportada usando intenciones. Presiona 1}.
go.onboarding.invoke.intention.for.code.balloon=Al presionar {0} se mostrarán todas las intenciones disponibles.
go.onboarding.invoke.intention.for.warning.1=Acabamos de corregir un error, pero podemos hacer que este código se vea más limpio. <ide/> resalta líneas de código que podrían mejorarse y agrega una bombilla de luz amarilla.
go.onboarding.invoke.intention.for.warning.2=Presione {0} para obtener una vista previa de las advertencias y aplicar soluciones rápidas.
go.onboarding.invoke.intention.for.warning.balloon=Presione {0} para ver todas las soluciones rápidas disponibles
go.onboarding.invoke.search.everywhere.1=Cuando trabaje en <ide/>, es posible que desee buscar archivos dentro de un proyecto, símbolo, tipo o acción IDE. En esta lección, busquemos la acción {0} y pongamos en minúscula la cadena {1}.
go.onboarding.invoke.search.everywhere.2=Haga clic en {0} dos veces para abrir el cuadro de diálogo {1}.
go.onboarding.lesson.name={0} Aprender
go.onboarding.module.description={0} Esta es una vista previa de las funciones clave.
go.onboarding.module.name=Tour de incorporación
go.onboarding.project.view.description=La vista <strong>Proyecto</strong> es una de las ventanas de herramientas principales. Esta vista incluye directorios de proyectos, paquetes específicos del SDK y archivos borrador. Ábralo usando el botón rayado y verá un proyecto de demostración simple. También puede abrir la vista presionando {0}.
go.onboarding.return.to.welcome=\ y volver a la pantalla de inicio
go.onboarding.run.sample=Seleccione {0} o pruebe {1}.
go.onboarding.run.widget.balloon=With this widget, you can execute popular running actions for the selected configuration
go.onboarding.search.everywhere.description=Como puede ver, el texto seleccionado, {0}, se ha copiado automáticamente a la cadena de entrada. Intentemos ingresar {1} en lugar de {0}.
go.onboarding.select.fix=Aplicar el primer elemento: {0}. La adaptación de esta solución elimina paréntesis innecesarios.
go.onboarding.select.item=Las opciones de finalización de código aparecen automáticamente en <ide/> a medida que escribe. Utilice las teclas de dirección del teclado para seleccionar el elemento {0} y luego presione {1}.
go.onboarding.start.debugging=Haga clic en el icono {0} para iniciar el proceso de depuración.
go.onboarding.start.typing=Now start typing {0} to show the completion options.
go.onboarding.start.typing.balloon=Cuando escribas {0} verás opciones para completar el código.
go.onboarding.stop.debugging=Comencemos a depurar. Haga clic en el icono {0}.
go.onboarding.temporary.configuration.description=<ide/> ha creado una configuración de ejecución temporal. Esta configuración se puede encontrar en la barra de herramientas Ejecutar. Esta barra de herramientas le permite ejecutar acciones de ejecución populares para la configuración seleccionada, incluidas Ejecutar {0}, Depurar {1}, Generar código {2} y Ejecutar código con cobertura {3}.
go.onboarding.toggle.breakpoint.1=Quizás hayas notado que el método {1} devuelve {2} en lugar de {0}, que es el valor esperado. Vayamos a la declaración de devolución y depuremos el código problemático.
go.onboarding.toggle.breakpoint.2=Haga clic en el margen del área resaltada para establecer un punto de interrupción.
go.onboarding.type.division=Encontramos un problema en nuestro código, así que solucionémoslo. Divida la suma resultante por la longitud de los valores. Por favor ingrese {0}.
go.playground.module.name=Ejecutar código en Go Playground
go.playground.note=<strong>Nota</strong>: Esta lección requiere que te conectes a los servidores de Go Playground.
go.playground.paste.url=En el campo {0}, haga clic en {1} y luego haga clic en {2} para pegar la URL.
go.playground.run.code.in.playground=Haga clic en el botón {0} en la barra de herramientas para ejecutar el código utilizando el servidor Go Playground.
go.playground.run.code.locally=Haga clic en el botón {0} en la barra de herramientas para ejecutar el código en su computadora.
go.playground.run.copy.link=Puede obtener el código del archivo y del enlace Go Playground. Presione {0} para copiar el enlace seleccionado.
go.playground.select.open.in.playground=Haga clic derecho en el código seleccionado y seleccione {0} | Vaya a {1}.\nEjecute este código localmente. Para hacer esto, seleccione la casilla de verificación {0} en la barra de herramientas.
go.playground.select.run.locally=Ahora ejecutemos este código localmente. Para ejecutarlo, seleccione la casilla de verificación {0} en la barra de herramientas.
go.playground.select.url=En el cuadro de diálogo {0}, seleccione el botón de opción {1}.
go.postfix.completion.better.variable.names.in.templates.description=<ide/> le ayuda a nombrar las variables creadas con las plantillas de sufijo {0} y {1}. Por ejemplo, estas sugerencias le darían {2} o {3} para un índice, o {4} para {5}.
go.postfix.completion.lesson.name=Completar y ordenar sufijos
go.postfix.completion.task=Las porciones del alfabeto están desordenadas. Para ordenar correctamente un segmento de cadena, puede aplicar la función {0} del paquete {1} al segmento.\nFinalización de código para la función
go.refactoring.inline.dialog=Cuando se abra el cuadro de diálogo, haga clic en {0}.
go.refactoring.menu.extract.method=Ahora extraigamos un método para calcular la distancia entre dos puntos. Presione {0} y seleccione {1} de la lista, o presione {2} para ejecutar esta acción directamente.
go.refactoring.menu.inline.refactoring=Haga clic en {0} y seleccione {1} para incorporar el método.
go.refactoring.menu.introduce.parameter.eng=Digamos que necesitamos extraer {0} como constante. Solo usa {1}. Seleccione {1} de la lista en el menú de refactorización y presione {2}.
go.refactoring.menu.lesson.name=Menú de refactorización
go.refactoring.menu.select.math.sqrt=Seleccione la expresión parpadeante para extraer el método completo en el código y presione {0}.
go.refactoring.menu.show.refactoring.list=Hay una variedad de refactorizaciones disponibles en <ide/>. Cada refactorización tiene una tecla de acceso directo. Sin embargo, puede presionar {0} en cualquier momento para mostrar una lista de todas las refactorizaciones disponibles en el contexto actual.
go.refactoring.menu.start.refactoring=Seleccione {0} para reemplazar todo el {1} en su código.
go.refactorings.module.description=La refactorización ayuda a mantener su código manejable y libre de espacios o código duplicado.
go.refactorings.module.name=Refactorización
go.rename.apply.intention=Introduzca un nuevo nombre para este campo. Por ejemplo, escriba {0} y luego presione {1} para guardar el resultado.
go.rename.invoke.intentions=Puede colocar un símbolo de intercalación en un símbolo y cambiarle el nombre usando la refactorización {0}. Coloque el cursor en el campo {1} de su código y presione {2}.
go.rename.lesson.name=Cambiar nombre
go.running.code.context.menu=Hay varias formas de ejecutar su código. Una forma es utilizar el menú contextual.\nHaga clic en {0} para ejecutar el código. El resultado de la aplicación se muestra en la ventana de herramientas {1}.
go.running.code.run.sample=Haga clic en {0} para ejecutar el código. El resultado de la aplicación se muestra en la ventana de herramientas {1}.
go.search.everywhere.goto.type=Great\! However, sometimes you need to find only types or search only in some specific directories. Use {0} to search for types.
go.search.everywhere.quick.documentation=Press {0} to preview documentation for the selected type.
go.search.everywhere.type.popup.closed.warning.message=Press {0} to open the search window again.
go.search.everywhere.type.type.name=Suppose you need to find a type that is called {0}. Type initial letters of the search words – {1}. Do not navigate to the found type yet.
go.search.everywhere.use.all.places=The matching type in the demo project is found. However, you can find other types that are not included in the project. Let''s switch the {0} filter to {1} to bring up matching types from Go SDK.
go.smart.type.completion.lesson.name=Finalización de tipo inteligente
go.smart.type.completion.task=La finalización de tipo inteligente filtra la lista de sugerencias para incluir solo los tipos aplicables en el contexto actual. Haga clic en {0} para ver una lista de las sugerencias correspondientes. Presione {1} para seleccionar el primer elemento.
go.statement.completion.complete.condition=Después de agregar la condición entre paréntesis {0}, presione {1} para pasar a la declaración {2}.
go.statement.completion.complete.finish.body=Ingrese {0} en una línea, luego presione {1} para completar la sintaxis y aplicar el formato.
go.statement.completion.complete.for=Presione {0} para completar la declaración {1}.
go.statement.completion.complete.if=Ingrese {0}, luego presione {1} para generar la frase.
go.statement.completion.help.link=Finalización de sintaxis
go.statement.completion.lesson.name=Finalización de sintaxis
go.support.for.table.tests.call.context.menu=Al ejecutar una prueba, <ide/> tiene en cuenta la posición del signo de intercalación.\nPuede ejecutar cada subprueba utilizando el mismo método. El cursor actual está en la subprueba {2}. Haga clic en {0} para ejecutar. Puedes consultarlo en \n"{1}">documentación de GoLand</a>.
go.support.for.table.tests.run.subtest=Puede ejecutar cada subprueba utilizando el mismo método. El cursor actual está en la subprueba {2}. Haga clic en {0} para ejecutar. \n¡Ups, la prueba de fuzz falló! Para descubrir por qué, desplácese hacia abajo en el resultado de la ventana de herramientas {0} y haga clic en el enlace al directorio {1}.
go.support.fuzz.testing.run=La prueba difusa es un método para automatizar las pruebas mediante el envío de varias entradas de forma secuencial. Comprobemos la función con varios datos generados al ejecutar una prueba fuzz.\n¡Oh, no, la prueba fuzz falló! Para descubrir por qué, desplácese hacia abajo en el resultado de la ventana de herramientas {0} y haga clic en el enlace al directorio {1}.
go.support.fuzz.testing.title=Prueba de fuzz
go.to.internal.directory={0} A partir de 2021.2, puede navegar a las interfaces almacenadas en la carpeta {1}.\nDe acuerdo con las <a href="{0}">sugerencias de restricciones de compilación a prueba de errores</a>, {1} será reemplazado por {2} Cambia a . Durante el período de transición {1}-{2}, la sintaxis se mantendrá en las versiones de Go 1.16-1.18. En Go versión 1.16, puede usar la sintaxis antigua o ambas sintaxis simultáneamente.\nPara verificar la ubicación del archivo, simplemente coloque el mouse sobre la pestaña del editor. Por ejemplo, coloque el cursor sobre la pestaña {0}.
go.to.internal.directory.hover.over.tab=Para verificar la ubicación del archivo, simplemente coloque el mouse sobre la pestaña del editor. Por ejemplo, coloque el cursor sobre la pestaña {0}.
go.to.internal.directory.name=Navegación, restricciones de compilación y formato de código.
go.to.internal.directory.reformat.gofmt.on.save=Es necesario reformatear el código del archivo {0}. Haga clic en {1} para reformatear el archivo.\nUtilice parámetros de tipo
go.type.parameters.description=Esta es una característica útil cuando se trabaja con genéricos.
go.type.parameters.module.name=Genéricos (parámetros de tipo)
go.view.hierarchies.choose.any.implementation=Seleccione cualquier implementación y luego toque o haga clic en {0}.
go.view.hierarchies.goto.implementation=Presione {0} para encontrar la implementación de {1}.
go.view.hierarchies.hide.find.tool.window=Para ocultar la ventana de la herramienta {1}, presione {0}.
go.view.hierarchies.hide.method.hierarchy=Haga clic en {1} nuevamente para ocultar {0} también.
go.view.hierarchies.invoke.implementations.again=Hay un icono de margen {0} en la declaración del método base. Haga clic en el icono o presione {1}.
go.view.hierarchies.lesson.name=Vista jerárquica
go.view.hierarchies.navigate.to.base=Puede pasar de un método derivado a un método base. Haga clic en {0} o haga clic en el icono {1} en el margen del editor.
go.view.hierarchies.open.in.find.tool.window=Si tiene una jerarquía grande, es posible que desee navegar hasta la implementación en la ventana de herramientas {0}. Haga clic en {1}.
go.view.hierarchies.open.method.hierarchy=Es posible que desee consultar la jerarquía completa de este método. Presione {0}.
go.view.hierarchies.open.type.hierarchy=Presione {0} para ver los subtipos.
go.what.s.new.module.description=Novedades de GoLand 2020.3 (diciembre de 2020).
go.what.s.new.module.name=Novedades de GoLand 2020.3
go.working.with.json.add.key.to.tags=También puede utilizar acciones de intención para agregar etiquetas XML y etiquetas ASN1.\nPuede aplicar diferentes estilos de código a los nombres de los campos dentro de las etiquetas. Por ejemplo, intente cambiarlo a camelCase. Presione {0}, haga clic en {1} y luego seleccione {2}.
go.working.with.json.change.style=Puede aplicar diferentes estilos de código a los nombres de campos dentro de las etiquetas. Por ejemplo, intente cambiarlo a camelCase. Presione {0}, haga clic en {1} y luego seleccione {2}.
go.working.with.json.copy=<ide/> tiene varias herramientas para ayudarle a procesar su código JSON de manera más efectiva.\nReemplace la sección de comentarios haciendo clic en {0}. Cuando aparezca el cuadro de diálogo {1}, haga clic en <strong>Sí</strong>.\nCambie el nombre de la estructura, ingrese {0} y luego presione {1} para finalizar la edición. El IDE corrige automáticamente el formato.
go.working.with.json.introduce.type=Extraigamos la estructura incrustada {0}.\nPresione {1} y seleccione {2}.
go.working.with.json.name=Trabajar con JSON
go.working.with.json.name.struct=Cambie el nombre de la estructura, ingrese {0} y luego presione {1} para finalizar la edición. El IDE corrige automáticamente el formato.
go.working.with.json.replace=Presione {0} para reemplazar la sección de comentarios. Cuando aparezca el cuadro de diálogo {1}, haga clic en <strong>Sí</strong>.\nLo mismo ocurre con la actualización de la ubicación del valor de la etiqueta. Digamos que desea agregar {0} a todas las etiquetas en la estructura actual.\nAsegúrese de que el cursor esté en la posición del primer parámetro del método {0}. Presione {1} para llamar a la acción de intención.
go.working.with.json.update.value.in.tags=Lo mismo ocurre con las actualizaciones de ubicación del valor de la etiqueta. Supongamos que desea agregar {0} a todas las etiquetas en la estructura actual.\nPresione {1}, seleccione {2} y luego escriba {3}.\n Alternativamente, puede seleccionar {0} de la lista de sugerencias . <ide/> conoce los valores más comunes para etiquetas JSON, XML y ASN1.
go.working.with.parameters.invoke.intentions.1=Observe que el símbolo de intercalación está en la posición del primer parámetro del método {0}. Presione {1} para llamar a la acción de intención.
go.working.with.parameters.invoke.intentions.2=Verifique el método {0} en el editor. El cursor está en la posición del primer parámetro. Presione {1} para llamar a la acción de intención.
go.working.with.parameters.invoke.intentions.3=Si un método que implementa una interfaz requiere parámetros, no es seguro eliminarlos. Presione {0} para ver una lista de opciones posibles.
go.working.with.parameters.lesson.name=Usar parámetros
go.working.with.parameters.press.action.again=Presione {0} nuevamente.
go.working.with.parameters.remove.parameters=<ide/> solo resalta los nombres de los parámetros obsoletos si sus tipos se utilizan para implementar la especificación del método. En este caso, puede cambiar el nombre de este parámetro a {0} o eliminarlo por completo.
go.working.with.parameters.signature.combined=Vea cómo se combinan los tipos de firma.
go.working.with.parameters.signature.expanded=Seleccione {0} para devolver la firma a su estado inicial.
go.working.with.parameters.single.type=Si una firma de función o método tiene múltiples parámetros de un solo tipo, puede usar una especificación de tipo corta ({0}) para esos parámetros, o una especificación de tipo separada ({1}) para cada parámetro.
go.working.with.parameters.that.are.not.used=<ide/> puede detectar parámetros de una firma que no se utilizan en el cuerpo de un método o función. Si ese parámetro no se utiliza, puede utilizar la solución rápida {0} para eliminarlo.
toggle.case.part=Case
