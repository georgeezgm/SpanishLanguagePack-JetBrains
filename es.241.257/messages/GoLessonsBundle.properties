go.apply.fix={0}을(를) 선택하고 {1}을(를) 누르세요.
go.basic.and.smart.type.completion.difference.basic={0}을(를) 눌러 기본 코드 완성을 실행할 수도 있습니다.\n{0}을(를) 누르고 제안 목록을 확인한 다음 {1}을(를) 선택하세요.
go.basic.and.smart.type.completion.difference.smart=포인터를 반환해야 하지만 기본 코드 완성에는 포인터가 제안되지 않았습니다. 이런 경우에는 스마트 타입 일치 코드 완성이 유용합니다. 제안 목록에 필터를 적용하여 현재 컨텍스트에서 적용할 수 있는 타입만 표시합니다.\n{0}을(를) 눌러 스마트 코드 완성을 실행하고 목록에서 {1}을(를) 선택한 다음 {2}을(를) 눌러 현재 값을 대체하세요.
go.basic.and.smart.type.completion.goto.next.error=선택된 제안은 파일 내에서 오류로 강조 표시되었습니다. 이유를 알아보려면 {0}을(를) 누르세요.
go.basic.and.smart.type.completion.name=기본 및 스마트 타입 완성
go.basic.and.smart.type.completion.type.and.choose=기본적으로 <ide/>은(는) 코드 완성을 즉시 제안합니다. 캐럿이 있는 곳에서 {0}을(를) 입력하기 시작하면 그에 대응하는 제안 항목이 포함된 팝업 목록이 표시됩니다. {1}을(를) 누르면 목록에서 {0}을(를) 선택할 수 있습니다.
go.basic.completion.invoke.completion=<ide/>은(는) 새 import 문을 자동으로 삽입합니다. 이제 기본 코드 완성을 활성화하기 위해 {0}을(를) 누르고 {1}을(를) 선택한 다음 {2}을(를) 누르세요.
go.basic.completion.lesson.name=기본 코드 완성
go.choose.name={0}을(를) 눌러 리팩터링을 완료하세요.
go.code.completion.module.name=코드 완성
go.comment.navigation.lesson.name=주석 내 선언
go.comment.navigation.task={0} 패키지는 별로 크지 않으므로 쉽게 탐색할 수 있습니다. 그러나 일부 패키지는 수백 개의 코드와 주석 줄이 포함되어 거대할 수 있습니다.\nIDE에서 선언이 동일한 패키지에 있는 경우 주석에서 선언으로 이동할 수 있습니다. 32행의 주석 섹션에 있는 {1} 함수와 같이 주석 내 메서드, 함수, 구조체의 이름은 조금씩 다르게 색상이 지정됩니다.\n이 주석에서 함수 선언으로 이동하려면 주석의 함수 이름에 캐럿을 배치한 후, {2}을(를) 누르세요.
go.comments.comment.block=코드 블록을 주석 처리할 수 있습니다. 예를 들어 선택한 블록을 주석 처리하려면 {0}을(를) 누릅니다.
go.comments.comment.one.line={0}(으)로 임의의 줄을 주석 처리하세요.
go.comments.lesson.name=주석 추가 및 제거
go.comments.uncomment.block=코드 블럭을 주석 해제하려면, {0}을(를) 다시 누르세요.
go.comments.uncomment.line=같은 단축키 {0}(으)로 주석이 추가된 줄에서 주석 제거
go.completion.for.functions.choose.item=목록에서 깜빡이는 {0} 함수를 선택하고 {1}을(를) 누르세요. 제안 목록이 표시될 때에는 입력을 시작하여 결과 개수를 줄일 수 있습니다.
go.completion.for.functions.press.twice=이제 마침표({0})를 입력하고 {1}을(를) <strong>두 번</strong> 누릅니다. 이 경우 IDE가 첫 번째 인수로 문자열을 받는 모든 함수를 찾습니다. 마침표 때문에 메서드처럼 보이지만 메서드가 아니라는 점에 유의하세요.
go.debug.function.calls.add.arguments.for.evaluation=소괄호 안에 {0}을(를) 입력하세요. 필드에 {1}이(가) 표시되어야 합니다.
go.debug.function.calls.click.evaluate={0}을(를) 클릭하거나 {1}을(를) 누르세요. 그 후에 대화상자를 닫을 수 있습니다.
go.debug.function.calls.enter.expression.to.evaluate={0} 필드에 {1}을(를) 입력하기 시작한 다음 제안 목록에서 {2}을(를) 선택하세요.
go.debug.function.calls.evaluate.expression={1}을(를) 눌러 {0} 액션을 호출하세요.
go.debug.function.calls.lesson.name=함수 호출 디버그
go.debug.function.calls.mac.note=디버그 서버를 시작하기 위해 운영 체제에서 비밀번호를 요청할 수 있습니다.
go.debug.function.calls.run.to.cursor=캐럿이 이제 15행 끝에 있습니다. {0}을(를) 눌러 {1} 액션이 어떻게 동작하는지 확인하세요.
go.debug.function.calls.step.over={1}을(를) 사용하여 {0} 구문을 스텝오버해 보세요.
go.debug.function.calls.toggle.breakpoint=디버그 모드에서 함수에 다른 값을 전달하고 함수가 반환하는 결과를 확인할 수 있습니다. 표현식 평가 기능에 관한 자세한 내용은 <a href\="{0}">문서 </a>를 참조하세요.\n{1}디버그를 시작하려면 중단점을 만들어야 합니다. 중단점을 전환하려면 {2}을(를) 누르세요.
go.debug.function.calls.version.warning=<strong>참고</strong>\: 이 기능을 사용하려면 Go 1.11 또는 이후 버전을 설치해야 합니다.
go.debug.function.context.menu=코드를 디버그하는 방법은 여러 가지가 있습니다. 그 중 하나는 컨텍스트 메뉴를 활용하는 것입니다.\n에디터 상의 영역을 오른쪽 클릭한 다음 강조 표시된 메뉴 항목인 {0}을(를) 선택하세요. 항목 이름은 조금씩 다를 수 있습니다. {2} 함수의 컨텍스트에서는 {1}일 수 있고 다른 컨텍스에서는 {3}일 수 있습니다.
go.debug.function.more.menu={1} 도구 창을 열려면 {0} 버튼을 누르세요.
go.debug.run.sample={0} 메뉴 항목을 선택하거나 {1}을(를) 시도하세요.
go.debug.stop.debug=디버그를 중지하고 강의를 마치려면 {0}을(를) 누르세요.
go.dump.goroutines.click.button.DlvFilterGoroutinesAction=열린 {0} 탭에서 {1} 버튼을 클릭하세요.
go.dump.goroutines.click.button.more=드롭다운 목록에서 {0}을(를) 선택하세요.
go.dump.goroutines.dump.tab={0} 탭에는 애플리케이션의 고루틴 목록이 표시됩니다. 당사의 애플리케이션에는 몇 가지 목록이 있지만, 사용자의 실제 애플리케이션에는 그보다 더 많이 있을 수 있습니다. <ide/>에서, 특정 고루틴을 검색하는 필터를 적용하고 필터링된 결과를 자세히 살펴볼 수 있습니다.
go.dump.goroutines.filter.goroutines={0} 검색창에서 {1}을(를) 입력해 목록을 필터링하세요. 이 필터는 이름에 {1}이(가) 있는 고루틴을 가진 실행 스택만 남깁니다.
go.dump.goroutines.name=고루틴 덤프
go.dump.goroutines.toggle.breakpoint=Go에서는 동시 작업을 고루틴이라고 부릅니다. 고루틴을 생성하려면 함수 또는 메서드 호출 앞에 {0} 문을 사용하세요.\n프로그램이 사용하는 모든 고루틴의 덤프를 생성하거나 특정 고루틴을 검색하는 필터를 적용하거나 필터링한 결과를 조사할 수 있습니다.\n고루틴을 덤프하려면 디버그를 시작해야 합니다. 단, 그 전에 중단점을 생성해야 합니다. {1}을(를) 눌러 중단점을 전환하세요.{2}
go.extract.inline.variables.extract.task={0}을(를) 눌러 변수를 추출하고 문자열 표현식을 선택한 다음, 새 이름을 입력하고 {1}을(를) 눌러 리팩터링을 완료하세요.
go.extract.inline.variables.inline.task={0} 리팩터링과 반대로 {1}은(는) 불필요한 변수의 제거를 돕습니다. {2}을(를) 눌러 변수를 단일 사용 위치로 인라인화하세요.
go.extract.inline.variables.lesson.name=변수 추출 및 인라인화
go.extract.methods.with.returns.complete.refactoring={0}을(를) 입력하고 {1}을(를) 누르세요.
go.extract.methods.with.returns.intro={0} 리팩터링을 사용하면 코드 조각을 취해 분리된 메서드로 이동하고 이전 코드를 새 메서드 호출로 바꿀수 있습니다. 코드가 return 문에서 종료되면 그대로 추출됩니다. {0} 리팩터링에 관한 자세한 내용은 <a href\="{1}">함수 및 메서드 추출</a> 자료를 참조하세요.
go.extract.methods.with.returns.invoke.refactoring=추출할 수 있는 {0} 절 앞에 캐럿이 있는지 확인하세요. {1}을(를) 누르세요.
go.extract.methods.with.returns.lesson.name=메서드 추출
go.feature.trainer.specify.sdk.to.continue.learning.title=학습을 계속하려면 Go SDK 지정
go.feature.trainer.too.old.go.sdk.notification.text=튜토리얼을 진행하려면 Go 모듈로 종속성을 관리하기 위해 GoSDK <b>{1}</b> 이후 버전이 필요합니다. 현재 GoSDK 버전은 <b>{0}</b>입니다.
go.feature.trainer.too.old.go.sdk.notification.title=<b>{0}</b> 이후 버전으로 Go SDK 업데이트
go.fmt.lesson.name=go fmt로 코드 서식 지정
go.fmt.task=코드에 서식을 지정할 때 {0}을(를) 선호하는 경우 {1}을(를) 눌러 실행할 수 있습니다.
go.formatting.clear.selection=선택 범위를 정리하려면 {0}을(를) 누르세요.
go.formatting.lesson.name=내장된 서식 지정 도구로 코드 서식 지정
go.formatting.reformat.selection=<ide/>은(는) 코드 서식 지정을 지원합니다. 선택한 코드 블록의 서식을 다시 지정하려면 {0}을(를) 누르세요.
go.formatting.whole.file=줄이 선택되지 않은 경우 전체 소스 파일의 서식을 다시 지정하려면, {0}을(를) 사용하세요.
go.generics.change.casing=테스트 파일을 생성하기 전에 코드 스타일을 수정하겠습니다. 공식 Go doc에서 타입 매개변수 이름은 대문자로 작성되지만, 여기 코드의 {0} 매개변수는 소문자로 되어 있습니다.\n대소문자를 수정하려면 빠른 수정을 사용할 수 있습니다. 이렇게 하려면 {1}을(를) 누르고 {2}을(를) 선택하세요.
go.generics.click.function={0}을(를) 클릭하고 {1} 팝업에서 {2}을(를) 선택하세요.
go.generics.fix.type=이 코드에 있는 다음 문제는 타입에 자신이 포함되어, {0} 오류가 발생한다는 것입니다. 이를 방지하려면 타입 자체가 아닌 타입에 대한 포인터를 포함시켜야 합니다. IDE에 이 경우에 해당하는 빠른 수정이 있습니다.\n{1}을(를) 누르고 {2}을(를) 선택하세요.
go.generics.implement.methods.name=제네릭\: 누락된 메서드 구현
go.generics.inspections.change.interface.to.any=진행하기 전에 하나만 더 리팩터링해보겠습니다. {0}(으)로 대체될 수 있는 빈 인터페이스를 사용하겠습니다. {1}을(를) 누르고 {2}을(를) 선택합니다.
go.generics.inspections.delete.type.parameters={0} 함수에는 타입 매개변수를 사용하기 위한 대괄호가 있지만 이러한 괄호 안에 빈 매개변수 목록이 있습니다. 이 오류를 수정하려면 {1}을(를) 누른 다음 {2}을(를) 선택하세요.
go.generics.inspections.title=타입 매개변수 검사
go.generics.inspections.union.interfaces.with.methods=<a href\="{0}">Go 팀</a>에 따르면 인터페이스와 메서드는 공용체 내에서 함께 사용할 수 없습니다. 따라서 {1}은(는) 공용체 요소 중에서 항으로 사용할 수 없습니다. {1}(으)로 시작하고 수직 막대와 이후의 공백을 포함하는 선택된 그룹을 삭제하세요.
go.generics.inspections.unused.type.parameter=타입 매개변수는 이 코드 어디에서도 사용되지 않기 때문에 회색 처리되었습니다. 매개변수 섹션에서 {0} 타입을 {1}(으)로 교체하여 이를 수정합니다.
go.generics.right.click.function=파일의 모든 오류를 제거했으므로 {0} 함수에 대한 테스트를 생성해 볼 수 있습니다.\n{0} 함수를 마우스 오른쪽 버튼으로 클릭하세요.
go.generics.running.code.click.link=이제 결과 링크를 클릭하여 브라우저에서 코드를 엽니다.\n타입 매개변수를 사용하여 코드를 실행하려면 {0}을(를) 클릭하세요.
go.generics.running.code.missing.go118.download.or.local=이전에 설치한 경우 드롭다운 목록을 사용하여 Go {0}을(를) 찾아 볼 수 있습니다. 혹은 {1} 버튼을 클릭하고 필요한 SDK 버전({2})을 다운로드할지 여부를 선택하거나 하드 드라이브({3})의 로컬 사본으로 이동할 수 있습니다.\n언급된 방법 중 하나로 Go {0} 이상의 버전을 선택하고 모든 대화상자에서 {4}을(를) 클릭하여 새로운 SDK를 적용하세요.
go.generics.running.code.missing.go118.downloading=<ide/>이(가) Go SDK를 다운로드하고 압축을 풉니다. 이 과정이 끝나면 IDE가 파일을 색인하고 코딩 지원에서 사용합니다.
go.generics.running.code.missing.go118.indexing=이제 <ide/>이(가) SDK 파일의 색인을 생성합니다. 처리될 때까지 기다려 주세요. 완료되면 이 Go SDK를 사용할 수 있습니다.
go.generics.running.code.missing.go118.quickfix=현재 Go {0}을(를) 사용 중입니다. 이 수업에서 제네릭을 사용하려면 Go 1.18 이상을 설치하거나 해당 버전으로 전환해야 합니다.\n{1}을(를) 누르고 {2}을(를) 선택하면 이를 수행할 수 있습니다.
go.generics.running.code.name=코드를 실행하는 중
go.generics.running.code.playground=코드를 실행하는 다른 방법은 {0}을(를) 사용하는 것입니다.\n이 기능을 사용하려면 {1}을(를) 누르세요. 확인 대화상자가 표시되면 {2}을(를) 클릭하여 파일을 public으로 만드세요. {0} 내 페이지 링크가 포함된 팝업이 에디터의 오른쪽 하단 모서리에 표시됩니다.
go.generics.test.generation.module=타입 매개변수에 대한 테스트 생성
go.goto.next.error=강조 표시된 다음 오류로 이동하려면 {0}을(를) 누르세요.
go.goto.next.warning=파일 내 다음으로 강조 표시된 경고로 이동하려면 {0}을(를) 누르세요.
go.navigation.module.description=코드 베이스에서 이동
go.navigation.module.name=탐색
go.new.code.coverage.click.create={0} 대화 상자에서 {1}을(를) 클릭하세요.
go.new.code.coverage.click.gutter=현재 파일의 모든 테스트를 실행하려면 여백 상의 깜빡이는 아이콘을 클릭하세요. {0} | {1}(으)로 이동하세요.
go.new.code.coverage.description=<ide/>은(는) 애플리케이션 및 테스트에서 코드 커버리지 실행을 지원합니다. 프로그램에서 코드 커버리지를 통해 어떤 코드가 1회 혹은 여러 번 실행되었는지 판단할 수 있으며, 사용되지 않는 코드를 파악하는 데에도 도움이 됩니다.\n애플리케이션에서 코드 커버리지를 실행하려면 코드를 오른쪽 클릭한 다음 {0}을(를) 선택하세요.\n이미 코드 커버리지를 실행한 경우 IDE가 {1} 대화 상자를 표시합니다. 진행하려면 해당 대화상자에서 {2}을(를) 선택하세요.
go.new.code.coverage.fix.test=필요한 테스트 데이터에 오류가 있어 테스트 중 하나가 실패하고 있습니다. 테스트를 고치려면 {0}을(를) {1}(으)로 변경하세요.
go.new.code.coverage.go.to.test=테스트 파일에서도 코드 커버리지를 실행할 수 있습니다. 테스트 파일로 이동하려면 {0}을(를) 누르고 첫 번째 옵션을 선택한 다음 {1} 파일로 이동하세요.
go.new.code.coverage.in.another.package.name=코드 커버리지
go.new.code.coverage.view={0} 도구 창이 결과를 표시하여 85.7%의 코드만 커버된 것을 알 수 있습니다. 커버리지가 100%가 아닌 이유는 {1} 함수가 {2} 함수를 호출하지 않기 때문입니다.
go.new.data.flow.analysis.actions=데이터 흐름 분석(DFA)란 프로그래밍을 할 때 프로그램 내에서 데이터가 어떻게 흐르는지 파악할 때 사용되는 방법입니다. 프로그램이 여러 지점이 있는 지도이며 각 지점이 코드의 일부(구문 혹은 지시문)라고 생각해 보세요. 이러한 지점들은 프로그램이 실행되며 경로를 따라 이어집니다. GoLand에서 DFA는 이 지도를 보고 코드를 분석합니다.\n{0}을(를) 누르면 첫 번째 DFA 경고로 이동합니다.
go.new.data.flow.analysis.check.err.for.nil=We need to check the returned value of {0} for {1}.\nType {0} and a dot ({2}), then select {3} from the list of suggestions.
go.new.data.flow.analysis.dereference=위의 코드는 {0} 포인터 역참조로 인해 잠재적으로 패닉을 일으킬 수 있습니다. {1}이 {0}이면 {2}을(를) 애세스하는 조건의 일부가 런타임 오류를 일으킵니다.\n이를 수정하려면 OR({3}) 논리를 AND({4})로 대체하세요. 이렇게 하면 {0}이 {1}이 아닐 때만 두 번째 조건인 {0} 포인터의 역참조가 평가됩니다. 타입 {4}.
go.new.data.flow.analysis.explain.and.fix=두 번째 조건이 절대 실행되지 않습니다. {0}을(를) 눌러 삭제하세요.
go.new.data.flow.analysis.name=데이터 흐름 분석
go.onboarding.apply.action={0} 액션을 선택하고 {1}을(를) 누르세요.
go.onboarding.apply.intention={0}을(를) 선택한 후 {1}을(를) 누르세요.
go.onboarding.balloon.about.debug.panel={0} 도구 창은 다양한 디버그 액션을 갖춘 툴바를 제공합니다. 나중에 {1} 수업을 수강하여 이 액션을 사용해보세요.
go.onboarding.balloon.click.here=여기를 클릭하여 중단점을 설정하세요
go.onboarding.balloon.open.file=두 번 클릭하여 {0}을(를) 여세요
go.onboarding.balloon.open.learn.toolbar={0} 도구 창으로 전환하여 이 수업을 계속 진행하세요
go.onboarding.balloon.project.directory=프로젝트 디렉터리를 두 번 클릭하여 확장하면 프로젝트 파일을 확인할 수 있습니다
go.onboarding.balloon.project.view=클릭하여 <strong>프로젝트</strong> 뷰를 여세요
go.onboarding.balloon.start.debugging=아이콘을 클릭하여 디버그를 시작하세요
go.onboarding.balloon.stop.debugging=아이콘을 클릭하여 디버그를 시작하세요
go.onboarding.case.changed=대/소문자가 변경되었습니다.
go.onboarding.change.ui.settings=이 수업을 위해, <ide/>에서는 일부 UI 설정을 기본 상태로 변경합니다. 이 수업을 완료하거나 종료하면 해당 환경 설정이 복원됩니다.
go.onboarding.click.run.button=강조 표시된 실행 버튼 {0}을(를) 클릭하여 실행 옵션을 표시하세요.
go.onboarding.click.run.button.balloon=클릭하여 실행 옵션 표시
go.onboarding.close.debug.tool.window={0} 도구 창을 닫고 {1}을(를) 누르세요.
go.onboarding.context.menu=코드를 실행하는 방법에는 여러 가지가 있습니다. 그 중 하나는 {1} 함수 근처에 있는 실행 버튼 {0}을(를) 사용하는 것입니다.
go.onboarding.epilog=축하합니다. 온보딩 투어를 마쳤습니다. 이제 다음을 진행할 수 있습니다.\n- 학습 프로젝트 <callback id\="{0}">닫기</callback>{1}\n- 수업 <callback id\="{2}">더보기</callback>
go.onboarding.feedback.system.found.sdks=발견된 SDK\:
go.onboarding.feedback.system.no.sdks=없음
go.onboarding.feedback.system.used.sdk=사용된 SDK\:
go.onboarding.finish.exit=데모 프로젝트 닫기
go.onboarding.finish.modules=수업 더보기
go.onboarding.finish.text=<ide/> 온보딩 투어를 완료했습니다.\n이제 학습 프로젝트 {0}을(를) 닫으면 됩니다.\n학습을 이어 다른 수업을 진행할 수도 있습니다.
go.onboarding.finish.title=축하합니다
go.onboarding.indexing.description=처음으로 프로젝트를 열면 <ide/>에서 Go SDK 및 프로젝트 자체를 검사하여 코딩 지원에 필요한 세부 정보를 수집합니다. 계속하려면 색인화가 완료될 때까지 기다리세요.
go.onboarding.invoke.completion.tip=<strong>팁</strong>\: {0}을(를) 눌러 코드 내 어느 곳에서든 자동 완성 항목을 표시할 수 있습니다.
go.onboarding.invoke.intention.for.code=또한, 인텐션을 사용하면 시간을 절약하고 코드를 더 쉽게 작성할 수 있습니다. 인텐션을 사용해 {0} 함수를 내보낸 함수로 빠르게 변환해 봅시다. {1}을(를) 누르세요.
go.onboarding.invoke.intention.for.code.balloon={0}을(를) 누르면 사용할 수 있는 모든 인텐션이 표시됩니다
go.onboarding.invoke.intention.for.warning.1=방금 버그를 수정했지만 이 코드를 더욱 깔끔하게 만들 수 있습니다. <ide/>은(는) 향상될 여지가 있는 코드 줄을 강조 표시하고 노란색 전구를 추가합니다.
go.onboarding.invoke.intention.for.warning.2={0}을(를) 눌러 경고를 미리 보고 빠른 수정을 적용합니다.
go.onboarding.invoke.intention.for.warning.balloon={0}을(를) 누르면 사용할 수 있는 모든 빠른 수정이 표시됩니다
go.onboarding.invoke.search.everywhere.1=<ide/>에서 작업할 때 프로젝트, 심볼, 타입 또는 IDE 액션 내의 파일을 검색하고자 하는 경우가 있습니다. 이번 수업에서는 {0} 액션을 검색하여 {1} 문자열을 소문자로 만들어 봅시다.
go.onboarding.invoke.search.everywhere.2={0}을(를) 두 번 눌러 {1} 대화상자를 여세요.
go.onboarding.lesson.name={0} 알아보기
go.onboarding.module.description={0}의 주요 기능에 관한 간략한 개요입니다
go.onboarding.module.name=온보딩 투어
go.onboarding.project.view.description=<strong>프로젝트</strong> 뷰는 주요 도구 창 중 하나입니다. 이 뷰는 프로젝트 디렉터리, SDK 전용 패키지, 스크래치 파일을 포함합니다. 줄무늬 버튼을 클릭해 열면 간단한 데모 프로젝트 컨텐츠의 미리보기가 표시됩니다. {0}을(를) 눌러 열어 볼 수도 있습니다.
go.onboarding.return.to.welcome=\ 및 시작 화면으로 돌아가기
go.onboarding.run.sample={0}을(를) 선택하거나 {1}을(를) 사용해보세요.
go.onboarding.run.widget.balloon=이 위젯을 사용하면 선택된 구성에서 자주 사용되는 실행 액션을 실행할 수 있습니다
go.onboarding.search.everywhere.description=보시다시피 선택한 텍스트, {0}이(가) 자동으로 입력 문자열에 복사되었습니다. {0} 대신 {1}을(를) 입력해봅시다.
go.onboarding.select.fix=첫 번째 항목을 적용하세요. {0}. 이 수정을 적용하면 불필요한 괄호가 삭제됩니다.
go.onboarding.select.item=입력과 동시에 <ide/>에 코드 완성 옵션이 자동으로 표시됩니다. 키보드 방향키를 사용하여 {0} 항목을 선택한 다음 {1}을(를) 누르세요.
go.onboarding.start.debugging={0} 아이콘을 클릭하여 디버그 프로세스를 시작하세요.
go.onboarding.start.typing={0}을(를) 입력하여 코드 완성 옵션을 표시하세요.
go.onboarding.start.typing.balloon={0}을(를) 입력하면 코드 완성 옵션이 표시됩니다
go.onboarding.stop.debugging=디버그를 시작해봅시다. {0} 아이콘을 클릭하세요.
go.onboarding.temporary.configuration.description=<ide/>이(가) 임시 실행 구성을 생성했습니다. 이 구성은 {0}에서 찾을 수 있습니다. 이 위젯을 사용하면 선택한 구성에 대해 {1} 실행 및 {2} 디버그와 같이 자주 사용되는 실행 액션을 실행할 수 있습니다. {3} 프로파일, 커버리지 {4}(으)로 실행과 같은 액션도 {5}을(를) 클릭해서 표시할 수 있습니다.
go.onboarding.toggle.breakpoint.1={1} 메서드가 필요한 값인 {0} 대신 {2}을(를) 반환하는 것을 눈치채셨을 것입니다. return 문으로 가서 문제 코드를 디버그해봅시다.
go.onboarding.toggle.breakpoint.2=강조 표시된 영역에서 여백을 클릭하여 중단점을 설정하세요.
go.onboarding.type.division=코드에서 문제를 발견했으니 수정해보겠습니다. 결과 합을 값의 길이로 나눕니다. 학습 스크립트에 이미 {0}이(가) 입력되어 있습니다.
go.playground.module.name=Go Playground에서 코드 실행
go.playground.note=<strong>참고</strong>\: 이 수업에서는 Go Playground 서버에 연결해야 합니다.
go.playground.paste.url={0} 필드에서 {1}을(를) 누르고 {2}을(를) 클릭하여 URL을 붙여 넣으세요.
go.playground.run.code.in.playground=툴바의 {0} 버튼을 눌러 Go Playground 서버를 사용하여 코드를 실행하세요.
go.playground.run.code.locally=툴바의 {0} 버튼을 눌러 컴퓨터에서 코드를 실행하세요.
go.playground.run.copy.link=파일 및 Go Playground 링크에서 코드를 가져올 수 있습니다. {0}을(를) 눌러 선택한 링크를 복사하세요.
go.playground.select.open.in.playground=선택한 코드를 마우스 오른쪽 버튼으로 클릭하고 {0} | {1}(으)로 이동하세요.\n<ide/>은(는) 이 코드를 스크래치 파일로 가져옵니다.
go.playground.select.run.locally=이제 이 코드를 로컬에서 실행해 봅시다. 실행하려면 툴바에서 {0} 체크박스를 선택하세요.
go.playground.select.url={0} 대화상자에서 {1} 라디오 버튼을 선택하세요.
go.postfix.completion.better.variable.names.in.templates.description=<ide/>은(는) {0} 및 {1} 접미사 템플릿으로 생성된 변수의 이름을 지정할 수 있도록 도와줍니다. 예를 들어 이러한 제안을 살펴보면 색인의 경우 {2} 또는 {3}, {5}의 경우 {4}이(가) 제시됩니다.\n{6}을(를) 입력하고 완성 목록에서 {7} 접미사 템플릿을 선택하세요.
go.postfix.completion.lesson.name=접미사 완성
go.postfix.completion.task=접미사 템플릿을 사용하면 이미 입력된 표현을 마침표 뒤의 접미사, 표현식 타입 및 컨텍스트에 따라 다른 표현으로 변경할 수 있습니다.\n해당 알파벳 슬라이스가 무질서한 상태입니다. 문자열 슬라이스를 올바르게 정렬하기 위해 {1} 패키지의 {0} 함수를 슬라이스에 적용할 수 있습니다.\n해당 슬라이스가 포함된 변수는 이미 입력되었습니다. 앞뒤로 이동할 필요 없이 {1} 접미사 템플릿을 적용해 보겠습니다. 접미사 완성 제안 목록을 확인하려면 {3} 변수 뒤에 점({2})을 입력하세요. 목록에서 {1}을(를) 선택하거나 에디터에 입력한 다음, {4}을(를) 눌러 구문을 완성하세요.
go.press.and.apply.fix={0}을(를) 누르고 {1}을(를) 선택합니다.
go.refactoring.inline.dialog=대화상자가 열리면 {0}을(를) 클릭하세요.
go.refactoring.menu.extract.method=이제 두 지점 간의 거리를 계산하는 메서드를 추출해 보겠습니다. {0}을(를) 누르고 목록에서 {1}을(를) 선택하거나 {2}을(를) 눌러 이 액션을 직접 실행합니다.
go.refactoring.menu.inline.refactoring={0}을(를) 누르고 {1}을(를) 선택하여 메서드를 인라인화합니다.
go.refactoring.menu.introduce.parameter.eng={0}을(를) 상수로 추출해야 할 때를 가정해 보겠습니다. {1}(을)를 사용하면 됩니다. 리팩터링 메뉴의 목록에서 {1}을(를) 선택하고 {2}을(를) 누르세요.
go.refactoring.menu.lesson.name=리팩터링 메뉴
go.refactoring.menu.select.math.sqrt=깜빡이는 식을 선택해서 코드 내의 전체 메서드를 추출하고 {0}을(를) 누르세요.
go.refactoring.menu.show.refactoring.list=<ide/>에서는 다양한 리팩터링을 활용할 수 있습니다. 각 리팩터링에는 단축키가 있습니다. 그러나 언제든 {0}을(를) 눌러 현재 컨텍스트에서 사용할 수 있는 모든 리팩터링의 목록을 표시할 수 있습니다.
go.refactoring.menu.start.refactoring={0}을(를) 선택하여 코드 내에서 {1}을(를) 모두 대체하세요.
go.refactorings.module.description=리팩터링은 코드를 빈틈이나 중복 없이 관리하기 쉽게 유지하는 데 도움이 됩니다
go.refactorings.module.name=리팩터링
go.rename.apply.intention=이 필드의 새 이름을 입력하세요. 예를 들어 {0}을(를) 입력한 다음, {1}을(를) 눌러 결과를 저장합니다.
go.rename.invoke.intentions=심볼에 캐럿을 배치하고 {0} 리팩터링을 사용하여 이름을 변경할 수 있습니다. 코드의 {1} 필드에 캐럿을 배치하고 {2}을(를) 누르세요.
go.rename.lesson.name=이름 변경
go.running.code.context.menu=코드를 실행하는 방법에는 여러 가지가 있습니다. 그중 하나는 컨텍스트 메뉴를 이용하는 것입니다.\n에디터에서 코드가 있는 영역을 오른쪽 마우스 버튼으로 클릭하여 컨텍스트 메뉴를 호출해보세요.
go.running.code.run.sample={0}을(를) 클릭하여 코드를 실행합니다. 애플리케이션의 출력이 {1} 도구 창에 표시됩니다.
go.search.everywhere.goto.type=Great\! However, sometimes you need to find only types or search only in some specific directories. Use {0} to search for types.
go.search.everywhere.quick.documentation=Press {0} to preview documentation for the selected type.
go.search.everywhere.type.popup.closed.warning.message=Press {0} to open the search window again.
go.search.everywhere.type.type.name=Suppose you need to find a type that is called {0}. Type initial letters of the search words – {1}. Do not navigate to the found type yet.
go.search.everywhere.use.all.places=The matching type in the demo project is found. However, you can find other types that are not included in the project. Let''s switch the {0} filter to {1} to bring up matching types from Go SDK.
go.smart.type.completion.lesson.name=스마트 타입 완성
go.smart.type.completion.task=스마트 타입 완성은 제안 목록을 필터링하여 현재 컨텍스트에서 적용 가능한 타입만을 포함합니다. {0}을(를) 눌러 대응하는 제안 목록을 확인하세요. 첫 번째 항목을 선택하려면 {1}을(를) 누르세요.
go.statement.completion.complete.condition=괄호 {0} 안에 조건을 추가한 후 {1}을(를) 눌러 {2} 구문 안으로 이동합니다.
go.statement.completion.complete.finish.body=한 줄에 {0}을(를) 입력한 후 {1}을(를) 눌러 구문을 완성하고 서식을 적용합니다.
go.statement.completion.complete.for={0}을(를) 눌러 {1} 구문을 완성합니다.
go.statement.completion.complete.if={0}을(를) 입력한 후 {1}을(를) 눌러 구문을 생성합니다.
go.statement.completion.help.link=구문 완성
go.statement.completion.lesson.name=구문 완성
go.support.for.table.tests.call.context.menu=<ide/>에서 모든 혹은 일부 테스트를 함수 내부에서 실행할 수 있습니다.\n예를 들어 {0} 함수 주변에 있는 여백에서 실행 아이콘을 클릭하고 {1}을(를) 선택하세요. 해당 함수에서 모든 테스트가 실행됩니다.
go.support.for.table.tests.name=테이블 테스트 지원
go.support.for.table.tests.run.subtest=같은 방법을 사용해 각각의 하위 테스트를 실행할 수도 있습니다. {0} 하위 테스트 주변에 있는 여백 아이콘을 클릭하고 {1}을(를) 선택하세요. 현재 이 방법에는 몇 가지 제약이 있습니다. 자세한 내용은 <a href\="{2}">GoLand 문서</a>에서 확인할 수 있습니다.
go.support.fuzz.testing.check.failing=이런, 퍼즈 테스트에 실패했습니다\! 이유를 알아내려면 {0} 도구 창에서 출력을 아래로 스크롤하고 {1} 디렉터리로 연결되는 링크를 클릭하세요.
go.support.fuzz.testing.run=퍼즈 테스팅은 다양한 입력을 연속적으로 제출함으로써 테스트를 자동화하는 방법입니다. 퍼즈 테스트를 실행하여 생성된 다양한 테이터로 함수를 점검해 봅시다.\n퍼즈 테스트를 실행하려면 여백에서 깜빡이는 아이콘을 클릭하고 {0}을(를) 선택하세요.
go.support.fuzz.testing.title=퍼즈 테스팅
go.to.internal.directory={0} 2021.2부터 {1} 폴더에 저장된 인터페이스로 이동할 수 있습니다.\n{2}을(를) 눌러 {3} 인터페이스의 구현으로 이동해보세요.
go.to.internal.directory.hover.over.tab=파일 위치를 확인하려면 에디터의 탭을 마우스로 가리키면 됩니다. 예를 들어, {0} 탭을 마우스로 가리켜 보세요.
go.to.internal.directory.name=이동 및 코드 서식 지정
go.to.internal.directory.reformat.gofmt.on.save={0} 파일의 코드 서식을 다시 지정해야 합니다. {1}을(를) 눌러 파일의 서식을 다시 지정하세요.\n또한, 기본적으로 <ide/>은(는) 기본 제공되는 <ide/> 서식 지정 도구 다음에 {2} 도구를 실행합니다. 이 설정은 {5}의 {4} 탭에 있는 {3} 옵션으로 구성됩니다.
go.type.parameters.description=제네릭과 관련된 작업에 도움이 되는 기능입니다
go.type.parameters.module.name=제네릭(유형 매개변수)
go.view.hierarchies.choose.any.implementation=아무 구현이나 선택한 다음 {0}을(를) 누르거나 클릭하세요.
go.view.hierarchies.goto.implementation={1}의 구현을 찾으려면 {0}을(를) 누르세요.
go.view.hierarchies.hide.find.tool.window={1} 도구 창을 숨기려면 {0}을(를) 누르세요.
go.view.hierarchies.hide.method.hierarchy={1}을(를) 다시 눌러 {0}도 숨기겠습니다.
go.view.hierarchies.invoke.implementations.again=기본 메서드의 선언에 여백 아이콘 {0}이(가) 있습니다. 아이콘을 클릭하거나 {1}을(를) 누르세요.
go.view.hierarchies.lesson.name=계층 구조 보기
go.view.hierarchies.navigate.to.base=파생된 메서드에서 기본 메서드로 이동할 수 있습니다. {0}을(를) 누르거나 에디터 여백에서 {1} 아이콘을 클릭하세요.
go.view.hierarchies.open.in.find.tool.window=계층구조가 큰 경우 {0} 도구 창에서 구현으로 이동하고 싶을 수 있습니다. {1}을(를) 클릭하세요.
go.view.hierarchies.open.method.hierarchy=이 메서드의 전체 계층 구조를 살펴보고 싶을 수 있습니다. {0}을(를) 누르세요.
go.view.hierarchies.open.type.hierarchy=하위 타입을 보려면 {0}을(를) 누르세요.
go.what.s.new.module.description=GoLand 2024.1의 주요 개선점을 살펴봅니다
go.what.s.new.module.name=GoLand 2024.1 하이라이트
go.working.with.json.add.key.to.tags=XML 태그와 ASN1 태그를 추가하려면 인텐션 액션을 사용할 수도 있습니다.\n{0}을(를) 눌러 인텐션 액션을 다시 호출한 다음 {1}을(를) 선택하고 {2}을(를) 입력하세요.
go.working.with.json.change.style=태그 내 필드 이름에 다른 코드 스타일을 적용할 수 있습니다. 예를 들어, 낙타 표기법(camelCase)으로 변경해보세요. {0}을(를) 누르고 {1}을(를) 클릭한 다음 {2}을(를) 선택하세요.
go.working.with.json.copy=<ide/>에는 JSON 코드를 더 효과적으로 처리하는 데 도움이 되는 여러 가지 도구가 있습니다.\n{0}을(를) 눌러 선택한 JSON을 복사하세요.
go.working.with.json.introduce.type={0} 임베드된 구조체를 추출해 보겠습니다.\n{1}을(를) 누르고 {2}을(를) 선택하세요.
go.working.with.json.name=JSON 작업 중
go.working.with.json.name.struct=원하시는 경우 구조체 이름을 변경하고 {0}을(를) 눌러 편집을 종료하세요. IDE에서 서식을 자동으로 수정합니다.
go.working.with.json.replace={0}을(를) 눌러 주석 섹션을 교체합니다.\n<ide/>이(가) 자동으로 복사된 JSON 부분을 구조체 타입으로 변환합니다.
go.working.with.json.update.value.in.tags=태그 값 배치 업데이트에 대해서도 마찬가지입니다. 현재 구조체의 모든 태그에 {0}을(를) 추가한다고 가정해봅시다.\n{1}을(를) 누르고 {2}을(를) 선택한 다음 {3}을(를) 입력하세요.\n아니면 제안 목록에서 {0}을(를) 선택할 수 있습니다. <ide/>은(는) JSON, XML 및 ASN1 태그의 가장 일반적인 값을 알고 있습니다.
go.working.with.parameters.invoke.intentions.1=캐럿이 {0} 메서드의 첫 번째 매개변수의 위치에 있는 것을 확인하세요. {1}을(를) 눌러 인텐션 액션을 호출하세요.
go.working.with.parameters.invoke.intentions.2=에디터에서 {0} 메서드를 확인하세요. 캐럿은 첫 번째 매개변수의 위치에 있습니다. {1}을(를) 눌러 인텐션 액션을 호출하세요.
go.working.with.parameters.invoke.intentions.3=인터페이스를 구현하는 메서드에 매개변수가 필요한 경우, 이러한 매개변수를 제거하는 것은 안전하지 않습니다. {0}을(를) 눌러 가능한 옵션 목록을 확인하세요.
go.working.with.parameters.lesson.name=컨텍스트 액션
go.working.with.parameters.press.action.again={0}을(를) 다시 누르세요.
go.working.with.parameters.remove.parameters=<ide/>은(는) 사용되지 않는 매개변수의 타입이 메서드 사양을 구현하는 데 사용되는 경우 해당 매개변수의 이름만 강조 표시합니다. 이 경우 이 매개변수의 이름을 {0}(으)로 변경하거나 완전히 제거할 수 있습니다.
go.working.with.parameters.signature.combined=시그니처 타입이 결합된 방식을 확인하세요.
go.working.with.parameters.signature.expanded=시그니처를 초기 상태로 반환하려면 {0}을(를) 선택하세요.
go.working.with.parameters.single.type=함수 또는 메서드 시그니처에 단일 타입의 여러 매개변수가 있는 경우 이러한 매개변수에 대해 짧은 타입 사양({0})을 사용하거나 각 매개변수에 대해 개별 타입 사양({1})을 사용할 수 있습니다.
go.working.with.parameters.that.are.not.used=<ide/>은(는) 메서드 또는 함수의 본문에서 사용되지 않는 시그니처의 매개변수를 탐지할 수 있습니다. 해당 매개변수가 사용되지 않는 경우 {0} 빠른 수정을 사용하여 삭제할 수 있습니다.
toggle.case.part=대소문자
