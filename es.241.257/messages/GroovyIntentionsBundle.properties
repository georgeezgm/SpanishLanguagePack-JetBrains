add.annotation.value.intention.family.name=''value\=''를 추가합니다.
add.annotation.value.intention.name=''value\=''를 추가합니다.
change.to.c.style.comment.intention.family.name=C 스타일 주석으로 바꾸기
change.to.c.style.comment.intention.name=C 스타일 주석으로 바꾸기
change.to.end.of.line.comment.intention.family.name=Reemplazar con comentarios end-of-line
change.to.end.of.line.comment.intention.name=Reemplazar con comentarios end-of-line
convert.closure.to.method.intention.family.name=프로퍼티를 메서드로 변환
convert.closure.to.method.intention.name=메서드로 변환
convert.concatenation.to.gstring.intention.family.name=문자열 연결을 GString으로 변환
convert.concatenation.to.gstring.intention.name=GString으로 변환
convert.from.geese.braces.intention.family.name=중괄호를 개별 줄로 서식 지정
convert.from.geese.braces.intention.name=중괄호를 개별 줄로 서식 지정
convert.g.string.to.string.intention.family.name=GString을 문자열로 변환
convert.g.string.to.string.intention.name=문자열로 변환
convert.integer.to.binary.intention.family.name=2진수로 변환
convert.integer.to.binary.intention.name=Convertir a binario
convert.integer.to.decimal.intention.family.name=10진수로 변환
convert.integer.to.decimal.intention.name=Convertir a decimal
convert.integer.to.hex.intention.family.name=16진수로 변환
convert.integer.to.hex.intention.name=Convertir a hexadecimal
convert.integer.to.octal.intention.family.name=8진수로 변환
convert.integer.to.octal.intention.name=Convertir a octal
convert.java.style.array.intention.family.name=Java 스타일의 배열 생성을 Groovy 구문으로 변환
convert.java.style.array.intention.name=Java 스타일의 배열 생성 변환
convert.junit.assertion.to.assert.statement.intention.family.name=JUnit 어설션을 assert 문으로 변환
convert.junit.assertion.to.assert.statement.intention.name=JUnit 어설션을 assert 문으로 변환
convert.map.to.class.intention.family.name=Groovy 네이티브 맵을 클래스 인스턴스로 변환
convert.map.to.class.intention.name=클래스로 변환
convert.method.to.closure.intention.family.name=메서드를 클로저 유형 속성으로 변환
convert.method.to.closure.intention.name=클로저 속성으로 변환
convert.multiline.string.to.single.line.intention.family.name=여러 줄 문자열을 단일 줄로 변환
convert.multiline.string.to.single.line.intention.name=단일 줄 리터럴로 변환
convert.parameter.to.map.entry.intention.family.name=메서드 또든 클로저 매개변수를 맵 항목으로 변환
convert.parameter.to.map.entry.intention.name=매개변수를 맵 항목으로 변환
convert.simple.getter.to.property.intention.family.name=간단한 getter를 속성으로 변환
convert.simple.getter.to.property.intention.name=속성으로 변환
convert.string.to.g.string.intention.family.name=문자열을 GString으로 변환
convert.string.to.g.string.intention.name=GString으로 변환
convert.string.to.multiline.intention.family.name=리터럴을 여러 줄 리터럴로 변환
convert.string.to.multiline.intention.name=여러 줄로 변환
convert.to.dollar.slash.regex.intention.family.name=문자열 리터럴을 달러 슬래시 문자열로 변환
convert.to.dollar.slash.regex.intention.name=달러 슬래시 문자열로 변환
convert.to.geese.braces.intention.family.name=닫는 클로저 중괄호를 한 줄로 서식 지정
convert.to.geese.braces.intention.name=중괄호를 한 줄로 서식 지정
convert.to.regex.intention.family.name=문자열 리터럴을 정규 표현식으로 변환
convert.to.regex.intention.name=정규 표현식으로 변환
create.parameter.for.field.intention.family.name=필드에 대한 생성자 매개변수 추가
create.parameter.for.field.intention.name=필드에 대한 생성자 매개변수 추가
demorgans.intention.name1=Reemplazar ''\\&\\&'' con ''||''
demorgans.intention.name2=''||''를 ''\\&\\&''로 바꾸기
demorgans.law.intention.family.name=드모르간 법칙
each.to.for.intention.family.name=Each를 For-In으로 바꾸기
each.to.for.intention.name=For-In으로 바꾸기
expand.boolean.intention.family.name=부울 확장
expand.boolean.intention.name=부울 사용을 if-else 문으로 확장
flip.comparison.intention.family.name=Invertir operandos de comparación
flip.comparison.intention.name=Invertir ''{0}'' a ''{1}''
flip.conditional.intention.family.name=Invertir condicional
flip.conditional.intention.name=Invertir ''?\:''
flip.conjunction.intention.family.name=Invertir operandos concatenados
flip.if.intention.family.name=if 문 반전
flip.if.intention.name=if 문 반전
flip.smth.intention.name=Invertir ''{0}''
for.to.each.intention.family.name=For-In을 Each로 바꾸기
for.to.each.intention.name=".each"로 바꾸기
gr.alias.import.intention.family.name=가져온 멤버를 정적으로 별칭 가져오기
gr.alias.import.intention.name=별칭 가져오기
gr.break.string.on.line.breaks.intention.family.name=''\\n''으로 문자열 구분
gr.break.string.on.line.breaks.intention.name=''\\n''으로 문자열 구분
gr.convert.string.to.char.intention.family.name=char로 형 변환
gr.convert.string.to.char.intention.name=char로 형 변환
gr.convert.type.cast.to.safe.cast.intention.family.name=형 변환 식을 안전한 형 변환 식으로 변환
gr.convert.type.cast.to.safe.cast.intention.name=안전한 형 변환으로 변환
gr.copy.string.concatenation.content.intention.family.name=문자열 연결 텍스트를 클립보드에 복사
gr.copy.string.literal.content.intention.text=문자열 리터럴 텍스트를 클립보드에 복사
gr.create.missing.switch.branches.intention.family.name=누락된 ''switch'' 브랜치 생성
gr.create.missing.switch.branches.intention.name=누락된 ''switch'' 브랜치 생성
gr.introduce.local.variable.intention.family.name=Groovy 지역 변수 삽입
gr.introduce.local.variable.intention.name=지역 변수 삽입
gr.make.member.private.intention.family.name=''private''으로 만듭니다.
gr.make.member.private.intention.name=''private''으로 만듭니다.
gr.make.member.protected.intention.family.name=''protected''로 설정
gr.make.member.protected.intention.name=''protected''로 설정
gr.make.member.public.intention.family.name=''public''으로 설정
gr.make.member.public.intention.name=''public''으로 설정
gr.redundant.else.intention.family.name=중복 ''else'' 키워드 제거
gr.redundant.else.intention.name=중복 ''else'' 키워드 제거
gr.remove.annotation.intention.family.name=어노테이션 제거
gr.remove.annotation.intention.name=Eliminar
gr.remove.explicit.type.declaration.intention.family.name=명시적 유형 선언 제거
gr.remove.explicit.type.declaration.intention.name=명시적 유형 제거
gr.set.strong.type.intention.family.name=명시적 유형 선언
gr.set.strong.type.intention.name=명시적 유형 선언
gr.sort.map.keys.intention.family.name=맵 항목을 알파벳순으로 정렬
gr.sort.map.keys.intention.name=알파벳순 정렬
gr.split.declaration.intention.family.name=변수 선언 분할
import.on.demand.intention.family.name=Groovy에서 온디맨드 정적 import 문 추가
import.on.demand.intention.name=온디맨드 import 문 추가
import.static.intention.family.name=Groovy에서 단일 멤버 정적 import 문 추가
import.static.intention.name=정적 import 문 추가
indexed.expression.conversion.intention.family.name=[] 양식을 색인 메서드로 변환
indexed.expression.conversion.intention.name=[] 액세스를 메서드 양식으로 변환
indexing.method.conversion.intention.family.name=색인 생성 메서드를 [] 양식으로 변환
indexing.method.conversion.intention.name=[] 양식으로 변환
invert.if.intention.family.name=''if'' 조건을 반전시킵니다.
invert.if.intention.name=''if'' 조건을 반전시킵니다.
make.closure.call.explicit.intention.family.name=클로저 호출을 명시적으로 설정
make.closure.call.explicit.intention.name=클로저 호출을 명시적으로 설정
make.closure.call.implicit.intention.family.name=클로저 호출을 묵시적으로 설정
make.closure.call.implicit.intention.name=클로저 호출을 묵시적으로 설정
merge.else.if.intention.family.name=else if 문 병합
merge.else.if.intention.name=else-if 문 병합
merge.if.and.intention.family.name=중첩된 if를 AND 조건으로 병합
merge.if.and.intention.name=''if'' 문 병합
move.class.to.new.file.intention.family.name=클래스를 개별 파일로 이동
move.class.to.new.file.intention.name=개별 파일로 이동
negate.comparison.intention.family.name=Negar comparación
negate.comparison.intention.name=Negar ''{0}'' como ''{1}''
remove.parentheses.from.method.call.intention.family.name=메서드 호출에서 불필요한 소괄호 제거
remove.parentheses.from.method.call.intention.name=불필요한 소괄호를 제거합니다.
remove.redundant.class.property.intention.family.name=중복 .class 제거
remove.redundant.class.property.intention.name=중복 .class 제거
remove.unnecessary.braces.in.g.string.intention.family.name=GString에서 불필요한 중괄호 제거
remove.unnecessary.braces.in.g.string.intention.name=GString에서 불필요한 중괄호 제거
remove.unnecessary.escape.characters.intention.family.name=불필요한 이스케이프 문자 제거
remove.unnecessary.escape.characters.intention.name=불필요한 이스케이프 문자 제거
remove.unnecessary.return.intention.family.name=불필요한 ''return'' 키워드를 제거합니다.
remove.unnecessary.return.intention.name=Remove ''return'' 키워드 제거
rename.class.to.0=클래스 이름을 ''{0}''(으)로 변경
rename.class.to.file.name.intention.family.name=클래스 이름을 해당하는 파일 이름으로 변경
rename.file.with.class.intention.family.name=파일 이름을 해당하는 클래스 이름으로 변경
rename.file.with.class.intention.name=파일 이름을 클래스 이름으로 변경
replace.abstract.class.instance.by.map.intention.family.name=익명 클래스를 동적 인스턴스화로 변경
replace.abstract.class.instance.by.map.intention.name=동적 인스턴스화로 변경
replace.if.with.ternary.intention.family.name=if 문을 삼항 연산자로 바꾸기
replace.if.with.ternary.intention.name=?\:로 바꾸기
replace.qualified.reference.with.import.intention.family.name=정규화된 참조를 import 문으로 바꾸기
replace.qualified.reference.with.import.intention.name=import 문으로 바꾸기
replace.ternary.with.if.else.intention.family.name=''?\:''을 if else로 바꾸기
replace.ternary.with.if.else.intention.name=''?\:''을 if else로 바꾸기
simplify.ternary.operator.intention.family.name=조건식 단순화
simplify.ternary.operator.intention.name=조건식 단순화
split.else.if.intention.family.name=else if 문 분할
split.else.if.intention.name=else-if 문 분할
split.if.intention.family.name=''if'' 문 2개로 분할
split.if.intention.name=''if'' 문 2개로 분할
split.into.declaration.and.assignment=선언 및 할당 분할
split.into.separate.declaration=개별 선언으로 분할
