ActionGroupDropDown.label=액션
AttribitePanel.validation=유효성 검사
AttributeTipInfo.Severity.LEAST_EFFICIENT=최소 효율
AttributeTipInfo.Severity.MORE_EFFICIENT=더욱 효율적
AttributeTipInfo.Severity.MOST_EFFICIENT=더욱 효율적
BasicRepositoryAttribute.Nullability.NonNull=NonNull
BasicRepositoryAttribute.Nullability.NotSet=-
BasicRepositoryAttribute.Nullability.Nullable=Null 가능
ColumnRenderer.inDb.prefix=DB 내\:
ColumnValueCellRenderer.usedBy={0}이(가) 사용 중
ConfirmDialog.title=확인해 주세요
ConstraintCheckDigitIndexItem.name=숫자 색인 확인
ConstraintCurrencyItem.name=유닛
ConstraintFractionItem.name=분수
ConstraintHostItem.name=호스트
ConstraintIgnoreNonDigitCharactersItem.name=숫자가 아닌 문자 무시
ConstraintInclusiveItem.name=포괄적
ConstraintIntegerItem.name=정수
ConstraintMaxItem.name=최대
ConstraintMaxLongItem.name=최대
ConstraintMessageItem.name=메시지
ConstraintMinItem.name=최소
ConstraintMinLongItem.name=최소
ConstraintPortItem.name=포트
ConstraintProtocolItem.name=프로토콜
ConstraintRegexpItem.name=정규식
ConverterAttributeItem.name=변환기
CreateIndexDialog.label.name=이름
CreateIndexDialog.label.unique=고유
DaysDurationItem.days=일
DaysDurationItem.hours=시간
DaysDurationItem.millis=밀리초
DaysDurationItem.minutes=분
DaysDurationItem.nanos=나노초
DaysDurationItem.seconds=초
DisplayName.codingAssistance=코드 작성 지원
DisplayName.dbDrivers=데이터베이스 드라이버
DisplayName.dtoDeclaration=DTO 선언
DisplayName.entityDeclaration=JPA 엔티티 선언
DisplayName.hibernateEnvers=Hibernate Envers
DisplayName.mapperDeclaration=매퍼 선언
DisplayName.projectionDeclaration=프로젝션 선언
DisplayName.repository=Spring 데이터 저장소
DomainEntityType.JPA=JPA 엔티티
DomainEntityType.MONGODB=MongoDB 문서
DtoAttributePanel.mappingWillBeHandledImplicitly=매핑이 묵시적으로 처리됩니다
DtoAttributePanel.unsetName=<unset name>
EndIndexItem.name=색인 종료
EntityFromPojoAttributeType.EXISTING_CLASS=기존 엔티티 클래스 선택
EntityFromPojoAttributeType.NEW_CLASS=새 엔티티 클래스 생성
EntityFromPojoAttributeType.TRANSIENT=Transient
EntityToDtoMapperDialog.fromDto=다음으로부터 {0}을(를) 매핑…
EntityToDtoMapperDialog.toDto={0}을(를) 다음으로 매핑…
EntityViewCreateDialog.title=새 {0}
EnvironmentVariablesDialog.message.illegalNameEnvironmentVariable=환경 변수의 잘못된 이름\: {0}
EnvironmentVariablesDialog.message.illegalValueEnvironmentVariable=잘못된 환경 변수 값 ''{0}''\: ''{1}''
ExtractJpqlQueryIntention.error={0} 오류
GenerateEntityAttributeAction.TypeField.radio.element.collection=요소 컬렉션
GenerateEntityAttributeAction.TypeField.radio.id=ID
GenerateEntityAttributeAction.TypeField.radio.persist=지속
GenerateEntityAttributeAction.TypeField.radio.transient=Transient
GenerateEntityAttributeAction.popup.title.enterAttributeType=속성 타입 입력
InheritanceField.default=기본({0})
InjectionInsertHandler.hint.text.canNotPerformCompletion.canNotFindInjectingClass=자동 완성을 실행할 수 없습니다. 삽입하는 클래스를 찾을 수 없습니다.
InjectionInsertHandler.hint.text.canNotPerformCompletion.targetClassNotFound=자동 완성을 실행할 수 없습니다. 대상 클래스를 찾을 수 없습니다.
Item.notImplemented.text=이 기능은 아직 구현되지 않았습니다. 추후 업데이트에서 구현될 예정입니다.
JpaAttributePropertiesPanel.action.createItem=반전 속성 생성…
JpaAttributePropertiesPanel.notification.unableToDefineEntityId=''{0}'' 엔티티의 ID 타입을 정의할 수 없습니다
JpaColumnNamesEditor.validation.columnMustNotBeEmpty=열 목록은 비워둘 수 없습니다
JpaToolWindowManager.designer=디자이너
JpaToolWindowManager.jpaDesignerTitle=JPA 디자이너
JpaToolWindowManager.structure=구조
JpaToolWindowManager.structureToolWindowId=JPA 탐색기
JpaToolWindowManager.toolWindowId=JPA 버디
MapperMethodCreationDialog.single=단일
MapperMethodCreationDialog.title.from.dto.to.entity=DTO에서 엔티티로
MapperMethodCreationDialog.title.from.entity.to.dto=엔티티에서 DTO로
MessageDialog.no.thanks=아니요
MethodType.COUNT=개수
MethodType.DELETE=삭제
MethodType.EXISTS=Exists
MethodType.FIND_COLLECTION=Find Collection
MethodType.FIND_INSTANCE=Find Instance
MethodType.QUERY_COUNT=개수
MethodType.QUERY_DELETE=삭제
MethodType.QUERY_EXISTS=Exists
MethodType.QUERY_FIND_COLLECTION=Find Collection
MethodType.QUERY_FIND_INSTANCE=Find Instance
MethodType.QUERY_UPDATE=업데이트
NewType.INDEX=색인
NewType.UNIQUE_CONSTRAINT=고유한 제약
NotImplemented.title=곧 찾아옵니다
PTableGroup.association=연결
PTableGroup.basic=기본
PTableGroup.column=Column
PTableGroup.format=서식
PTableGroup.general=일반
PTableGroup.hibernate.envers=Hibernate Envers
PTableGroup.id=ID
PTableGroup.inheritance=상속
PTableGroup.jpa.buddy=JPA Buddy
PTableGroup.lombok=Lombok
PTableGroup.table=Tablas
PTableGroup.validation=유효성 검사
Palette.category.attributes=속성
Palette.category.audit=감사
Palette.category.indexes=색인
Palette.category.lifecycleCallbacks=수명 주기 콜백
Palette.category.liquibase.add=추가
Palette.category.liquibase.create=생성
Palette.category.liquibase.drop=삭제
Palette.category.liquibase.rename=이름 변경
Palette.category.method=메서드
Palette.category.namedGraph=기명 그래프
Palette.category.namedGraphs=기명 그래프
Palette.category.namedQuery=기명 쿼리
Palette.category.other=기타
Palette.category.query=쿼리
Palette.category.reverseEngineering=역공학
Palette.category.utils=유틸리티
QueryType.COUNT=개수
QueryType.DELETE=삭제
QueryType.EXISTS=Exists
QueryType.FIND=찾기
QueryType.UPDATE=업데이트
RepositoryAttribute.OperatorType.And=And
RepositoryAttribute.OperatorType.NotSet=-
RepositoryAttribute.OperatorType.Or=Or
RepositoryCreationDialog.mode.bulk=벌크
RepositoryCreationDialog.mode.single=단일
RepositoryCreationDialog.title=새 Spring 데이터 저장소
RepositoryGraphEditor.radio.fetch=가져오기
RepositoryGraphEditor.radio.load=로드
RepositoryMethodDialog.changeSettings=설정 변경
RepositoryMethodDialog.is=(Is)
RevisionListenerRenderer.newClass=새 클래스
SpringAuditItem.name=Spring 감사
StartIndexItem.name=색인 시작
TabularPropertiesEditor.propertiesNotFound=프로퍼티를 찾을 수 없습니다
TabularPropertiesEditor.validation.number=잘못된 숫자 값
ToStringType.ALL=모두
ToStringType.NONE=none
ToStringType.ONLY_EXPLICITLY_INCLUDED=명시적으로 포함된 항목만
TypeInject.CONSTRUCTOR_OR_AUTOWIRED=생성자/@Autowired
TypeInject.LOOKUP=찾기 메서드
TypeInject.OBJECT_FACTORY=객체 팩토리
action.CreateLiquibaseChangeLog.text=Liquibase Empty Changelog
action.CreateLiquibaseChangeLogItem.description=liquibase 변경 사항 생성
action.CreateLiquibaseChangeLogItem.text=Liquibase 변경 사항
action.CreateReverseEngineeringItem.description=DB 열을 JPA 엔티티 속성으로 역공학합니다
action.CreateReverseEngineeringItem.text=DB의 엔티티 속성
action.JpbAddAttributesFromPojo.text=DTO에서 속성 추가
action.JpbAddAttributesToDTO.text=DTO에 속성 추가
action.JpbAddMapperMethods.description=매퍼 메서드를 추가합니다
action.JpbAddMapperMethods.text=매퍼 메서드…
action.JpbConfigureToolWindow.description=에디터 툴바 및 도구 창을 구성합니다
action.JpbConfigureToolWindow.text=에디터 툴바 및 도구 창 구성
action.JpbCreateCustomDs.text=DB 연결…
action.JpbCreateCustomType.text=Hibernate 사용자 지정 타입
action.JpbCreateDto.text=DTO 생성
action.JpbCreateEntity.text=JPA 엔티티
action.JpbCreateEntityActionWithRelationFrom.text=참조하는 엔티티
action.JpbCreateEntityActionWithRelationTo.text=참조된 엔티티
action.JpbCreateEntityFromPojo.text=POJO의 JPA 엔티티
action.JpbCreateEntityView.text=Blaze 지속성 엔티티 보기
action.JpbCreateHibernateEvent.text=Hibernate 이벤트 생성
action.JpbCreateIndex.description=색인 생성
action.JpbCreateIndex.text=색인/제약…
action.JpbCreateJpaConverter.text=JPA 컨버터
action.JpbCreateJpaDto.text=DTO
action.JpbCreateJpaRepository.text=Spring 데이터 JPA 저장소
action.JpbCreateMapper.text=MapStruct 인터페이스
action.JpbCreatePersistenceUnit.text=지속성 유닛
action.JpbCreateRelatedEntityPopup.description=참조된 엔티티로 속성을 추가합니다
action.JpbCreateRelatedEntityPopup.text=Create Referenced Entity
action.JpbCreateRepositoryMethod.description=저장소 메서드를 생성합니다
action.JpbCreateRepositoryMethod.text=저장소 메서드…
action.JpbCreateRevisionEntity.text=리비전 엔티티
action.JpbCreateSpringDataSource.description=스캐폴드 데이터 소스 속성입니다
action.JpbCreateSpringDataSource.text=Origen de datos
action.JpbCreateSpringProjection.text=Spring 데이터 프로젝션
action.JpbDeleteDataStore.text=삭제…
action.JpbDeletePersistenceUnit.text=지속성 유닛 삭제
action.JpbDetectDataSource.text=연결 감지…
action.JpbEditCustomDataSource.text=DB 연결 수정
action.JpbEditPersistenceUnit.text=지속성 유닛 수정
action.JpbExtractMappedSuperClass.text=Extract to MappedSuperclass
action.JpbFlywayAddDdlChange.text=DDL/SQL 구문 추가
action.JpbFlywayCreateInitSchema.description=Init DDL 스키마를 생성합니다
action.JpbFlywayCreateInitSchema.text=DDL 초기화
action.JpbFlywayCreateSqlChange.description=DDL 구문을 생성합니다
action.JpbFlywayCreateSqlChange.text=DDL/SQL 구문
action.JpbFlywayCreateSqlDiff.description=엔티티나 DB 스키마로 Diff DDL 생성
action.JpbFlywayCreateSqlDiff.text=Diff DDL
action.JpbFlywayGenerateDiffDdlChanges.text=Diff DDL 구문 생성
action.JpbGenerateEntityAttribute.description=엔티티 속성을 추가합니다
action.JpbGenerateEntityAttribute.text=엔티티 속성…
action.JpbGenerateLifecycleCallback.description=JPA 수명 주기 콜백을 추가합니다
action.JpbGenerateLifecycleCallback.text=수명 주기 콜백…
action.JpbGenerateNamedQuery.description=기명 쿼리를 추가합니다
action.JpbGenerateNamedQuery.text=기명 쿼리…
action.JpbGenerateUtilities.description=JPA 유틸리티
action.JpbGenerateUtilities.text=JPA 유틸리티…
action.JpbLiquibaseDeleteTag.text=태그 삭제
action.JpbMapperCreation.text=MapStruct 인터페이스 생성
action.JpbReEntityAttributeFromDb.text=DB의 엔티티 속성
action.JpbReferencesTreeNotification.text=참조
action.JpbRefreshJpaStructure.text=JPA 탐색기 크리 새로고침
action.JpbSafeDeleteAttribute.description=속성을 안전하게 삭제합니다
action.JpbSafeDeleteAttribute.text=안전하게 삭제…
action.JpbSafeDeleteClass.text=안전하게 클래스 삭제
action.JpbSafeDeleteMethod.description=메서드를 안전하게 삭제합니다
action.JpbSafeDeleteMethod.text=안전하게 삭제…
action.JpbSearchInLibraries.text=라이브러리 내 검색
action.JpbSelectInStructureView.text=JPA 탐색기에서 선택
action.JpbSelectOpenedFileNotificationProvider.text=JPA 탐색기에서 선택
action.JpbShowEntityDdl.text=Show DDL
action.JpbShowInspectorPopup.description=검사 도구 팝업을 표시합니다
action.JpbShowInspectorPopup.text=검사 도구 팝업 표시
action.JpbShowJpaSettings.text=JPA Buddy 설정
action.JpbSyncDtoWithEntity.text=엔티티로부터 속성 추가
action.JpbSyncEntityWithDto.text=DTO의 엔티티 속성
action.actions.text=액션
action.add.text=추가
action.add.to.source.text=소스에 추가
action.browse.text=찾아보기
action.create.dto.text=DTO 생성
action.create.jpa.converter.text=JPA 컨버터 생성
action.create.projection.text=프로젝션 생성
action.delete.tag.text=태그 삭제
action.delete.text=삭제…
action.description.create.projection=프로젝션 생성…
action.description.migration=타입 마이그레이션…
action.description.smart.refactoring=스마트 리팩터링
action.documentation.text=Documento
action.edit.lowercase=수정
action.extract.lowercase=추출…
action.navigate.lowercase=탐색
action.new.text=신규
action.select.item.text=항목 선택
add=추가
add.attribute.dto=DTO에 속성 추가
add.attributes.from.dto.to.entity=DTO에서 {0}(으)로 속성 추가
add.attributes.to.entity=속성을 엔티티에 추가
addShortCut=키보드 단축키 추가
additional.db.drivers=추가적인 DB 드라이버
apply=적용
attributeItem.readModel=속성 모델 읽기
bean.injection.symbols.comment=Bean 인젝션 자동 완성은 입력된 심볼 수가 지정된 숫자보다 적으면 표시되지 않습니다.
border.title.autowiring.code.style=오토와이어링 코드 스타일
calculation.of.structure.section=트리 섹션 {0}의 연산 시간은 {1}초입니다
cancel=취소
category.all.results=모든 결과
changes.please.enter.a.valid.regex=유효한 {0}을(를) 입력하세요
checkbox.update.entity.from.dto=DTO로부터 엔티티 업데이트
choose.table.columns=테이블 열 선택
class.comment=클래스 주석
class.name.postfix=클래스 이름 접미사
column.name.attribute=속성
column.name.column=열
column.name.condition=조건
column.name.direction=지시
column.name.entity=엔티티
column.name.ignoreCase=IgnoreCase
column.name.name=이름
column.name.nullability=Null 가능성
column.name.nullable=Null 가능
column.name.operator=연산자
column.name.repository=저장소
column.name.unique=고유
columns=열
command.name.add.lifecycle.callback=수명 주기 콜백 ''{0}'' 추가
command.name.append.changes.to.sql.file=변경 사항을 SQL 파일에 추가
command.name.change.repository.method.nullability=저장소 메서드의 널 가능성 변경
command.name.create={0} 생성
command.name.create.changeset=변경 세트 생성
command.name.create.tag={0} 태그 생성
command.name.generate.repository.method=저장소 메서드 생성
command.name.override.repository.method=저장소 메서드 재정의
configurable.group.jpa.buddy.tools.settings.description=<html><body>JPA Buddy는 Java 및 Kotlin 애플리케이션에서 데이터 모델링을 할 때 발생하는 반복적인 작업을 자동화하는 개발 도구입니다.
configurable.group.jpa.buddy.tools.settings.display.name=JPA Buddy
configure.editor.header.and.tool.windows=에디터 툴바 및 도구 창 구성
continue=계속
copy=복사
could.not.parse.repository.method.name=저장소 메서드 이름을 분석할 수 없습니다.\n''{0}''이(가) Spring 데이터 메서드 이름 지정 규칙을 사용하고 있는지 확인하세요.
create=생성
create.db.connection=DB 연결 생성
db.connection.0.has.been.created=DB 연결 ''{0}''이(가) 생성되었습니다
db.driver.version=드라이버 버전
ddl.generate.in.existing.file.feature.description=이 기능을 사용하면 클릭 몇 번으로 JPA 엔티티의 DDL 구문을 생성할 수 있습니다. 처음부터 데이터베이스 스키마를 생성하기 위한 초기화 스크립트와 JPA 엔티티에 맞춰 기존 데이터베이스를 유효한 상태로 업데이트하기 위한 차등 DDL을 생성할 수 있습니다. 또한, 이 기능은 오류에 취약한 spring.jpa.hibernate.ddl-auto 속성을 대체하는 데도 매우 유용합니다. 이 JPA Buddy 액션을 사용하여 실행 전에 DDL을 완전히 제어하고, 적절한 Java -> DB 타입 매핑을 설정하고, 필드를 속성 컨버터 및 Hibernate 타입과 매핑하고, drop 구문을 생성할 수도 있으며 이 외의 다양한 작업도 수행할 수 있습니다.
default.beans.inject.strategy=기본 Bean 주입 전략
default.beans.inject.strategy.constructor=최종 Bean 참조 필드를 생성하고 클래스 생성자로 초기화
default.beans.inject.strategy.field=@Autowired 어노테이션이 있는 Bean 참조 필드 생성
default.beans.inject.strategy.setter=@Autowired 어노테이션이 있는 Bean 참조 필드 및 setter 메서드 생성
default.repository.name.suffix=기본 저장소 이름 접미사
delete=삭제
delete.db.persistenceUnit=지속성 유닛 ''{0}''을(를) 삭제할까요?
designer.settings=디자이너 설정
designers=디자이너
designers.changelog=Liquibase 변경 로그
designers.entity=JPA 엔티티
designers.repository=Spring 데이터 저장소
designers.sql=SQL 파일 타입
detect.dataSource.not.found=<html>JPA Buddy cannot find any data source configurations in the property files. Please keep in mind that JPA Buddy can only detect connections for <a href\="https\://www.jetbrains.com/help/idea/jpa-buddy-database-connections.html" target\="_blank">supported databases</a>.</html>
detected.data.sources=감지된 데이터 소스
dialog.message.entity.projectionTypeInvalid=엔티티/프로젝션 타입이 유효하지 않습니다\!
dialog.message.this.not.valid.length=길이가 유효하지 않습니다
dialog.message.validation.attributeOverridesHaveEmptyValues=속성 재정의에 빈 값이 있습니다
dialog.message.validation.columnHaventSpecified=열이 정의되지 않았습니다
dialog.message.value.length.must.be.between.symbols=값 길이는 1-{0}자여야 합니다
dialog.title.attribute.overrides=속성 재정의
dialog.title.choose.attributes.to.concatenate=연결할 속성 선택
dialog.title.choose.attributes.to.include=포함할 속성 선택
dialog.title.create.choice.constraint.index={0, choice, 0\#제약|1\#색인} 생성
dialog.title.delete=삭제
dialog.title.entity.projection.type.migration=엔티티/프로젝션 타입 마이그레이션
dialog.title.new.spring.projection=새 Spring 프로젝션
dialog.title.spring.auditing=Spring 감사
discard=삭제
done=변경 사항이 저장되었습니다
driver.class=드라이버 클래스
dto.and.mapper.feature.description=DTO은 웹앱에 필수적입니다. 하지만 DTO의 구현은 보일러플레이트 코드를 야기합니다. 엔티티를 거의 복제하는 수십 개의 클래스는 각각 매퍼가 있습니다. <b>DTO Generation</b> 생성 기능으로 반복적인 작업을 피하고 시간을 절약할 수 있습니다. 이 기능을 사용하면 DTO와 JPA 엔티티 정의를 기반으로하는 MapStruct 매퍼를 생성할 수 있습니다. 하지만 이게 전부가 아닙니다\! 추후 엔티티가 변할 수 있고, 이때 DTO도 맞춰서 변경해야 할 수 있습니다. JPA Buddy는 이 문제도 해결합니다. JPA Buddy로 <b>엔티티를 DTO와 동기화</b>하거나 반대도 가능합니다. 또한 JPA Buddy에는 Java/Kotlin 클래스에서 JPA 엔티티를 생성할 수 있도록 도와주는 <b>POJO의 엔티티</b> 액션도 제공합니다. API의 DTO를 먼저 정의하고 데이터 모델은 나중에 구현하는 API 우선 접근법을 따라 애플리케이션을 개발할 때 도움이 됩니다.
dto.class.comment.help.tooltip=<html>variable <b>ENTITY_FQN</b> - DTO가 생성된 기반을 따라 완전히 정규화된 엔티티 이름입니다.</html>
dto.comment.description=<html>주석의 링크 정규식은 JPA Buddy가 JPA 엔티티와 DTO를 연결할 수 있게 합니다. 대상 엔티티 FQN의 자리표시자를 주석에서 지정하려면 <b>(?\\&lt;entity\\&gt;.*)</b> 패턴을 사용하세요.<br><br>그러면 해당 정규식이 <b>{@link (?.*)} 엔티티의 DTO</b>로 지정됩니다. 다음 주석에서 해결됩니다. <i>{@link io.jpabuddy.demo.entities.Project} 엔티티의 DTO.</i><br><br>필드가 비어 있으면 이 기능은 비활성화됩니다.</html>
dto.comment.regexp=주석 링크 정규식
dto.name.pattern.description=<html>JPA 엔티티 및 DTO에 엄격한 이름 지정 규칙을 사용하는 경우 이곳에 선언할 수 있습니다. 그러면 JPA Buddy가 DTO와 JPA 엔티티를 연결할 수 있습니다.<br><br>대상 JPA 엔티티의 간단한 클래스 이름에 사용될 자리표시자를 지정하려면 <b>(?\\&lt;entity\\&gt;.*)</b> 패턴을 사용하세요. 예\: (?.*)Dto는 MyEntityDto 클래스가 MyEntity의 DTO로 간주된다는 의미입니다.<br><br>필드가 비어 있으면 이 기능은 비활성화됩니다.</html>
dto.name.pattern.regexp=클래스 이름 정규식
duplicate.method.name=이름이 ''{0}''인 메서드가 이미 저장소에 정의되어 있습니다
edit=편집
editor.toolbar=에디터 툴바
editorMode=EditorMode
editorMode.enable=미니멀리즘 모드 활성화
enable.completion=스마트 완성
entity.attributes.from.dto=DTO의 엔티티 속성
entity.listener=엔티티 리스너
entity.listeners=엔티티 리스너
feature.available.only.with.subscription=이 기능은 IntelliJ IDEA Ultimate Edition에서만 사용할 수 있습니다
field.exists=같은 이름의 필드가 이미 있습니다
field.required=필드 ''{0}''은(는) 필수입니다
fixes.createCustomEntity=JPA 엔티티 생성…
fixes.createMappedSuperclassEntity=JPA MappedSuperclass ''{0}'' 생성
fixes.createMissingAttribute=누락된 속성 생성
flyway.diff.feature.description=Flyway의 버전 관리 마이그레이션 생성은 반복 작업을 줄여 시간을 절약할 수 있는 매우 유용한 기능입니다. 이 기능을 사용하면 데이터베이스를 업데이트하는 데 필요한 DDL이 포함되어 있는 마이그레이션을 자동으로 생성하며 JPA 모델과 컴파일할 수 있습니다. 이러한 차등 DDL이 포함된 Flyway 마이그레이션은 JPA 엔티티와 데이터베이스 하나 혹은 두 개를 비교하거나 서로 다른 VCS 브랜치의 JPA 엔티티와 비교하여 생성될 수 있습니다. 이는 대상 데이터베이스에 액세스할 수 없을 때 매우 유용합니다.
flyway.init.feature.description=Init schema Flyway 마이그레이션 액션은 데이터베이스 스키마를 처음부터 생성할 때 유용합니다. 이 액션은 JPA 엔티티나 기존의 데이터베이스를 소스로 사용할 수 있습니다. 그 결과로 스키마 초기화에 필요한 DDL이 포함된 Flyway 버전 관리 마이그레이션을 얻습니다. 이 기능은 Flyway를 기존의 애플리케이션에 통합하거나 다량의 오래된 마이그레이션을 사용하는 대신 DB를 초기화하는 하나의 스크립트를 생성하려는 경우 매우 유용합니다. 또한, 새로운 개발 혹은 테스트 환경을 만드는 데도 도움이 될 수 있습니다.
follow.this.link.to.watch.feature=이 기능이 실제로 활용되는 모습은 <a href\="{0}">짧은 영상을 시청</a>하세요.
following.licence.options=이 기능을 활성화하려면 다음의 옵션을 사용할 수 있습니다. <ol><li>IntelliJ IDEA Ultimate 평가판을 아직 사용하지 않은 경우 <a href\="https\://www.jetbrains.com/lp/idea-extended-trial/\#\:~\:text\=90%2Dday%20Trial%20for%20Your%20Whole%20Team&text\=Complete%20a%20short%20form%20and,a%20set%20of%20simple%20criteria">지금 본인 혹은 팀을 위해 받을 수 있습니다</a></li><li>과정을 운영하거나 오픈소스 프로젝트를 개발 중인 학생 혹은 교사는 <a href\="https\://www.jetbrains.com/idea/buy/?section\=discounts&billing\=yearly">IntelliJ IDEA Ultimate를 무료로 받으세요</a></li><li><a href\="https\://www.jetbrains.com/idea/buy/?section\=commercial&billing\=yearly">IntelliJ IDEA Ultimate 구매</a></li></ol>
from.db=DB로부터
from.dto=DTO로부터
generate.ddl.by.entities=엔티티로 DDL 생성 액션을 사용하면 클릭 몇 번으로 엔티티를 DDL 구문으로 변환할 수 있습니다. 처음부터 데이터베이스 스키마를 생성하기 위한 초기화 스크립트와 JPA 엔티티에 맞춰 기존 데이터베이스를 유효한 상태로 업데이트하기 위한 차등 DDL을 생성할 수 있습니다. 또한, 이 기능은 오류에 취약한 spring.jpa.hibernate.ddl-auto 속성을 대체하는 데도 매우 유용합니다. 이 JPA Buddy 액션을 사용하여 실행 전에 DDL을 완전히 제어하고, 적절한 Java -> DB 타입 매핑을 설정하고, 필드를 속성 컨버터 및 Hibernate 타입과 매핑하고, drop 구문을 생성할 수도 있으며 이 외의 다양한 작업도 수행할 수 있습니다.
generate.ddl.from.run.console.feature.description=이 예외는 JPA 엔티티가 데이터베이스 테이블 및 필드에 적절히 매핑될 수 없을 때 발생합니다. JPA Buddy에는 이 문제를 해결할 수 있는 매우 유용한 기능이 있습니다. 스택 추적에서 바로 DDL을 생성하여 JPA 엔티티와 데이터베이스 간의 차이를 없애세요\! 그런 다음 그 결과로 나오는 스크립트를 확인하고 실행한 다음 애플리케이션을 다시 시작하세요. ddl-auto 혹은 hbm2ddl 프로퍼티를 설정하여 데이터베이스를 재생성하거나 업데이트하게 해서 동일한 문제를 해결할 수도 있습니다. 그러나 이 솔루션에는 큰 제약이 따릅니다. 이 솔루션의 제약과 JPA Buddy가 제안하는 더 나은 솔루션을 아래의 영상에서 알아보세요.
generate.equals.and.hashcode.empty.fields=엔티티에 equals() 및 hashCode()에 포함시킬 속성이 없습니다
generate.equals.and.hashcode.empty.fields.title=발견된 필드가 없습니다
generateEntity.resolveAttributeInfo=속성 정보 해결
go.to.reference.element=참조 요소로 이동
group.com.intellij.jpb.group.otherNewGroup.text=기타
group.com.intellij.jpb.structure.new.noSeparator.text=새로 만들기
group.com.intellij.jpb.structure.toolbar.new.flyway.text=모든 신규 액션
group.com.intellij.jpb.structure.toolbar.new.text=모든 신규 액션
hsql.unsupported.rename.sequence=HSQL 지원되지 않는 이름 변경 시퀀스
hsql.unsupported.rename.view=HSQL 지원되지 않는 이름 변경 보기
ide=IDE
inspection.ConverterSpecifiedIncorrectlyInspection=변환기의 타입이 속성 타입과 일치하지 않습니다
inspection.ConverterSpecifiedIncorrectlyInspectionExt=변환기의 타입 {0}이(가) 속성 타입 {1}와(과) 일치하지 않습니다
inspection.DuplicateChangeSetIdInspection=`author`가 같은 하나의 파일 내에 변경 사항 세트의 `id` 속성이 중복됩니다. 변경 사항 세트의 `author` 혹은 `id` 값을 조정하세요.
inspection.LombokAllArgsInspection=인수가 없는 생성자가 정의되지 않은 JPA 엔티티에 @AllArgsConstructor를 사용하면 JPA 사양을 위배합니다.
inspection.LombokBuilderAllArgsInspection=Lombok @Builder에는 이 클래스의 적절한 생성자가 필요합니다
inspection.LombokBuilderInspection=인수가 없는 생성자가 정의되지 않은 JPA 엔티티에 @Builder를 사용하면 JPA 사양을 위배합니다.
inspection.LombokDataInspection=JPA 엔티티에 @Data를 사용하는 것은 권장되지 않습니다. 중대한 성능 및 메모리 사용량 문제를 일으킬 수 있습니다.
inspection.LombokEqualsInspection=JPA 엔티티에 @EqualsAndHashCode를 사용하는 것은 권장되지 않습니다. 중대한 성능 및 메모리 사용량 문제를 일으킬 수 있습니다.
inspection.LombokToStringIncludeInspection=이 필드는 @ToString에 포함되기 때문에 지연 로드되었습니다. 성능 및 메모리 사용량 문제를 일으킬 수 있습니다.
inspection.LombokToStringInspection=@ToString은 지연 로드되는 필드 및/혹은 연결을 포함합니다. 이는 성능 및 메모리 사용량 문제를 일으킬 수 있습니다.
inspection.ManyToManyCascadeRemove=@ManyToMany 연결의 경우 REMOVE 엔티티 상태 전환을 캐스케이드 처리하면 링크 테이블 외부까지 전파되므로 적절하지 않습니다.
inspection.NoArgsConstructorInspection=엔티티에는 public 혹은 protected 무인수 생성자가 있어야 합니다
inspection.OneToOneWithLazyFetchType=@OneToOne 연결에서 소유하지 않는 쪽에 FetchType.LAZY를 지정하면 로딩에 영향을 주지 않습니다. 관련 엔티티가 FetchType.EAGER이 정의된 것처럼 로드됩니다.
inspection.SpringDataModifyingAnnotationMissing=업데이트/삭제 쿼리는 @Modifying으로 어노테이션되어야 하며 그렇지 않은 경우 InvalidDataAccessApiUsageException이 발생합니다.
inspection.SpringDataPageableParameterMissing=Page를 반환하는 쿼리는 Pageable 매개변수가 있어야 합니다.
inspection.associationFieldHasColumnAnnotation.name=@Column으로 표시된 연결 필드
inspection.associationFieldHasColumnAnnotation.replaceFix=@Column을 @JoinColumn으로 변경
inspection.associationFieldHasColumnAnnotation.warning=@Column은 {0} 프로퍼티에서 허용되지 않습니다
inspection.associationNotMarkedInspection=엔티티 속성이 연결 어노테이션으로 표시되지 않았습니다
inspection.cantFindHibernateCustomType=hibernate 사용자 지정 타입을 찾을 수 없습니다
inspection.cantFindInverseAttribute=속성을 반전할 수 없습니다
inspection.cantFindRelatedAttribute=관련 속성을 찾을 수 없습니다
inspection.compositeIdClassSerializableInspection=복합 ID 클래스는 Serializable을 구현해야 합니다
inspection.converterNotAnnotated=JPA 컨버터는 @Converter로 어노테이션되어야 합니다
inspection.dataClassRequiredEqualsAndHashCode=equals(), hashCode() 및 toString()의 데이터 클래스 구현은 JPA 엔티티에 권장되지 않습니다. 중대한 성능 및 메모리 사용량 문제를 일으킬 수 있습니다.
inspection.entityIdMissing=엔티티에 기본 키가 없습니다
inspection.entityIdMissing.fix.createEntityId=ID 속성 추가
inspection.equalsDoesntCheckParameterClassInspection=Equals() 메서드는 매개변수의 클래스를 확인해야 합니다
inspection.group.key.jpbCommon=JPA Buddy
inspection.incompatibleTableAnnotation=@Table 어노테이션은 SINGLE_TABLE 상속 전략과 같이 사용되어선 안됩니다.
inspection.message.unknown.column=알 수 없는 열 {0}
inspection.missingConverter=타입이 지원되지 않는 속성은 @Transient이거나 사용자 지정 타입이거나 컨버터 선언이어야 합니다
inspection.moreThanOneId=엔티티에 한 개를 초과하는 ID 속성이 있습니다.
inspection.toManyVersionAnnotations=클래스당 하나의 Version 프로퍼티 혹은 필드가 사용되어야 합니다
inspections.replaceAnnotation={0}(으)로 바꾸기
inspector=검사 도구
inspector.tool.window=검사 도구 창
intention.create.dto.confirmation.message=이 엔티티와 연관된 DTO가 없습니다. 하나 생성할까요?
intention.create.dto.confirmation.title=DTO를 찾을 수 없습니다
intention.showInspector=검사 팝업 표시
invalid.method.name=메서드 이름이 유효하지 않습니다
jpa.buddy.generation=JPA Buddy
jpa.entity.from.pojo=POJO의 JPA 엔티티
jpa.structure=JPA 탐색기
jpa.structure.updated=JPA 탐색기 트리가 업데이트되었습니다
jpaBuddy.title=JPA Buddy
label.index=색인
label.migrate.entity.projection.type.repositoryMethodTo=다음으로 저장소 메서드 {0} ''{1}''의 엔티티/프로젝션 타입을 마이그레이션
label.named.query=기명 쿼리
liquibase.diff.feature.description=Diff Liquibase 변경 로그 생성은 반복 작업을 줄여 시간을 절약할 수 있는 매우 유용한 기능입니다. 이 기능을 사용하면 데이터베이스를 업데이트하는 데 필요한 코드가 포함되어 있는 Liquibase 변경 로그를 자동으로 생성하며 JPA 모델과 컴파일할 수 있습니다. Diff 변경로그는 JPA 엔티티와 데이터베이스 하나 혹은 두 개를 비교하거나 서로 다른 VCS 브랜치의 JPA 엔티티와 비교하여 생성될 수 있습니다. 이는 대상 데이터베이스에 액세스할 수 없을 때 매우 유용합니다.
liquibase.diff.in.existing.file.feature.description=Diff Liquibase 변경 로그 생성은 반복 작업을 줄여 시간을 절약할 수 있는 매우 유용한 기능입니다. 이 기능을 사용하면 데이터베이스를 업데이트하는 데 필요한 코드가 포함되어 있는 Liquibase 변경 로그를 자동으로 생성하며 JPA 모델과 컴파일할 수 있습니다. Diff 변경로그는 JPA 엔티티와 데이터베이스 하나 혹은 두 개를 비교하거나 서로 다른 VCS 브랜치의 JPA 엔티티와 비교하여 생성될 수 있습니다. 이는 대상 데이터베이스에 액세스할 수 없을 때 매우 유용합니다.
liquibase.init.feature.description=Init schema Liquibase 변경 로그 액션은 데이터베이스 스키마를 처음부터 생성할 때 유용합니다. 이 액션은 JPA 엔티티나 기존의 데이터베이스를 소스로 사용할 수 있습니다. 그 결과로 스키마 초기화에 필요한 모든 명령어가 포함된 Liquibase 변경로그를 얻습니다. 이 기능은 Liquibase를 기존의 애플리케이션에 통합하거나 다량의 오래된 변경 로그를 사용하는 대신 DB를 초기화하는 하나의 스크립트를 생성하려는 경우 매우 유용합니다. 또한, 새로운 개발 혹은 테스트 환경을 만드는 데도 도움이 될 수 있습니다.
mapper.naming=이름 지정 패턴
mapper.naming.collection.strategy=컬렉션에 이름 지정 전략을 매핑하는 중
mapper.naming.hint=${ENTITY_NAME} 및 ${DTO_NAME}을(를) 사용하여 메서드 이름에 해당하는 클래스 이름을 입력합니다
mapper.naming.to.dto=엔티티에서 DTO로
mapper.naming.to.entity=DTO에서 엔티티로
mapper.naming.update=DTO로부터 엔티티 업데이트
mapping.methodAlreadyExists=이름이 같고 시그니처가 다른 메서드가 이미 클래스에 있습니다
mysql.unsupported.sequence=MySQL에서 지원되지 않는 시퀀스입니다. 대신 AUTO_INCREMENT를 사용하세요.
new=새로 만들기
no=아니요
notification.content.attribute.must.be.embedded.type=속성은 임베드된 타입이어야 합니다\!
notification.content.class.not.found.or.it.not.entity=클래스 ''{0}''을(를) 찾을 수 없거나 엔티티가 아닙니다
notification.content.containing.file.not.found=포함하는 파일을 찾을 수 없습니다
notification.content.entity.not.found=엔티티를 찾을 수 없습니다
notification.content.errorMessage={0}<br/> 자세한 정보는 로그를 참조하세요({1})
notification.content.incorrect.property.type.for.object.editor=객체 에디터의 프로퍼티 타입이 올바르지 않습니다\!
notification.content.not.implemented=구현되지 않았습니다\!
notification.content.psi.file.not.found.in.jpa.palette=PSI 파일을 JPA 팔레트에서 찾을 수 없습니다
ok=확인
open=열기
palette=팔레트
palette.tool.window=팔레트 도구 창
popup.content.dragging.from.palette.not.available.indices=색인을 업데이트하는 중에는 팔레트에서 끌어올 수 없습니다.
popup.title.choose.repository.class=저장소 클래스 선택
popup.title.inspector=검사 도구
popup.title.jpa.utilities=JPA 유틸리티
popup.title.lifecycle.callback=수명 주기 콜백
popup.title.liquibase.item=Liquibase 항목
popup.title.repository.method=저장소 메서드
progress.title.create.dto.class=DTO 클래스 생성…
project.error.caption=JPA Buddy 오류
project.persistenceUnit.caption=JPA 버디
project.persistenceUnit.changeSettings=설정 변경
project.persistenceUnit.initialized=기본 지속성 유닛이 초기화되었습니다
projection.class.comment.help.tooltip=<html>variable <b>ENTITY_FQN</b> - 프로젝션이 생성된 기반을 따라 완전히 정규화된 엔티티 이름입니다.</html>
projection.comment.description=<html>주석의 링크 정규식은 JPA Buddy가 JPA 엔티티와 프로젝션을 연결할 수 있게 합니다. 대상 엔티티 FQN의 자리표시자를 주석에서 지정하려면 <b>(?\\&lt;entity\\&gt;.*)</b> 패턴을 사용하세요.<br><br>그러면 해당 정규식이 <b>{@link (?.*)} 엔티티의 프로젝션</b>으로 지정됩니다. 다음 주석에서 해결됩니다. <i>{@link io.jpabuddy.demo.entities.Project} 엔티티의 프로젝션.</i><br><br>필드가 비어 있으면 이 기능은 비활성화됩니다.</html>
projection.name.pattern.description=<html>JPA 엔티티 및 프로젝션에 엄격한 이름 지정 규칙을 사용하는 경우 이곳에 선언할 수 있습니다. 그러면 JPA Buddy가 프로젝션과 JPA 엔티티를 연결할 수 있습니다.<br><br>대상 JPA 엔티티의 간단한 클래스 이름에 사용될 자리표시자를 지정하려면 <b>(?\\&lt;entity\\&gt;.*)</b> 패턴을 사용하세요. 예\: (?.*)Prj는 MyEntityPrj 클래스가 MyEntity의 프로젝션으로 간주된다는 의미입니다.<br><br>필드가 비어 있으면 이 기능은 비활성화됩니다.</html>
properties.calculation.error=프로퍼티 계산 오류
properties.calculation.error.message=예외 메시지
properties.calculation.logForDetails=상세 로그
re.columns.from.db.feature.description=데이터베이스를 먼저 설계한 다음 JPA 엔티티를 코드하고 테이블을 매핑하는 것을 선호하는 경우 이 기능이 매우 유용하며 반복 작업을 줄이고 시간을 많이 절약할 수 있습니다\! DB 액션의 열을 사용하면 선택된 속성을 JPA 엔티티 내의 필드로 변환할 수 있씁니다. ManyToOne, OneToOne, OneToMany 및 ManyToMany 연결의 매핑도 지원합니다. 이 기능의 가장 좋은 점은 엔티티 전체를 재생성하지 않고, 대신 기존의 엔티티 선언에 새로운 필드를 추가한다는 점입니다.
re.entities.from.db.feature.description=데이터베이스를 먼저 설계하고 JPA 엔티티를 작성하고 테이블에 매핑하는 것을 선호하거나 기존의 데이터베이스를 기반으로 애플리케이션을 개발하는 경우 이 기능은 매우 유용하며 반복적인 작업을 줄여 시간을 절약해 줍니다\! DB의 엔티티 액션을 사용하면 제약, 색인 및 열 프로퍼티 등을 포함하여 선택된 DB 테이블과 속성을 JPA 엔티티로 변환할 수 있습니다. 또한, ManyToOne, OneToOne, OneToMany 및 ManyToMany 연결을 위한 매핑도 지원합니다. 여기서 가장 좋은 점은 이 기능이 엔티티 전체를 재생성하는 것이 아니라 기존의 엔티티 선언에 새로운 필드를 추가한다는 점입니다.
refactoring.rename.accessors=접근자 이름 변경
refactoring.rename.dto.fields=DTO 필드 이름 변경
regexp.should.have.one.group={0}은(는) 이름이 ''{1}''인 그룹이 있어야 합니다[예\: (?<{1}>.*)]
remove=제거
repository.equality.condition.form=상등 조건 서식
repository.no.selected.item={0}에서 최소 하나의 항목을 선택하세요
repository.no.selected.item.warning=최소 하나의 항목을 선택하세요
repository.other.conditions.form=기타 조건 서식
repository.verb.conditions.form=동사 조건 서식
save=Guardar
select.columns=열 선택
select.in.jpa.structure=JPA 탐색기에서 선택
separator.class=클래스
separator.entity=엔티티
separator.item.name=구분자 항목
separator.other=기타
serializable.type=시리얼화 가능한 타입
show.all=모두 표시
show.bean.injection.completion.on=다음에 Bean 주입 완성 표시
showDiff=변경 내용 표시
smart.bean.injection=자동으로 Bean 주입 타입 감지
smart.bean.injection.help=이전에 선택된 클래스에 주입된 Bean을 기반으로 Bean 주입 타입을 자동으로 감지합니다. 주입된 Bean이 없는 경우 '기본 Bean 주입기 전략'이 사용됩니다
smart.bean.injection.injectToBeanMethodSignature=@Bean 메서드에 메서드 매개변수 주입 사용
smart.completion.availability.disable.caption=비활성화
smart.completion.availability.enableCreation.caption=기존 및 제안된 코드를 기반으로 옵션 표시
smart.completion.availability.enableCreation.example=E.g. show nonexistent Spring Data JPA repositories in the completion list if they correspond <br> to the existing JPA Entities <a href\="https\://www.jetbrains.com/help/idea/jpa-buddy-coding-assistance.html\#code-completion">learn more</a>
smart.completion.availability.enableExisting.caption=기존 코드를 기반으로 옵션 표시
smart.completion.availability.enableExisting.example=예\: 기존의 MapStruct 매퍼 및 Spring 데이터 JPA 저장소를 기반으로한 엔티티의 DTO 매핑 옵션 및 <br> find 옵션입니다
spring.data.repository=Spring 데이터 저장소
sql.empty=생성된 SQL이 비어 있습니다
start.typing.for.search=입력을 시작하여 검색
structure.mode.none=숨김
structure.mode.none.help=JPA 탐색기 창이 완전히 숨겨졌습니다. 어디서도 액세스할 수 없습니다.
structure.mode.project=프로젝트 도구 창 내의 옵션
structure.mode.project.help=JPA 탐색기 도구 창은 프로젝트를 표시하는 대안으로 사용할 수 있습니다. 이를 액세스하려면 프로젝트 도구 창을 열고 드롭다운 메뉴에서 JPA 탐색기를 선택하세요.
structure.mode.separate=별도 도구 창
structure.mode.separate.help=JPA 탐색기가 별도의 도구 창으로 표시됩니다.
structure.mode.unified=통합 도구 창
structure.mode.unified.help=JPA 탐색기 창이 통합 도구 창 내의 탭으로 표시됩니다. 액세스하려면 JPA Buddy 도구 창을 열고 구조 탭을 선택하세요.
subscription.required=IntelliJ IDEA Ultimate 에디션에서 사용 가능
suppress.LombokBuilderAllArgsInspection=Lombok @Builder에는 이 클래스의 적절한 생성자가 필요합니다
symbols=심볼
text.comment=Comentario
toolWindow.infoDialog.text=The minimalistic mode is designed to minimize distraction for developers. If you are the one who prefers to have everything at your fingertips – you will definitely like it\!<br/><ul><li>JPA Buddy tool window will be hidden;<li>JPA Explorer will be available in the Project tool window, among other options (Project, Packages,...);<li>All actions from JPA Designer can be found in the <b>Generate</b> menu (<b>{0}</b>), <b>Context Actions</b> menu (<b>{1}</b>), and in the <b>Editor Toolbar<b>;<li>Also, you can bind your favorite shortcut to call JPA Designer by clicking Add keyboard shortcut or later in <b>{2} ->  Keymap</b>.<li>You can also specify <a href\="\#designer-settings">custom visibility settings</a> for the tool windows;</li></ul>Please look at <a href\="https\://www.jetbrains.com/help/idea/jpa-buddy-minimalistic-mode.html">the guide</a> we prepared about the minimalistic mode.
tooltip.choose.class=클래스 선택
tooltip.go.to=다음으로 이동
tooltip.hibernate.custom.type=Hibernate 사용자 지정 타입
tooltip.jpa.converter=JPA 컨버터
tooltip.navigate.to={0}(으)로 이동
tooltip.show.entity.attribute=엔티티 속성 표시
tooltip.show.usages=Mostrar usos
tree.dto.and.projection=DTO 및 프로젝션
tree.persistence.units.missing.package.tooltip=지속성 유닛이 누락된 패키지를 참조합니다
unresolved.reference=해결되지 않은 참조\: {0}
use.lombok=Lombok 사용
validation_error=유효성 오류
view.mode=보기 모드
view.mode.custom=사용자 지정
view.mode.custom.help=보고 싶은 항목과 표시 방식을 선택하세요.
view.mode.extensive=확장
view.mode.extensive.help=JPA Buddy 도구 창이 모든 컨텐츠를 포함하여 표시됩니다. JPA를 처음 시작하는 분들께 유용합니다. 인기 있는 모든 옵션이 표시되어 코드 생성 및 수정에 필요한 옵션을 손쉽게 알아보고 선택할 수 있습니다.
view.mode.minimalistic=미니멀리즘
view.mode.minimalistic.help=JPA Buddy 도구 창을 표시하지 않습니다. JPA 탐색기를 프로젝트 도구 창 내의 옵션으로 사용할 수 있습니다. 코드 생성 옵션은 표준 생성 단축키(<b>{0}</b>)를 통하거나 에디터 툴바 내에서 사용할 수 있습니다. JPA 검사는 팝업 창의 형태로 사용할 수 있으며 인텐션이나 (<b>{1}</b>) 단축키로 호출할 수 있습니다. 시각적인 도구보다는 단축키를 선호하는 경우 유용합니다.
warning=경고
yes=예
