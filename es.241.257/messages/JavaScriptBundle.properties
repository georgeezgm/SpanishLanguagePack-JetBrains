# File Types
filetype.javascript.description=JavaScript
filetype.actionscript.description=ActionScript
filetype.typescript.description=TypeScript
filetype.typescript.jsx.description=TypeScript JSX
filetype.ecmascript6.description=ECMAScript 6
filetype.jsx.description=JSX
filetype.jsx.display.name=JSX
filetype.flow.description=Flow JS
filetype.flow.display.name=Flow JS
action.NewJavaScriptFile.text=JavaScript File
action.NewJavaScriptFile.description=Creates a JavaScript file from the specified template
action.NewTypeScriptFile.text=TypeScript File
action.NewTypeScriptFile.description=Creates a new TypeScript file
filetype.typescript.config.description=TypeScript config
filetype.typescript.config.display.name=TypeScript config

# Languages
javascript.language.simple.name=JavaScript
typescript.language.simple.name=TypeScript

# Language terms
javascript.language.term.function=function
javascript.language.term.inner.function=inner function
javascript.language.term.method=method
javascript.language.term.constructor=constructor
javascript.language.term.class=class
javascript.language.term.inner.class=inner class
javascript.language.term.interface=interface
javascript.language.term.inner.interface=inner interface
javascript.language.term.enum=enum
javascript.language.term.type.alias=type alias
javascript.language.term.definition=definition
javascript.language.term.namespace=namespace
javascript.language.term.parameter=parameter
javascript.language.term.property=property
javascript.language.term.variable=variable
javascript.language.term.const=constant
javascript.language.term.const.field=constant field
javascript.language.term.readonly.field=readonly field
javascript.language.term.local.variable=local variable
javascript.language.term.local.const=local constant
javascript.language.term.field=field
javascript.language.term.tag=tag
javascript.language.term.label=label
javascript.language.term.attribute=attribute
javascript.language.term.decorator=decorator
javascript.language.term.attribute.value=Attribute value
javascript.language.term.package=package
javascript.language.term.module=module
javascript.language.term.external.module.reference=external module reference
javascript.language.term.import.specifier=import specifier
javascript.language.term.export.specifier=export specifier
javascript.language.term.entity.name=entity name
javascript.language.term.jsdoc.tag=JSDoc tag
javascript.language.term.imported.default.binding=imported default binding
javascript.language.term.exported.default.binding=exported default binding
javascript.language.term.namespace.import=namespace import
javascript.language.term.namespace.export=namespace export
javascript.language.term.import.statement=import statement
javascript.language.term.type.parameter=type parameter
javascript.language.term.destructuring.property=destructuring property
javascript.language.term.default.export=default export
javascript.language.term.file=file
javascript.language.term.top.level=top-level
javascript.language.term.xml.tag=xml tag

# Parser error messages
javascript.parser.message.expected.expression=Expression expected
javascript.parser.message.expected.xml.element=XML element expected
javascript.parser.property.expected=Property expected
javascript.parser.message.expected.lbrace={ expected
javascript.parser.message.expected.at=@ expected
javascript.parser.message.expected.rbrace=} expected
javascript.parser.message.expected.identifier.string.literal.or.numeric.literal=Identifier or string literal or numeric literal expected
javascript.parser.message.expected.colon=: expected
javascript.parser.message.expected.colon.or.comma=: or , expected
javascript.parser.message.expected.semicolon=; expected
javascript.parser.message.expected.lbrace.or.semicolon={ or ; expected
javascript.parser.message.expected.rbracket=] expected
javascript.parser.message.expected.lparen=( expected
javascript.parser.message.expected.rparen=) expected
javascript.parser.message.expected.name=Name expected
javascript.parser.message.expected.comma.or.rparen=, or ) expected
javascript.parser.message.expected.function.name=Function name expected
javascript.parser.message.expected.formal.parameter.name=Formal parameter name expected
javascript.parser.message.expected.statement=Statement expected
javascript.parser.message.expected.parameter.name=Parameter name expected
javascript.parser.message.expected.property.name=Property name expected
javascript.parser.message.expected.case.or.default='case' or 'default' expected
javascript.parser.message.expected.forloop.left.hand.side.expression.or.variable.declaration=Left hand side expression or variable declaration expected before 'in'
javascript.parser.message.expected.forloop.in.or.semicolon='in' or ; expected
javascript.parser.message.expected.forloop.using.not.allowed.in.for-in='using' is not allowed in 'for-in' loop
javascript.parser.message.expected.while.keyword='while' expected
javascript.parser.message.expected.comma=, expected
javascript.parser.message.expected.comma.or.rbrace=, or } expected
javascript.parser.message.expected.variable.name=Variable name expected
javascript.parser.message.expected.mult.or.lbrace=* or { expected
javascript.parser.message.missing.rbrace=Missing }
javascript.parser.message.missing.rparen=Missing )
javascript.parser.message.missing.rbracket=Missing ]
javascript.parser.message.missing.or_rbrace=Missing |}
javascript.parser.message.missing.back.quote=Missing `
javascript.parser.message.missing.attribute.name=Missing attribute name
javascript.parser.message.missing.tag.name=Missing tag name
javascript.parser.message.unexpected.end.of.file=Unexpected end of file
javascript.parser.message.unexpected.token=Unexpected token {0}
javascript.parser.message.expected.type.name=Type name expected
javascript.parser.message.unclosed.string.literal=Unclosed string literal
javascript.parser.message.unclosed.comment=Unclosed comment
javascript.parser.message.are.not.supported.by.dialect={0} are not supported by current JavaScript version
javascript.parser.message.expected.from='from' expected
javascript.parser.message.expected.typename=Type name expected
javascript.parser.message.expected.typename.or.*=* or type name expected
javascript.parser.message.expected.name.or.lbrace=Package name or { expected
javascript.parser.message.expected.declaration=Declaration expected
javascript.parser.message.expected.namespace='namespace' expected
javascript.parser.message.expected.string.literal=String literal expected
javascript.parser.message.expected.xml=XML context keyword expected
javascript.parser.message.expected.equal== expected
javascript.parser.message.expected.identifier.lbrace.or.lbracket=Identifier, { or [ expected
javascript.parser.message.expected.eqgt==> expected
javascript.parser.message.expected.identifier=Identifier expected
javascript.parser.message.expected.instanceof='instanceof' expected
javascript.parser.message.expected.in='in' expected
javascript.parser.message.expected.value=Value expected
javascript.parser.message.expected.identifier.or.value=Identifier or value expected
javascript.parser.message.expected.as='as' expected
javascript.parser.message.expected.identifier.string.literal.or.lbrace=Identifier, string literal or { expected
javascript.parser.message.expected.identifier.string.literal.or.rbrace=Identifier, string literal or } expected
javascript.parser.message.expected.import.value=Import binding or specifier expected
javascript.parser.message.expected.import.specifier=Import specifier expected
javascript.parser.message.expected.type.member=Type member expected
javascript.parser.message.expected.tuple.comma.or.rbracket=, or ] expected
javascript.parser.message.expected.target=Only 'target' is accepted as meta property for new
javascript.parser.message.expected.meta=Only 'meta' is accepted as meta property for import
javascript.parser.message.expected.declare='declare' expected
javascript.parser.message.expected.exports='exports' expected
javascript.parser.message.expected.checks='checks' expected
javascript.parser.message.expected.type.keyword='type' expected
javascript.parser.message.expected.type=Type expected
javascript.parser.message.expected.question=? expected
javascript.parser.message.expected.class='class' expected
javascript.parser.message.expected.dot=. expected
javascript.parser.message.expected.newline.or.semicolon=Newline or semicolon expected
javascript.parser.message.expected.gt=> expected
javascript.parser.message.expected.lbracket=[ expected
javascript.parser.message.expected.readonly='readonly' expected
javascript.parser.message.expected.one.of=One of {0} expected.

# Validation messages
javascript.validation.message.conflicting.definition.was.found.with.the.same.name=Conflicting inherited declaration {0} was found in namespace {1}
javascript.validation.message.duplicate.declaration=Duplicate declaration
javascript.validation.message.duplicate.declaration.fix.remove=Remove type(s)
javascript.validation.message.redundant.type=Explicit type argument {0} can be replaced with {1}
javascript.validation.message.redundant.type.remove=Explicit type argument {0} can be removed
javascript.validation.message.duplicate.export.declaration=Export declaration conflicts with exported declaration ''{0}''
javascript.validation.message.duplicate.default.export.declaration=A module cannot have multiple default exports
javascript.validation.message.duplicate.default.export.in.module=A default export can only be used in an ECMAScript-style module
javascript.validation.message.duplicate.declaration.fix.text=Navigate to previous declaration ''{0}''
javascript.validation.message.duplicate.declaration.fix.text.no.name=Navigate to previous declaration
javascript.validation.message.redeclaration.of.block.scope=Block scoped variables cannot be redeclared
javascript.validation.message.redeclaration.of.block.scope.in.scope.of.var=Block scoped variables cannot share name with 'var' variables or parameters in the same block scope
javascript.validation.message.redeclaration.of.var.in.scope.of.block.scope='var' variables cannot share name with block scoped variables within their visibility scope
javascript.validation.message.assignment.to.const=Attempt to assign to const or readonly variable
javascript.validation.message.assignment.to.const.fix.replace=Replace with let
javascript.validation.message.assignment.to.const.fix.remove.readonly=Remove readonly modifier
javascript.validation.message.must.be.lvalue=Invalid left-hand side in {0}
javascript.validation.message.const.variable.without.initializer='const' variable without initializer. It will be impossible to assign a meaningful value later.
javascript.validation.message.constructor.field.not.allowed=Classes may not have a non-static field named 'constructor'
es6.validation.message.const.variable.without.initializer='const' variable without initializer is not allowed
javascript.validation.message.continue.without.target=Cannot determine target for 'continue'
javascript.validation.message.break.without.target=Cannot determine target for 'break'
javascript.validation.message.continue.outside.loop='continue' outside of loop statement
javascript.validation.message.return.outside.function.definition='return' outside function definition
javascript.validation.message.duplicate.label=Duplicate label
javascript.validation.message.extend.multiple.classes=Class cannot extend multiple classes
javascript.validation.message.extend.final.class=Cannot extend final class ''{0}''
javascript.validation.message.identifier.not.allowed.in.strict.mode=''{0}'' cannot be used as an identifier in strict mode
javascript.validation.message.for.await.top.level=Top-level 'for await' used
javascript.validation.message.for.await.no.async.context='for await' can only be used in an 'async' function
typescript.validation.message.invalid.modifier.cannot.be.here=Modifier {0} cannot appear here
typescript.validation.message.duplicate.modifier=Modifier {0} already seen
typescript.validation.message.duplicate.modifier2=Accessibility modifier already seen
typescript.validation.message.misordered.in.modifier='in' modifier must precede 'out' modifier.
typescript.validation.message.abstract.cannot.be.used=''{0}'' modifier cannot be used with ''abstract'' modifier
typescript.validation.message.abstract.class.be.created=Cannot create instance of the abstract class ''{0}''
typescript.validation.message.abstract.member.access.super=Abstract method ''{0}'' cannot be accessed via super expression.
typescript.validation.message.abstract.cannot.have.body=Method cannot have an implementation because it is marked as 'abstract'
typescript.validation.message.abstract.overload=Overload signatures must all be abstract or not abstract.
typescript.validation.message.constructor.cannot.be.abstract=Constructor cannot be 'abstract'
typescript.validation.message.function.implementation.missing=Function implementation is missing or not immediately following the declaration
typescript.validation.message.abstract.class.should.be=Abstract methods can only appear within an abstract class
typescript.validation.message.unique.symbol.wrong.usage='unique symbol' types are not allowed here
typescript.validation.message.unique.symbol.mutable.property.signature=A property of an interface or type literal whose type is a 'unique symbol' type must be 'readonly'
typescript.validation.message.unique.symbol.mutable.variable=A variable whose type is a 'unique symbol' type must be 'const'
typescript.validation.message.unique.symbol.mutable.non.static.field.declaration=A property of a class whose type is a 'unique symbol' type must be both 'static' and 'readonly'
typescript.validation.message.unique.symbol.mutable.non.static.field.declaration.fix.add.static.readonly=Add static and readonly modifiers
typescript.validation.module.reference.with.extension=External module reference cannot end with extension
typescript.validation.class.extend.not.constructor.type=Type ''{0}'' is not a constructor function type
typescript.validation.class.extend.no.type.arguments.type=No base constructor has the specified number of type arguments
typescript.validation.class.extend.many.constructors=Base constructors must all have the same return type
typescript.validation.class.extend.cycled.definition=Cycled class definition
typescript.validation.class.extend.constructor.return.not.class=Base constructor return type ''{0}'' is not a class or interface type.
javascript.validation.generators.yield.not.iterable=Expression type does not have [Symbol.iterator] or [Symbol.asyncIterator] defined
javascript.validation.generators.yield.not.assignable.to.return=Type ''{1}'' is not assignable to type ''{0}''
typescript.validation.generators.incorrect.type.annotation=A generator cannot have a ''{0}'' type annotation
typescript.validation.async.incorrect.type.annotation=An async function cannot have a ''{0}'' type annotation
typescript.validation.generators.incorrect.type.annotation.iterable=Type ''{0}'' is not assignable to type ''{1}''.
typescript.validation.generators.overload=An overload signature cannot be declared as a generator
typescript.validation.generators.ambient=Generators are not allowed in an ambient context
typescript.validation.generators.no.yield=Generator implicitly has type 'IterableIterator<any>' because it does not yield any values. Consider supplying a return type.
typescript.validation.generators.async.no.yield=Generator implicitly has type 'AsyncIterableIterator<any>' because it does not yield any values. Consider supplying a return type.
typescript.validation.cannot.find.best.common.type=Type argument cannot be inferred from usage
typescript.validation.dissatisfies.type.annotation=Type ''{0}'' does not satisfy the expected type ''{1}''
typescript.validation.incorrect.rhs.in.private.brand=The right-hand side must be an object, found: ''{0}''
typescript.validation.expressionWithTypeArguments.compatibleSignatureNotFound=Compatible signature not found


# Surround with names
javascript.surround.with.do.while=do / while
javascript.surround.with.for=for
javascript.surround.with.if=if
javascript.surround.with.if.else=if / else
javascript.surround.with.if.cond=if (cond)
javascript.surround.with.if.else.cond=if (cond) / else
javascript.surround.with.parenthesis=(expr)
javascript.surround.with.not.parenthesis=!(expr)
javascript.surround.with.cast=Type(expr)
javascript.surround.with.try.catch=try / catch
javascript.surround.with.try.finally=try / finally
javascript.surround.with.try.catch.finally=try / catch / finally
javascript.surround.with.while=while
javascript.surround.with.with=with
javascript.surround.with.function=function
javascript.surround.with.function.expression=function expression
javascript.surround.with.object.literal=object literal

# Introduce variable
javascript.introduce.variable.title=Extract Variable
javascript.introduce.variable.title.local=Introduce local variable
javascript.introduce.variable.error.no.expression.selected=Cannot introduce variable.\nSelection does not form an expression.
javascript.introduce.variable.error.expression.has.void.type=Cannot introduce variable.\nSelected expression type is void.
javascript.introduce.variable.name.prompt=&Name:
javascript.introduce.variable.replace.all.occurrences=Replace &all occurrences ({0} occurrences found)
javascript.introduce.variable.invalid.name=Please enter a valid name.
javascript.introduce.element.already.exists={0} with same name already exists in the scope.
javascript.introduce.variable.arrow.function.parameter.referenced=Cannot introduce.\nSelection contains references to arrow function parameters
javascript.introduce.variable.arrow.await.referenced=Cannot introduce.\nSelection contains await expressions
javascript.introduce.variable.xml.embedded=Cannot introduce variable in an embedded expression
javascript.introduce.incorrect.context=Cannot introduce variable.\nSelection contains reference to 'this'
javascript.introduce.field.title=Introduce Field
javascript.introduce.field.error.no.expression.selected=Cannot introduce field.\nSelection does not form an expression.
javascript.introduce.field.error.expression.has.void.type=Cannot introduce field.\nSelected expression type is void.
javascript.introduce.field.error.no.enclosing.class=Cannot introduce field.\nNo enclosing class.
javascript.introduce.field.make.readonly=Make &readonly
javascript.introduce.field.initialize.in.scope=&Initialize in:
javascript.introduce.field.visibility=&Visibility:
javascript.introduce.field.keyboard.hint=Press {0} for keyboard shortcuts
javascript.introduce.field.before.super.call=Cannot introduce field.\nCannot access 'this' before 'super' invocations.
javascript.introduce.field.current.method=Current method
javascript.introduce.field.field.declaration=Field declaration
javascript.introduce.field.constructor=Constructor
javascript.introduce.constant.title=Introduce Constant
javascript.introduce.constant.error.no.expression.selected=Cannot introduce constant.\nSelection does not form an expression.
javascript.introduce.constant.error.expression.has.void.type=Cannot introduce constant.\nSelected expression type is void.
javascript.introduce.constant.error.not.constant.expression.selected=Cannot introduce constant.\nSelection is not constant expression.
javascript.introduce.parameter.title=Extract Parameter
javascript.introduce.parameter.error.no.expression.selected=Cannot introduce parameter.\nSelection does not form an expression.
javascript.introduce.parameter.error.no.containing.function=Cannot introduce parameter.\nCould not find containing function to use.
javascript.introduce.parameter.error.expression.has.void.type=Cannot introduce parameter.\nSelected expression type is void.
javascript.introduce.parameter.error.not.async.context=Cannot introduce parameter for expression containing 'await'.\nNot all usages are within an async function
javascript.introduce.parameter.error.target.not.async=Cannot introduce parameter for expression containing 'await'.\nTarget function is not an async function
javascript.introduce.parameter.error.yield=Cannot introduce parameter for expression containing 'yield'.
javascript.introduce.parameter.generate.jsdoc=Generate JSDoc
javascript.introduce.parameter.optional.parameter=Optional parameter
javascript.introduce.throw.expressions.unsupported=Cannot invoke the refactoring.\nThrow expressions are currently not supported in 'Extract' refactorings.
javascript.introduce.breaks.operator.precedence=Cannot invoke the refactoring.\nIntroducing will change operator precedence in the expression.
javascript.introduce.constant.in.es5=Cannot invoke the refactoring.\nCannot introduce a constant in ECMAScript 3 or ECMAScript 5 code.
javascript.introduce.in.embedded.expression=Cannot invoke the refactoring.\nCannot introduce in an embedded expression
javascript.introduce.variable.make.constant=Make constant
list.item.class.field=Class field
list.item.global.or.module.constant=Global or module constant
list.item.local.constant=Local constant
javascript.library.built.in=built-in

# Highlighting categories
javascript.keyword=Keyword
javascript.string=String//String text
javascript.number=Number
javascript.linecomment=Comments//Line comment
javascript.doccomment=Comments//Documentation//Text
javascript.blockcomment=Comments//Block comment
javascript.regexp=Regular expression
javascript.operation=Braces and Operators//Operation
javascript.parens=Braces and Operators//Parenthesis
javascript.brackets=Braces and Operators//Brackets
javascript.braces=Braces and Operators//Braces
javascript.semicolon=Braces and Operators//Semicolon
javascript.badcharacter=Bad character
jsdoc.text=Comments//JSDoc//Text
jsdoc.tag=Comments//JSDoc//Tag
jsdoc.tag.namepath=Comments//JSDoc//Tag namepath
jsdoc.type=Comments//JSDoc//Type
javascript.doctag=Comments//Documentation//Tag
javascript.doctagvalue=Comments//Documentation//Value
javascript.valid.string.escape=String//Escape Sequence//Valid
javascript.invalid.string.escape=String//Escape Sequence//Invalid
javascript.comma=Braces and Operators//Comma
javascript.dot=Braces and Operators//Dot

# Errors with intentions
javascript.unresolved.function.name.message=Unresolved function or method <code>{0}()</code> #loc
javascript.unresolved.variable.name.message=Unresolved variable {0} #loc
javascript.unresolved.variable.null.qualifier.message=Qualifier of ''{0}'' is possibly null #loc
javascript.unresolved.variable.undefined.qualifier.message=Qualifier of ''{0}'' is possibly undefined #loc
javascript.unresolved.variable.null.or.undefined.qualifier.message=Qualifier of ''{0}'' is possibly null or undefined #loc
javascript.unresolved.type.name.message=Unresolved type {0} #loc
javascript.unresolved.circle.definition=Circle definition of import
javascript.missing.read.property=Unresolved read property #loc
javascript.missing.write.property=Unresolved write property #loc
javascript.unresolved.variable.or.type.name.message=Unresolved variable or type {0} #loc
javascript.unresolved.variable.or.type.name.message2=Unresolved variable or type {0}
javascript.unresolved.symbol.message=Unresolved symbol
javascript.unresolved.file.or.dir=Cannot resolve {0} {1}
javascript.unknown.metadata.tag=Unknown metadata tag
javascript.unknown.metadata.attribute=Unknown metadata attribute
javascript.undeclared.variable.name.message=Variable {0} implicitly declared #loc
javascript.create.function.intention.name=Create function ''{0}''
javascript.create.variable.intention.name=Create variable ''{0}''
javascript.create.variable.holding.arrow.function.intention.name=Create variable ''{0}'' holding arrow function
javascript.create.constant.intention.name=Create constant ''{0}''
javascript.create.constant.holding.arrow.function.intention.name=Create constant ''{0}'' holding arrow function
javascript.declare.variable.intention.name=Insert {0} declaration for ''{1}''
javascript.declare.variable.intention.family.name=Insert var declaration
javascript.declare.variable.in.previous.var.statement.intention.name=Insert var declaration for ''{0}'' into previous var statement
javascript.declare.variable.in.previous.var.statement.intention.family=Insert var declaration into previous var statement
javascript.create.field.intention.name=Create field ''{0}''
javascript.create.constant.field.intention.name=Create constant field ''{0}''
javascript.create.method.intention.name=Create method ''{0}''
javascript.create.field.holding.arrow.function.intention.name=Create field ''{0}'' holding arrow function
javascript.create.property.intention.name=Create property ''{0}''
javascript.create.property.holding.arrow.function.intention.name=Create property ''{0}'' holding arrow function
javascript.create.function.property.intention.name=Create function property ''{0}''
javascript.create.constructor.intention.name=Create constructor in class ''{0}''
javascript.create.get.property.intention.name=Create ''get'' property ''{0}''
javascript.create.set.property.intention.name=Create ''set'' property ''{0}''
javascript.create.function.intention.family=Create JavaScript function or method
javascript.create.variable.intention.family=Create JavaScript variable or property
javascript.intention.create.getter.setter=Create getter and setter for ''{0}''
javascript.intention.create.getter.setter.desc=Create getter and setter
javascript.intention.create.setter=Create setter for ''{0}''
javascript.intention.create.setter.desc=Create setter
javascript.intention.create.getter=Create getter for ''{0}''
javascript.intention.create.getter.desc=Create getter
create.mobile.view=Create View ''{0}''
javascript.rename.reference.intention.name=Rename reference
javascript.rename.symbol.intention.name=Rename Symbol
typescript.rename.javascript.references=Search in &JavaScript files
typescript.rename.dynamic.references=Search for &dynamic references
js.usage.type.call=Usage in function call
js.anonymous.to.named.function=Convert anonymous function to named function
js.convert.to.named.function=Convert to named function
js.convert.to.named.function.to.class.method=Convert to class method
js.convert.to.arrow.function=Convert to arrow function
js.add.braces.to.arrow.function=Add braces to arrow function
js.inspection.function.expression.is.used.instead.of.arrow=Function expression is used instead of arrow function
js.arrow.function.braces.can.be.removed.key=Redundant braces around arrow function body
js.arrow.function.braces.can.be.removed.problem.description=Braces around arrow function body can be removed
js.arrow.function.braces.can.be.removed.fix.family.name=Remove braces around arrow function body
js.convert.to.anonymous.function.family.name=Convert arrow function to anonymous function
js.convert.to.anonymous.function=Convert to anonymous function
js.named.to.anonymous.family.name=Convert to function expression
js.named.to.function.expression.text = Convert to variable holding function expression
js.named.to.function.hoisting.conflict.text=Function is used before declaring. Usage will be broken after conversion to variable
js.named.to.arrow.text = Convert to {0} holding arrow function
js.split.into.multiple.declarations=Split into multiple declarations
js.remove.digit.separators=Remove numeric separators
js.copy.qualified.to.clipboard=Copy qualified name to clipboard
js.iterate=Iterate with 'for..of'
js.iterate.async=Iterate with 'for await..of'
js.separate.digits=Separate digits
js.separate.nibbles=Separate nibbles
js.separate.bytes=Separate bytes
js.separate.words=Separate 16-bit words
js.separate.thousands=Separate thousands
js.separate.thousands.in.integer.part=Separate thousands in integer part
js.split.declarations=Split declarations
js.replace.string.with.es6.template=Replace with template string
js.replace.string.concatenation.with.es6.template.inspection.name=String concatenation is used instead of template literal
js.replace.string.concatenation.with.es6.template.fix.text=Replace with template string
js.string.template.line.separators.visible=Convert to visible line separators
js.string.template.line.separators.multispan=Convert to multi-line string template
js.string.template.line.separators.visible.family.name=Convert template string to use visible line separators
js.string.template.line.separators.multispan.family.name=Convert to multi-line string template
js.convert.var.to.let.text=Convert to let
js.convert.var.to.const.text=Convert to const
js.convert.var.to.let.or.const=Convert to let/const
js.convert.var.to.let.or.const.family.name=Convert var to let/const
js.convert.var.to.let.or.const.inspection.text='var' is used instead of 'let' or 'const'
js.convert.let.to.const.inspection.text='let' is used instead of 'const'
js.convert.var.to.let.or.const.inspection.conservative.option=Conservatively convert var with Fix all action
js.convert.var.to.let.or.const.inspection.conservative.option.description=Declarations might be moved to the top of the function\
  or before the first usage of the variable.\nTo disable this behavior when using Fix all action, check Conservatively convert var option.
js.convert.require.into.es6.import.text=Convert require() to import
js.convert.require.into.es6.import.family.name=Convert require() to import
js.convert.require.into.es6.import.inspection.text='require()' is used instead of 'import'
js.convert.require.into.es6.import.inspection.withConditional.option=Convert require() inside inner scopes with Fix all action
js.convert.require.into.es6.import.inspection.withConditional.option.description=Convert require() inside inner scopes (e.g. 'if' statements or inner functions)
js.convert.module.exports.into.es6.export.text=Convert to export
js.convert.module.exports.into.es6.export.family.name=Convert to export
js.convert.module.exports.into.es6.export.inspection.text='module.exports' is used instead of 'export'
js.convert.for.in.to.for.of.text=Convert 'for..in' to 'for..of'
js.convert.for.in.to.for.of.family.name=Convert 'for..in' to 'for..of'
js.convert.for.in.to.for.of.inspection.text='for..in' is used instead of 'for..of'
js.convert.indexed.for.to.for.of.text=Convert indexed 'for' to 'for..of'
js.convert.indexed.for.to.for.of.family.name=Convert indexed 'for' to 'for..of'
js.convert.indexed.for.to.for.of.inspection.text=Indexed 'for' is used instead of 'for..of'
js.convert.for.each.to.for.of.intention.family=Replace 'forEach' with 'for..of' loop
js.convert.for.each.to.indexed.intention.family=Replace 'forEach' with indexed 'for' loop
js.convert.for.of.to.indexed.intention.family=Replace 'for..of' with indexed 'for' loop
js.convert.map.to.for.of.intention.family=Replace 'map' array call with 'for..of' loop
js.convert.indexed.for.to.foreach.intention.family=Convert indexed 'for' to 'forEach' call
js.add.then.fix=Add '.then()'
js.quote.unquote.intention.plural={0} property names
js.quote.unquote.intention.singular={0} property name
js.quote.unquote.intention.quote=Quote
js.quote.unquote.intention.quote.family=Wrap property names in quotes
js.quote.unquote.intention.unquote=Unquote
js.quote.unquote.intention.unquote.family=Remove quotes from property names
js.property.to.indexer.intention=Replace with indexer access
js.indexer.to.property.intention=Replace with property access
js.join.vars.intention=Join subsequent variable declarations
js.infer.parameter.types.intention=Infer parameter types from usages
js.infer.parameter.types.intention.jsdoc=Infer JSDoc parameter types from usages
js.infer.parameter.types.intention.failure.title=Cannot Infer Types
js.infer.parameter.types.intention.progress.text=Inferring types
js.infer.parameter.types.intention.failure.text=Unable to infer types from the usages
js.infer.parameter.types.intention.failure.readonly.text=Unable to infer types from the usages: file is readonly

# Move module members
es6.move.module.members.refactoring.name=Move Module Members
es6.move.module.members.table.title=Members to Move
es6.move.module.members.refactoring.create.file=Create File
es6.move.module.members.refactoring.file.does.not.exist=File {0} does not exist
es6.move.module.members.refactoring.create.file.message=File {0} does not exist.\nDo you want to create it?
es6.move.module.members.refactoring.dialog.error.no.script.tag=Destination file does not contain a script tag
es6.move.module.members.refactoring.dialog.error.invalid.file.name=Destination file name is not valid on this operating system
es6.move.module.members.refactoring.dialog.error.no.selected.items=No selected members to move
es6.move.module.members.refactoring.dialog.error.incorrect.module=Destination module is incorrect
es6.move.module.members.refactoring.dialog.error.modules.same=Source and destination modules should be different
es6.move.module.members.refactoring.dialog.move.member.to=Move Member to
es6.move.module.members.refactoring.dialog.field.from=From:
es6.move.module.members.refactoring.dialog.field.to=To:
es6.move.module.members.references.unresolved.import.message=Selected {0} references unresolved import {1}
es6.move.module.members.references.local.message=Selected {0} references non-exported {1}
es6.move.module.members.has.local.usage.message=Not exported {0} is used in file {1}
es6.move.module.members.non.es6.module.usage={0} is used in file {1} which is not a ES6 module
es6.move.module.members.destination.not.es6=Destination file {0} is not a ES6 module
es6.move.module.members.cannot.detect.js.language=Destination file is not a JS file
es6.move.module.members.destination.contains.default.export=Destination module contains a default export
es6.move.module.members.destination.does.not.support.jsx={0} contains JSX tags but the destination language does not support them
es6.move.module.members.syntax.errors=Moving {0} will introduce syntax errors because destination language is different from source
es6.move.module.members.incompatible.language=Target module has incompatible language
dialog.title.move.members=Move members

js.pull.up.will.be.made.abstract=Non-abstract {0} will be made abstract
es6.extract.super.destination.label=&Destination file:
es6.extract.super.members.in.interface=Members in the new interface
es6.extract.super.members.in.superclass=Members in the new superclass
es6.extract.super.overload.declaration.without.implementation.conflict=Overload declaration {0} without implementation is not allowed in class
es6.extract.super.different.name.expected=Different name expected

# Unit testing
js.testing.inspection.group.name=Unit testing
js.testing.highlight.line=Highlight failure line in test code
js.testing.autoWatch.action.name=Watch for Changes
rc.environmentVariables.label=&Environment variables:
rc.testRunScope.all=A&ll tests
rc.testRunScope.directory=&Directory
rc.testRunScope.testFile=Test &file
rc.testRunScope.suite=Suite
rc.testRunScope.test=&Test
rc.nodeOptions.label=Node &options:
rc.workingDirectory.label=&Working directory:
rc.workingDirectory.browseDialogTitle=Select Working Directory
rc.testOrSuiteScope.suite.title=Edit Suite Name
rc.testOrSuiteScope.suite.label=Suite name:
rc.testOrSuiteScope.test.title=Edit Test Name
rc.testOrSuiteScope.test.label=Test name:
rc.testOrSuiteScope.emptyTest=Empty test name
rc.testRunScope.testFile.label=Test file:
rc.testRunScope.testDirectory.label=Test directory:
rc.testRunScope.testFile.browseTitle=Select Test File
rc.testRunScope.testDirectory.browseTitle=Select Test Directory
rc.testDirectory.presentable.name=Tests in {0}
rc.testConfig.presentable.name=All Tests in {0}
rc.configuration.tab.name=Configuration
rc.browser.liveEdit.tab.name=Browser / Live Edit
rc.browser.error.unspecified.url.text=The URL is not specified in {0}
testing.select.in.test.tree.name=Select ''{0}'' in Test Tree

# Unit testing: Jest
jest.snapshot.update.rc.name=Update snapshot for {0}
jest.snapshot.update.single.test.text=<link>Click to update snapshot</link> for ''{0}''
jest.snapshot.update.test.file.text=<link>Click to update failed snapshots</link> in {0}
jest.snapshot.update.all.tests.text=<link>Click to update all failed snapshots</link>
jest.rc.configurationFile.label=&Configuration file:
jest.rc.configurationFile.title=Select Jest Configuration File
jest.rc.jestPackageField.label=&Jest package:
jest.rc.jestOptions.label=Jest options:
jest.rc.jestOptions.emptyText=CLI options, e.g. --watch or --env=jsdom
jest.coverage.notification.title=Jest coverage
jest.coverage.directory.not.found.notification.content=Cannot read coverageDirectory option from Jest configuration
jest.coverage.cannot.find.lcov.info.notification.content=Cannot show Jest coverage: {0} not found.

# Unit testing: Vitest
vitest.rc.configurationFile.label=&Configuration file:
vitest.rc.vitestPackageField.label=&Vitest package:
vitest.rc.vitestOptions.label=Vitest options:
vitest.rc.configurationFile.title=Select Vitest Configuration File
vitest.rc.vitestOptions.emptyText=CLI options, e.g. --watch or --ui
vitest.snapshot.update.rc.name=Update snapshot for {0}
vitest.coverage.presentable.text=Vitest Coverage
vitest.coverage.notification.title=Vitest coverage
vitest.coverage.directory.not.found.notification.content=Cannot read coverageDirectory option from Vitest configuration
vitest.coverage.cannot.find.lcov.info.notification.content=Cannot show Vitest coverage: {0} not found.
vitest.coverage.cannot.copy.lcov.info.notification.content=Cannot show Vitest coverage: failed to copy file.

testing.snapshot.update.single.test.text=<link>Click to update snapshot</link> for ''{0}''
testing.snapshot.update.test.file.text=<link>Click to update all failed snapshots</link> in {0}
testing.snapshot.update.all.tests.text=<link>Click to update all failed snapshots</link>

# Unit testing: Protractor
protractor.rc.configurationFile.label=&Configuration file:
protractor.rc.configurationFile.title=Select Protractor Configuration File
protractor.rc.protractorPackage.label=&Protractor package:
protractor.rc.protractorOptions.label=Protractor &options:
protractor.rc.protractorOptions.emptyText=CLI options, e.g. --browser, or --rootElement

# Node.js
node.js.inspection.group.name=Node.js
node.js.missing.require=Missing require() statement
node.js.unresolved.api=Unresolved Node.js APIs
node.js.invalid.node=The project used an invalid path to Node.js.<br>It was updated to use Node.js from {0}.
node.js.configure.interpreter=Configure {0}
node.js.downloading=Downloading Node.js {0}
node.js.interpreters=Node.js Interpreters
node.js.set.project.interpreter.action=Set as Project Interpreter
unresolved.project.interpreter.notification.content=To work correctly, {0} requires Node.js, which was not found on your computer.
unresolved.project.interpreter.notification.download.action.url=https://nodejs.org/en/download
unresolved.project.interpreter.notification.download.action.text=Download Node.js
node.js.add.interpreter.action=Add {0}\u2026
notification.title.cannot.enable.node.js.coding.assistance=Cannot enable Node.js coding assistance
notification.title.cannot.download.types.node=Cannot download @types/node
status.text.add.interpreter.with=Add interpreter with {0}
status.text.no.interpreters.added=No interpreters added
popup.content.cannot.edit.selected.node.js.interpreter=Cannot edit selected Node.js interpreter
node.no.interpreter=No interpreter
node.interpreter.not.found={0} not found
no.executable.found.in.path=No executable found in {0, choice, 0#%PATH%|1#$PATH}
merged.process.output.text={0}{2, choice, 0#\n\nStandard error:\n{1}|1#}{4, choice, 0#\n\nStandard output:\n{3}|1#}\n\n{5}
node.interpreter.download=Download Node.js
node.interpreter.project_node.reference.name=Project
node.interpreter.node_from_path.reference.name=node
node.execution.failed.to.prepare.target.environment.error=Failed to prepare environment: {0}
node.execution.starting.process.progress.title=Starting ''{0}''\u2026

# Inspections
js.inspection.group.path=JavaScript and TypeScript
js.inspection.group.name=General
typescript.inspection.group.name=TypeScript
js.inspection.bitwise.group.name=Bitwise operation issues
js.code.style.issues.group.name=Code style issues
js.probable.bugs.group.name=Probable bugs
js.annotator.inspection.name=ECMAScript specification is not followed
js.inspection.convert.to.es6.group.name=ES2015 migration aids
js.inspection.switch.group.name=Switch statement issues
js.inspection.async.group.name=Async code and promises
js.function.metrics.group.name=Function metrics
js.validity.issues.group.name=Validity issues
js.imports.dependencies.group.name=Imports and dependencies
js.unused.symbols.group.name=Unused symbols
js.unwanted.symbols.group.name=Potentially undesirable code constructs
js.assignment.issues.group.name=Assignment issues
js.react.group.name=React
js.potentially.invalid.usage.of.this.inspection.name=Potentially invalid reference to 'this' from closure
js.potentially.invalid.usage.of.class.this.inspection.name=Potentially invalid reference to 'this' of a class from closure
js.potentially.invalid.target.of.indexed.property.access.inspection.name=Possibly incorrect target of indexed property access
javascript.potentially.invalid.usage.of.this=Potentially invalid usage of this
javascript.potentially.invalid.usage.of.class.this=Potentially invalid reference access to a class field via 'this.' of a nested function
javascript.potentially.invalid.target.of.indexed.property.access=Potentially invalid target of indexed property access
javascript.indexed.property.instead.of.computed.name=Indexed property access brackets are on a separate line. Is computed name expected?
javascript.insert.symbol.fix=Insert {0}
js.unfiltered.for.in.loop.inspection.name=Unfiltered for..in loop
javascript.unfiltered.for.in.loop=Possible iteration over unexpected (custom / inherited) members, probably missing hasOwnProperty check
js.unfiltered.for.in.loop.skip.primitives=Skip iterations over reference with array or object initializer
js.unfiltered.for.in.loop.skip.primitives.tooltip=Enable it when Object.prototype and Array.prototype are unmodified
js.referencing.mutable.variable.from.closure.inspection.name=Referencing mutable variable from closure
javascript.mutable.variable.accessible.from.closure=Mutable variable is accessible from closure
js.unresolved.variable.inspection.name=Unresolved reference
ts.unresolved.variable.inspection.name=Unresolved TypeScript reference
js.undeclared.variable.inspection.name=Implicitly declared global JavaScript variable
js.duplicate.declaration.inspection.name=Duplicate declaration
# WI-11522 only the first word should start with uppercase letter
js.linters.inspection.group.name=Code quality tools
js.linters.detect.automatically.caption=Detect package and configuration file from the nearest package.json
js.unused.local.symbol.inspection.name=Unused local symbol
js.unused.es6.import.inspection.name=Unused import
js.unused.assignment.inspection.name=Unused assignment
js.join.declaration.assignment.inspection.name=Variable declaration can be merged with the first assignment to the variable
js.join.declaration.assignment.inspection.fix=Join variable declaration and assignment
js.unused.global.symbol.inspection.name=Unused global symbol
js.missing.await.symbol.inspection.name=Missing await for an async function call
js.missing.await.symbol.inspection.for.returns=Always use 'await' for async function calls to avoid mistakes and to help V8 async stack traces
js.missing.await.symbol.inspection.for.generator.name=Asynchronous generators should be iterated using the for-await loop
jsx.missing.namespace.inspection.name=Missing JSX namespace
jsx.missing.namespace.inspection.text=JSX is used without importing {0}
js.destructuring.merge.inspection=Destructuring properties with the same key
js.destructuring.merge.inspection.text=Destructuring properties with identical keys can be merged
js.destructuring.merge.inspection.fix=Merge destructuring properties
js.nested.template.literal.inspection=Redundant nesting in template literal
js.nested.template.literal.fix=Inline nested literal
js.redundant.await.inspection=Redundant 'await' expression
js.await.promise.resolve.inspection=Redundant 'await Promise.resolve()'
js.await.promise.reject.inspection=Redundant 'await Promise.reject()'
js.await.promise.double.await.inspection=Redundant 'await await'
js.await.promise.return.await.inspection=Redundant 'return await'
js.await.promise.trivial.await.inspection=Redundant 'await' for a non-promise type
js.await.promise.resolve.fix=Replace with ''{0}''
js.top.level.await.expression.inspection= Top-level 'await' expression
js.top.level.await.expression.inspection.description= Top-level 'await' expression used
js.possibly.async.function.inspection='await' in non-async function
js.await.in.synchronous.function=The 'await' operator can only be used in an 'async' function
js.await-using.in.synchronous.function=The 'await using' directive can only be used in an 'async' function
js.possibly.async.function.quick.fix=Make function {0} async
js.possibly.async.function.quick.fix.family.name=Make function async
js.property.can.be.replaced.with.shorthand=Property can be replaced with shorthand
js.property.can.be.replaced.with.shorthand.method=Property can be replaced with shorthand method
js.replace.with.shorthand.property.quick.fix=Replace with shorthand property
js.replace.with.shorthand.method.quick.fix=Replace with shorthand method
js.expand.shorthand.property.quick.fix=Expand shorthand property
jsx.unresolved.component.name=Unresolved JSX component
jsx.unresolved.prop.name=Unresolved JSX property
js.deprecated.symbols.inspection.name=Deprecated symbol used
js.suspicious.eq.plus.inspection.name=Suspicious '=+' assignment
js.suspicious.eq.plus.inspection.desc=Suspicious '=+' assignment: possibly misspelled '+='
js.suspicious.eq.plus.fix.name=Replace with '+='
js.suspicious.name.combination.inspection.name=Suspicious variable/parameter name combination
js.bitwise.operator.usage.name=Bitwise operator usage
js.bitwise.operator.usage.popup=Bitwise operator used
js.bitwise.operator.usage.quickfix=Replace with {0}
js.potentially.invalid.constructor.usages.inspection.name=Potentially invalid constructor usage
js.mismatched.update.collection.inspection.name=Mismatched query and update of collection
js.mismatched.update.collection.update.method.names=Update method names:
js.closure.compiler.syntax.inspection.name=Incorrect usage of JSDoc tags
js.closure.compiler.syntax.implements.not.interface={0} is not annotated with @interface
js.closure.compiler.syntax.cyclic.inheritance=Cyclic inheritance involving {0}
js.closure.compiler.syntax.empty.type=Empty type is not available
js.closure.compiler.syntax.invalid.type=Invalid type syntax
collection.updated.but.not.queried=Contents of collection <code>#ref</code> are updated, but never queried
collection.queried.but.not.update=Contents of collection <code>#ref</code> are queried, but never written
javascript.constructor.with.lower.case.name.used.message=Constructor names usually start with an uppercase letter. A typo?
interface.function.declaration.should.have.no.body=Interface functions declaration should have no body
javascript.ambient.declaration.should.have.no.body=Ambient declaration should have no body
javascript.ambient.declaration.should.have.no.initializer=Ambient declaration should have no initializer
javascript.ambient.declaration.const.should.be.primitive=A 'const' initializer in ambient context must be a primitive literal or literal enum reference
javascript.deprecated.symbol.used.name.message=Deprecated symbol used, consult docs for better alternative #loc
javascript.deprecated.symbol.used.name.message2=Since version {0} symbol is marked as deprecated, use {1} as replacement #loc
js.unused.symbol=Unused {0} #ref
js.unused.symbol.full=Unused {0}
js.unused.symbol.remove=Remove unused {0}
js.suspicious.name.assignment=''{0}'' should probably not be assigned to ''{1}''
js.suspicious.name.parameter=''{0}'' should probably not be passed as parameter ''{1}''
js.suspicious.name.return=''{0}'' should probably not be returned from method ''{1}''
js.constructor.cant.have.return.type=Constructor can't have return type
invalid.identifier.value.0=Invalid identifier: ''{0}''
js.suspicious.bind.with.arrow.function=Suspicious usage of 'bind' with arrow function
javascript.change.signature.invalid.parameter.declaration=Invalid parameter: ''{0}''
javascript.change.signature.invalid.function.name.0=Invalid function name: ''{0}''
javascript.validation.generators.yield.not.in.generator=A 'yield' expression is only allowed in a generator body.
javascript.validation.new.target.not.in.function=Meta-property 'new.target' is only allowed in the body of a function declaration, function expression, or constructor
javascript.validation.message.this.referenced.from.static.context='this' referenced in static context
javascript.validation.message.super.referenced.without.class.instance.context='super' referenced without class instance context
javascript.validation.message.super.referenced.from.static.context='super' referenced in static context
javascript.validation.message.function.override.without.override.modifier=Method overrides method in superclass {0} without override keyword
javascript.validation.multiple.var.in.for.loop=Only a single variable is allowed in ''{0}'' loops
javascript.validation.initialized.var.in.for.loop=Variable initializers are not allowed in ''{0}'' loops
javascript.fix.add.override.modifier=Add override modifier
javascript.fix.property.spelling.family=Fix possible typo in property name
javascript.fix.property.spelling.text=Adjust spelling to ''{0}''
js.code.style.tab.name=JavaScript
js.code.style.file.name.relaxed.style=Reuse case of current file
js.code.style.file.name.camel.style=Camel case (appComponent)
js.code.style.file.name.pascal.style=Pascal case (AppComponent)
js.code.style.file.name.snake.style=Snake case (app_component)
js.code.style.file.name.lisp.style=Dash case (app-component)
js.code.style.file.name.mixed.style=Dash case with suffix (my-app.component)
es6.code.style.path.mapping.always=Always
es6.code.style.path.mapping.never=Never
es6.code.style.path.mapping.different.paths=Only in files outside specified paths
typescript.code.style.tab.name=TypeScript
jsx.code.style.attribute.default.value=Add for JSX attributes:
jsx.code.style.attribute.default.value.braces=Braces
jsx.code.style.attribute.default.value.quotes=Quotes
jsx.code.style.attribute.default.value.none=None
jsx.code.style.attribute.default.value.typebased=Based on type
javascript.formatting.options.panel.naming.conventions=Naming Conventions
javascript.formatting.options.panel.comments=Comments
javascript.formatting.web.spacing.within.interpolations=Interpolations
javascript.formatting.web.spacing.within.group=Within
javascript.formatting.web.wrapping.interpolations=Interpolations
javascript.formatting.web.wrapping.new-line-after-start-delimiter=New line after '{{'
javascript.formatting.web.wrapping.new-line-before-end-delimiter=New line before '}}'
js.convert.parameters.to.object.intention.name=Convert parameters to object
js.convert.parameters.to.object.with.interface.intention.name=Convert parameters to object and introduce interface
js.convert.parameters.to.object.non.call.usage.will.not.be.updated=Non-call usage will not be updated
js.convert.parameters.to.object.usage.will.not.be.updated.for.contextual.type=Method overrides another method. Base method won't be updated
js.convert.parameters.to.object.usage.will.not.be.updated.for.spread=Call with non-terminal spread arguments won't be updated
js.undefined.property.assignment.inspection.name=Undefined property assignment
js.undefined.property.assignment.inspection.message=Property {0} is not defined in type {1}
js.jquery.efficiency.inspection.name=JQuery selector can be optimized
js.jquery.efficiency.inspection.allow.attribute.and.pseudo.selectors=Allow attribute and pseudo-selectors
js.jquery.efficiency.inspection.attribute.used.message=jQuery attribute selectors may be inefficient
js.jquery.efficiency.inspection.pseudoselector.used.message=jQuery pseudo-selectors may be inefficient
js.jquery.efficiency.inspection.duplicated.selector=Duplicated jQuery selector
js.accessibility.check.inspection.name=Inaccessible @private and @protected members referenced
js.convert.to.foreach.intention.name=Convert 'for-in' to 'forEach' call
js.consecutive.commas.in.array.literal.inspection.name=Consecutive commas in array literal
js.consecutive.commas.in.array.literal.inspection.message=Consecutive commas in array literal
js.consecutive.commas.in.array.literal.inspection.insert.undefined=Insert 'undefined'
js.check.function.signature.guess.optionality=Consider untyped parameters as required
js.check.function.signature.guess.optionality.hint=If disabled, all untyped parameters are considered optional
es6.redundant.await.report.for.promises=Report for promises
es6.redundant.await.report.for.promises.hint=Will always report 'return await' as redundant, but this defeats async stack traces feature of V8
es6.missing.await.report.for.promises=Report for promises in return statements
es6.missing.await.report.for.promises.hint=Having 'await' before an async function call helps V8 to provide an async stack trace
js.file.references.inspection.name=Unresolved file reference
js.file.references.inspection.ignore.complex.cases=Ignore complex cases
js.inspection.es6.modules.dependencies.family.name=Missing import statement
js.inspection.amd.modules.dependencies.family.name=Missing AMD module dependency
js.inspection.promise.ignored.display.name=Result of method call returning a promise is ignored
js.inspection.promise.ignored.problem.descriptor=Promise returned from {0} is ignored
js.inspection.promise.value.expected.problem.descriptor=Promise returned from {0} is used where a value is expected
js.flowjs.group.name=Flow type checker
js.flowjs.config.inspection.name=Missing .flowconfig
js.flowjs.config.inspection.message=No associated .flowconfig
js.flowjs.coverage.inspection.name=Code is not covered by Flow
js.flowjs.coverage.inspection.error.text=This element is not covered by Flow
js.flowjs.config.inspection.to.project.path.name=Add .flowconfig to the project root
js.flowjs.config.inspection.to.module.path.name=Add .flowconfig to the module content root
js.flowjs.config.inspection.to.current.path.name=Add .flowconfig to the current directory
js.flowjs.annotation.inspection.name=Flow type checker
js.flowjs.flag.comment.placement.inspection.name=Misplaced @flow flag
js.flowjs.flag.comment.placement.inspection.error=Flow flag comment isn't at file start
js.flowjs.flag.comment.placement.inspection.fix=Move Flow flag comment to file start
js.flowjs.flag.without.language.version=Flow flag without Flow language version
js.extjs.unresolved.ext.xtype.inspection.name=Unresolved Ext JS xtype
js.frameworks.sencha.xtype.not.found=Ext JS class for xtype ''{0}'' not found
javascript.equality.comparison.with.coercion.family.name=Replace without type coercion
javascript.equality.comparison.with.coercion.display.name=Equality operator may cause type coercion
javascript.equality.comparison.with.coercion.error.string=Comparison #ref may cause unexpected type coercion #loc
javascript.equality.comparison.with.coercion.fix=Replace with ''{0}''
javascript.equality.comparison.with.coercion.options.label=Highlight usages of '==' and '!=':
javascript.equality.comparison.with.coercion.option.always=All
javascript.equality.comparison.with.coercion.option.always.except.null=All except when comparing with null or typeof
javascript.equality.comparison.with.coercion.option.only.suspicious=Only suspicious expressions
js.strict.mode.inspection.name=Non-strict mode used
js.strict.mode.inspection.error={0} is not in strict mode
js.strict.mode.inspection.fix=Add "use strict" pragma
js.strict.mode.inspection.redundant.pragma="use strict" pragma is redundant
js.strict.mode.remove.pragma=Remove "use strict" pragma
js.class.member.initialization.inspection.name=Use of possibly unassigned property in a static initializer
js.class.member.initialization.inspection.text=Field ''{1}'' is declared after ''{0}'' and is possibly not assigned yet
js.class.member.initialization.inspection.text.id=Field ''{0}'' references itself
js.assignment.used.as.condition.name=Assignment used as condition
js.assignment.used.as.condition.text=<code>#ref</code> used as condition
js.assignment.used.as.condition.fix=Replace ''='' with ''{0}''
js.missing.switch.branches.inspection.name='switch' statement has missing branches
js.missing.switch.branches.inspection.desc=''switch'' statement misses cases: {0}
js.missing.switch.branches.ignore.with.default=Ignore switch statements with a default branch
js.unreachable.switch.branches.inspection.name=Unreachable 'case' branch of a 'switch' statement
js.unreachable.switch.branches.inspection.desc=Unreachable 'case' branch
js.unreachable.switch.branches.ignore.with.dynamic=Don't show this warning in the context of a dynamic type
js.unreachable.switch.branches.remove=Remove unreachable 'case' branch
js.redundant.switch.problems.inspection.name='switch' statement is redundant and can be replaced
js.redundant.switch.problems.inspection.empty='switch' statement is empty
js.redundant.switch.problems.inspection.empty.remove=Remove empty 'switch' statement
js.redundant.switch.problems.inspection.default='switch' statement contains only a single 'default' clause
js.redundant.switch.problems.inspection.default.unwrap=Unwrap 'switch' statement
js.redundant.switch.problems.inspection.side.effects=and extract side effects
js.redundant.switch.problems.inspection.single='switch' statement contains only a single non-default clause
js.redundant.switch.problems.inspection.single.replace=Replace 'switch' with 'if'
js.switch.no.default='switch' statement has no 'default' branch
js.switch.no.default.add=Create missing default branch
js.variable.problems.inspection.name=Variable is declared and being used in different 'case' clauses
js.variable.problems.inspection.desc=Variable ''{0}'' is declared in clause ''{1}'' but is being used in clause ''{2}''
js.variable.problems.inspection.desc.ref.error=Reference error when accessing
js.variable.problems.ignore.desc=Ignore for var-variables
js.inspection.package.json.dependencies=Mismatched dependencies in package.json
js.inspection.package.json.update.dependency.to.latest.version=Update package.json dependencies to latest versions
js.inspection.missing.amd.dependency=Missing AMD module dependency
js.inspection.missing.import=Missing import statement
js.inspection.missing.module.dependency=Missing module dependency
typescript.narrowed.to=Narrowed to ''{0}''
label.exclude.methods.classes=Exclude methods of classes:
typescript.suspicious.constructor.parameter.assignment=Suspicious parameter assignment in constructor. Did you forget to add 'this.'?
typescript.suspicious.constructor.parameter.assignment.desc=Assigned constructor field parameter
typescript.abstract.class.constructor.can.be.made.protected=Abstract class constructor can be made protected
typescript.make.constructor.protected=Make constructor protected
typescript.private.field.modifiers.mix=Fields with private names cannot have 'public', 'private' or 'protected' access modifiers
javascript.validation.message.flowjs.path=Flow path is incorrect
javascript.validation.message.interface.members.cannot.have.access.modifiers=Interface members cannot have access modifiers
javascript.validation.message.interface.members.cannot.have.namespace.attributes=Interface members cannot have namespace attributes
javascript.validation.message.interface.members.cannot.be.final.modifiers=Interface members cannot be final
javascript.validation.message.static.modifier.is.allowed.only.for.class.members=Static modifier is allowed only for class members
javascript.validation.message.interface.cannot.be.final.modifiers=Interface cannot be final
javascript.template.context.type=JavaSc&ript
interface.should.have.no.variable.declarations=Interface should have no variable declarations
javascript.validation.message.implements.for.interface.not.allowed=Implements list is not allowed for interface
javascript.validation.message.interface.name.expected.here=Interface name expected here
javascript.validation.message.class.name.expected.here=Class name expected here
javascript.validation.message.circular.dependency=Circular dependency
javascript.validation.message.index.no.type=An index signature parameter must have a type annotation
javascript.validation.message.index.wrong.type=An index signature parameter type must be assignable to 'string | number | symbol'
javascript.fix.remove.circular.dependency=Remove circular dependency
jsx.syntax.used.name=JSX syntax used
jsx.syntax.used.description=JSX syntax is used
js.void.function.result.used.name=Void function return value used
js.void.function.result.used.description=Void function return value is used
js.url.import.usage.inspection.name=URL import is used
js.url.import.usage.inspection.download.module.quick.fix.name=Download module
js.url.import.usage.inspection.download.module.0.quick.fix.progress=Downloading module ''{0}''
js.url.import.usage.inspection.download.module.0.quick.fix.failed=Failed to download module ''{0}''
js.url.import.usage.inspection.download.module.0.quick.fix.warning=Module ''{0}'' has been downloaded with errors
js.url.import.usage.inspection.download.module.0.quick.fix.warning.urls=Failed URLs:
js.url.import.usage.inspection.download.module.0.quick.fix.success=Module ''{0}'' has been successfully downloaded

jsx.dom.nesting.inspection.name=Invalid DOM element nesting
jsx.dom.nesting.inspection.message=''{0}'' cannot appear as a child of ''{1}''
jsx.dom.nesting.inspection.message.text=Text nodes cannot appear as a child of ''{0}''
jsx.dom.nesting.inspection.message.tr=''{0}'' cannot appear as a child of ''{1}''. Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.

react.inspection.unresolved.ref.to.state.fix.family.name=Create component state
react.inspection.unresolved.ref.to.state.fix.text=Create ''{0}'' state in ''{1}'' component
react.inspection.unresolved.ref.to.prop.fix.text=Create ''{0}'' prop in ''{1}'' component
react.inspection.unresolved.prop.quick.fix.family.name=Create component prop
react.inspection.unresolved.prop.quick.fix.text=Create component prop ''{0}''
react.inspection.unresolved.prop.action.name=Create Component Prop
react.inspection.unresolved.component.prop=Unresolved component prop ''{0}''
react.inspection.unresolved.prop.validation.message.component.source.not.found=Component source not found
react.inspection.unresolved.prop.validation.message.writable.source.not.found=Writable component source not found
react.inspection.unresolved.prop.validation.message.writable.props.not.found=Writable properties type object not found
# JSDoc validation
javascript.validation.message.interface.method.not.implemented=Method {0} from interface {1} is not implemented
javascript.validation.message.abstract.method.not.implemented=Abstract method {0} from class {1} is not implemented
javascript.validation.message.abstract.get.accessor.not.implemented=Abstract get accessor {0} from class {1} is not implemented
javascript.validation.message.abstract.set.accessor.not.implemented=Abstract set accessor {0} from class {1} is not implemented
javascript.validation.message.interface.property.not.implemented=Property {0} from interface {1} is not implemented
javascript.validation.message.interface.get.accessor.not.implemented=Property get accessor {0} from interface {1} is not implemented
javascript.validation.message.interface.set.accessor.not.implemented=Property set accessor {0} from interface {1} is not implemented

javascript.validation.message.class.method.incompatible= Method ''{0}'' in class ''{1}'' is not assignable to the same method in base ''{2}''
javascript.validation.message.class.property.incompatible= Property ''{0}'' in class ''{1}'' is not assignable to the same property in base ''{2}''
javascript.validation.message.class.method.not.implemented=Method {0} from class {1} is not implemented
javascript.validation.message.class.property.not.implemented=Property {0} from class {1} is not implemented
javascript.validation.message.interface.call.signature.not.implemented=Call signature from interface {0} is not implemented
javascript.validation.message.interface.index.signature.not.implemented=Index signature from interface {0} is not implemented
javascript.validation.message.class.setter.cannot.have.return.type=A 'set' accessor cannot have a return type
javascript.fix.remove.externally.visible.symbol=Remove externally visible symbol
javascript.fix.remove.abstract.keyword=Remove 'abstract' modifier
javascript.fix.remove.modifier=Remove modifier
javascript.fix.implement.members=Implement members
javascript.fix.implement.methods=Implement methods
javascript.implement.all.interfaces=Implement all members
javascript.implement.required.interfaces=Implement all required members
javascript.implement.members.abstract=Implement members abstract

# Symbols
javascript.parameter=Identifiers//Parameter
javascript.local.variable=Identifiers//Local variable
javascript.global.variable=Identifiers//Global variable
javascript.global.function=Identifiers//Global function
javascript.local.function=Identifiers//Local function
javascript.global.decorator=Decorator
javascript.static.member.function=Classes//Static method
javascript.static.member.variable=Classes//Static property
# https://tc39.es/ecma262/#sec-property
javascript.instance.member.variable=Object//Property
# https://tc39.es/ecma262/#sec-method
javascript.instance.member.function=Object//Method
javascript.create.class.intention.name=Create class ''{0}''
javascript.create.interface.intention.name=Create interface ''{0}''
choose.class.to.import.title=Class to Import
javascript.fix.remove.override.modifier=Remove override modifier
javascript.fix.remove.virtual.modifier=Remove virtual modifier
javascript.validation.message.attribute.was.specified.multiple.times=Modifier {0} was specified multiple times
javascript.fix.remove.dynamic.modifier=Remove dynamic modifier
javascript.validation.message.function.override.for.object.method=Method inherited from Object does not need override
javascript.validation.message.function.override.without.parent.method=Method does not override method from super class
javascript.module.name=Module name
javascript.exported.variable=Identifiers//Exported variable
javascript.exported.function=Identifiers//Exported function
javascript.exported.class=Classes//Exported class
javascript.fix.create.function.component.jsx.name=Create function component ''{0}''
javascript.fix.create.function.component.jsx.family=Create function component
javascript.fix.create.class.component.jsx.name=Create class component ''{0}''
javascript.fix.create.class.component.jsx.family=Create class component
javascript.jsx.client.component=JSX client component
typescript.module.name=Module name
typescript.type.alias.name=Types//Type alias
typescript.enum.name=Enum//Enum name
typescript.enum.member.name=Enum//Member
typescript.type.guard.name=Variable type narrowed by a type guard
typescript.color.scheme.type.guard.name=Types//Narrowed by a type guard
typescript.type.guard.name.disable=Disable coloring of narrowed types
typescript.primitive.types.name=Types//Primitive type
typescript.type.parameter=Types//Type parameter
typescript.remove.type.declaration=Remove type declaration
typescript.jsdoc.type=Comments//JSDoc type

# Icons
icon.icons.nodes.readonlyMark.tooltip=readonly

generate.constructor.overloads.and.fields.chooser.title=Choose Overloads to Use and Fields to Initialize
generate.to.string.chooser.title=Select Fields to Use in toString function
members.to.implement.chooser.title=Select Members to Implement
members.to.override.chooser.title=Select Members to Override
no.candidates=No candidates
no.methods.to.implement=No methods to implement have been found
no.members.to.implement=No members to implement have been found
implement.members.abstract=Implement members abstract
no.methods.to.override=No methods to override have been found
no.members.to.override=No members to override have been found
no.variables.for.getter=No fields without getter have been found
no.variables.for.setter=No fields without setter have been found
no.variables.for.getter.setter=No fields without getter and setter have been found
javascript.validation.unused.import=Unused import
javascript.validation.fqn.to.replace.with.import=Qualified name may be replaced with import statement
javascript.fix.optimize.imports=Optimize imports
javascript.invalid.number.of.parameters=Invalid number of arguments, expected {0}
javascript.expression.type.implicitly.coerced.to.unrelated.type=Expression type {1} is implicitly coerced to unrelated type {0}
javascript.argument.type.mismatch=Argument type {1} is not assignable to parameter type {0}
javascript.initializer.type.mismatch=Initializer type {1} is not assignable to variable type {0}
javascript.incorrect.variable.type.mismatch=Variable type {1} is not assignable to type {0}
javascript.term.does.not.evaluate.to.function=Method expression is not of Function type
javascript.term.does.not.evaluate.to.function.nullable=Method expression can be null or undefined
javascript.term.does.not.evaluate.to.function2=Property cannot be invoked as function
javascript.term.does.not.evaluate.to.function.line.break=The expression is not callable. If this is not supposed to be a call, check for a missing semicolon
javascript.term.does.not.evaluate.to.function2.fix=Remove argument list
javascript.term.nullable.indexer.qualifier=Indexed expression can be null or undefined
javascript.unused.import.remove=Remove unused 'import'
javascript.unused.import.remove.specifier=Remove unused element
javascript.assigned.expression.type.mismatch=Assigned expression type {1} is not assignable to type {0}
javascript.vector.literal.element.type.mismatch=Vector literal element type {1} is not assignable to type {0}
javascript.type.is.not.assignable.to.type=Type {1} is not assignable to type {0}
javascript.no.call.signatures=Assigned type doesn't contain call signatures
javascript.known.props.only=Object literal may only specify known properties, but the following are extra: {0}
javascript.returned.expression.type.mismatch=Returned expression type {1} is not assignable to type {0}
javascript.insert.cast.fix=Insert cast
javascript.insert.primitive.wrapper.fix.family.name=Wrap with primitive type
javascript.insert.generic.wrapper.fix.family.name=Wrap with generic type
javascript.insert.wrapper.fix.text=Wrap with ''{0}''
typescript.insert.cast.fix=Insert type assertion
es6.insert.await.fix=Insert await
es6.change.to.default.fix=Use default import for ''{0}''
es6.change.to.named.import.fix=Use named import for ''{0}''
typescript.insert.type.guard.fix.family=Insert type guard
typescript.insert.type.guard.surround=Enclose in ''{0}''
typescript.insert.type.guard.prefix=Prefix with ''{0}''
typescript.insert.type.guard.postfix=Query as optional with ''{0}''
typescript.insert.type.guard.nc=Replace qualifier with ''{0}''
typescript.insert.type.guard.nc.self=Replace with ''{0}''
error.not.available.in.javascript.code={0} is not available in JavaScript code
cannot.modify.library.code=Cannot modify library or SDK code
javascript.extract.method.title=Extract Function
javascript.validation.message.function.override.incompatible.signature.generic=Incompatible override
javascript.validation.message.function.override.incompatible.access.modifier=Incompatible override, should have ''{0}'' access modifier
javascript.validation.message.function.override.incompatible.signature=Incompatible override, should have signature ''{0}''
javascript.validation.message.function.override.incompatible.signature2=Incompatible override, should have return type ''{0}''
javascript.validation.message.function.override.incompatible.signature3=Incompatible override, should have kind ''{0}''
javascript.validation.message.function.method.invalid.overridden.parameter.type=Incompatible override, should have type ''{0}''
javascript.validation.message.interface.method.invalid.access.modifier=Incompatible implementation, should have 'public' access modifier
javascript.validation.message.interface.method.invalid.signature=Incompatible implementation, should have signature ''{0}''
javascript.validation.message.interface.method.invalid.signature2=Incompatible implementation, should have return type ''{0}''
javascript.validation.message.interface.method.invalid.signature3=Incompatible implementation, should have get / set ''{0}''
javascript.validation.message.duplicate.catch.block=Duplicate catch block #loc
javascript.validation.message.duplicate.catch.block.fix=Remove duplicate catch block
javascript.validation.message.missing.catch.or.finally=Missing catch or finally clause
javascript.validation.message.return.value.of.type.is.required=Return value of type {0} is required
javascript.validation.message.return.statement.required=Return statement is required for non-void return type
typescript.validation.message.invalid.module.member.modifier=''{0}'' is not valid modifier for module member
javascript.validation.message.unresolved.component=Unresolved component {0}
javascript.validation.message.super.constructor.call.should.be.in.constructor=Superclass constructor invocation should be in constructor body
javascript.fix.remove.constructor=Remove constructor
javascript.metadata=Metadata
javascript.class=Classes//Class name
javascript.interface=Interface
javascript.label=Identifiers//Label
javascript.function.arrow=Braces and Operators//Arrow function
javascript.validation.message.unneeded.comma=Unneeded comma
javascript.validation.message.remove.unneeded.comma.fix=Remove unneeded comma
javascript.validation.message.constructor.cannot.be.static=Constructor cannot be static
javascript.create.event.handler.intention.name=Create event handler ''{0}''
javascript.validation.message.missed.super.constructor.call=Missed superclass's constructor invocation
javascript.validation.message.this.before.super.call='this' is not allowed before superclass constructor invocation
javascript.validation.message.baseMethod.before.super.call='super' is not allowed before superclass constructor invocation
javascript.validation.message.base.constructor.in.not.derived=Base constructor call is only allowed in a derived constructor
javascript.fix.create.constructor.invoke.super=Create constructor matching super
javascript.fix.create.invoke.super=Insert super class constructor invocation
javascript.interface.can.not.be.instantiated.message=Interface cannot be instantiated
javascript.abstract.class.can.not.be.instantiated.message=Abstract class cannot be instantiated
javascript.validation.message.set.method.should.be.void.or.without.type=Return type of a setter definition must be unspecified or void
javascript.validation.message.set.method.should.have.one.parameter=A setter definition must have exactly one parameter
javascript.validation.message.get.method.should.have.no.parameter=A getter definition must have no parameters
javascript.validation.message.get.method.should.be.valid.type=Return type of a getter definition should not be {0}
javascript.validation.message.use.namespace.reference.or.access.modifier=Use namespace OR access modifier
javascript.validation.message.one.visibility.modifier.allowed=Only one visibility modifier (public, protected, internal, private) is allowed
javascript.validation.destructuring.without.initializer=Destructuring declaration must have an initializer
javascript.fix.remove.access.modifier=Remove access modifier
javascript.fix.remove.final.modifier=Remove final modifier
javascript.validation.message.final.modifier.allowed.only.for.methods=Final modifier can be applied only to classes and class methods
javascript.fix.remove.namespace.reference=Remove namespace reference
javascript.fix.remove.visibility.modifier=Remove visibility modifier
javascript.incorrect.array.type.in.for-in=Array key type should be String
javascript.validation.message.unexpected.type.for.rest.parameter=Rest parameter should have no type
typescript.validation.message.unexpected.type.for.rest.parameter=Rest parameter must be an array type or a generic with array constraint
typescript.validation.message.unexpected.type.for.rest.parameter.fix=Replace with array type
javascript.fix.remove.type.reference=Remove type reference
javascript.validation.message.parameter.is.not.allowed.after.rest.parameter=No parameter is allowed after rest parameter
javascript.validation.message.comma.is.not.allowed.after.rest.element=No comma is allowed after rest element
javascript.validation.message.comma.is.not.allowed.after.last.parameter=No comma is allowed after last parameter
javascript.fix.remove.comma=Remove comma
javascript.fix.remove.parameter=Remove parameter
javascript.fix.remove.parameters=Remove parameters
javascript.fix.remove.initializer=Remove initializer
javascript.validation.message.parameter.should.be.initialized=Parameter should be initialized
javascript.validation.message.parameter.non.optional.after.optional=A required parameter cannot follow an optional parameter
javascript.validation.message.parameter.rest.optional=A rest parameter cannot be optional
javascript.fix.initialize.parameter=Initialize parameter
javascript.validation.message.rest.parameter.should.not.be.initialized=Rest parameter should not be initialized
javascript.validation.message.nested.classes.are.not.allowed=Nested classes are not allowed
javascript.validation.message.implements.is.not.allowed=Implements clause is not allowed in standard ECMAScript
javascript.validation.message.arguments.with.rest.parameter='arguments' object is not available when using rest parameter
js.validate.types.inspection.name=Type mismatch
typescript.validate.optional.parameter.inspection.error=Parameter cannot have question mark and initializer
typescript.validate.optional.parameter.inspection.fix.question=Remove question mark
typescript.validate.generic.types.inspection.name=Incorrect generic type argument
typescript.redundant.typescript.type.argument.inspection.name=Redundant type arguments
typescript.duplicate.typescript.union.inspection.name=Duplicate union or intersection type component
typescript.validate.generic.types.fix.delete=Remove generic argument
typescript.validate.generic.types.fix.add=Add generic argument
typescript.validate.generic.types.inspection.error.argument.number=Generic type ''{0}'' requires ''{1}'' type argument(s)
typescript.validate.generic.types.inspection.error.argument.number.between=Generic type ''{0}'' requires between {1} and {2} type arguments
typescript.validate.generic.types.inspection.error.not.empty.argument=Type argument list cannot be empty
typescript.validate.generic.types.inspection.error.not.empty.parameter=Type parameter list cannot be empty
typescript.validate.template.literal.types=Template type {1} is not assignable to constraint type {0}
js.incompatible.types.comparison.inspection.name=Comparison of expressions having incompatible types
js.incompatible.types.comparison.message=Condition is always {0, choice, 0#false|1#true} since types ''{1}'' and ''{2}'' have no overlap
javascript.validate.imports.name=Unresolved imported name
es6.validate.import.error=Cannot resolve symbol ''{0}''
es6.prefer.short.import.name=Import can be shortened
typescript.reference.to.umd.global=Referenced UMD global variable
typescript.field.can.be.made.readonly=Field can be readonly
javascript.suspicious.type.guard.desc=Unsound type guard check
javascript.object.null.or.undefined.desc=Object is 'null' or 'undefined'
javascript.suspicious.typeof.guard=Invalid ''typeof'' check: ''{0}'' cannot have type ''{1}''
javascript.redundant.typeof.guard=Redundant ''typeof'' check: ''{0}'' always has type ''{1}''
javascript.falsy.typeof.guard=''typeof'' check is always false: ''{0}'' always has type ''{1}''
typescript.suspicious.instanceof.guard=Invalid ''instanceof'' check: ''{0}'' has type that is not related to ''{1}''
typescript.redundant.instanceof.guard=Redundant ''instanceof'' check: ''{0}'' has type ''{1}'' or a subtype of ''{1}''
typescript.redundant.instanceof.inheritor.guard=Redundant ''instanceof'' check: ''{0}'' has type ''{1}'' or an inheritor of ''{1}''
javascript.object.is.null={0} is null
javascript.object.is.possibly.null={0} is possibly null
javascript.object.is.undefined={0} is undefined
javascript.object.is.possibly.undefined={0} is possibly undefined
javascript.object.is.null.or.undefined={0} is null or undefined
javascript.object.is.possibly.null.or.undefined={0} is possibly null or undefined
typescript.smart.cast=Narrowed type
typescript.smart.cast.hyperlink=Set up font and background
typescript.missing.augmentation.import=Missing augmentation import
typescript.explicit.member.type.inspection.name=Explicit types
typescript.config.inspection=Inconsistent tsconfig.json properties
typescript.config.inspection.libs=Missing global library
typescript.config.inspection.missing.option=Missing tsconfig.json option 
typescript.config.inspection.libs.fix=Enable library ''{0}'' in tsconfig.json
typescript.config.inspection.config.options.fix=Add ''{0}'' to tsconfig.json
typescript.config.inspection.fix.pattern=Add ''{0}'' property
typescript.config.inspection.checkjs.info=Property checkJs requires allowJs property
typescript.redundant.declaration=Type declaration matches the inferred type and can be removed
unnecessary.parentheses.display.name=Unnecessary parentheses
unnecessary.parentheses.problem.descriptor=Parentheses around <code>#ref</code> are unnecessary #loc
remove.unnecessary.parentheses.fix.text=Remove unnecessary parentheses
typescript.specify.type.explicitly=Specify type explicitly
typescript.specify.all.param.types.explicitly=Specify all parameter types explicitly
typescript.make.field.readonly=Make field readonly
es6.replace.import.action.name=Replace with {0}
es6.replace.import.family.name=Replace with a shorter path
js.validate.signature.inspection.name=Signature mismatch
progress.title.detect.overridden.methods=Check Overriding Methods
find.usages.of.base.interface=Method {0} of {1}\nimplements method of {2}.\nDo you want {3} the base method?
find.usages.of.base.class=Method {0} of {1}\noverrides method of {2}.\nDo you want {3} the base method?
javascript.fix.visibility.family=Fix visibility issues
javascript.fix.set.element.visibility=Make {0} {1}
javascript.fix.set.method.return.type=Make ''{0}'' return ''{1}''
javascript.fix.generate.argument.stubs=Generate argument stubs
javascript.deprecated.symbol.replace.fix=Replace deprecated code with {0}
javascript.deprecated.symbol.replace.fix.family=Replace deprecated code with suggested replacement
javascript.label.visibility.public=Pu&blic
javascript.label.visibility.package_local=&Internal
javascript.label.visibility.private=Pri&vate
javascript.label.visibility.protected=Pr&otected
move.members.refactoring.name=Move members
move.members.dialog.title=Move Members
class.0.cannot.be.created=Destination class {0} cannot be created because qualified element with the same name exists
# Used in JSFormatUtil.formatVisibility
javascript.visibility.public=public
javascript.visibility.internal=internal
javascript.visibility.private=private
javascript.visibility.protected=protected
entity.in.parent.description={0} in {1}
package.description=package {0}
0.with.1.visibility.in.the.target.class.is.not.accessible.from.2={0} with {1} visibility in the target class is not accessible from {2}
0.with.1.visibility.is.not.accessible.from.2={0} with {1} visibility won''t be accessible from {2}

# Refactoring
javascript.refactoring.variable.used.as.lvalue=Variable to be inlined is used on the left-hand side of an assignment
javascript.refactoring.variable.value.is.changed.when.accessed.from.closure=Variable value is changed when accessed from closure
javascript.refactoring.inline.variable.title=Inline Variable
javascript.refactoring.inline.function.title=Inline Function
javascript.refactoring.cannot.find.usages.of.definition.to.inline=Cannot find usages of definition to be inlined
javascript.refactoring.searching.usages=Find Usages
javascript.refactoring.cannot.inline.not.initialized.variable=Cannot inline not initialized variable
javascript.refactoring.cannot.inline.destructuring.variable.with.default=Cannot inline a destructuring variable with default value
javascript.refactoring.cannot.inline.destructuring.rest.variable=Cannot inline a destructuring rest variable
javascript.inline.element.is.not.used={0} is never used
javascript.refactoring.inline.dialog.title=Inline {0}
javascript.refactoring.inline.all.message=Inline &all references and remove the {0} ({1})
javascript.refactoring.inline.this.only=Inline this reference only and &keep the {0}
javascript.refactoring.cannot.inline.function.defined.in.library=Cannot inline function defined in external library
javascript.refactoring.cannot.inline.function.referencing.arguments=Cannot inline function referencing arguments
javascript.refactoring.cannot.inline.interface.method=Cannot inline interface method
javascript.refactoring.cannot.inline.function.referencing.rest.parameter=Cannot inline function referencing rest parameter
javascript.refactoring.cannot.inline.overrided.or.overridden.method=Cannot inline method that participates in hierarchy
javascript.refactoring.cannot.inline.recursive.function=Cannot inline recursive function
javascript.refactoring.cannot.inline.function.with.multiple.returns=Cannot inline function with multiple exit points
javascript.refactoring.cannot.inline.complex.expression.evaluation=Cannot inline complex expression evaluation
javascript.refactoring.cannot.inline.constructor=Cannot inline constructor
javascript.refactoring.cannot.inline.jsx.usage=Cannot inline JSX tag usage
javascript.refactoring.cannot.inline.ambient.function=Cannot inline declaration without implementation
javascript.refactoring.function.to.es6.class.command=Convert function {0} to class
js.convert.to.es6.class=Convert to class
js.convert.to.es6.class.family.name=Convert function and its member declarations to class
js.move.type.to.file.family=Move to a file with matching name
js.create.derived.type.family=Create derived class / Implement interface
js.create.derived.type.class=Create derived class
js.create.switch.cases=Create missing 'switch' branches
js.create.switch.cases.fix=Create missing branches: {0}
js.edit.object.literal=Edit values of object literal properties
js.create.derived.type.interface=Implement interface
js.create.derived.type.abstract.class=Implement abstract class
js.rename.file.to.match.type.name.family=Rename file to match type name
js.rename.file.to.match.type.name=Rename file to {0} to match {1} name
js.move.type.to.file.text=Move {0} to file {1}
javascript.refactoring.function.to.es6.class.defineProperty.warning.text=Warning: converting properties created with \
  "Object.defineProperty", "Object.defineProperties", or "Object.create" \
  to ES6 syntax may affect their enumerability and configurability
rename.destructuring.property.title=Rename destructuring property
rename.destructuring.property.description=Destructuring property references multiple members. \
  Related properties should be renamed, otherwise the code may be left inconsistent.
rename.react.hook.variable.title=Rename state variables
rename.react.hook.variable.description=Rename related state variables to:
rename.type.members.title=Rename type members
rename.type.members.union.intersection.mapped.description=Union, intersection, or mapped type usages detected. \
   Related properties should be renamed, otherwise the code may be left inconsistent.
rename.type.members.destructuring.description=Usage in destructruring properties detected.\
  Related properties should be renamed, otherwise the code may be left inconsistent.
make.private=Make private
choose.destination.scope=Choose Destination Scope
list.item.function.to.be.converted.to.class=Function to be converted to class
list.item.declarations.function.members.to.be.converted.to.class.members=Declarations of function members to be converted to class members
tab.title.convert.to.class=Convert to class
tab.title.refactoring.preview=refactoring preview
list.item.function.converted.to.class=Function converted to class
list.item.declarations.that.were.not.converted=Declarations that were not converted
tab.title.refactoring.result=Refactoring Result
extract.method.declare.static=Declare &static
extract.function.declare.arrow.function=&Arrow function
extract.function.return.type=Return &type:
extract.function.parameters=Parameters
extract.function.signature.preview=Signature preview
extract.function.function=Function
extract.function.name=&Name:
extract.constant.type=&Type:
introduce.constant.target.class=T&arget class:
introduce.field.type=&Type:
introduce.field.initialize.in=Initialize in
introduce.field.declaration=Field &declaration
introduce.field.current.method=Current &method
introduce.field.class.constructor=Class &constructor
introduce.parameter.type=&Type:
introduce.parameter.optional=&Optional parameter
introduce.variable.declaration=Variable declaration
introduce.variable.const=&const
introduce.variable.let=&let
introduce.variable.var=&var
introduce.variable.var.of.type=Variable of &type:
introduce.variable.make.constant=Make &constant
custom.template.variables=&Custom template variables:

# Destructuring
javascript.find.usages.destructuring.target.dialog=Shorthanded destructuring variable is initialized with {0}.\nWhich usages do you want to find?
javascript.destructuring.initializer=Initializer {0}
javascript.destructuring.variable.only=Only variable in destructuring
javascript.rename.destructuring.target.dialog.title=Shorthanded destructuring variable is initialized with {0}
javascript.rename.choose.target.message=Which would you like to rename?
javascript.rename.shorthand.target.dialog.title=Shorthanded property is initialized with {0}
javascript.rename.shorthand.property.description=Property
javascript.rename.element.with.related.elements.title=Rename {0}
javascript.rename.containing.file.message=Do you also want to rename the file to {0}?\n\
    The usages of the {1} and the paths to the file in import statements will be updated accordingly.
javascript.rename.related.declaration.message=Do you also want to rename the {0}?\n\
    The usages of the {0} in import statements will be updated accordingly.
dialog.message.some.usages.cannot.be.updated.properly=Some usages cannot be updated properly.\nUsages in imports and exports, string usages, or dynamic references cannot be replaced with destructuring.
dialog.message.cannot.propagate.when.having.usages.declarations.in.different.files=Cannot propagate when having usages and declarations in different files
dialog.message.write.usages.cannot.be.updated.with.destructuring=Write usages cannot be updated with destructuring
dialog.message.expression.indexed.by.non.numeric.value=Expression is indexed by a non-numeric value
dialog.message.incomplete.destructuring.pattern.encountered.in.code=Incomplete destructuring pattern encountered in code
dialog.message.unsupported.destructuring.container=Unsupported destructuring container: {0}
dialog.message.some.usages.cannot.be.updated.properly.wrong.access=Some usages cannot be updated properly.\nUsages that don't access properties by name or elements by index cannot be replaced.
dialog.message.cannot.transform.object.array.destructuring.patterns.for.same.element=Cannot transform object and array destructuring patterns for the same element
dialog.message.transforming.multiple.nested.patterns.not.supported=Transforming multiple nested patterns is not supported for array destructuring

javascript.refactoring.asdoc.for.abstracts=ASDoc for abstracts
0.is.not.allowed.in.interface={0} is not allowed in interface
javascript.fix.remove.static.modifier=Remove static modifier
javascript.validation.message.override.can.be.applied.to.method=Override can be applied only to function declaration
javascript.validation.message.dynamic.can.be.applied.to.class=Dynamic attribute can be applied only to class declaration
javascript.illegal.variable.type.void=Illegal variable type: 'void'
javascript.cannot.return.expression.from.function.with.void.result.type=Cannot return a value from a function with result type void
javascript.cannot.return.expression.from.function.with.void.result.type.fix=Remove return value
javascript.validation.message.function.override.for.interface=Incompatible override for method from {0}
javascript.validation.message.incompatible.override=Incompatible override for member from {0}
javascript.validation.message.jsdoc.types.are.used=JSDoc types can only be used inside documentation comments
class.does.not.have.inheritors.in.current.project={0} does not have inheritors in the current project
javascript.kind.unknown=unknown element
js.unnecessary.semicolon.inspection.name=Unnecessary semicolon
js.unnecessary.semicolon.problem=Unnecessary semicolon #loc
js.unnecessary.semicolon.fix.name=Remove unnecessary semicolon
javascript.refactoring.extract.function.title=Extract Function
javascript.refactoring.extract.function.bad.selection=Selected block should represent set of statements or an expression
javascript.refactoring.extract.function.multiple.exit.points=Selected fragment has multiple exit points
javascript.refactoring.extract.function.yield.and.return=Selected fragment contains yield expressions and return statements simultaneously
javascript.refactoring.extract.function.no.loop.for.continue=No corresponding loop for continue statement inside code fragment
javascript.refactoring.extract.function.no.loop.for.break=No corresponding loop for break statement inside code fragment
javascript.refactoring.extract.function.no.switch.for.break=No corresponding 'switch' for break statement inside code fragment
javascript.refactoring.extract.function.function.used.before.declaring=Selection contains function that is used before declaring
javascript.refactoring.extract.function.already.exists.in.this.scope={0} already exists in this scope
javascript.validation.message.constructor.cannot.have.custom.visibility=Constructor should be public or have no visibility specified
javascript.validation.message.can.not.override.final.method=Cannot override final method from {0}
top.level.package=top level package
js.comparison.with.nan.inspection.name=Comparison with NaN
js.comparison.with.nan.inspection.problem=Equality comparison with NaN always evaluates to false
js.comparison.with.nan.inspection.problem2=Inequality comparison with NaN always evaluates to true
js.comparison.with.nan.inspection.quickfix=Replace with {0}isNaN(...)
js.comment.matches.signature.inspection.name=Mismatched JSDoc and function signature
js.comment.matches.signature.inspection.problem1=Parameter {0} is not described in JSDoc
js.comment.matches.signature.inspection.problem2=Parameter {0} described in JSDoc does not appear in function signature
js.comment.matches.signature.inspection.quickfix=Update JSDoc comment

livetemplate.description.fori=Create iteration loop
livetemplate.description.iter=Iterate (for..of)
livetemplate.description.itera=Iterate (for await..of)
livetemplate.description.itin=Iterate (for..in)
livetemplate.description.itar=Iterate elements of array
livetemplate.description.ritar=Iterate elements of array in reverse order
livetemplate.description.us=Inserts 'use strict' statement
livetemplate.description.ref=Inserts reference path comment
livetemplate.description.defi=Inserts define() expression
livetemplate.description.flow=Inserts @flow annotation
livetemplate.description.importfrom=Import statement - import {b} from 'a'
livetemplate.description.importns=Import statement - import * as b from 'a'
livetemplate.description.importdefault=Import statement - import b from 'a'
livetemplate.description.exportall=Export statement - export * from 'a'
livetemplate.description.exportfrom=Export statement - export {b} from 'a'
livetemplate.description.exportitems=Export statement - export {b}
livetemplate.description.moduleexports=Export statement - module.exports = a
livetemplate.description.arf=Surround with Arrow Function

livetemplate.description.console.log=console.log()
livetemplate.description.console.warn=console.warn()
livetemplate.description.console.error=console.error()
livetemplate.description.console.info=console.info()
livetemplate.description.console.trace=console.trace()
livetemplate.description.console.assert=console.assert()

postfix.template.provider.name=JavaScript and TypeScript
postfix.template.condition.non.void.name=Non Void
postfix.template.condition.array.name=Array

macro.js.component.type.of=jsComponentTypeOf(Array)
macro.js.suggest.default.variable.kind=jsSuggestDefaultVariableKind(Boolean)

# Line markers
linemarker.implements.invalid=<invalid>
linemarker.implements.text=Implements {0} in {1}
linemarker.overrides.text=Overrides {0} in {1}
linemarker.implements.several=Implementation of multiple interfaces methods
linemarker.overridden=Overridden
linemarker.implemented=Implemented
linemarker.overriding=Overriding
linemarker.implementing=Implementing
linemarker.javascript.sources=JavaScript source
linemarker.typescript.declaration=TypeScript declaration
linemarker.javascript.typescript=JavaScript/TypeScript line markers

js.validate.jsdoc.inspection.name=Syntax errors and unresolved references in JSDoc
javascript.expected.class.or.descendant=Expected class {0} or descendant
javascript.qualified.class.name.expected=Qualified class name expected
javascript.validation.message.unknown.metadata.annotation.used=Unknown metadata attribute used
javascript.validation.message.set.method.type.is.different.from.getter=Set accessor method has type that is not compatible with get accessor type, expecting ''{0}''
javascript.validation.message.get.method.type.is.different.from.setter=Get accessor method has type that is not compatible with set accessor type, expecting ''{0}''
typescript.validation.message.getter.and.setter.must.have.same.access.type=Getter and setter must have the same access type
actionscript.validation.message.set.method.access.type.is.different.from.getter=Flash compiler bug 174646: Set accessor method access type is different from get accessor access type, expecting ''{0}''
actionscript.validation.message.get.method.access.type.is.different.from.setter=Flash compiler bug 174646: Get accessor method access type is different from set accessor access type, expecting ''{0}''
javascript.validation.message.static.method.cannot.be.final=Static method cannot be final
javascript.assign.parameter.to.field.intention.name=Assign parameter ''{0}'' to field
javascript.fix.create.parameter=Create parameter ''{0}''
javascript.introduce.parameter.introduced.variable.value=&Value:
0.is.not.a.legal.name=''{0}'' is not a legal class name
item.already.exists={0} {1} already exists
directory.already.contains.file=Directory ''{0}'' already contains file ''{1}''
extract.subclass.command.name=Extracting subclass {0} from {1}
extract.interface.command.name=Extracting interface
extract.type.alias.command.name=Extracting type alias
new.actionscript.class.dialog.title=New ActionScript Class
new.actionscript.interface.dialog.title=New ActionScript Interface
class.template.title=Class
class.with.supers.template.title=Class with Supers
interface.template.title=Interface
extract.0.turn.refs=Ex&tract {0} and use it where possible
superclass.cannot.be.extracted.from.mxml.component=Superclass cannot be extracted from MXML component.
superclass.cannot.be.extracted.from.type.alias=Superclass cannot be extracted from type alias
superclass.cannot.be.extracted.from.enum=Superclass cannot be extracted from enum
interface.cannot.be.extracted.from.type.alias=Interface cannot be extracted from type alias
interface.cannot.be.extracted.from.enum=Interface cannot be extracted from enum
javascript.fix.message.change.parameters.to.expected=Change parameters to expected
javascript.fix.message.change.return.type.to.expected=Change return type to expected
js.last.comma.in.array.literal.inspection.name=Unneeded last comma in array literal
js.last.comma.in.object.literal.inspection.name=Unneeded last comma in object literal
error.wrong.caret.position.method.name=The caret should be positioned at the name of the method to be refactored.
changeSignature.vararg.not.last=Rest parameter should be the last in method signature
parameter.type.is.not.specified=Type for parameter ''{0}'' is not specified.\nContinue?
return.type.is.not.resolved=Return type ''{0}'' is not resolved.\nContinue?
change.signature.column.name.initializer=Initializer
change.signature.column.name.default.parameter=Default parameter
change.signature.column.name.call.value=Value in the call
change.signature.parameter.table.empty.message=Add new parameters with the '+' button
required.parameters.are.not.permitted.after.optional.parameters=Required parameters are not permitted after optional parameters
javascript.fix.remove.setter.parameter.initializer=Remove parameter default value
javascript.validation.message.setter.parameter.cannot.have.initializer=Setter definition cannot have optional parameters
javascript.changeSignature.no.call.value=New required parameter ''{0}'' has been added.\nSpecify a default value to be used in all existing calls of this method.
es6.changeSignature.no.call.value=New parameter ''{0}'' has been added.\nSpecify a default value or value to be used in all existing calls of this method.
javascript.changeSignature.call.value.not.allowed=Default value is not allowed for parameter ''{0}'', since it was not specified for preceding parameter(s).
es6.changeSignature.call.value.not.allowed=Value in the call is not allowed for parameter ''{0}'', since it was not specified for preceding parameter(s).
change.signature.usage.view.declarations.header=Methods to be refactored
{0}.visibility.will.break.methods.hierarchy={0} with {1} visibility won''t be able to participate in hierarchy
generate.delegate.method.conflict.message=Cannot generate delegates for same-named members via distinct properties
generate.delegate.method.conflict.message.title=Cannot Generate Delegates
invalid.return.type.expression=Return type ''{0}'' is invalid
invalid.parameter.type.expression=Parameter type ''{0}'' is invalid
type.is.not.resolved=Type ''{0}'' is not resolved.\nContinue?
invalid.field.type.expression=Invalid field type: ''{0}''
choose.field.type=Choose Field Type
new.field.action.text=Field
new.field.action.description=Create new field in class
create.field.dialog.title=Create Field
field.initializer.is.not.specified=Field initializer is not specified
new.method.action.text=Method
new.method.action.description=Create new method in class
create.method.dialog.title=Create Method
create.button.text=&Create
class.already.contains.method.warning=Class ''{0}'' already {1, choice, 1#contains|2#inherits} method ''{2}()''.\nContinue?
class.already.contains.field.warning=Class ''{0}'' already contains field ''{1}''.\nContinue?
declare.static=Declare &static
new.constructor.action.text=Constructor
new.constructor.action.description=Create class constructor
create.constructor.dialog.title=Create Constructor
change.method.signature.fix.text=Change {0} signature
change.method.signature.and.update.delegating.call.fix.text=Change {0} signature to match {1} call and update call
change.method.signature.and.update.delegating.call.noname.fix.text=Change signature to match {0} call and update call
change.method.signature.delegating.default.text=delegating
change.method.signature.fix.family.name=Change method signature
change.method.signature.and.update.delegating.call.fix.family.name=Change method signature and update delegating call

# Settings
settings.javascript.root.configurable.name=JavaScript
settings.typescript.root.configurable.name=TypeScript
settings.javascript.linters.configurable.name=Code Quality Tools
settings.javascript.linters.autodetect.disabled=&Disable {0}
settings.javascript.linters.autodetect.configure.automatically=&Automatic {0} configuration
settings.javascript.linters.autodetect.configure.automatically.help.text={0} will use the {1} package in the node_modules directory \
  and {2} configuration files located in the same folder as the current file or any of its parent folders.
settings.javascript.linters.autodetect.configure.manually=&Manual {0} configuration
settings.javascript.linters.jshint.configurable.name=JSHint
settings.javascript.only.type.based.completion=Only type-based &completion
settings.javascript.opt.chain.completion=Suggest items with &optional chaining for nullable types
settings.javascript.overrides.completion=Expand method bodies in completion for overrides
settings.javascript.var.names.completion=Suggest &variable and parameter names
settings.javascript.field.names.completion=Suggest names for class &fields
settings.javascript.var.names.completion.desc=Completion of names
settings.javascript.var.names.completion.types=Add &type annotations for suggested parameter names
settings.javascript.var.names.completion.names.only=without types
settings.javascript.var.names.completion.types.for.params=with types for function parameters
settings.javascript.var.names.completion.types.for.params.fields=with types for parameters and fields
settings.javascript.var.names.completion.types.except.fields=with types everywhere, except fields
settings.javascript.var.names.completion.types.everywhere=with types everywhere
settings.javascript.only.type.based.completion.tooltip=Show fewer completion suggestions based on type information. May significantly improve performance.
settings.javascript.lang.templates.configurable.name=Templates
es6.auto.import.options.completion.add.imports=Add JavaScript imports automatically
es6.auto.import.options.title=TypeScript / JavaScript
typescript.auto.import.options.add.imports=Add TypeScript imports automatically
javascript.auto.import.options.add.imports.on.the.fly=Unambiguous imports on the fly
javascript.auto.import.options.add.on.code.completion=On code completion
javascript.auto.import.options.show.popup=With auto-import tooltip
js.import.options.merge.import=Merge imports for members from the same module
js.import.options.use.node.resolution=Use directory import when index.js is available (node-style module resolution)
js.import.options.use.explicit.js.extension=Use file extension:
js.import.options.use.explicit.js.extension.auto=Auto
js.import.options.use.explicit.js.extension.yes=Always
js.import.options.use.explicit.js.extension.yes.ts=Always ".js"
js.import.options.use.explicit.js.extension.no=Never
js.import.options.use.import-type=Use type modifier in imports:
js.import.options.use.import-type.auto=Auto
js.import.options.use.import-type.always=Always with type
js.import.options.use.import-type.never=Never
js.import.options.use.import-type.help=This option configures the usage of the TypeScript 'import type' statement \
or type specifier when importing a type.\
<br><br>With "Always with type", either 'import type' or a type specifier is always used.\
<br><br>With "Never", all types are imported like values, without a 'type' keyword.\
<br><br>With "Auto", the IDE checks the TypeScript version and tsconfig.json to select the most suitable option.
js.add.members.to.type.desc=Add members to a class or an interface
js.add.members.to.type=Add members {0} to ''{1}''
js.import.options.sort.members=Sort imported members
js.import.options.sort.module.name=Sort imports by modules
es6.import.options.paths=Use path aliases:
es6.import.options.paths.help=This option configures the style of paths used in the import statements.\
<br><br>With "Always", the IDE always uses aliases from webpack, vite, or jsconfig.json configuration.\
<br><br>With "Only in files outside specified paths", the IDE uses relative paths for imports between the files for which an alias is defined. In all other files, path mappings are used. \
<br><br>With "Never", aliases are never used.
es6.import.options.exts.help=This option configures extensions in import statements. \
<br><br>With "Auto", the IDE adds extensions to the names of vue files, of files from projects that have "type": "module" in package.json, and of files with the .mjs or .cjs extensions. \
<br><br>With "Always", the IDE always adds extensions to file names. \
<br><br>With "Never", the IDE always uses file names without extensions.
es6.import.options.not.import.help=This option configures exact paths that IDE skips during automatic import of a symbol. Instead, IDE will look for alternative paths to import the symbol. The paths should comply with the glob pattern rules.
typescipt.import.options.paths.help=This option configures the style of paths used in the import statements.\
<br><br>With "Always", the IDE always uses aliases from tsconfig.json configuration. \
<br><br>With "Only in files outside specified paths", the IDE uses relative paths for imports between the files for which an alias is defined. In all other files, path mappings are used.\
<br><br>With "Never", aliases are never used.
typescript.import.options.exts.help=This option configures extensions in import statements. \
<br><br>With "Auto" selected, the IDE always adds extensions to the names of vue files, of files from projects that have "module": "node16" or "module": "nodenext" in tsconfig.json and "type": "module" in package.json, and of files with the .mts extension. \
<br><br>With "Always", the IDE always adds the .js extension to TypeScript file names. \
<br><br>With "Never", the IDE always uses file names without extensions.

typescript.import.options.paths=Use path mappings from tsconfig.json:
typescript.import.options.use.config=Use paths relative to tsconfig.json
javascript.import.options.use.resource.root=Use paths relative to the project, resource or sources roots
es6.import.options.blacklist.title=Do not import exactly from:
js.flow.settings.executable.label=&Flow package or executable:
js.flow.settings.executable.dialog.title=Select Flow package or executable
js.flow.services.label=Use Flow server for:
js.flow.enable.type.checking=Type checking
js.flow.enable.other.services=Navigation, code completion, and type hinting
js.flow.enable.flow.service.error=Incorrect path to Flow
js.flow.enable.flow.service.error.empty=Path to Flow executable is empty
js.flow.enable.flow.service.error.on.checking=Error during checking Flow path: {0}
js.flow.enable.flow.service.error.message={0}. Either disable all Flow services or provide a valid path to the executable.
js.flow.settings.auto.save=Save all modified files automatically
js.flow.settings.auto.save.warning=Flow checks current file only when all other modified files are saved.
js.flow.settings.auto.save.warning.lsp=This lets Flow always display the up-to-date error status.
js.dialect.settings.dialog.title=JavaScript Language Versions
js.dialect.settings.caption=
js.dialect.settings.tableTitle=Language
js.dialect.settings.override.question=Override language versions for child directories and files?
js.dialect.settings.override.title=Override Language Versions Settings
js.dialect.settings.empty.text=Add directories with the + button and select JavaScript versions
js.dialects.customized.label=Customized per directory
configure.code.completion.settings=Configure code completion settings

# Bower
settings.javascript.bower.configurable.name=Bower
bower.packages.view.dependencies=Dependencies:
bower.package=&Bower package:
bower.json=b&ower.json:
bower.correct.path=Please correct path to {0}
bower.package.name=Bower package
bower.dialog.message.specify.package=Specify a correct bower package: "{0}" file not found
bower.required.version.notification.content=To view bower packages you need bower@1.0.0 or higher
bower.no_description_available.text=No description available
dialog.message.command.timed.out=Command ''{0}'' is timed out
dialog.message.command.cancelled=Command ''{0}'' is cancelled
dialog.message.command.finished.with.exit.code=Command ''{0}'' finished with exit code {1}. Stdout:\n{2}\n\nstderr:\n{3}

# JS language version management
js.language.version.combo.es5=ECMAScript 5.1
js.language.version.combo.js185=JavaScript 1.8.5
js.language.version.combo.js185.description=Deprecated Firefox-specific ECMAScript implementation. Please consider switching.
js.language.version.combo.es6=ECMAScript 6+
js.language.version.combo.es6.description=ECMAScript 2015+, some proposals and JSX
js.language.version.combo.flow=Flow
js.language.version.combo.flow.description=Flow and JSX in ECMAScript 6
js.language.version.label=JavaScript language version
js.switch.to.jsx.inspection.dismiss=Dismiss
ts.switch.to.jsx.inspection.name=Change file extension to .tsx
javascript.change.language.level.message=Change JavaScript language version to {0}
javascript.change.language.level.family=Change JavaScript language version

# JS library management
js.library.attach.debug=Attach &Debug Version(s)\u2026
js.library.attach.release=Attach &Release Version(s)\u2026
js.library.unresolved.url.inspection.name=Missed locally stored library for HTTP link
js.library.download.fix=Download library
js.library.downloading.library=Downloading Library
js.library.documentation=Documentation
js.library.configurable.name=Libraries
js.library.download.stubs.label=TypeScript community stubs
js.library.successfully.downloaded=Successfully downloaded {0}

choose.super.method=<html><body>Choose Super Method of <b>{0}</b> ({1} found)</body></html>
choose.declaration.element=<html><body>Choose TypeScript Declaration</body></html>
choose.super.function=<html><body>Choose Super Function of <b>{0}</b> ({1} found)</body></html>
choose.super.field=<html><body>Choose Super Field of <b>{0}</b> ({1} found)</body></html>
choose.super.classifier=<html><body>Choose Superclass or Interface of <b>{0}</b> ({1} found)</body></html>
choose.subclass=<html><body>Choose Subclass of <b>{0}</b> ({1} found)</body></html>
choose.implementing.class=<html><body>Choose Implementation of <b>{0}</b> ({1} found)</body></html>
choose.overriding.method=<html><body>Choose Overriding Method of <b>{0}</b> ({1} found)</body></html>
choose.overriding.function=<html><body>Choose Overriding Function of <b>{0}</b> ({1} found)</body></html>
choose.implementing.method=<html><body>Choose Implementation of <b>{0}</b> ({1} found)</body></html>
javascript.invalid.delete.target.message=Invalid delete operator target, reference to field expected
javascript.with.statement.is.not.allowed.in.strict.mode.message=With statement is not allowed in strict mode
javascript.validation.message.redefining.is.not.allowed=Redefining of {0} is not allowed
javascript.validation.message.referencing.arguments.caller.callee.is.not.allowed=Referencing 'caller' and 'callee' from arguments is not allowed
javascript.validation.message.referencing.function.arguments.property.is.not.allowed=Referencing 'arguments' function property is not allowed
javascript.validation.message.arguments.is.readonly='arguments' is read only
javascript.validation.message.eval.cannot.be.assigned='eval' can't be assigned in strict mode
javascript.octal.literals.are.not.allowed.es6.message=Octal literals with prefix '0' are not allowed. Use '0o' prefix instead
javascript.octal.literals.are.not.allowed.es5.message=Octal literals with prefix '0' are obsolete and not recommended to use
javascript.octal.sequences.are.not.allowed.message=Octal escape sequences are not allowed
javascript.invalid.extended.unicode.escape=An extended Unicode escape allows only values between 0x0 and 0x10FFFF
javascript.octal.literals.are.not.allowed.in.strict.mode=Octal literals are not allowed in strict mode
javascript.octal.literals.warn.always=Warn about obsolete octal literals in ES5- code
javascript.validation.message.only.one.default.is.allowed=Only one default clause is allowed in switch
javascript.fix.remove.default=Remove default clause
javascript.validation.message.accessor.could.not.be.nested.under.other.function=Accessor methods cannot be nested inside other functions
javascript.validation.message.es5.function.declarations.allowed.on.top.level.or.function=Function statement not at top level of a program or function is prohibited
class.chooser.not.available.in.dumb.mode=Chooser is not available when index update is in progress.
choose.super.class.title=Choose Superclass
choose.base.component.title=Choose Superclass
choose.super.interface.title=Choose Super Interface
0.is.not.accessible.from.1={0} won''t be accessible from {1}
javascript.constructor.call.without.new.message=Constructor call without <code>new</code>
javascript.qualified.name.is.not.imported.message=Qualified name is not imported #loc
javascript.element.is.not.accessible.message=Element is not accessible #loc
javascript.protected.member.is.not.accessible.message=Protected member is not accessible #loc
javascript.protected.constructor.is.not.accessible.message=Protected constructor is not accessible #loc
javascript.private.member.is.not.accessible.message=Private member is not accessible #loc
javascript.export.only.member=Element is export only
javascript.private.constructor.is.not.accessible.message=Private constructor is not accessible #loc
javascript.jsdoc.protected.member.is.not.accessible.message=Protected member is not accessible #loc
javascript.jsdoc.private.member.is.not.accessible.message=Private member is not accessible #loc
javascript.static.member.is.not.accessible.message=Static member is not accessible #loc
javascript.instance.member.is.not.accessible.message=Instance member is not accessible #loc
javascript.element.need.to.be.exported=Element is not exported
javascript.element.need.to.be.imported=Element is not imported
javascript.element.default.instead.named=Default import is used instead of named import
javascript.element.need.to.be.included.to.config=Corresponding file is not included in tsconfig.json
javascript.argument.types.mismatch=Argument types do not match parameters
javascript.member.from.unopened.namespace.message=Member from unopened namespace #loc
javascript.property.is.read.only.message=Property is read-only #loc
javascript.property.is.write.only.message=Property is write-only #loc
javascript.assume.uppercase.functions.to.be.constructors=Assume only functions in uppercase are constructors
javascript.not.a.constructor.call.message=Not a constructor call
cannot.refactor.anonymous.function=Call sites analysis is prevented by existing non-call usage.
change.signature.method.references.arguments=Function references arguments, code may break after changing signature
change.signature.call.expression.contains.spreads=Function call contains spread arguments. Usage will be left unchanged.
change.signature.tagged.template.issue=Tagged template invocation cannot be updated. Usage will be left unchanged.
change.signature.conflict.incompatible.override=Overriding {0} has different number of parameters than refactored {1}. {2} will be ignored during refactoring.
change.signature.conflict.incompatible.implementation=Implementing {0} has different number of parameters than refactored {1}. {2} will be ignored during refactoring.
change.signature.conflict.eliminating.parameter.property.breaks.usages=Turning parameter-property to a simple parameter breaks field usage of {0}
change.signature.conflict.readonly.parameter.property.write.usage=Making {0} readonly breaks a non-read usage
javascript.missed.argument.for.parameter=Argument for parameter {0} is missed

# Code folding settings
checkbox.collapse.object.literals=Object literals
checkbox.collapse.one.line.function.literals=One-line functions in JavaScript and TypeScript
checkbox.collapse.array.literals=Array literals
checkbox.collapse.xml.literals=XML literals
change.signature.value.column.title=Value
change.signature.column.name.optional.flag=Optional
change.signature.column.name.modifier=Modifier

# Flow general
action.FlowJS.Restart.All.Servers.text=Restart all Flow servers
action.FlowJS.Restart.All.Servers.description=Restart all Flow servers
js.flow.has.unsaved.files=Highlighting wasn't performed because some files are modified
js.flow.process.log=Flow Process Log
flow.js.get.type=Flow JS:Get Type
can.t.find.flow.executable=Can't find a Flow executable
process.terminated=Process terminated
progress.text.modifying=Modifying {0}
progress.text.initializing.opened.files=Initializing opened files
flow.js.show.settings=Configure Flow\u2026
flow.js.widget.name=Flow
flow.js.widget.display.name=Flow JS

# Code style settings
js.code.style.punctuation.tab.title=Punctuation
space.before.name.value.separator=Before property name-value separator ':'
space.after.name.value.separator=After property name-value separator ':'
space.before.function.left.parenth=In function expression
actionscript.space.after.dots.in.rest.parameter=After '...' in rest parameter
space.after.dots.in.rest.spread=After '...' in rest/spread
space.before.generator.mult=Before '*' in generator
space.after.generator.mult=After '*' in generator
spaces.within.object.type.braces=Object literal type braces
space.before.type.colon=Before type reference colon ':'
space.after.type.colon=After type reference colon ':'
space.before.class.lbrace=Class left brace
space.before.class.interface.module.lbrace=class/interface/module left brace
spaces.within.object.literal.braces=Object literal braces
spaces.within.import.braces=ES6 import/export braces
spaces.within.indexer.brackets=Index access brackets
spaces.within.array.initializer=Array brackets
spaces.within.union.and.intersection=Union and intersection types
spaces.within.type.assertion=Type assertions
spaces.arrow.function=Arrow function (=>)
spaces.async.arrow.function=In async arrow function
spaces.within.interpolation.expressions=Interpolation expressions
spaces.within.unary.additive=Unary additive operators (+,-,++,--)
spaces.after.unary.not=After unary 'not' (!) and '!!'
spaces.before.unary.not=Before unary 'not' (!) and '!!'
js.blank.lines.around.method=Around method:
js.blank.lines.around.function=Around function:
js.spaces.in.flow.category=In Flow
js.wrap.settings.import=ES6 import/export
js.align.properties.none=Do not align
js.align.properties.on.colon=On colon
js.align.properties.on.value=On value
js.function.call.parentheses=Function call parentheses
js.function.declaration.parentheses=Function declaration parentheses
js.function.brace.style=In function declaration
js.function.expression.brace.style=In function expression
js.function.parameters.wrap=Function declaration parameters
js.function.call.wrap=Function call arguments
js.space.before.function.left.brace=Function left brace
js.format.cstyle.comments=Align multiline
js.chained.call.dot.on.next.line='.' on new line
js.generated.use.public.modifier=Use 'public' modifier
js.generated.use.as.cast=Prefer 'as' type casts
js.generated.types=Types
js.generated.types.settings.link=Code style settings for explicit types
js.generated.explicit.types=Prefer explicit types for:
js.generated.explicit.var.types=Variables and fields
js.generated.explicit.return.types=Function declaration returns
js.generated.explicit.return.expression.types=Function expression returns
js.trailing.comma.keep=Keep
js.trailing.comma.remove=Remove
js.trailing.comma.whenMultiline=Add when multiline
js.extends.list.wrap=Extends list
js.align.multiline.extends.list=Align when multiline
js.extends.keyword.wrap=Extends keyword
js.wrap.settings.union.and.intersection.types=Union and intersection types
js.wrap.settings.object.types=Object types
js.code.style.object.literals.category.name=Objects
js.code.style.align.caption=Align
js.code.style.align.from.clause.caption=Align 'from' clauses
js.wrap.settings.var.group.name=Variable declarations
js.code.style.do.not.align.var.statement=Do not align
js.code.style.align.var.statements=When multiline
js.code.style.align.var.statements.and.assignments=When grouped
js.code.style.array.group.name=Arrays
js.array.new.line.after.left.bracket=New line after '['
js.array.new.line.before.right.bracket=Place ']' on new line

js.method.can.be.static=Method can be made 'static'
js.method.can.be.static.option=Only check 'private' methods
make.method.static=Make 'static'
typescript.fix.change.member.access=Make ''{0}''
js.fix.change.member.access.to.sharp=Make private using '#'
declare.event.0=Declare Event ''{0}''
js.variable.might.not.been.initialized=Variable might not have been initialized #loc
js.variable.initializer.is.redundant=Variable initializer is redundant #loc
js.value.assigned.is.never.used=The value assigned is never used #loc
js.value.assigned.to.is.never.used=The value assigned to ''{0}'' is never used #loc
javascript.fix.change.type=Change ''{0}'' type to ''{1}''
javascript.fix.change.parameter.type=Change parameter ''{0}'' type to ''{1}''
javascript.change.jsdoc.type.family.name=Change type of element in JSDoc
change.signature.dialog.title=Change Signature of {0}
javascript.fix.add.enum.values=Add enum values
javascript.fix.add.string.enum.values=Add string enum values
typescript.intention.convert.import.require=Convert import require to import from
typescript.intention.convert.import.require.text=Convert to {0}
javascript.fix.create.implements=Make ''{0}'' implement ''{1}''
javascript.fix.create.inheritor.family=Inherit from super type
javascript.fix.implement.family=Implement in derived classes
javascript.fix.implement.chooser.title=Implement Member in
javascript.fix.implement.chooser.all=All classes
javascript.fix.implement=Implement {0}
javascript.fix.create.extends=Make ''{0}'' extend ''{1}''
javascript.report.unused.properties=Report unused properties
javascript.report.unused.definitions=Report unused definitions
javascript.check.global.definitions=Check assignments in global scope
javascript.strictly.check.global.vars=Report undeclared global symbols as error
javascript.strictly.check.object.properties=Report undeclared properties as error
change.signature.column.type=Type
change.signature.column.name=Name
javascript.invalid.invoker.target=Invalid call target
js.declarations.at.scope.start.inspection='var' declared not at the beginning of a function
js.make.single.var.statement=Make single var statement
js.declaration.is.not.at.scope.start=Var statement is not at the scope start
js.move.to.scope.start=Move var statement to the scope start
js.primitive.type.wrapper.usage.inspection=Primitive type object wrapper used
js.replace.with.type.cast.to.primitive=Replace with type cast to {0}
js.assigning.to.primitive.type.property=Value assigned to primitive will be lost
js.primitive.type.improper.instantiation.inspection={0} instantiation can be simplified
js.replace.with.literal=Replace with {0} literal
non.ascii.identifiers.inspection.name=Identifiers with non-ASCII symbols
non.ascii.identifiers.only.ascii=Allow only ASCII names
non.ascii.identifiers.non.ascii.found=<html>Name contains non-ASCII symbols: {0}</html>
non.ascii.identifiers.mixed.set=<html>Name contains both ASCII and non-ASCII symbols: {0}</html>

element.name.anonymous=<anonymous>
element.name.default=<default>
duplicate.parameter.name=Duplicate parameter name: {0}
rename.accessors.dialog.title=Rename Field
rename.accessors.dialog.text=Would you like to rename property accessors to ''{0}'' as well?
insert.new.keyword.fix.name=Insert new keyword
insert.this.keyword.fix.name=Add this qualifier
insert.class.fix.name=Add class name qualifier
replace.implements.keyword.fix.name=Change 'implements' to 'extends'
superclass.label.text=&Superclass:
varible.name.column.title=Name
varible.value.column.title=Value
custom.variables.step.title.label.text=&Custom variables in template ''{0}''\:
create.class.ok.button.text=Create
create.class.name.label=&Name\:
create.class.package.label=Package\:
create.class.template.label=&Template\:
create.class.superclass.label=&Superclass\:
create.class.interfaces.label=&Interfaces\:
action.structureview.show.object.inherited=Inherited from Object

# JSHint
jshint.option.edit.dialog.title=Set ''{0}'' Option
jshint.clear.field.to.disable=Clear field to disable
jshint.illegal.integer=Illegal integer
jshint.use.config.files=Use config files
jshint.version.label=&Version:
jshint.label.bundled.suffix=(bundled)
jshint.tree.link.set=Set
jshint.label.no.version=No version
jshint.exception.balloon.action.retry=<a href=''{0}''>Retry</a>
jshint.exception.balloon.action.configure.proxy.or.retry=<a href=''{0}''>Configure HTTP proxy</a> or <a href=''{1}''>Retry</a>
filetype.jshint.config.description=JSHint configuration
filetype.jshint.config.display.name=JSHint configuration
jshint.suppress.text.suppress.for.line=Suppress for line
jshint.options.tree.tooltip.set.a.new.value=Set a new value
jshint.config.option.default.name=Default
jshint.config.default.description=<div style="padding-bottom:10px">\
  <div><b>.jshintrc</b></div>\
  <div style="padding-left:10px; padding-top:4px;">When linting a JavaScript file, the IDE looks for .jshintrc starting from the file's folder and then moving up to the filesystem root.</div>\
</div>\
<div>\
  <div><b>package.json</b></div>\
  <div style="padding-left:10px; padding-top:4px;">Add your configuration under the <code>jshintConfig</code> property in your project's package.json file.</div>\
</div>
jshint.config.option.custom.name=Custom configuration file
jshint.config.option.custom.browser.title=Select JSHint Configuration File (*.jshintrc)
jshint.config.failed.to.read=Failed to read JSHint config
jshint.config.extends.cyclically=JSHint config extends cyclically
jshint.config.error.failed.to.read.property=Failed to read the ''{0}'' property from package.json
jshint.config.error.cannot.locate.ext.config=JSHint: cannot locate extended config
jshint.config.error.cannot.parse.ext.config=JSHint: cannot parse extended config
jshint.latedef.false.text=Don't warn
jshint.latedef.true.text=Prohibit the use of a variable before it was defined
jshint.latedef.nofunc.text=<html><body>Prohibit the use of a variable before it was defined, <br>but allow function declarations.</body></html>
jshint.unused.false.text=Don't check anything
jshint.unused.true.text=<html><body>Check all variables and parameters, but allow <br>unused parameters after a used parameter</body></html>
jshint.unused.vars.text=Check for variables, not function parameters
jshint.unused.strict.text=Check all variables and parameters
jshint.progress.title.updating.jshint=Updating JSHint to {0}
jshint.progress.title.downloading=Downloading {0}
jshint.progress.title=JSHint {0}
jshint.quotmark.false.text=Both quotes allowed
jshint.quotmark.true.text=Only single or only double quotes allowed
jshint.quotmark.single.text=Only single quotes allowed
jshint.quotmark.double.text=Only double quotes allowed
jshint.inspection.message.duplicate.options=Duplicate JSHint options: {0}, {1}.
jshint.inspection.message.unexpected.jshint.option.name=Unexpected JSHint option name
jshint.inspection.message.unexpected.value=Unexpected value
jshint.inspection.message.expected.values.x.or.y=Expected values: {0} or {1}
jshint.inspection.message.expected.value=Expected value: {0}
jshint.inspection.message.object.or.array.expected=Object or array expected
jshint.inspection.message.not.loaded=JSHint {0} not loaded
jshint.inspection.message.config.not.found=JSHint config not found
jshint.inspection.message.malformed.config=Malformed JSHint config
jshint.inspection.message.prefix=JSHint:

jshint.option.esversion.description.short=Warn about incompatibilities with the specified ECMAScript version
jshint.option.latedef.description.short=Warn about the use of a variable before it was defined
jshint.option.unused.description.short=Warn about unused variables
jshint.option.indent.description.short=Indentation
jshint.option.quotmark.description.short=Quotation marks
jshint.option.predef.details=Specifies global variables and their assignable status:\n<pre>DISQUS:true, jQuery:false</pre>\n<p/>Here JSHint will allow you to override DISQUS,\n but complain if you try to override jQuery.
jshint.option.bitwise.description.short=Warn about using bitwise operators
jshint.option.camelcase.description.short=Warn about variable naming
jshint.option.curly.description.short=Warn when blocks omit <code>{}</code>
jshint.option.enforceall.description.short=Warn when code doesn't follow the most strict configuration
jshint.option.eqeqeq.description.short=Warn about unsafe comparisons
jshint.option.es3.description.short=Warn about incompatibilities with the ES3 specification
jshint.option.es5.description.short=Warn about incompatibilities with the ES5 specification
jshint.option.forin.description.short=Warn about unsafe <code>for..in</code>
jshint.option.freeze.description.short=Warn about overwriting prototypes of native objects
jshint.option.immed.description.short=Warn about the use of immediate function invocations without wrapping them in parentheses
jshint.option.newcap.description.short=Warn about the use of a uncapitalized constructor
jshint.option.noarg.description.short=Warn about <code>arguments.caller</code> and <code>.callee</code>
jshint.option.nocomma.description.short=Warn about the use of the comma operator
jshint.option.noempty.description.short=Warn about empty blocks
jshint.option.nonbsp.description.short=Warn about "non-breaking whitespace" characters
jshint.option.nonew.description.short=Warn about <code>new</code> usage for side effects
jshint.option.plusplus.description.short=Warn about the use of unary increment and decrement operators
jshint.option.undef.description.short=Warn when variable is undefined
jshint.option.varstmt.description.short=Warn about the use of VariableStatements
jshint.option.strict.description.short=Warn when code is not in strict mode
jshint.option.trailing.description.short=Warn about trailing whitespace
jshint.option.maxparams.description.short=Max number of formal parameter in a function
jshint.option.maxdepth.description.short=Max depth of your blocks
jshint.option.maxstatements.description.short=Max number of statements in a function
jshint.option.maxcomplexity.description.short=Max cyclomatic complexity throughout your code
jshint.option.maxlen.description.short=Max length of a line
jshint.option.asi.description.short=Suppress warnings about missing semicolons
jshint.option.boss.description.short=Suppress warnings about assignments inside <code>if/for/...</code>
jshint.option.debug.description.short=Suppress warnings about debugging code
jshint.option.elision.description.short=Suppress warnings about ES3 array elision elements
jshint.option.eqnull.description.short=Suppress warnings about <code>== null</code>
jshint.option.esnext.description.short=EcmaScript.next
jshint.option.evil.description.short=Suppress warnings about <code>eval</code>
jshint.option.expr.description.short=Suppress warnings about the use of expressions as statements
jshint.option.funcscope.description.short=Suppress warnings about variable usage outside of its declared block
jshint.option.futurehostile.description.short=Warns about the use of identifiers which are defined in future versions of JavaScript
jshint.option.gcl.description.short=Makes JSHint compatible with Google Closure Compiler
jshint.option.globalstrict.description.short=Suppress warnings about the use of global strict mode
jshint.option.iterator.description.short=Suppress warnings about the <code>__iterator__</code> property
jshint.option.lastsemic.description.short=Suppress warnings about missing semicolons, but only when the semicolon is omitted for the last statement in a one-line block
jshint.option.laxbreak.description.short=Suppress warnings about unsafe line breaks
jshint.option.laxcomma.description.short=Suppress warnings about comma-first coding style
jshint.option.loopfunc.description.short=Suppress warnings about functions inside loops
jshint.option.moz.description.short=Check if your code uses Mozilla JavaScript extensions
jshint.option.multistr.description.short=Suppress warnings about multi-line strings
jshint.option.notypeof.description.short=Suppress warnings about invalid <code>typeof</code> operator values
jshint.option.proto.description.short=Suppress warnings about the <code>__proto__</code> property
jshint.option.scripturl.description.short=Suppress warnings about the use of script-targeted URLs
jshint.option.smarttabs.description.short=Suppress warnings about mixed tabs and spaces when the latter are used for alignment only
jshint.option.shadow.description.short=Suppress warnings about variable shadowing
jshint.option.singlegroups.description.short=Prohibits the use of the grouping operator when it is not strictly required
jshint.option.sub.description.short=Suppress warnings about using <code>[]</code> notation when it can be expressed in dot notation
jshint.option.supernew.description.short=Suppress warnings about "weird" constructions
jshint.option.validthis.description.short=Suppress warnings about possible strict violations
jshint.option.withstmt.description.short=Suppresses warnings about the use of the with statement
jshint.option.noyield.description.short=Suppress warnings about generator functions with no yield statement in them
jshint.option.browser.description.short=Browser
jshint.option.devel.description.short=Development
jshint.option.nonstandard.description.short=Escape and unescape
jshint.option.typed.description.short=Typed arrays
jshint.option.worker.description.short=Web Worker
jshint.option.wsh.description.short=Windows Script Host
jshint.option.module.description.short=ECMAScript 6 module
jshint.option.nomen.description.short=Disallow the use of _ in variables
jshint.option.onevar.description.short=One var statement per function
jshint.option.passfail.description.short=Stop on first error
jshint.option.white.description.short=Disallow messy white space
jshint.option.maxerr.description.short=Maximum number of errors
jshint.option.predef.description.short=Predefined ( , separated)

#common linters
javascript.linter.import.error.timeout.processing.configuration.file=Timeout processing configuration file
javascript.linter.import.error.generic=Error applying code style rules from the configuration file, possibly because it is invalid.
javascript.linter.import.error.package.not.found=Could not find the ''{0}'' package
javascript.linter.import.error.entry.point.not.found=Could not find entry point in the ''{0}'' package
javascript.linter.import.error.bin.file.not.found=Could not find ''{0}'' under the ''{1}'' package
javascript.linter.import.notification={0}: The project code style and editor settings were updated based on ''{1}''.
javascript.linter.import.notification.edit=Edit ''{0}''
javascript.linter.import.notification.rules.applied=The following {0} applied: {1}.
javascript.linter.import.notification.reset=Reset
javascript.linter.import.notification.restored=Default code style and editor settings were restored
action.EslintImportCodeStyle.text=Apply ESLint Code Style Rules
action.EslintImportCodeStyle.description=Apply ESLint code style rules
javascript.linter.import.translate.config.progress.title=Applying {0} code style rules
javascript.linter.import.translate.config.file.error=Could not apply code style rules
javascript.linter.import.nothing.to.import={0}: All known rules are already applied
javascript.linter.use.severity.from.config.label=Use rule severity from the configuration file
javascript.linter.configuration.file.title=Configuration File
javascript.linter.radio.button.configuration.file=&Configuration file:
javascript.linter.error.empty.path=Empty path
javascript.linter.error.no.such.file=No such file
javascript.linter.error.specify.correct.path.to=Specify a correct path to {0}
javascript.linter.error.failed.to.lint=Failed to Lint {0}
javascript.linter.error.can.not.find.psi.file=Cannot find a PSI file for {0}
javascript.linter.error.can.not.find.document=Cannot find a Document for {0}
javascript.linter.error.notification.problem.with.reformatting=Problem with {0} reformatting:<br/>{1}
javascript.linter.error.no.path.to.package=Specify a path to the ''{0}'' package
javascript.linter.error.package.not.installed=Install the ''{0}'' package
javascript.linter.error.invalid.path.to.package=Specify a correct path to the ''{0}'' package
javascript.linter.action.edit.config=Edit {0}
javascript.linter.action.edit.property=Edit {0} in {1}
javascript.linter.action.edit.settings.text={0} settings\u2026
javascript.linter.action.fix.prompt=Reformat selected files with {0}?
javascript.linter.action.fix.problems.file.text={0}: Fix current file
javascript.linter.action.fix.problems.name=Fix {0} Problems
javascript.linter.action.fix.problems.name.start=Fix {0} Problems started
javascript.linter.action.fix.problems.name.finish=Fix {0} Problems finished
javascript.linter.configurable.config.autoSearch.title=Automatic &search
javascript.linter.suppress.rules.for.line.family.name=Suppress for current line
javascript.linter.suppress.rule.for.line.description=Suppress ''{0}'' for current line
javascript.linter.suppress.all.rules.for.line.description=Suppress all {0} rules for current line
javascript.linter.suppress.rules.for.file.family.name=Suppress for current file
javascript.linter.suppress.rule.for.file.description=Suppress ''{0}'' for current file
javascript.linter.suppress.all.rules.for.file.description=Suppress all {0} rules for current file
javascript.linter.progress.reformatting.with=Reformatting with {0}\u2026

javascript.linter.intention.name.details=Details
javascript.linter.intention.family.name.show.details={0}: show details

# eslint
settings.javascript.linters.eslint.configurable.name=ESLint
eslint.configurable.eslintPackage.label=&ESLint package:
eslint.configurable.config.autoSearch.description.bodyInnerHtml=ESLint will automatically look for .eslintrc.* and package.json files \
  in the directory of the file to be linted, and in successive parent directories all the way up to the root directory of the filesystem.\
  <div style="padding-top:8px">\
  To use package.json, add your configuration under <code>eslintConfig</code> property.\
  </div>
eslint.configurable.label.working.directories=&Working directories:
eslint.configurable.working.dir.field.empty.text=Detect by the nearest .eslintrc or .eslintignore
eslint.configurable.working.directories.comment=Paths or <a href='https://github.com/isaacs/node-glob#glob-primer'>glob patterns</a>, semicolon-separated. Keep empty for auto-detection.
eslint.configurable.config.select.config.text=Select ESLint Configuration File (*.eslintrc.*)
eslint.configurable.additionalRulesDir.label=Additional &rules directory:
eslint.configurable.additionalRulesDir.browseDialogTitle=Select ESLint Additional Rules Directory
eslint.configurable.extraOptions.label=Extra eslint &options:
eslint.run.for.files.label=Run for &files:
eslint.files.pattern.comment=Use a <a href='https://github.com/isaacs/node-glob#glob-primer'>glob pattern</a>, for example, <code>**/*.{js,ts}</code>
eslint.run.on.save=R&un eslint --fix on save
eslint.run.on.save.checkbox.on.actions.on.save.page=Run eslint --fix
eslint.run.on.save.disabled.comment=ESLint integration disabled
eslint.run.on.save.auto.configuration.comment=Automatic ESLint configuration
eslint.run.on.save.manual.configuration.comment=Manual ESLint configuration
eslint.run.on.save.link.enable.eslint=Enable ESLint\u2026
eslint.action.fix.problems.description=Fix ESLint problems by calling 'eslint --fix'
eslint.fix.problems.text.with.error.code={0}: Fix ''{1}''
eslint.fix.problems.text.current={0}: Fix current error
eslint.fix.problems.family.name={0}: Fix current error
eslint.error.package.directory.expected=Package directory expected
eslint.code.style.apply.message=Apply code style from ESLint?
eslint.code.style.dismiss.text=No
eslint.code.style.apply.text=Yes
eslint.version.0.is.not.supported.please.upgrade.eslint=ESLint version {0} is not supported. Please upgrade ESLint.
eslint.additional.rules.directory.field.name=additional rules directory
eslint.configuration.file.field.name=ESLint configuration file
eslint.inspections.error.can.not.parse.message=Cannot parse a message, expected a JSON object, but got: {0}
eslint.inspections.error.messages.not.array=Messages is not array: {0}
eslint.inspections.error.unexpected.language.service.response=Unexpected Language service response: {0}
eslint.inspections.error.unknown.message.severity=Unknown message severity: {0}\nbody:\n{1}
action.RestartEsLintServiceAction.text=Restart ESLint Service
action.StopSingleEsLintServiceAction.text=Stop ESLint Service

#standardJS
standardjs.name=Standard code style
standardjs.editor.notification.can.be.enabled.text=Use JavaScript Standard Code Style for this project?
standardjs.editor.notification.action=Yes
standardjs.editor.notification.do.not.show.text=No
standardjs.edit.settings.caption=ESlint/Standard Code Style
standardjs.action.fix.problems.description=Fix Standard Code Style problems
standardjs.error.unsupported.package=Unsupported package version. Upgrade the ''Standard'' package to a minimum version {0}.
standardjs.codestyle.updated={0}: The project code style settings were updated
standardjs.codestyle.updated.config.section={0}: The project code style settings were updated based on ''standard'' section in package.json
standardjs.codestyle.updated.dependency={0}: The project code style settings were updated based on ''standard'' dependency in package.json

# Actions
js.show.type.info.action.error=No expression found
javascript.ignore.unused.function.parameters=Ignore unused parameters:
javascript.ignore.unused.catch.parameters=Ignore unused catch parameters
complete.import.binding=Complete Import Binding
complete.import.name=Complete Import Name
remove.type.prefix=Remove Type Prefix
add.import.binding.to.import=Add Import Binding to Import
add.import.specifier.to.import=Add Import Specifier to Import
add.variable.to.require=Add Variable to Require Call
create.file.name=Create file ''{0}''
create.file.name.with=Create file ''{0}'' with {1}
create.file.name.with.and=Create file ''{0}'' with {1} and {2}
class.names={0,choice,1#class|2#classes} {1}
function.names={0,choice,1#function|2#functions} {1}

# todo remove, has external usages
javascript.completion.several.definitions=(several definitions)

# File watchers
js.file.watcher.6to5.description=Transpiles ECMAScript 6 code to ECMAScript 5 using Babel
editor.notification.label.enable.babel.file.watcher.question=Enable File Watcher to transpile ECMAScript 6 to ECMAScript 5 using Babel?

# Annotator
typescript.export.assignment.cannot.be.used.in.internal.modules=Export assignment cannot be used in internal modules
typescript.type.predicate.not.return=A type predicate is only allowed in return type position for functions and methods
typescript.type.this.predicate.not.return=A 'this'-based type predicate is only allowed within a class or interface's members, get accessors, or return type positions for functions and methods.
typescript.type.predicate.not.match.name=Cannot find parameter {0}
typescript.type.predicate.rest=A type predicate cannot reference a rest parameter
typescript.type.predicate.destructuring=A type predicate cannot reference element in a binding pattern.
typescript.type.predicate.incompatible.types=Type predicate is not assignable to {0}
typescript.generics.should.not.be=Type ''{0}'' is not generic
es6.default.export.not.declared=Default export is not declared in imported module
js.annotator.assignment.pattern.rhs=Assignment patterns must be on the left side of assignment
action.ES6.Generate.Index.text=Generate index.js/index.ts
action.ES6.Generate.Index.description=Generate index.js/index.ts
js.annotator.thin.arrow.used=Thin arrow used
js.annotator.newline.before.arrow=Newline is not allowed before arrow
js.annotator.replace.with.fat.arrow=Replace with fat arrow
js.annotator.unary.operator.within.exponential=Unary operator ''{0}'' is not allowed immediately before exponentiation expression. \
  Consider adding parenthesis to resolve ambiguity.
js.annotator.rest.element.must.be.last=Rest element must come last
js.annotator.yield.cannot.be.used.inside.generator='yield' cannot be used as an identifier inside a generator

# Live templates
jsx.html.context.type=JSX HTML
js.expression.context.type=Expression
js.statement.context.type=Statement
js.top.level.statement.context.type=Top level statement
js.class.context.type=Class/Interface
js.class.member.expression.context.type=Class member expression
js.class.member.statement.context.type=Class member statement
js.dot.property.access.context.type=Dot property access

# Gulp
gulp.rc.gulpfile.label=Gulp&file:
gulp.rc.gulpfile.browseDialogTitle=Select gulpfile.js
gulp.rc.tasks.label=&Tasks:
gulp.rc.arguments.label=A&rguments:
gulp.rc.nodeInterpreter.label=Node &interpreter:
gulp.rc.nodeOptions.label=Node &options:
gulp.rc.gulpPackage.label=&Gulp package:
gulp.rc.environmentVariables.label=&Environment:
gulp.task.title=Gulp Task
gulp.before.run.task=Run gulp task
gulp.before.run.task.descr=Run gulp {0, choice, 0#task|1#task |2#tasks }{1} [{2}]
gulp.gulpfile.unspecified=Gulpfile is unspecified
gulp.gulpfile.not.found=Gulpfile not found

# Grunt
grunt.rc.gruntfile.label=Grunt&file:
grunt.rc.gruntfile.browseDialogTitle=Select Gruntfile
grunt.rc.tasks.label=&Tasks:
grunt.rc.arguments.label=A&rguments:
grunt.rc.nodeInterpreter.label=Node &interpreter:
grunt.rc.nodeOptions.label=Node &options:
grunt.rc.gruntCliPackage.label=&Package grunt-cli:
grunt.rc.environmentVariables.label=&Environment:
grunt.task.title=Grunt Task
grunt.before.run.task=Run Grunt task
grunt.before.run.task.descr=Run Grunt {0, choice, 0#task|1#task |2#tasks }{1} [{2}]
grunt.unspecified.gruntfile=Unspecified Gruntfile
grunt.gruntfile.not.found=Gruntfile not found

#node
settings.nodejs.name=Node.js
settings.nodejs.coding.assistance.label=Coding &assistance for Node.js
settings.nodejs.coding.assistance.manage.scopes.label=Manage Scopes\u2026

node.interpreter.label=Node &interpreter:
node.interpreter.unspecified.error.text=Specify Node.js interpreter
node.interpreter.unavailable.target=Unavailable target: {0}
node.package.manager.label=Package &manager:
node.package.empty.hint=Path to {0} package directory
node.package.empty.hint.pkg1.or.pkg2={0} or {1}
node.package.selector.multiple.packages.binary.file.title=Select Package Directory or Binary File of {0}
node.package.binary.file.hint=Path to binary file of {0}
node.package.selector.single.package.title=Select {0} Package Directory
node.package.selector.multiple.packages.title=Select Package Directory
node.package.selector.multiple.packages.description=Select {0}
node.package.none=No package
node.package.dropDownList.select=Select\u2026

inspection.NodeCoreCodingAssistanceInspection.no.coding.assistance.message=Coding assistance for Node.js is disabled
action.ToggleNodeCoreCodingAssistanceAction.text=Toggle coding assistance for Node.js

# npm
npm.rc.packageJson.label=&package.json:
npm.rc.packageJson.browseDialogTitle=Select package.json File
npm.rc.command.label=&Command:
npm.rc.scripts.label=Scrip&ts:
npm.rc.scriptsArguments.label=A&rguments:
npm.rc.nodeInterpreter.label=Node &interpreter:
npm.rc.nodeOptions.label=Node options:
npm.rc.environmentVariables.label=Environment:
npm.task.title=NPM Script
npm.before.run.task=Run npm script
npm.before.run.task.descr=Run npm {0, choice, 0#script|1#script |2#scripts }{1} [{2}]
npm.dialog.message.cannot.resolve.package.manager=Cannot resolve ''{0}'' package manager
npm.no.scripts.found=No scripts found
dialog.message.unspecified.package=Unspecified {0} package
dialog.message.invalid.package.file.specified.but.directory.with.package.json.expected=Invalid {0} package: a file is specified, but a directory with package.json is expected
dialog.message.invalid.package.no.such.directory=Invalid {0} package: no such directory
dialog.message.invalid.npx.command=Invalid npx command
dialog.message.package.yarn.installed.package.format.yarn.relative.path.to.package.json.package.name={0} package: Yarn-installed package format is ''yarn:[relative path to package.json]:[package name]''.
dialog.message.no.path.to.package.json.found=No path to package.json found.
dialog.message.unspecified.package.name=Unspecified package name.
action.EnablePackageJsonMismatchedDependenciesNotification.text=Enable Notifications about Installing Dependencies from package.json
notification.content.notifications.are.enabled.for.current.package.json=Notifications are enabled for current package.json
notification.content.notifications.are.enabled.for.all.package.json.files=Notifications are enabled for all package.json files
dialog.message.invalid.npm.package=Invalid {0} package: no such file or directory

# Build tools
action.RunJsbtTask.text=Run Gulp/Grunt/npm Task
buildTools.JsbtAddBuildfileAction.text=Add {0}
buildTools.choose_buildfile.text=Choose {0}
buildTools.JsbtRemoveBuildfileAction.text=Remove {0}
buildTools.JsbtReloadTasksAction.text=Reload Tasks
buildTools.JsbtReloadTasksAction.npm.text=Reload Scripts
buildTools.JsbtShowTasksAction.text=Show {0} Tasks
buildTools.JsbtShowTasksAction.npm.text=Show npm Scripts
buildTools.searchEverywhere.text=Run {0} task
buildTools.searchEverywhere.npm.text=Run {0} npm script
buildTools.ShowSettingsAction.text={0} Settings\u2026
buildTools.ShowSettingsAction.npm.text=&Edit npm Configurations\u2026
buildTools.EditRunSettingsAction.text=&Edit ''{0}'' Settings\u2026
buildTools.tree.sortBy.text=Sort by
buildTools.tree.sortBy.definitionOrder.text=Definition Order
buildTools.tree.sortBy.name.text=Name
buildTools.no.tasks.found=No tasks found
buildTools.edit.run.configuration=Edit run configuration
buildTools.no.files.added=No files added
buildTools.add.with=Add {0} with {1}
buildTools.no.such.file=No such file
buildTools.failed.to.list.tasks=Failed to list tasks
buildTools.failed.to.list.tasks.details.reference=details
buildTools.tooltip.click.to.show.error.details=Click to show error details

#npm modules
npm.modules.inspection.content.of.require.not.in.dependencies.warning=Module is not listed in package.json dependencies
npm.modules.inspection.content.of.require.module.not.installed.warning=Module is not installed
npm.modules.install.global.types.fix.name=Install TypeScript definitions for better type information
package.json.install.types.fix.family.name=Install @types for the package
node.js.quickfix.install.node.module.with.dev.dependencies.text=Install ''{0}'' as dev dependency
node.js.quickfix.install.node.module.text=Install ''{0}''
node.js.quickfix.install.node.module.family.name=Install modules
node.js.quickfix.install.node.module.devDependencies.family.name=Install modules as dev dependencies
node.js.quickfix.install.node.module.update.modules.family.name=Run 'npm install'
node.js.quickfix.run.command=Run ''{0}''
node.js.quickfix.install.node.module.error.prefix.text=Cannot install Node.js module: {0}
node.js.quickfix.install.node.module.error.no.interpreter.text=Cannot install Node.js module: please specify default Node.js interpreter.
node.js.quickfix.install.node.module.error.no.interpreter.title=Install Node.js Module
node.js.select.file=Select {0} File
dialog.message.cannot.determine.package.json.directory=Cannot determine a package.json directory
action.InstallNodeLocalDependencies.text=Install Node.js Dependencies
action.InstallNodeLocalDependencies$Root.text=Run ''{0}'' for {1}

typescript.types.module.not.installed.warning=Cannot resolve definitions for module ''{0}''
npm.modules.install.global.types.directory.error=Cannot create required directories
npm.modules.install.global.types.dialog.title=Install TypeScript Definitions

typescript.types.union=Union
typescript.types.intersection=Intersection
typescript.types.mapped=Mapped
typescript.types.key=Key reference to
typescript.types.merged=Merged
typescript.types.merged.accessor=Merged accessor
typescript.types.type.member={0} type property
typescript.types.merged.parts=Referenced properties:

# Intention categories
intention.category.javascript=JavaScript
intention.category.typescript=TypeScript
intention.category.ecmascript6=JavaScript/ECMAScript 6
intention.category.react=React

# Intentions
ts.generate.reference.path.name=Generate reference path comment
ts.add.import.statement.dialog.title=Add Import Statement
ts.add.import.all.family.name=Add all imports
ts.add.import.hint.text=Add {0} with {1}
ts.add.import.hint.multiple.text=Add import for {0} with {1} 
ts.add.import.hint.all.part=or all imports with {0}
ts.change.import.action.one.title=Change to {0}
ts.change.import.action.many.title=Change import\u2026
ts.change.import.action.command=Change import
ts.change.import.action.family.name=Change ES6 import path
ts.change.import.action.dialog.title=Import from\u2026
ts.convert.alias.to.interface.action.title=Convert alias to interface
ts.convert.alias.to.interface.action.family.name=Convert type alias to interface
ts.convert.alias.to.enum.action.title=Convert alias to enum
ts.convert.alias.to.enum.action.family.name=Convert type alias to enum
ts.convert.parameter.property.to.field=Convert parameter property to field
ts.convert.field.to.parameter.property=Convert field to parameter property
anonymous.to.named.intention.function.name=Function name:
initialize.fields.intention.visibility=Visibility:
command.name.import=Import {0}
please.specify.package.manager=Specify a <a href="">Package Manager</a>.
intention.name.add.file.to.tsconfig=Add file ''{0}'' to tsconfig.json
intention.name.import.augmentation=Import augmentation {0}

# Language Service
javascript.language.service.default.empty.text=No Errors
javascript.language.service.tracking.disabled=Error tracking is disabled
javascript.language.service.tracking.is.not.started=Service is not started
javascript.language.service.default.project.errors=Show project errors
javascript.service.node.error=Node interpreter path is incorrect. Please check interpreter settings
javascript.starting.service=Starting {0} Service
javascript.language.service.cannot.get.results=Unable to get a result from the language service
javascript.language.service.start.timeout=Timeout on starting language service process
javascript.language.service.cannot.start=Cannot start language service process
cannot.parse.service.initialization.answer.0=Cannot parse service initialization answer {0}\n
tab.title.errors=Errors
tab.title.project.errors=Project Errors
tab.title.compile.errors=Compile errors
dialog.message.no.results.for.after=No results for {0} after {1}
intention.name.loading.service.fixes=Loading service fixes\u2026

# LSP
lsp.interpreter.error=Local or WSL Node.js interpreter not configured.
lsp.executable.error=Executable for {0} not found.


# TypeScript Compiler
typescript.compiler.notification.editor.configure=Configure TypeScript\u2026
typescript.compiler.configurable.name=TypeScript
action.TypeScript.Enable.Service.text=TypeScript language service
typescript.compiler.configurable.options.output.path=Use output path:
typescript.compiler.configurable.options.compile.main=Compile main file only:
typescript.compiler.configurable.options.compile.main.error=Incorrect path to main file
typescript.compiler.configurable.options.version=TypeScript:
typescript.compiler.configurable.options.version.bundled=Bundled
typescript.compiler.configurable.options.generate.source.map=Generate source maps
typescript.compiler.configurable.options.enable.no.config=Also for projects without tsconfig.json
typescript.compiler.configurable.options.track.file.system=Recompile on changes
typescript.compiler.configurable.options.scope=Compile scope:
typescript.compiler.configurable.options.command.line=Options:
typescript.compiler.configurable.options.command.line.localeNotSupportedForBundled=Locale setting is not supported for bundled TypeScript
typescript.compiler.configurable.options.use.types.from.server=Use types from server
typescript.compiler.configurable.options.use.types.from.server.description=Enables evaluation based on TypeScript compiler.
dialog.message.cannot.compile.typescript.config.file.incorrect=Cannot compile TypeScript. A config file is incorrect.
intention.family.name.suppress.with.ts.ignore=Suppress with @ts-ignore
typescript.compiler.structure.tab.title=Structure
typescript.compiler.starting=TypeScript starting\u2026

typescript.service.no.config=File is not included in any tsconfig.json
typescript.service.no.main.reference=File was not processed because there are no references from the main file
service.configurable.default={0} (Default)

js.tool.window.limit=First {0} errors are shown.
js.tool.window.limit.all=See all {0} errors
typescript.compiler.action.compile.all=Compile All
typescript.compiler.action.compile.toolbar=Compile
typescript.compiler.action.compile.all.description=Compile all project files
typescript.service.action.restart=Restart {0}
typescript.compiler.action.compile.all.compile.config=Compile files for config {0}
typescript.compiler.action.compile.current=Compile Current File
typescript.compiler.action.compile.simple=Compile TypeScript
typescript.compiler.action.compile.description=Compile current project
typescript.compiler.action.no.compile.message=File was not compiled because there is no a reference from main file
typescript.compiler.before.run=Compile TypeScript

typescript.language.service.name=TypeScript Service
typescript.language.service.clean=Resetting caches\u2026
typescript.language.service.compile.file=Compiling file... {0}
typescript.language.service.compile.project=Compiling project... {0}
typescript.language.service.compile.file.errors=Calculating errors... {0}
typescript.language.service.compile.project.errors=Calculating project errors... {0}
typescript.language.service.compile.project.open.file=Opening file... {0}
typescript.language.service.getting.type.from.server=Getting a type from TS server\u2026

typescript.before.task.check.errors=Check errors
typescript.before.task.config.path=Config file:
typescript.before.task.title=TypeScript Compile Settings
typescript.before.task.config.dialog.title=Select tsconfig.json

# Documentation
js.documentation.fires=Fires:
js.documentation.more.overload=+{0} more overload
js.documentation.more.overloads=+{0} more overloads
jquery.documentation.not.found=jQuery documentation not found

node.js.remote.interpreters.plugin.missing=The Node.js Remote Interpreter plugin is missing. Please enable the plugin in {0}.

# Module Dependencies
javascript.module.dependencies.got.it.title=Module Dependencies Diagram
javascript.module.dependencies.got.it.text=<div align='left'>This diagram visualizes the module dependencies that the selected file or directory has.<br/>\
To see the dependencies for multiple files or directories, select them in the <i>Project View</i><br/>\
  and choose <i>Diagrams \u2013 Show Diagram</i> on the context menu of the selection.</div>
javascript.module.dependencies.empty.got.it.text=<div align='left'>The current file or folder does not have any dependencies.<br/>Please try with another file or folder.</div>
modules.selected=Selected

js.remove.redundant.initializer.fix=Remove redundant initializer
js.remove.unused.assignment=Remove unused assignment
js.inject.with.comment.intention.family.name=Annotate injection with comment
js.inject.dont.format.intention.text=Disable formatting for injected content

js.linter.guesser.linter.enabled.because.of.dependency={0} is enabled: ''{1}'' is listed in package.json.
js.linter.guesser.linter.enabled.because.of.package.json.section={0} is enabled: ''{1}'' is in package.json.
js.linter.guesser.linter.enabled.because.of.config.file={0} is enabled: config file is in the project.
js.linter.guesser.linter.disabled={0} is disabled.

# Breadcrumbs
js.breadcrumbs.callback.for=callback for {0}()

action.TypeScriptExtractTypeAlias.text=Type Alias\u2026
typescript.include.js.sources.element=Search for JavaScript declaration
typescript.include.js.sources.dialog.title=Include Package {0}
typescript.include.js.sources.dialog.message=Include JavaScript files from ''{0}'' in the project?

# Smart Keys
automatically.replace.with.template.string.on.typing=Automatically replace string literal with template string on typing '$\{'
start.template.string.interpolation.on.typing=Start template string interpolation on typing '$'
action.TypeScript.Include.Sources.text=Include JavaScript files
escape.pasted.text=Escape text on paste in string literals
jsx.convert.html.attributes.to.jsx=Convert HTML when pasting into JSX files (convert attributes, close single tags)
escape.jsdoc.copy.pasted.text=Escape JSDoc leading asterisks on copy and paste

# Rename member
rename.prompt.do.you.want.to.rename.base.method=Do you want to rename the base method?
js.rename.base.member=Rename base {0}
js.rename.current.member=Rename current {0}
js.rename.member.title={0} {1} {2} of {3}
js.rename.member.title.implements=implements
js.rename.member.title.overrides=overrides

# Generate dialog
generate.filter.indexers=Indexers
generate.filter.methods=Methods
generate.filter.fields=Fields and Properties
generate.filter.button.tooltip=Show {0}
generate.filter.button.description=Show {0} in the list
codestyle.ui.field.prefix=&Field prefix:
codestyle.ui.property.prefix=&Property prefix:
codestyle.ui.file.name.style=File&name convention:
codestyle.ui.generated.jsdoc.use.types.checkbox=Include &types in JSDoc
inline.type.used.in.reference.list=Cannot inline usage in ''{0}'' list
inline.cannot.inline.references.this.type=Cannot inline interface that references 'this' type
inline.cannot.inline.has.supers=Cannot inline {0} that extends other types
generation.bindable.event=&Bindable event:
generation.event.constant=&Event constant:

action.ReactExtractComponentAction.text=Extract Component\u2026
action.ReactFunctionToClassComponentAction.text=Convert to Class Component
action.ReactClassToFunctionComponentAction.text=Convert to Function Component

refactoring.extract.react.component.title=Extract Component
refactoring.extract.react.component.no.expression=Selection does not form a JSX expression
refactoring.extract.react.component.no.scope=Could not find scope to place created component
refactoring.create.react.component.title=Create Component
refactoring.react.function.to.class.refactoring.title=Convert to Class Component
refactoring.react.function.to.class.intention.title=Convert to class component
refactoring.react.function.to.class.used.in.new.conflict={0} is used in ''new'' expression
refactoring.react.function.to.class.used.in.call.conflict={0} is used in call expression
refactoring.react.class.to.function.conflict.used.with.ref={0} is used with ''ref'' attribute. Stateless function components cannot be given refs
refactoring.react.class.to.function.refactoring.title=Convert to Function Component
refactoring.react.class.to.function.intention.title=Convert to function component
refactoring.react.could.not.find.in.template=Failed to refactor. Could not find element with name {0}. Possibly code template {1} is invalid?
react.function.to.class.caret.at.function=Caret should be positioned at function to convert
react.class.to.function.caret.at.class=Caret should be positioned at class to convert
react.class.component.type.class=Class
react.class.component.type.function=Function

js.arrangement.group.arrow.fields.with.methods=Group fields initialized with arrow functions with methods
intellilang.tagged.literal.injection.name.label=Pattern:
intellilang.tagged.literal.expression.border.title=Template Tag

refactoring.destructuring.vars.for.refactor.this=Object or Array Destructuring\u2026
refactoring.destructuring.vars.intention.name=Introduce object or array destructuring
refactoring.destructuring.vars.intention.name.object=Introduce object destructuring
refactoring.destructuring.vars.intention.name.array=Introduce array destructuring
refactoring.destructuring.vars.intention.replace.object=Replace with object destructuring
refactoring.destructuring.vars.intention.replace.array=Replace with array destructuring
refactoring.destructuring.vars.intention.replace.promise=Replace with 'await Promise.all'
refactoring.destructuring.vars.intention.propagate=Propagate to destructuring declaration
refactoring.destructuring.vars.intention.depropagate=Replace destructuring with property and index access
refactoring.destructuring.vars.intention.deconstruct=Generate destructuring pattern
refactoring.destructuring.vars.intention.replace.shorthand=Replace with destructuring and short-hand properties
refactoring.destructuring.vars.intention.const.to.var.warning=During the transformation, highlighted const variables will be converted to let variables.\nDo you want to continue?
refactoring.destructuring.vars.intention.const.to.var.warning.title=Variable Keyword Change
refactoring.destructuring.vars.intention.guard.conflict=Expression type is narrowed to ''{0}'' by a type guard that will have no effect after refactoring
javascript.intention.add.export.family.name=Add export
javascript.intention.add.export.fix.text=Make {0} exported in file {1}
javascript.intention.add.default.export.family.name=Add default export
javascript.intention.remove.export.family.name=Remove export
javascript.intention.remove.export.inaccessible.conflict.text={0} has usage in {1}
javascript.intention.promise.to.async.name=Convert to async function
javascript.intention.code.optimizations.text=Optimizing Generated Code
javascript.intention.add.template.argument=Insert template string argument
javascript.intention.call.chain.to.pipe=Replace nested calls with pipeline expression
javascript.intention.pipe.to.call.chain=Replace pipe expression with nested calls
javascript.intention.opt.chain.family=Use optional chaining or nullish coalescing
javascript.intention.opt.chain.chain.only=Use optional chaining
javascript.intention.opt.chain.coalesce.only=Use nullish coalescing
javascript.intention.opt.chain.conditional.only=Use '||'
javascript.intention.opt.chain.chain.and.coalesce=Use optional chaining and nullish coalescing
javascript.intention.expand.opt.chain.family=Expand optional chaining or nullish coalescing to explicit checks
javascript.intention.expand.opt.chain=Expand optional chaining
javascript.intention.expand.nullish.coalescing=Expand nullish coalescing
javascript.intention.expand.or.coalescing=Use ?: operator
javascript.intention.expand.opt.chain.and.nullish.coalescing=Expand optional chaining and nullish coalescing
javascript.intention.expand.opt.chain.and.or.coalescing=Expand optional chaining and use ?: operator
javascript.intention.explicit.fields=Declare explicit class fields
javascript.intention.explicit.fields.single=Declare explicit class field
javascript.intention.explicit.fields.dialog.title=Select Fields to Declare Explicitly
javascript.intention.init.fields=Initialize new fields from parameters
javascript.intention.init.fields.dialog.title=Select Parameters to Initialize Fields

js.param.hints.show.names.for.all.args=Non-literal arguments
js.param.hints.show.names.for.tagged=Tagged template arguments
js.param.hints.show.names.for.pipes=Pipeline operators
js.param.hints.blacklist.pattern.explanation=To disable hints for a method or a function, use one of the following patterns:\
  <p style="margin-left: 5px">\
    <code><b>(*info)</b></code> - all single parameter methods where the parameter name ends with <em>info</em><br>\
    <code><b>(key, value)</b></code> - all methods with parameters <em>key</em> and <em>value</em><br>\
    <code><b>*.put(key, value)</b></code> - all <em>put</em> methods with <em>key</em> and <em>value</em> parameters<br>\
    <code><b>Console.log(*, *)</b></code> - the <em>log</em> method of the <em>Console</em> type with exactly two parameters\
  </p><br>\
  <p>\
  Names or placeholders must be provided for all parameters, including the optional parameters.<br>\
  Qualified method names must include class or interface names, or a placeholder for them.<br>\
  Use the "Do not show hints for current method" {0} action to add patterns when editing code.\
  </p>

js.checkbox.make.readonly=Make &readonly

action.JavaScriptGenerateDictionaries.text=Generate JavaScript Spellchecker Dictionaries
action.ReactClassToFunctionComponentAction.description=Convert to function component
action.ReactFunctionToClassComponentAction.description=Convert to class component
action.ReactExtractComponentAction.description=Extract component
action.TypeScriptExtractTypeAlias.description=Extract type alias
action.JS.TypeScript.Include.Generated.Declarations.text=Include Child '.d.ts' Files
action.JS.TypeScript.Include.Generated.Declarations.description=Include child .d.ts files into the project
action.Generate.GetSetAccessor.JavaScript.text=Getter and Setter
action.Generate.SetAccessor.JavaScript.text=Setter
action.Generate.GetAccessor.JavaScript.text=Getter
action.Generate.Constructor.JavaScript.text=Constructor
action.Generate.Missing.Members.ES6.text=Implement Methods\u2026
action.Generate.Missing.Members.TypeScript.text=Implement Members\u2026
group.Editor.JSLibrariesMenu.text=Use JavaScript Library
group.Editor.JSLibrariesMenu.description=Select JavaScript libraries to be used with the current file
configurable.JSTemplateLangConfigurable.display.name=Templates
configurable.JSCodeCompletionConfigurable.display.name=JavaScript
configurable.JSSmartKeysConfigurable.display.name=JavaScript
configurable.MyConfigurable.display.name=JSX
import.options.find.more.configuration.options=Find more configuration options in <a>Code Style</a> 
settings.code.style.indent.chained.methods=Indent chained methods
settings.code.style.indent.all.chained.calls.in.a.group=Indent all chained calls in a group
settings.code.style.semicolon.to.terminate.statements=&semicolon
settings.code.style.use=Use
settings.code.style.quotes=&quotes
settings.code.style.Trailing.comma=&Trailing comma:
settings.code.style.single=single
settings.code.style.double=double
settings.code.style.in.new.code=in code generated by IDE
settings.code.style.always=always
settings.code.style.option.use=Use
settings.code.style.dont.use=Don't use
checkbox.enable=Enable

bundler.configuration.detect.description=Detect {0} configuration files for module resolution:
bundler.configuration.manual=Manually
bundler.configuration.automatic=Automatically
bundler.configuration.disabled=Disabled
bundler.configuration.automatic.how.it.works=How it works
bundler.configuration.automatic.hint={0} will use module resolution rules from the {1} configuration file located in the same folder as the current file or any of its parent folders.
bundler.configuration.field=Configuration file:
bundler.configuration.field.required.error=Configuration file path is required in manual mode

create.react.app.name=React
create.react.app.description=<a href=\"https://github.com/facebookincubator/create-react-app\">Create React App</a> is a new officially supported way to create single-page React applications. It offers a modern build setup with no configuration.
create.react.app.scripts.version=Scripts &version
create.react.app.typescript.checkbox=Create &TypeScript project
create.react.app.warning.deprecated=Using the <b>create-react-app</b> is not the advised method for creating React applications. The preferred approach is to use a template with the <a href=\"https://vitejs.dev/guide/#trying-vite-online\">Vite bundler</a> when using React without a framework.
dialog.title.new.javascript.file=New JavaScript file
list.item.javascript.file=JavaScript file
list.item.javascript.jsx.file=JSX file
dialog.title.new.typescript.file=New TypeScript file
list.item.typescript.file=TypeScript File
list.item.typescript.jsx.file=TypeScript JSX File
dialog.kind.0.file={0} File
action.creates.new.file.description=Creates a new {0} file
build.event.title.failed.to.list.tasks=Failed to list {0} tasks
action.show.error.details.text=Show error details
dialog.title.grunt.settings=Grunt Settings
dialog.title.gulp.settings=Gulp Settings
dialog.message.failed.to.download.0.1=Failed to download {0}. {1}
dialog.title.download.error=Download Error
label.import.popup=Auto-import tooltip
label.namespace=Namespace:
dialog.message.cannot.infer.type.new.parameter=Cannot infer type of the new parameter
dialog.title.cannot.introduce.new.interface=Cannot introduce a new interface
notification.title.coloring.types.narrowed.by.type.guard.was.disabled=Coloring of types narrowed by a type guard was disabled
notification.content.html.href.settings.show.inspection.settings.or.href.undo.undo.html=<html><a href='settings'>Show Inspection Settings</a> or <a href='undo'>Undo</a></html>
dialog.message.cannot.propagate.variable=Cannot propagate variable: {0}
dialog.title.cannot.propagate=Cannot propagate
dialog.message.usages.search.was.interrupted=Usages search was interrupted
dialog.title.cannot.convert=Cannot convert
dialog.message.cannot.proceed.when.having.non.read.usages.in.embedded.expressions=Cannot proceed when having non-read usages in embedded expressions
dialog.message.variables.from.destructuring.pattern.have.no.usages=Variables from the destructuring pattern have no usages
button.continue=Continue
button.abort=Abort
action.don.t.use.library.description=Don't use library
action.already.set.for.containing.folder.or.project.description=Already set for containing folder or project.
action.use.library.description=Use library
text.cannot.download=Cannot download {0}. {1}
notification.content.show.details=Show details
action.name.disable.category=Disable {0}
progress.text.processing=Processing {0}{1}
label.path=&Path:
border.title.inspection.export.results.capitalized.location=Location
progress.title.install.npm.module=Install npm module ''{0}''
dialog.message.cannot.find.module.types=Cannot find module @types/{0}
action.jump.to.text=Jump To\u2026
dialog.title.select.navigation.target=Select Navigation Target
dialog.title.select.targets.to.convert.to.class=Select Targets To Convert To Class
dialog.message.component.name=Component Name:
label.name=Name: 
label.type=Type: 
label.minimum.language.level=Minimum language level:
dialog.message.cannot.create.argument.stubs.invoked.method.function=Cannot create argument stubs: invoked method is not a function
action.show.structure.text=Show Structure
status.text.no.errors.in.current.file=No errors in the current file. 
status.text.javascript.language.service.default.project.errors=Show project errors
status.text.javascript.language.service.suggestions=Show suggestions
progress.title.compiling.typescript.files=Compiling TypeScript files
dialog.message.cannot.find.file=Cannot find the file {0}
radio.set.options.manually=Set options manually
radio.use.tsconfig.json=Use tsconfig.json
separator.deprecated.settings=Deprecated Settings
dialog.title.main.file=Main File
label.choose.main.file=Choose main file
dialog.title.output.directory=Output Directory
label.choose.output.directory=Choose output directory
dialog.message.incorrect.path.to.typescript.package=Incorrect path to typescript package
status.text.project.structure.isn.t.available=Project structure isn't available
status.text.service.doesn.t.contain.open.projects=Service doesn't contain open projects
status.text.refresh.required=Refresh required
dialog.message.cannot.find.module.for.import=Cannot build a module path for importing
action.js.tagged.literal.injection.text=JS Tagged Literal Injection
dialog.title.wsl.node.interpreter={0} WSL Node Interpreter
dialog.title.wsl.node.interpreter.edit=Edit
dialog.title.wsl.node.interpreter.edit.add=Add
label.wsl.node.interpreter=WSL &Node.js interpreter:
dialog.message.please.select.distribution=Please select a distribution
dialog.message.please.specify.wsl.path.to.node.js.interpreter=Please specify path to Node.js interpreter installed in WSL
status.text.running.which.node=Running `which node`\u2026
progress.title.configuring.node.js.coding.assistance=Configuring Node.js Coding Assistance\u2026
action.NewPackageJsonFile.text=package.json
action.NewPackageJsonFile.description=Creates a package.json file
progress.title.install=Install {0}
progress.subtitle.install=Installing {0} with {1}\u2026
inspection.message.package.installed=The {0} package is not installed
inspection.message.package.version.specified=The package version is not specified
inspection.message.installed.version.doesn.t.match.version.range=The installed version {0} doesn''t match the version range {1}
inspection.update.package_json.dependency.message=Newer version of ''{0}'' is available: {1}
inspection.update.package_json.dependency.action.text=Update ''{0}'' to the latest version {1}
dialog.title.missing.dependencies=Missing Dependencies
button.install.update=Install/Update
action.view.install.text=View and Install\u2026
action.don.t.ask.again.text=Don't ask again
dialog.title.configure.coding.assistance.for.node.js.api=Configure Coding Assistance for Node.js API
action.Anonymous.text.configure=Configure
inspection.message.sm.test.runner.magnitude.assertion.failed.title=Assertion failed
text.html.front.end.template.a.href.http.html5boilerplate.com=<html>Front-end template <a href='http://html5boilerplate.com'>http://html5boilerplate.com</a></html>
dialog.message.node.interpreter.unspecified.error.text=Please specify Node.js interpreter
dialog.message.node.interpreter.must.be.located.in.wsl=Node.js interpreter must be located within WSL, along with the specified project path.
dialog.message.node.interpreter.is.located.in.another.wsl.distribution=Node.js interpreter is located in a different WSL distribution than the specified project path.
text.html.sleek.intuitive.and.powerful.front.end.framework=<html>Sleek, intuitive, and powerful front-end framework for faster and easier web development <a href='http://getbootstrap.com'>http://getbootstrap.com</a></html>
popup.title.target.function=Target Function
popup.title.select.destructuring.assignment.target=Select destructuring assignment target
visibility.level.overview=Overview
visibility.level.details=Details
js.module.uml.presentable.name=JavaScript Module Dependencies
intention.family.name.run.npm.install=Run 'npm install'
intention.name.run.npm=Run ''{0}''
intention.name.navigate.to=Navigate to {0}
popup.advertisement.start.typing.package.name=Start typing package name to get more specific results from the official public npm registry
popup.advertisement.latest.available.versions.for.all.distribution.tags=Latest available versions for all distribution tags
intention.family.name.select.in.test.tree=Select in test tree
intention.family.name.introduce.parameter.properties.for.unused.parameters=Convert to parameter properties
dialog.title.select.parameters.to.convert.to.parameter.properties=Select Parameters to Convert to Parameter-Properties
intention.family.name.add.required.property=Add required property
intention.name.create.library.with.files.outside.project=Create library with files outside the project
dialog.message.unspecified.suite.name=Unspecified suite name
dialog.message.unspecified.test.name=Unspecified test name
dialog.message.unspecified=Unspecified {0}
dialog.message.no.such=No such {0}
dialog.message.please.specify.package.json=Please specify package.json
dialog.message.please.specify.package.json.correctly=Please specify package.json correctly
dialog.message.please.specify.npm.scripts.to.run=Please specify npm scripts to run
dialog.message.command.supported.by=Command ''{0}'' is not supported by {1}
dialog.message.no.npm.script=No ''{0}'' npm script
titled.separator.predefined=Predefined
label.compiles.js.files=Compiles .js files
label.compress.js.files=Compress .js files
dialog.title.edit.run.debug.configuration=Edit Run/Debug Configuration: ''{0}''
js.commandline.configure.language.version=Configures JavaScript language version for the project
js.commandline.configure.nodejs=Configures NodeJS interpreters and installs packages for package.json files

# Language features
js.language.feature.xml.tags=XML tags
js.language.feature.for.each.statements=For each statements
js.language.feature.for.of.loops=for..of loops
js.language.feature.let.definitions=Let definitions
js.language.feature.const.definitions=Const definitions
js.language.feature.generators=Generators
js.language.feature.destructuring.assignments=Destructuring assignments
js.language.feature.let.statements=Let statements
js.language.feature.array.comprehensions=Array comprehensions
js.language.feature.top.level.yield.expressions=Top-level yield expressions
js.language.feature.reference.namespace=Reference namespace
js.language.feature.default.parameter.values=Default parameter values
js.language.feature.pipe.expressions=Pipe expressions
js.language.feature.decorator.declarations=Decorator declarations
js.language.feature.throw.expressions=Throw expressions
js.language.feature.ecmascript.syntax.for.private.members=ECMAScript #-syntax for private members
js.language.feature.class.member.visibility.modifiers=Class member visibility modifiers
js.language.feature.optional.chaining.operator=Optional chaining operator
js.language.feature.arbitrary.precision.integers=Arbitrary precision integers
js.language.feature.trailing.commas.in.function.parameter.lists.and.calls=Trailing commas in function parameter lists and calls
js.language.feature.unicode.escapes.with.braces=Unicode escapes with braces
js.language.feature.bind.expressions=Bind expressions
js.language.feature.optional.catch.bindings=Optional catch bindings
js.language.feature.string.templates=String templates
js.language.feature.method.definition.shorthands=Method definition shorthands
js.language.feature.computed.property.names=Computed property names
js.language.feature.shorthand.property.names=Shorthand property names
js.language.feature.binary.0b.and.new.octal.0o.literals=Binary(0b) and new octal(0o) literals
js.language.feature.async.await=Async/await
js.language.feature.types=Types
js.language.feature.annotations=Annotations
js.language.feature.interfaces=Interfaces
js.language.feature.classes=Classes
js.language.feature.enums=Enums
js.language.feature.es6.export.declarations=ES6 export declarations
js.language.feature.es6.import.declarations=ES6 import declarations
js.language.feature.generics=Generics
js.language.feature.rest.parameters=Rest parameters
js.language.feature.arrow.functions=Arrow functions
js.language.feature.getters.and.setters=Getters and setters
js.language.feature.generator.expressions=Generator expressions
js.language.feature.expression.closures=Expression closures
js.language.feature.destructuring.parameters=Destructuring parameters
js.language.feature.nullish.coalescing=Nullish coalescing operators

# Bundlers
web.bundler.failed.to.load=Failed to load {0}
web.bundler.analyzing.configs.progress=Analyzing configuration files of web bundlers
web.bundler.cannot.analyze=Can''t analyze {0}: coding assistance will ignore module resolution rules in this file.
web.bundler.possible.reasons=Possible reasons: this file is not a valid configuration file or its format is not currently supported by the IDE.
web.bundler.error.details=Error details: {0}.
file.name.masks.to.skip.from.analysis=File name masks to exclude from analysis:

# Node
node.core.enable_coding_assistance_intention.name=Enable coding assistance for Node.js
node.interpreter.unresolved_reference.error.message=Unresolved interpreter ''{0}''
node.interpreter.invalid_interpreter.error.message=Invalid ''{0}''
node.interpreter.no_local_interpreter.error.message=No local Node.js interpreter
node.debug.cannot_connect_to_vm.error.message=Cannot connect to VM {0}
node.debug.cannot_get_localhost_IPv4.error.message=Cannot get 127.0.0.1 IPv4
node.core.make.sure.javascript.debugger.plugin.enabled.dialog.message=Make sure the 'JavaScript Debugger' plugin is enabled
node.core.failed_to_fetch_node_core_modules.dialog.message=Failed to fetch Node core modules
node.core.core_modules_fetch_timed_out.dialog.message=Cannot fetch core modules: timed out
node.core.not_ready_for_core_modules_configuration.dialog.message=Not ready for core modules configuration
node.core.navigate_action_text.text=Configure Node.js\u2026
npm.downloading_package=Downloading {0}...
npm.failed_to_install_package.title.message=Failed to install {0}
node.interpreter.field.add.item.text=Add\u2026
node.interpreter.field.unexpected_value.text=Unexpected value {0}
node.interpreter.unspecified_interpreter.dialog.message=Specify a Node.js interpreter
node.interpreter.unspecified_local_interpreter.dialog.message=Specify a local Node.js interpreter
node.interpreter.specified_interpreter_correctly.dialog.message=Specify a Node.js interpreter correctly
configure.node.interpreter.path=Configure Node.js path\u2026
node.interpreter.reference_not_found.text=not found
node.interpreter.command_timed_out.dialog.message=''{0}'' command run is timed out (>{1} ms)
node.package_documentation.installed_version.text=Installed version: {0}
node.package_documentation.latest_version.text=Latest version: {0}
node.packages.cannot_find_working_directory.text=Cannot determine a working directory for {0}: {1}
node.package.field.not_found.text=Not found
node.npm.cannot_find_package_by_reference.dialog.message=Cannot find a package manager ''{0}''
node.npm.specify_npm_or_yarn_package.dialog.message=Specify an npm or yarn package
node.npm.correct_path_to_npm_or_yarn_package.dialog.message=Specify a correct path to an npm or yarn package: no such directory "{0}"
node.npm.invalid_package_manager.binary_file_not_found.dialog.message=Specify a valid package manager: cannot find a binary file inside ''{0}'' directory
node.npm.project_package_manager_disallowed_here.dialog.message=Project npm package cannot be referenced here
node.npm.unspecified_package_manager.dialog.message=Unspecified package manager
node.npm.cannot_resolve_package_manager.dialog.message=Cannot resolve the ''{0}'' package manager
package_json.install_dependencies.notification.title=Install dependencies
package_json.install_dependencies_multiple.notification.content=From {0} and {1} others
package_json.install_dependencies.notification.content=From {0}
package_json.update_dependencies.notification.title=Update dependencies
package_json.notifications_are_disabled.notification.content=Notifications for installing dependencies from {0} are disabled.<p> Re-enable them with the "{1}" action.
environment.key.description.package_json.install.dependencies=Indicates whether the IDE should install dependencies from discovered 'package.json' in the project files.\nValues are 'true' or 'false'
node.wsl.unavailable.dialog.message=WSL is not available
node.wsl.network.connection.failure=Cannot establish network connection from WSL to Windows host (could be blocked by firewall). More details: https://jb.gg/wsl-firewall
node.npm.cannot_find_project_package_manager.dialog.message=Cannot find a project Node.js package manager
node.npm.package_manager_link.text=package manager
yarn.package_requires_yarn.dialog.message=Package "{0}" requires Yarn {1}.
yarn.pnp.requires.yarn.package_manager.dialog.message=Yarn PnP requires Yarn <a href="">package manager</a>
not.installed.package=Not installed package
package.version.range.info={0, choice, 0#not installed|1#installed: ?|2#installed: {1}}, latest: {2, choice, 0#loading...|1#not found|2#{3}}
package.version.range.hint={0, choice, 0#Allows|1#Allows minor updates:|2#Allows patch updates:} {1} \u2264 version \\&lt; {2}
env.variable.undefined={0} is undefined
env.variable.empty={0} is empty

action.FindDuplicatedIndexedFilesInNodeModulesAction.text=Find Duplicated Indexed Files in node__modules
action.ExplainNodeModulesLibrariesAction.text=Explain node__modules Libraries

yarn.pnp.library_name=Dependencies from {0}

node.package.empty.error.message=Project name is empty
node.package.name.period.error.message=Project folder name should not start with a period
node.package.name.underscore.error.message=Project folder name should not start with an underscore
node.package.name.leading.or.trailing.spaces.error.message=Project folder name should not contain leading or trailing spaces
node.package.name.forbidden.error.message=''{0}'' can''t be used as a project name
node.package.name.core.module.error.message=''{0}'' can''t be used as a project name because it''s the name of a Node.js core module
node.package.name.too.long.error.message=Project folder name should not be longer than 214 characters
node.package.name.capital.letters.error.message=Project folder name should not contain capital letters
node.package.name.special.characters.error.message=Project folder name should not contain special characters (\"~'!()*\")
node.package.name.URL-friendly.characters.error.message=Project folder name should only contain URL-friendly characters

node.package.cannot.find.bin.file.dialog.message=Cannot find a bin file for ''{0}'' package

# Jest
jest.package.placeholder.text=Path to the package directory with jest, react-scripts, or react-scripts alternative
jest.snapshot.label=Jest Snapshot
filetype.js.testing.snapshot.description=JavaScript testing snapshot (Jest)
filetype.js.testing.snapshot.display.name=JavaScript testing snapshot
jest.go.to.snapshot.text=Go to ''{0}'' snapshot
jest.cannot.find.bin.file.for.package.dialog.message=Cannot find a bin file for ''{0}'' package

# Protractor
dialog.message.cannot.locate.wrapper.config.file=Cannot a locate wrapper config file

# Style guides
list.item.google.javascript.style.guide=Google JavaScript Style Guide
list.item.javascript.standard.style=JavaScript Standard Style

# Inlay hints configuration
method.return.types.in.call.chains=Function return types in call chains
type.annotations=Type annotations
parameters.in.parentheses=Parameters in parentheses
parameters.in.parentheses.description=Parameters in parentheses
non.parenthesized.single.parameter=Non-parenthesized single parameter
non.parenthesized.single.parameter.description=Non-parenthesized single parameter
function.returns=Function return types
function.returns.description=Function return types
variables.and.fields=Variables and fields
variables.and.fields.description=Variables and fields
numeric.enum.values=Numeric enum values
# suppress inspection "UnusedProperty" (Editor | Inlay Hints)
inlay.parameters.js.only.show.names.for.all.args=Both literal and non-literal arguments, call expressions, objects, and array initializers.
# suppress inspection "UnusedProperty" (Editor | Inlay Hints)
inlay.parameters.js.only.show.names.for.tagged=<a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#tagged_templates'>Arguments in tagged templates.<a><br>This setting takes effect only over non-literal arguments and is only available when the "Non-Literal arguments" option is enabled.
# suppress inspection "UnusedProperty" (Editor | Inlay Hints)
inlay.parameters.js.only.show.names.for.pipes=<a href='https://github.com/tc39/proposal-pipeline-operator'>Parameters in pipeline operators.</a>
# suppress inspection "UnusedProperty" (Editor | Inlay Hints)
inlay.parameters.js.param.hints.show.names.for.all.args=Both literal and named object parameters in method calls.
# suppress inspection "UnusedProperty" (Editor | Inlay Hints)
inlay.parameters.js.param.hints.show.names.for.tagged=Arguments in tagged templates.
# suppress inspection "UnusedProperty" (Editor | Inlay Hints)
inlay.parameters.angular.show.names.for.all.args=Both literal and named object parameters in Angular HTML templates.
# suppress inspection "UnusedProperty" (Editor | Inlay Hints)
inlay.parameters.angular.show.names.for.pipes=<a href='https://angular.io/guide/pipes'>Pipes in Angular HTML templates.</a>
# suppress inspection "UnusedProperty" (Editor | Inlay Hints)
inlay.parameters.vuejs.show.names.for.all.args=Both literals and named objects.
# suppress inspection "UnusedProperty" (Editor | Inlay Hints)
inlay.parameters.vuejs.show.names.for.filters=<a href='https://v2.vuejs.org/v2/guide/filters.html'>Filters (Vue 2).</a>

# Inlay hints
command.name.add.explicit.value=Add the Explicit Value ''{0}''
action.TypeScriptAddEnumTextInlayAction.text=Add Enum Explicit Value
inlay.hints.usages.text={0,choice, 0#no usages|1#1 usage|2#{0,number}'{1,choice, |1#+}' usages}
inlay.hints.max.one.usage.text={0,choice, 0#no usages|1#Show usages}
code.vision.implementations.hint={0, choice, 1#1 implementation|2#{0,number} implementations}
code.vision.overrides.hint={0, choice, 1#1 override|2#{0,number} overrides}
code.vision.inheritors.hint={0, choice, 1#1 inheritor|2#{0,number} inheritors}
notification.group.code.vision.performance.watcher=JavaScript: code vision performance watcher
code.vision.performance.watcher.notification.title=Code Vision hints evaluation is slow
code.vision.performance.watcher.notification.message=Disabling Code Vision hints may improve performance by reducing CPU load.
code.vision.performance.watcher.notification.configure=Configure\u2026
code.vision.performance.watcher.notification.disable.code.vision=Disable hints
js.code.vision.component.usages=Component usages
js.code.vision.component.usages.action=Show component usages
js.code.vision.component.usages.description=Clickable hint to invoke "Find usages" for a component.
js.code.vision.component.usages.tooltip=Click to find usages of the component

# Libraries
progress.title.downloading.library=Downloading library
progress.title.downloading.documentation=Downloading documentation
successfully.downloaded=Successfully downloaded
failed.to.download=Failed to download
progress.title.downloading.typings=Downloading typings
notify.urls.more=... and {0,number} more

# Structural Search
structural.search.anonymous.functions=Anonymous functions
structural.search.functions=Functions
structural.search.variables=Variables
structural.search.function.calls=Function calls
structural.search.while.loops=While loops
structural.search.constants=Constants
structural.search.classes=Classes
structural.search.empty.functions=Empty functions
structural.search.console.log.calls=Calls to console.log()
structural.search.with.statements=With statements
structural.search.var.statements=Var statements
structural.search.functions.with.boolean.parameters=Functions with boolean parameters
structural.search.comparison.to.self=Comparison to self

# Project Generators
copying.files=copying files
project.generation=project generation
notification.title.cannot.generate=Cannot generate {0}
dialog.message.cannot.find.npx.bundled.with=Cannot find npx bundled with {0}
generating.0=Generating {0}

# Find Usages
js.show.dynamic.usages=Show Dynamic Usages

# Test Runners
action.JasmineGenerateNewSuiteAction.text=Jasmine Suite
action.JasmineGenerateNewSpecAction.text=Jasmine Spec
action.JasmineGenerateBeforeEachMethodAction.text=Jasmine beforeEach
action.JasmineGenerateAfterEachMethodAction.text=Jasmine afterEach
action.QUnitGenerateNewTestAction.text=QUnit Test
action.QUnitGenerateSetupAction.text=QUnit Setup
action.QUnitGenerateTearDownAction.text=QUnit TearDown

# Diagrams
diagram.element.not.found={0} (not found)

# Web frameworks
web.template.file-type.description={0} template

# Completion
js.regex.flag.g=global match - return all matches
js.regex.flag.i=ignore case - case-insensitive match
js.regex.flag.m=multiline - per line match for ^ and $
js.regex.flag.s=dotAll - . matches newlines
js.regex.flag.u=unicode - full Unicode support
js.regex.flag.y=sticky - search at the exact position
js.regex.flag.d=match indices - indices for substring matches


# Other
command.name.create.javascript.file=Create JavaScript file {0}
command.name.create.typescript.file=Create TypeScript file {0}
checkbox.move.simple.expressions.to.field.initializer=Move simple expressions to field initializer
popup.title.choose.class=Choose Class
multiple.inheritance=Multiple inheritance
label.method.should.be.defined=method should be defined
recursive.call=Recursive call
command.name.extract.named.type=Extract named type
inspection.message.reference.includes.files.outside.project=The reference includes files outside the project
progress.title.executing.performance.task.on.files=Executing Performance Task on Files
terminal.add_node_modules_bin_to_path.label=Add ''node_modules/.bin'' from the project root to {0}
label.name.injection=&Name:
reg.exp.tagged.template={0} in ''{1}'' tagged template
unwrap.with.kind=Unwrap ''{0}...''
and.more=and more\u2026
header.declarations.to.be.refactored=Declarations to be refactored
filetype.yarn.lock.display.name=Yarn Lock
filetype.yarn.lock.description=Yarn lock
notification.group.narrowed.types=JavaScript: Coloring of narrowed types disabled
notification.group.nodejs.interpreter=Node.js interpreter path updated
notification.group.nodejs.assistance=Node.js coding assistance failed
notification.group.package.json=Dependencies from package.json available
notification.group.package.json.disabled=Dependencies from package.json: notification disabled
notification.group.linters=JavaScript linters
notification.group.project.generator=JavaScript project generation failed
notification.group.grunt.console=Grunt 'watch' task status changed
notification.group.jest=Jest test execution failed
notification.group.vitest=Vitest execution failed
intention.family.name.surround.with.tag=Surround with tag
intention.name.surround.with.tag=Surround with <{0}>
ignore.unused.option.all=All
ignore.unused.option.before.used=Before used
ignore.unused.option.none=None
template.add.imports=Add unambiguous imports
fetch.client.generator.title=JavaScript Fetch
js.node.services.profiler.disable=Stop Node.js Services Profiling
js.node.services.profiler.enable=Start Node.js Services Profiling
action.NodeServicesProfilerAction.text=Start Node.js Services Profiling