extract.to.method.reference.intention.name=Extraer por referencia de método
merge.parallel.ifs.intention.name=Combinar los ''if''
merge.parallel.ifs.intention.family.name=Fusionar sentencias if paralelas
merge.else.if.intention.name=''else if'' declaración de fusión
merge.else.if.intention.family.name=else if statement merge
change.to.end.of.line.comment.intention.name=end-of-line
change.to.end.of.line.comment.intention.family.name=end-of-line
replace.for.each.loop.with.indexed.for.loop.intention.name=Reemplazar ''for-each'' bucle con indexado '' for '' bucle
replace.for.each.loop.with.iterator.for.loop.intention.name=reemplazar for-each loop con iterator '' for '' loop
replace.for.each.loop.with.indexed.for.loop.intention.family.name=Reemplazar para cada bucle con indexado para bucle
replace.for.each.loop.with.optimized.indexed.for.loop.intention.name=Reemplazar para cada bucle con el bucle optimizado e indexado '' for ''
replace.for.each.loop.with.optimized.indexed.for.loop.intention.family.name=reemplazar for-each loop con optimizado e indexado for loop
replace.for.each.loop.with.iterator.for.loop.intention.family.name=reemplazar para cada bucle con iterador para bucle
replace.do.while.loop.with.while.loop.intention.name='' do while '' loop to ''while'' loop
replace.do.while.loop.with.while.loop.intention.family.name=do Reemplazar un bucle while con un bucle while
expand.boolean.declaration.intention.name=Expandir la declaración booleana en la declaración '' if else ''
expand.boolean.return.intention.name=Expandir retorno booleano a la declaración '' if else ''
expand.boolean.assignment.intention.name=Expandir la asignación booleana a la declaración '' if else ''
expand.boolean.intention.family.name=Expansión booleana
split.else.if.intention.name=''else if'' declaración dividida
split.else.if.intention.family.name=else if declaración dividida
convert.to.nested.if.intention.name=Convertir en múltiples declaraciones ''if''
convert.to.nested.if.intention.family.name=Expandir booleano a múltiples declaraciones if
join.concatenated.string.literals.intention.name=Literales de cadena concatenados
join.concatenated.string.literals.intention.family.name=Literales de cadena concatenados
replace.switch.with.if.intention.name=Reemplazar la declaración '' switch '' con la declaración ''if''
replace.switch.with.if.intention.family.name=reemplaza una instrucción de cambio con una instrucción if
create.assert.intention.name=Crear aserción JUnit
create.assert.intention.family.name=Crear aserción JUnit
merge.if.or.intention.name=Combinar con el siguiente '' si '' usando ||
merge.if.or.intention.family.name=Fusionar sentencias ''if'' secuenciales
merge.if.and.intention.name=Fusionar con ''if'' anidado
merge.if.and.intention.family.name=Fusionar declaraciones ''if'' anidadas
replace.concatenation.with.string.buffer.intention.name=' + '' con '' StringBuffer.append()'
replace.concatenation.with.string.builder.intention.name=' + '' con '' StringBuilder.append()'
replace.concatenation.with.string.buffer.intention.family.name=Reemplace + con StringBuilder.append ()
move.comment.to.separate.line.intention.name=Mover el comentario a una línea separada
move.comment.to.separate.line.intention.family.name=Mover el comentario a una línea separada
change.to.c.style.comment.intention.name=Reemplazar con comentario de bloque
change.to.c.style.comment.intention.family.name=Reemplazar con comentarios de bloque
split.declaration.and.initialization.intention.name=Dividir en declaración e inicializador
split.declaration.and.initialization.intention.family.name=Dividir declaración e inicializador
char.to.string.intention.name=reemplazar el literal de carácter con una cadena
char.to.string.intention.family.name=Reemplazar carácter con cadena
make.call.chain.into.call.sequence.intention.name=Extender la cadena de llamada del método a la secuencia de llamada
make.call.chain.into.call.sequence.intention.family.name=Extender la cadena de llamadas a la secuencia de llamadas
merge.call.sequence.to.chain.intention.name=Fusionar llamadas de métodos secuenciales en una cadena de llamadas
merge.call.sequence.to.chain.intention.family.name=Fusionar llamadas de métodos secuenciales en una cadena de llamadas
detail.exceptions.intention.name=Mostrar detalles de la excepción
detail.exceptions.intention.family.name=Mostrar detalles de la excepción
flip.conditional.intention.name=Invertir ''?\: ''
flip.conditional.intention.family.name=Condición de volteo
replace.shift.with.multiply.intention.family.name=Reemplazar turno con multiplicar
demorgans.intention.family.name=Ley de Demorgan
flip.comparison.intention.family.name=Comparación de volteo
negate.comparison.intention.family.name=Comparación negativa
flip.commutative.method.call.intention.family.name=Invertir llamada a método conmutativo
constant.subexpression.intention.family.name=Calcular el valor constante de la subexpresión
extract.increment.intention.family.name=Extracción incremental
inline.increment.intention.family.name=Incremento/decremento en línea
flip.assert.literal.intention.family.name=Invertir literal de aserción
replace.assert.literal.with.assert.equals.intention.family.name=assertTrue, assertFalse o assertNul con assertEquals
replace.multiply.with.shift.intention.family.name=Reemplazar múltiple con turno
convert.interface.to.class.intention.name=Convertir a declaración ''class''
convert.interface.to.class.intention.family.name=Convertir interfaz a clase
replace.on.demand.import.intention.name=Reemplazar con declaración de importación de clase única
replace.on.demand.import.intention.family.name=Declaración de importación de clase única para reemplazar la declaración de importación bajo demanda
replace.operator.assignment.with.assignment.intention.family.name=Reemplazar la asignación del operador con la asignación
convert.catch.to.throws.intention.name=Reemplaza la sección ''catch'' con la declaración '' throw ''
convert.catch.to.throws.intention.family.name=Reemplace la sección catch con una declaración throw
wrap.vararg.arguments.with.explicit.array.intention.name=argumento de envoltura vararg con creación de matriz implícita
wrap.vararg.arguments.with.explicit.array.intention.family.name=argumento de envoltura vararg con creación de matriz implícita
extract.while.loop.condition.to.if.statement.intention.name=Extraer la condición en la declaración interna ''if''
extract.while.loop.condition.to.if.statement.intention.family.name=while Extraer la condición del bucle en la instrucción if interna
replace.concatenation.with.format.string.intention.name=Reemplaza '' + '' con '' String.format()''
replace.concatenation.with.format.string.intention.name.formatted=Reemplazar '' + '' con '' formatted()''
replace.concatenation.with.format.string.intention.family.name=Reemplaza la concatenación de cadenas con String.format ()
replace.format.string.with.concatenation.intention.name=Reemplazar '' String.format()'' con concatenación
replace.format.string.with.concatenation.intention.family.name=String.format()con concatenación
copy.concatenated.string.to.clipboard.intention.name=Copiar el texto concatenado de la cadena al portapapeles
copy.string.literal.to.clipboard.intention.name=Copiar texto literal de cadena al portapapeles
copy.string.template.text.to.clipboard.intention.name=Copy string template text to the clipboard
copy.concatenated.string.to.clipboard.intention.family.name=Copiar la cadena de texto concatenado al portapapeles
flip.expression.intention.family.name=Invertir expresión binaria
flip.setter.call.intention.family.name=llamada de establecedor inverso
eliminate.parentheses.intention.name=Eliminar paréntesis
eliminate.parentheses.intention.title=Eliminate Parentheses
reverse.for.loop.direction.intention.family.name=reverse para bucle
reverse.for.loop.direction.intention.name=Invertir para bucle
replace.operator.assignment.with.postfix.expression.intention.family.name=Reemplazar la asignación del operador con una expresión de sufijo
replace.postfix.expression.with.operator.assignment.intention.family.name=Reemplazar expresión de sufijo con asignación de operador
replace.postfix.expression.with.assignment.intention.family.name=Reemplazar expresión de sufijo con asignación
replace.assignment.with.postfix.expression.intention.family.name=Reemplazar asignación con expresión postfix
annotate.overridden.methods.intention.family.name=Anotar el método anulado y los parámetros relacionados
annotate.overridden.methods.intention.method.name=Anotar el método anulado con ''{0}''
annotate.overridden.methods.intention.parameters.name=Anotar el mismo parámetro en el método anulado como ''{0}''
replace.arm.with.try.finally.intention.name=\ Reemplazar la declaración '' try-with-resources '' con la declaración '' try-finalmente ''
replace.arm.with.try.finally.intention.family.name=\ Reemplazar sentencias try-with-resources con sentencias try finalmente
merge.nested.try.statements.intention.name=Fusionar declaraciones '' try '' anidadas
merge.nested.try.statements.intention.family.name=Fusionar sentencias try anidadas
obscure.thrown.exceptions.intention.family.name=Reemplazar excepciones en throws cláusula con excepciones únicas más generales
change.modifier.intention.name=Cambiar el controlador de acceso
change.variable.type.to.rhs.type.intention.family.name=Cambiar tipo de variable a tipo de inicializador
unicode.unescape.intention.name=Reemplazar escapes Unicode con caracteres
unicode.unescape.intention.family.name=Reemplace los escapes Unicode con caracteres sin escape
replace.octal.escape.with.unicode.escape.intention.name=Reemplazar escapes octales con escapes Unicode
replace.octal.escape.with.unicode.escape.intention.family.name=Reemplazar escapes octales con escapes Unicode
negate.conditional.intention.name=Negar ''?\:''
negate.conditional.intention.family.name=Negar condicional
objects.require.non.null.intention.name=Usando la expresión ''java.util.Objects.requireNonNull()''
objects.require.non.null.intention.family.name=Usando la expresión ''java.util.Objects.requireNonNull()''
postfix.prefix.intention.family.name=Invertir expresión de prefijo/sufijo
replace.conditional.with.boolean.expression.intention.family.name=Reemplazar expresión condicional con expresión booleana
replace.conditional.with.boolean.expression.intention.name=Reemplazar ''?\: '' con una expresión booleana
replace.with.arrays.as.list.intention.family.name=Reemplazar con ''Arrays.asList()''
replace.with.mutable.collection.intention.family.name=Reemplazar con colección mutable
replace.with.mutable.collection.intention.intention.name=Replace with ''{0}''
flip.smth.intention.name=Invertir ''{0}''
flip.smth.intention.name1=Invertir ''{0}'' (cambio semántico)
flip.comparison.intention.name=Invertir ''{0}'' a ''{1}''
negate.comparison.intention.name=Negar ''{0}''
negate.comparison.intention.name1=Negar ''{0}'' a ''{1}''
flip.commutative.method.call.intention.name=Invertir ''.{0}()''
flip.commutative.method.call.intention.name1=Invertir ''.{0}()'' (la semántica puede cambiar)
constant.expression.intention.name=Calcular el valor constante de ''{0}''
press.escape.to.remove.highlighting.message=Presione ESC para eliminar el resaltado.
extract.increment.intention.name=Extraer ''{0}''
inline.increment.intention.name='{0}'
replace.assert.literal.with.assert.equals.intention.name=' {0}()'' con '' assertEquals ({1},...) '
replace.assert.literal.with.assert.equals.intention.name2=Reemplazar '' {0}()'' con '' assertEquals()''
replace.assert.literal.with.assert.equals.intention.name1=Reemplazar '' {0}()'' con '' assertEquals (..., {1},...) ''
adapter.to.listener.intention.name='{0}'' reemplace la extensión con la implementación de '' Listener '
adapter.to.listener.intention.family.name=Reemplazar la extensión del adaptador con la implementación del oyente
change.variable.type.to.rhs.type.intention.name=Declarar ''{0}'' como tipo ''{1}''
convert.datapoints.fix.family.name=Convertir @DataPoint(s) titular de la anotación
make.method.default.family.name=Hacer método predeterminado
intention.name.make.default=Hacer ''{0}()'' como predeterminado
create.missing.switch.branches.family.name=Crear rama faltante ''switch''
intention.name.replace.field.or.method=Reemplazar con @{0} {1, choice, 0\#campo|1\#método}
show.example.date.time.output.intention.family.name=Show example date time output
invalid.pattern.hint.text=Invalid pattern
0.is.declared.in.1.but.when.public.should.be.declared.in.a.file.named.2={0} está declarado en {1} pero cuando público se debe declarar en un archivo llamado {2}
0.will.have.incompatible.access.privileges.with.super.1={0} tendrá privilegios de acceso incompatibles con el padre {1}.
0.will.no.longer.be.visible.from.overriding.1={0} ya no será visible al anular {1}
0.will.have.incompatible.access.privileges.with.overriding.1={0} tendrá privilegios de acceso incompatibles con la invalidación {1}.
0.already.extends.1.and.will.not.compile.after.converting.2.to.a.class={0} implementa {2} que ya se extiende a {1} y no se compilará después de convertir {2} en una clase.
0.implementing.1.will.not.compile.after.converting.1.to.a.class={0} implementing {1} will not compile after converting {1} to a class
0.will.not.compile.after.converting.1.to.a.class={0} will not compile after converting {1} to a class
