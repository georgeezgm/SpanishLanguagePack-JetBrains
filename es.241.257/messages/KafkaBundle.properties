action.Kafka.AddToFavoriteAction.text=즐겨찾기에 추가
action.Kafka.DeleteSchemaAction.description=스키마 레지스트리 주제를 삭제합니다
action.Kafka.DeleteSchemaAction.text=스키마 삭제
action.Kafka.GlobalCreateKafkaConnection.text=Kafka 연결 생성
action.Kafka.RemoveFromFavoriteAction.text=즐겨찾기에서 제거
action.clear.output=출력 지우기
action.clear.partition.multi.message=파티션 {0}(으)로 부터 모든 기록을 삭제할까요? 이 액션은 되돌릴 수 없습니다.
action.clear.partition.single.message=파티션 "{0}"의 모든 기록을 삭제할까요? 이 액션은 되돌릴 수 없습니다.
action.clear.partition.title=파티션 지우기
action.clear.topic.single.message=주제 "{0}"의 모든 기록을 삭제할까요? 이 액션은 되돌릴 수 없습니다.
action.consume.start.title=소비 시작
action.consume.stop.title=소비 중지
action.create.new.version=제목 편집
action.delete.consumer.group.single.message=컨슈머 그룹 "{0}"을(를) 삭제할까요? 이 액션은 되돌릴 수 없습니다.
action.delete.topic.multi.message=토픽 {0}개를 삭제하시겠어요?
action.delete.topic.single.message=토픽 ''{0}''을(를) 삭제하시겠어요?
action.delete.topic.title=삭제
action.delete.version.text=버전 삭제
action.kafka.ClearPartition.text=파티션 지우기
action.kafka.ClearTopicAction.text=주제 지우기
action.kafka.CloneSchemaAction.text=스키마 복제
action.kafka.CreateSchemaAction.text=스키마 생성
action.kafka.CreateTopicAction.text=토픽 생성
action.kafka.DeleteConsumerGroupAction.text=컨슈머 그룹 삭제
action.kafka.DeleteTopicAction.text=토픽 삭제
action.kafka.LoadFromCsv.title=CSV에서 로드
action.kafka.LoadFromCsv.warning.msg=<p>주제를 생성하려면 다음 대화상자에서 쉼표를 구분자로 사용하는 CSV 파일을 선택하세요. 허용된 서식\:</p><ul><li>헤더가 없는 두 개의 열\: 키, 값.</li><li>헤더가 없는 단일 열\: 값(키는 null입니다).</li><li>'key' 및/혹은 'value'가 헤더에 있는 열. 다른 열은 무시됩니다.</li></ul>
action.kafka.ResetOffsetsAction.text=오프셋 재설정
action.kafka.create.consumer.text=Kafka 컨슈머 생성
action.kafka.create.producer.text=Kafka 프로듀서 생성
action.open.details=세부 정보 열기
action.produce.stop=생성 중단
action.remove.preset=프리셋 제거
action.remove.schema.confirm.dialog.msg.permanent=스키마 "{0}"은(는) 이미 임시 삭제되었습니다. 영구적으로 삭제할까요?
action.remove.schema.confirm.dialog.msg.soft=구성표 "{0}"을(를) 삭제할까요?
action.remove.schema.confirm.dialog.title=삭제
action.remove.version.confirm.dialog.msg=대상 ''{1}''의 버전 {0}을(를) 삭제하시겠어요?
action.remove.version.confirm.dialog.option=영구 삭제
action.save.preset=프리셋 저장
action.show.favorite.schemas=즐겨찾기 스키마 표시
action.table.stats=테이블 통계
all.topics=모든 주제
border.title.ssl.settings=SSL 설정
column.name.default=디폴트
column.name.documentation=문서
column.name.name=이름
column.name.required=필수
column.name.type=타입
config.name.default=Kafka
connection.admin.is.not.initialized=Kafka 관리 클라이언트가 초기화되지 않았습니다
connection.check.port.success.but.next.error=URL에 도달할 수 있으나 Kafka가 연결할 수 없습니다. 올바른 인증 메커니즘을 설정했는지 확인하세요
connection.error.tunnel.for.sinlgle.broker=단일 브로커 URL의 SSH 터널만 생성할 수 있습니다
connection.is.not.found.in.config=연결 프로퍼티에서 {0}을(를) 찾을 수 없습니다
connection.kafka.registry.is.not.available=Kafka 레지스트리를 사용할 수 없습니다
consume.from.topic=토픽에서 소비
consumer.details.empty=자세한 정보는 데이터 테이블의 행을 참조하세요
consumer.error.topic.empty=토픽이 선택되지 않았습니다
consumer.error.topic.empty.title=컨슈머 오류
consumer.filter.type.contains=포함
consumer.filter.type.none=없음
consumer.filter.type.notContains=포함 안 함
consumer.filter.type.regexp=정규식
consumer.group.dialog.change.offset.datetime.label=날짜 및 시간\:
consumer.group.dialog.change.offset.offset.label=오프셋\:
consumer.group.dialog.change.offset.strategy.label=전략\:
consumer.group.lag=지연
consumer.last.update.label.canceled=취소됨
consumer.last.update.label.comment={0} 업데이트됨
consumer.last.update.label.error=오류
consumer.last.update.label.initializing=실행 중…
consumer.limit.type.date=날짜
consumer.limit.type.none=없음
consumer.limit.type.partitionMaxSize=파티션 최대 크기
consumer.limit.type.partitionRecords=파티션 레코드 번호
consumer.limit.type.topicMaxSize=토픽 최대 크기
consumer.limit.type.topicRecords=토픽 레코드 번호
consumer.partition.not.found=토픽 {0}의 선택된 파티션이 발견되지 않았습니다.
consumer.preset.filter=필터\: {0}
consumer.preset.header.key=헤더 키\: {0}
consumer.preset.header.value=헤더 값\: {0}
consumer.preset.key=키\: {0}
consumer.preset.limit=제한 {0} {1}
consumer.preset.no.topic=토픽 없음
consumer.preset.topic=주제\: {0}
consumer.preset.value=값\: {0}
consumer.producer.format.type=타입\:
consumer.producer.key.group=키
consumer.producer.value.group=값
consumer.record.error=예외\:
consumer.record.key=키\:
consumer.record.keysize=키 크기\:
consumer.record.offset=오프셋\:
consumer.record.partition=파티션\:
consumer.record.timestamp=타임스탬프\:
consumer.record.topic=주제\:
consumer.record.value=값\:
consumer.record.valuesize=값 크기\:
consumer.records.limit=컨슈머 레코드 제한
consumer.records.limit.descr=레코드 수가 제한에 도달하면 클라이언트상의 오래된 레코드가 정리됩니다.<br>음수, '0' 또는 빈 값은 제한이 없음을 의미합니다.
consumer.start.type.beginning=처음부터
consumer.start.type.consumerGroup=컨슈머 그룹
consumer.start.type.lastHour=지난 1시간
consumer.start.type.latestOffsetMinusX=최신 오프셋 - X
consumer.start.type.now=최신
consumer.start.type.offset=처음부터의 오프셋
consumer.start.type.specificDate=특정 날짜
consumer.start.type.today=오늘
consumer.start.type.yesterday=어제
consumer.table.awaiting=데이터 대기 중
create.topic.leave.empty.for.default=디폴트 값 사용
custom.shema.source.type.file=파일
custom.shema.source.type.implicit=명시적
data.BdtTopicPartition.endOffset=종료 오프셋
data.BdtTopicPartition.inSyncReplicasCount=동기 복제 개수
data.BdtTopicPartition.leader=리더
data.BdtTopicPartition.partitionId=파티션 ID
data.BdtTopicPartition.replicas=복제
data.BdtTopicPartition.startOffset=시작 오프셋
data.BdtTopicPartition.topic=주제
data.ConsumerGroupPresentable.consumerGroup=컨슈머 그룹
data.ConsumerGroupPresentable.state=상태
data.KafkaSchemaInfo.compatibility=호환성
data.KafkaSchemaInfo.description=설명
data.KafkaSchemaInfo.isSoftDeleted=임시 삭제됨
data.KafkaSchemaInfo.name=이름
data.KafkaSchemaInfo.schemaStatus=스키마 상태
data.KafkaSchemaInfo.type=타입
data.KafkaSchemaInfo.updatedTime=업데이트된 시간
data.KafkaSchemaInfo.version=버전
data.SchemaRegistryFieldsInfo.default=디폴트
data.SchemaRegistryFieldsInfo.description=설명
data.SchemaRegistryFieldsInfo.id=ID
data.SchemaRegistryFieldsInfo.name=이름
data.SchemaRegistryFieldsInfo.required=필수
data.SchemaRegistryFieldsInfo.type=타입
data.TopicConfig.defaultValue=기본값
data.TopicConfig.name=이름
data.TopicConfig.value=값
data.TopicPresentable.inSyncReplicas=동기 복제
data.TopicPresentable.messageCount=메시지 수
data.TopicPresentable.name=이름
data.TopicPresentable.noLeaders=리더 없음
data.TopicPresentable.partitions=파티션
data.TopicPresentable.replicas=복제
data.TopicPresentable.replicationFactor=복제 계수
data.TopicPresentable.underReplicatedPartitions=복제된 파티션 아래
dialog.create.topic.name=이름\:
dialog.create.topic.num.partition=파티션 개수\:
dialog.create.topic.replication.factor=복제 계수\:
diff.dialog.button.update=업데이트
diff.dialog.title=스키마 간 차이
error.configuration.glue.is.not.setup=Glue 스키마 레지스트리가 구성되지 않았습니다
error.confluent.registry.url.empty=Confluent 레지스트리 URL을 제공하세요
error.output.row.key=오류
error.producer.title=Kafka 프로듀서
error.schema.infinite.recursion=재귀 참조로 인해 검증할 수 없습니다
error.schema.is.not.chosen=스키마를 선택하세요.
error.ssl.key.and.ssl.certificate.should.be.defined.together='ssl.key.location'과 'ssl.certificate.location'은 같이 정의되어야 합니다
error.start.consumer=컨슈머 오류
error.topic.is.not.chosen=주제 선택.
exception.message.csv.is.empty=CSV 파일은 빈 {0}입니다
exception.message.kafka.change.offset.max.offset.limit=토픽 ''{0}''의 파티션 ''{1}'' 내에서 종료 오프셋은 {3}이기 때문에 오프셋을 {2}(으)로 변경할 수 없습니다
exception.message.kafka.change.offset.min.offset.limit=토픽 ''{0}''의 파티션 ''{1}'' 내에서 시작 오프셋은 {3}이기 때문에 오프셋을 {2}(으)로 변경할 수 없습니다
exportable.BdtKafkaConfigTemplate.presentable.name=Big Data Tools Kafka 컨슈머/프로듀서 설정
exportable.KafkaSettings.presentable.name=Big Data Tools Kafka 도구 창 설정
field.type.base64=Bytes(Base64)
field.type.custom.avro=Avro(사용자 지정)
field.type.custom.protobuf=Protobuf(사용자 지정)
field.type.double=Double
field.type.float=Float
field.type.integer=정수
field.type.json=JSON
field.type.long=Long
field.type.null=없음
field.type.registry=스키마 레지스트리
field.type.string=String
field.viewer.type.auto=자동
field.viewer.type.base64=Base64
field.viewer.type.json=JSON
field.viewer.type.text=텍스트
generate.random.data=무작위 데이터 생성
gutter.action.observe.messages.in.topic=주제 내의 메시지 관찰
gutter.action.opens.kafka.consumer.ui.description=Kafka 컨슈머 UI 열기
gutter.action.opens.kafka.producer.ui.description=Kafka 프로듀서 UI 열기
gutter.action.send.messages.to.topic=주제로 메시지 보내기
gutter.action.setup.connection=Kafka 연결 설정
gutter.action.setup.connection.description=IDE에서 Kakfa 클러스터로의 연결 생성
gutter.name.kafka.configuration.in.spring.boot=Spring Boot 내의 Kafka 구성
kafka.access.certificate.location=액세스 인증서\:
kafka.access.key.certificate.title=액세스 인증서 위치 선택
kafka.access.key.location=액세스 키\:
kafka.access.key.location.title=액세스 키 위치 선택
kafka.auth.aws_iam=AWS IAM
kafka.auth.basic=기본 인증
kafka.auth.bearer=베어러
kafka.auth.enable.server.host.name.indetification=서버 호스트 이름 검증
kafka.auth.method.label=인증\:
kafka.auth.none=없음
kafka.auth.sasl.use.ssl=SSL 활성화
kafka.auth.sasls=SASL
kafka.auth.ssl=SSL
kafka.auth.type.kerberos=Kerberos
kafka.auth.type.plain=일반
kafka.auth.type.scram256=SCRAM-SHA-256
kafka.auth.type.scram512=SCRAM-SHA-512
kafka.broker.group.title=Kafka 브로커
kafka.ca.certificate.location=CA 인증서\:
kafka.ca.certificate.title=CA 인증서 위치 선택
kafka.key.password=키 비밀번호\:
kafka.keystore.location=키스토어 위치\:
kafka.keystore.password=키스토어 비밀번호\:
kafka.password=비밀번호\:
kafka.plugin.installed=Kafka 플러그인이 설치되었습니다
kafka.plugin.try.it=시도
kafka.producer.action.produce.title=생성
kafka.property.source.field=묵시적
kafka.property.source.file=파일에서
kafka.property.source.label=프로퍼티 소스\:
kafka.registry.proxy.label=프록시 URL\:
kafka.registry.use.broker.ssl.settings.checkbox=브로커 SSL 설정 사용
kafka.registry.use.proxy=프록시 사용
kafka.sasl.mechanism=SASL 메커니즘\:
kafka.ssl.use.keystore=Keystore 클라이언트 인증 사용
kafka.token=토큰\:
kafka.truststore.location=Truststore 위치\:
kafka.truststore.location.dialog.title=Truststore 위치 선택
kafka.truststore.password=Truststore 비밀번호\:
kafka.username=사용자 이름\:
kafka.validation.error.label=유효성 검사 오류
label.filter.head.key=헤더 키\:
label.filter.head.value=헤더 값\:
label.filter.key=키\:
label.filter.limit=제한
label.filter.value=값\:
label.key.type=키 타입\:
label.value.type=값 타입\:
link.label.compare=비교…
message.title=Kafka
notification.generate.failed.text=주어진 스키마용 무작위 데이터를 생성할 수 없습니다
notification.generate.failed.title=생성 실패
notification.group.kafka=Kafka 플러그인
open.settings.action.text=설정
output.column.duration=길이
output.column.key=키
output.column.offset=오프셋
output.column.partition=파티션
output.column.timestamp=타임스탬프
output.column.value=값
produce.to.topic=토픽으로 생성
producer.asks=ACK\:
producer.compression=압축\:
producer.config.link.load.file=파일 다운로드…
producer.config.link.upload.file=파일 업로드…
producer.config.random.generation.enabled=무작위 생성 활성화됨
producer.error.topic.empty=토픽이 선택되지 않았습니다
producer.field.double.invalid="{0}"은(는) 올바른 double 값이 아닙니다
producer.field.float.invalid="{0}"은(는) 올바른 float 값이 아닙니다
producer.field.int.invalid="{0}"은(는) 올바른 정수 값이 아닙니다
producer.field.long.invalid="{0}"은(는) 올바른 long 값이 아닙니다
producer.flow.generate.random.key=무작위 키 생성
producer.flow.generate.random.value=무작위 값 생성
producer.flow.interval=간격(ms)\:
producer.flow.load.from.file=CSV에서 로드…
producer.flow.load.from.file.invalidate=무효화
producer.flow.mode.auto=자동
producer.flow.mode.label=모드\:
producer.flow.mode.manual=수동
producer.flow.records.count=1회당 레코드 개수\:
producer.flow.stop.conditions.count=생성된 레코드\:
producer.flow.stop.conditions.elapsed.time=경과한 시간(ms)\:
producer.flow.stop.conditions.title=조건 중단
producer.forcePartition=파티션\:
producer.forcePartition.emptytext=모두
producer.group.flow=Flow
producer.idempotence.comment=활성화 시 ACK가 모두로 설정됩니다
producer.idempotence.label=멱등성
producer.json.value.comment=스키마에 대응하는 페이로드를 JSON 형식으로 제공하세요.
producer.key=키\:
producer.preset.apply=프리셋을 설정에 적용
producer.preset.key=키 [{0}]\: {1}
producer.preset.no.key=키 없음
producer.preset.no.topic=토픽 없음
producer.preset.no.value=값 없음
producer.preset.none=없음
producer.preset.topic=토픽\: {0}
producer.preset.value=값 [{0}]\: {1}
producer.title.headers=Headers
producer.title.options=옵션
producer.topics=토픽\:
producer.value=값\:
producer.wrong.partition=토픽 {1}의 잘못된 파티션 {0}
property.file.is.not.found=Kafka 프로퍼티 파일이 발견되지 않았습니다 {0}
record.info.headers=Headers
record.info.metadata=메타데이터
registry.add.schema.dialog.title=스키마 추가
registry.format.avro=Avro
registry.format.json=JSON
registry.format.protobuf=Protobuf
registry.format.topic.record=토픽  레코드 이름
registry.format.unknown=알 수 없음
registry.info.dialog.title=스키마 ''{0}''
registry.key=키
registry.strategy.custom.subject=사용자 지정 이름
registry.strategy.record=레코드 이름
registry.strategy.topic=토픽 이름
registry.subject.combobox.default.name=등록 스키마 선택
registry.value=값
schema.info.arn=ARN\:
schema.info.compability=호환성 모드\:
schema.info.description=설명\:
schema.info.format=데이터 형식\:
schema.info.last.updated=마지막 업데이트\:
schema.info.name=이름\:
schema.info.registry=레지스트리\:
schema.info.version=최신 버전\:
schema.invalid.text={0}을(를) 검증할 수 없습니다. 스키마를 수정하세요.
schema.invalid.title=유효하지 않은 스키마
schema.name.must.be.not.blank=스키마 이름을 입력하세요
schema.name.must.be.not.end.with.slash=스키마 이름은 /로 끝날 수 없습니다
schema.registry.add.schema.dialog.field.computed.name=연산된 이름\:
schema.registry.add.schema.dialog.field.custom.name=사용자 지정 이름\:
schema.registry.add.schema.dialog.field.format=형식\:
schema.registry.add.schema.dialog.field.key.value=이름 접미사\:
schema.registry.add.schema.dialog.field.record=레코드 이름\:
schema.registry.add.schema.dialog.field.schema.name=스키마 이름\:
schema.registry.add.schema.dialog.field.strategy=전략\:
schema.registry.add.schema.dialog.field.topic=주제\:
schema.registry.type.label=타입
schema.type.confluent=Confluent
schema.type.glue=Glue
schema.type.none=없음
schema.version=버전 {0}
schema.version.is.not.found=선택되지 않음
schema.view.type.schema=원시 뷰
schema.view.type.structure=트리 뷰
schemas.empty.text=스키마를 정의하여 데이터 호환성 확보합니다.
schemas.empty.text.create.link=스키마 생성
schemas.empty.text.filter=필터와 일치하는 스키마가 없습니다
settings.advanced=고급 설정
settings.broker.type.cloud=클라우드
settings.cloud.provider=제공자\:
settings.cloud.setup.title=연결 방법
settings.cloud.type.confluent=Confluent
settings.cloud.type.msk=AWS MSK
settings.confluent.conf.comment=Kafka 브로커와 스키마 레지스트리 프로퍼티에 모두 이 필드를 사용합니다
settings.confluent.configuration=구성\:
settings.confluent.setup.desc=<ol><li><b>https\://confluent.cloud/home</b>을 여세요.</li><li><b>환경 > 클러스터 > 클라이언트 > Java로 이동하세요</b>.</li><li>API 키를 제공하거나 새로 생성하세요.</li><li>프로퍼티 블록을 복사하고 구성 필드에 붙여넣으세요.</li></ol>
settings.consumer.group.label=컨슈머 그룹\:
settings.consumer.offset.tab=컨슈머 오프셋
settings.consumers.tab=컨슈머 그룹
settings.filter=필터\:
settings.filters.from=시작점\:
settings.filters.from.not.available.with.consumer.group=컨슈머 그룹이 오프셋을 정의합니다
settings.filters.limit=제한\:
settings.format.registry.schema=스키마\:
settings.glue.registry.name=레지스트리 이름\:
settings.glue.registry.title=Glue 레지스트리 선택
settings.group.name=Kafka
settings.label.topics=토픽\:
settings.msk.setup.desc=<ol><li>AWS 계정에 로그인하고 MSK 클러스터를 선택하세요.</li><li><b>클라이언트 정보 보기</b>를 클릭하고 <b>공개 엔드포인트</b>의 내용을 복사하세요.</li><li>IDE 내 Kafka 연결의 <b>부트스트랩 서버</b> 필드에 붙여 넣으세요.</li></ol>
settings.partitions=파티션\:
settings.partitions.not.available.if.consumer.group.setup.comment=컨슈머 그룹과 파티션 필터를 사용할 수 없습니다
settings.payload.row.label=페이로드\:
settings.properties=고급 프로퍼티\:
settings.properties.file=프로퍼티 파일\:
settings.properties.file.browse=Kafka 프로퍼티 파일
settings.property.source=구성 소스\:
settings.property.source.file=프로퍼티
settings.registry.tab=스키마 레지스트리
settings.registry.title=스키마 레지스트리(선택 사항)
settings.registry.url=URL\:
settings.registry.url.hint=http\://localhost\:8081
settings.title.other=기타
settings.title.partitions=파티션
settings.title.range.filters=범위 및 필터
settings.topics.tab=주제
settings.url=부트스트랩 서버\:
settings.url.must.be.non.empty.hint=부트스트랩 서버는 공백일 수 없습니다
settings.url.text.empty=server1,server2
settings.url.text.hint=',' 구분 기호를 사용하여 브로커 목록 지정(server1,server2)
show.edit.schema.diff.new.name=새 스키마
show.edit.schema.diff.prev.name=최신 버전\:
show.edit.schema.diff.title=대상 업데이트\: {0}
show.edit.schema.diff.version=버전 {0}\:
show.favorite.topic=즐겨찾기 주제 표시
show.full.topic.config=전체 구성 표시
show.full.topic.config.hint=전체 구성 표시
show.internal.topic=내부 토픽 표시
show.schema.info=스키마 표시
ssh.tunnel.enable.notification=SSH 터널은 Bootstrap 서버에서 지정한 노드에 처음으로 직접 연결할 때만 사용됩니다. Kafka 클러스터 내의 다른 브로커로 연결하려면 현재 컴퓨터(클라이언트)에서 브로커를 액세스할 수 있는지 확인하세요.
ssl.type.ca.certificate=인증서와 키
ssl.type.truststore.keystore=Truststore와 키스토어
table.stats.count=기록\:
table.stats.count.per.sec=레코드/초\:
table.stats.count.updates=업데이트\:
table.stats.count.updates.per.sec=업데이트/초\:
table.stats.elapsed=경과함\:
table.stats.size=레코드 크기\:
task.change.offset=오프셋 변경
text.pasting.json.or.csv.available=여기에 CSV와 JSON을 붙여넣을 수 있습니다
toggle.data=데이터
toggle.details=세부 정보
toggle.presets=프리셋
toggle.settings=설정
toolwindow.title=Kafka
topic.not.found=토픽 {0}을(를) 찾을 수 없습니다
topic.schema.empty.text=메시지 {0} 스키마를 설정하여 데이터 호환성 확보합니다.
topic.schema.empty.text.create.link=스키마 설정
topic.schema.view.type.key=식별자
topic.schema.view.type.topic=주제
topic.schema.view.type.value=Value
topic.tab.configs=구성
topic.tab.partitions=파티션
topic.tab.schema=스키마
topic.tab.schema.key=키 스키마
topic.tab.schema.value=값 스키마
topics.0.partitions.1.urp.2.no.leader.3=주제\: {0}  파티션\: {1}  URP\: {2}  리더 없음\: {3}
topics.empty.text=주제를 찾을 수 없습니다
topics.empty.text.filter=필터와 일치하는 주제가 없습니다
topics.empty.text.filter.additional=필터 지우기
topics.text.create.link=토픽 생성
update.dialog.title=스키마 업데이트
