action.AddToISuite.text=JUnit 패턴 도구에 추가
action.excludeFromSuite.text=도구에서 제외
action.text.test.category={0} 테스트
action.text.test.tags={0} 테스트
action.text.test.unknown.target=알 수 없음
cannot.browse.test.inheritors.dialog.title=TestCase 상속자를 찾을 수 없음
category.interface.dialog.title=카테고리 인터페이스
category.is.not.specified.error.message=카테고리가 지정되지 않았습니다
category.label=카테고리
change.list.label=Lista de cambios
class.isnt.inheritor.of.testcase.error.message={0} 은(는) TestCase의 상속자가 아닙니다
class.not.test.error.message=클래스 ''{0}''은(는) 테스트가 아닙니다
combobox.changelists.all=모두
configuration.not.specified.message=구성 테스트 유형이 지정되지 않았습니다. {0}
create.setup.dialog.message=메서드 setUp은 이미 존재하지만 {0}(으)로 어노테이션 처리되지 않았습니다. 어노테이션 처리하시겠어요?
create.setup.dialog.title=setUp 메서드 생성
default.junit.config.empty.category=유효하지 않음
default.junit.config.name.all.in.module=Todos en {0}
default.junit.config.name.all.in.package.in.module={1}의 {0}
default.junit.config.name.category=@Category({0})
default.junit.config.name.tags=태그 ({0})
default.junit.config.name.temp.suite=임시 도구
default.junit.config.name.whole.project=전체 프로젝트
default.junit.configuration.name=<이름 없음>
dialog.message.failed.to.resolve.maven.id={0} 해결 실패
dialog.message.no.unique.id.specified.exception=고유한 ID가 지정되지 않음
dialog.title.preparing.test=테스트 준비 중
directory.0.is.not.found.error.message=디렉터리 ''{0}'' 을(를) 찾을 수 없음
directory.is.not.specified.error.message=디렉터리가 지정되지 않았습니다
directory.label=경로
directory.not.found.error.message=디렉터리 ''{0}''을(를) 찾을 수 없습니다
expected.exception.never.thrown.display.name=테스트 메서드 본문에 필요한 예외가 던져지지 않음
expected.exception.never.thrown.problem.descriptor=필요한 <code>\#ref</code>이(가) ''{0}()'' 본문에서 전혀 던져지지 않습니다 \#loc
fix.data.provider.create.method.fix.name=데이터 공급자 메서드 '@Parameters public static Iterable<Object> parameters()' 생성
fix.data.provider.multiple.methods.problem=클래스 <code>\#ref</code>에 여러 @Parameters 데이터 공급자 메서드가 있습니다
fix.data.provider.signature.family.name=데이터 공급자 메서드 시그니처 수정
fix.data.provider.signature.fix.name=메서드 시그니처를 ''{0}''(으)로 변경
fix.data.provider.signature.incorrect.problem=데이터 공급자 메서드 <code>\#ref()</code>에 잘못된 시그니처가 있습니다
fix.data.provider.signature.missing.method.problem=매개변수화된 테스트 클래스 <code>\#ref</code>에 '@Parameters' 어노테이션이 추가된 데이터 공급자 메서드가 없습니다
fork.mode.label=포크 모드(&F)\:
fork.mode.name=포크 모드
inspection.parameterized.parameters.static.collection.display.name=데이터 공급자 메서드가 없는 매개변수화된 테스트 클래스
junit.config.with.parameter.0=(매개변수 ''{0}'' 포함)
junit.configuration.across.module.dependencies.radio=모듈 종속성 전체(&L)
junit.configuration.class.label=클래스(&C)\:
junit.configuration.description=JUnit 테스트 구성
junit.configuration.display.name=JUnit
junit.configuration.fork.mode.class=클래스
junit.configuration.fork.mode.method=메서드
junit.configuration.fork.mode.none=Ninguno
junit.configuration.fork.mode.repeat=반복
junit.configuration.in.single.module.radio=단일 모듈에서(&I)
junit.configuration.in.whole.project.radio=전체 프로젝트에서(&W)
junit.configuration.kind.all.in.directory=디렉터리 내 모든 항목
junit.configuration.kind.all.in.package=패키지 내 모든 항목
junit.configuration.kind.by.pattern=패턴
junit.configuration.kind.by.tags=태그
junit.configuration.kind.by.unique.id=UniqueId
junit.configuration.kind.category=카테고리
junit.configuration.kind.class=클래스
junit.configuration.kind.method=메서드
junit.configuration.method.label=메서드(&E)\:
junit.configuration.package.label=패키지(&G)\:
junit.configuration.repeat.mode.n.times=N회
junit.configuration.repeat.mode.once=한 번
junit.configuration.repeat.mode.until.failure=실패할 때까지
junit.configuration.repeat.mode.until.stopped=중단될 때까지
junit.configuration.repeat.mode.until.success=성공할 때까지
junit.configuration.search.for.tests.label=테스트 검색\:
junit.entry.point.suggest.package.private.visibility.junit5=junit 5 테스트에 package-private 가시성 수준 제안
junit.inspections.group.name=JUnit
junit.not.found.in.module.error.message=모듈 ''{0}''에서 JUnit을 찾을 수 없습니다
junit3.style.test.method.in.junit4.class.display.name=JUnit 4 클래스의 이전 스타일 JUnit 테스트 메서드
junit3.style.test.method.in.junit4.class.problem.descriptor=JUnit 4 클래스에 이전 스타일 JUnit 테스트 메서드 <code>\#ref()</code>이(가) 있습니다 \#loc
junit5.migration.description=JUnit 4 테스트 어노테이션을 새 Jupiter 어노테이션으로 전송할 경우 빨간 코드가 생길 수 있습니다. 어설션은 마이그레이션되지 않습니다. 완전히 자동으로 변환 가능한 테스트만 마이그레이션하려면 'Java | JUnit 이슈 | JUnit 4 테스트를 JUnit 5 검사로 변경 가능' 검사를 확인하세요.
jvm.inspections.junit.assertequals.may.be.assertsame.display.name='assertEquals()'가 'assertSame()'이 될 수 있음
jvm.inspections.junit.assertequals.may.be.assertsame.problem.descriptor=<code>\#ref</code>이(가) 'assertSame()'이 될 수 있습니다 \#loc
jvm.inspections.junit.assertequals.on.array.display.name=배열에서 'assertEquals()' 호출
jvm.inspections.junit.assertequals.on.array.problem.descriptor=<code>\#ref()</code>이(가) 배열에서 호출됩니다 \#loc
jvm.inspections.junit.ignored.test.class.problem.descriptor=테스트 클래스 ''{0}''이(가){1, choice, 1\#|2\# 이유 없이} 무시/비활성화되었습니다 \#loc
jvm.inspections.junit.ignored.test.display.name=JUnit 테스트에 '@Ignore'/'@Disabled' 어노테이션 추가
jvm.inspections.junit.ignored.test.ignore.reason.option=이유 없이 사용된 어노테이션만 보고
jvm.inspections.junit.ignored.test.method.problem.descriptor=테스트 메서드 ''{0}()''이(가){1, choice, 1\#|2\# 이유 없이} 무시/비활성화되었습니다 \#loc
jvm.inspections.junit.malformed.annotated.double.descriptor=''@{1}'' 어노테이션이 추가된 {0, choice, 0\#필드|1\#메서드} <code>\#ref</code>은(는) {2} 및 {3}이어야 합니다
jvm.inspections.junit.malformed.annotated.double.typed.descriptor=''@{1}'' 어노테이션이 추가된 {0, choice, 0\#필드|1\#메서드} <code>\#ref</code>은(는) {2} 및 {3}이고 ''{4}'' 타입이어야 합니다
jvm.inspections.junit.malformed.annotated.method.double.param.double.descriptor=''@{0}'' 어노테이션이 추가된 메서드 <code>\#ref</code>은(는) {1} 및 {2}이어야 하며 매개변수 ''{3}'' 및 ''{4}''을(를) 선언하면 안 됩니다
jvm.inspections.junit.malformed.annotated.method.double.param.single.descriptor=''@{0}'' 어노테이션이 추가된 메서드 <code>\#ref</code>은(는) {1} 및 {2}이어야 하며 매개변수 ''{3}''을(를) 선언하면 안 됩니다
jvm.inspections.junit.malformed.annotated.method.double.typed.param.double.descriptor=''@{0}'' 어노테이션이 추가된 메서드 <code>\#ref</code>은(는) {1} 및 {2}이고 ''{3}'' 타입이어야 하며 매개변수 {4} 및 ''{5}''을(를) 선언하면 안 됩니다
jvm.inspections.junit.malformed.annotated.method.double.typed.param.single.descriptor=''@{0}'' 어노테이션이 추가된 메서드 <code>\#ref</code>은(는) {1} 및 {2}이고 ''{3}'' 타입이어야 하며 매개변수 ''{4}''을(를) 선언하면 안 됩니다
jvm.inspections.junit.malformed.annotated.method.param.double.descriptor=''@{0}'' 어노테이션이 추가된 메서드 <code>\#ref</code>은(는) 매개변수 {1} 및 ''{2}''을(를) 선언하면 안 됩니다
jvm.inspections.junit.malformed.annotated.method.param.single.descriptor=''@{0}'' 어노테이션이 추가된 메서드 <code>\#ref</code>은(는) 매개변수 ''{1}''을(를) 선언하면 안 됩니다
jvm.inspections.junit.malformed.annotated.method.single.param.double.descriptor=''@{0}'' 어노테이션이 추가된 메서드 <code>\#ref</code>은(는) {1}이어야 하며 매개변수 ''{2}'' 및 ''{3}''을(를) 선언하면 안 됩니다
jvm.inspections.junit.malformed.annotated.method.single.param.single.descriptor=''@{0}'' 어노테이션이 추가된 메서드 <code>\#ref</code>은(는) {1}이어야 하며 매개변수 ''{2}''을(를) 선언하면 안 됩니다
jvm.inspections.junit.malformed.annotated.method.single.typed.param.double.descriptor=''@{0}'' 어노테이션이 추가된 메서드 <code>\#ref</code>은(는) {1}이고 ''{2}'' 타입이어야 하며 매개변수 {3} 및 ''{4}''을(를) 선언하면 안 됩니다
jvm.inspections.junit.malformed.annotated.method.single.typed.param.single.descriptor=''@{0}'' 어노테이션이 추가된 메서드 <code>\#ref</code>은(는) {1}이고 ''{2}'' 타입이어야 하며 매개변수 ''{3}''을(를) 선언하면 안 됩니다
jvm.inspections.junit.malformed.annotated.method.typed.param.double.descriptor=''@{0}'' 어노테이션이 추가된 메서드 <code>\#ref</code>은(는) ''{1}'' 타입이어야 하며 매개변수 {2} 및 ''{3}''을(를) 선언하면 안 됩니다
jvm.inspections.junit.malformed.annotated.method.typed.param.single.descriptor=''@{0}'' 어노테이션이 추가된 메서드 <code>\#ref</code>은(는) ''{1}'' 타입이어야 하며 매개변수 ''{2}''을(를) 선언하면 안 됩니다
jvm.inspections.junit.malformed.annotated.single.descriptor=''@{1}'' 어노테이션이 추가된 {0, choice, 0\#필드|1\#메서드} <code>\#ref</code>은(는) {2}이어야 합니다
jvm.inspections.junit.malformed.annotated.single.typed.descriptor=''@{1}'' 어노테이션이 추가된 {0, choice, 0\#필드|1\#메서드} <code>\#ref</code>은(는) {2}이고 ''{3}'' 타입이어야 합니다
jvm.inspections.junit.malformed.annotated.suspend.function.descriptor=''@{0}'' 어노테이션이 추가된 메서드 <code>\#ref</code>은(는) 일시 중지하는 함수가 아니어야 합니다
jvm.inspections.junit.malformed.annotated.typed.descriptor=''@{1}'' 어노테이션이 추가된 {0, choice, 0\#필드|1\#메서드} <code>\#ref</code>은(는) ''{2}'' 타입이어야 합니다
jvm.inspections.junit.malformed.declaration.name=JUnit 잘못된 형식의 선언
jvm.inspections.junit.malformed.extension.class.level.descriptor={0}은(는) 클래스 수준에서 등록되어야 합니다
jvm.inspections.junit.malformed.fix.class.signature=클래스 시그니처 수정
jvm.inspections.junit.malformed.fix.class.signature.descriptor=''{0}'' 클래스 시그니처 수정
jvm.inspections.junit.malformed.fix.class.signature.multi=클래스 시그니처 수정
jvm.inspections.junit.malformed.fix.field.signature=필드 시그니처 수정
jvm.inspections.junit.malformed.fix.field.signature.descriptor=''{0}'' 필드 시그니처 수정
jvm.inspections.junit.malformed.fix.method.signature=메서드 시그니처 수정
jvm.inspections.junit.malformed.fix.method.signature.descriptor=''{0}'' 메서드 시그니처 수정
jvm.inspections.junit.malformed.missing.nested.annotation.descriptor=중첩 클래스 내의 테스트는 실행되지 않습니다
jvm.inspections.junit.malformed.no.arg.descriptor=메서드 <code>\#ref</code>은(는) {0}, {1}이고 {2, choice, 0\#매개변수가 없어야|1\#, 매개변수가 없고 void 타입이어야} 합니다
jvm.inspections.junit.malformed.option.ignore.test.parameter.if.annotated.by=다음 어노테이션이 추가된 경우 테스트 매개변수 무시\:
jvm.inspections.junit.malformed.param.duplicated.enum.descriptor='enum' 상수 이름 중복
jvm.inspections.junit.malformed.param.empty.source.unsupported.descriptor=메서드에 지원되지 않는 ''{1}'' 타입의 매개변수가 있으므로 ''@{0}''은(는) 메서드에 인수를 제공할 수 없습니다
jvm.inspections.junit.malformed.param.exactly.one.type.of.input.must.be.provided.descriptor=입력 타입은 정확히 하나만 제공되어야 합니다
jvm.inspections.junit.malformed.param.file.source.descriptor=파일 소스를 해결할 수 없습니다. ''{0}''
jvm.inspections.junit.malformed.param.method.source.assignable.descriptor=''{0}''을(를) ''{1}''(으)로 변환하는 묵시적 변환을 찾지 못했습니다
jvm.inspections.junit.malformed.param.method.source.no.params.descriptor=메서드 소스 ''{0}''에는 매개변수가 포함될 수 없습니다
jvm.inspections.junit.malformed.param.method.source.return.type.descriptor=메서드 소스 ''{0}''에는 다음 반환 타입 중 하나가 포함되어야 합니다. ''Stream<?>'', ''Iterator<?>'', ''Iterable<?>'' 또는 ''Object[]''
jvm.inspections.junit.malformed.param.method.source.static.descriptor=메서드 소스 ''{0}''은(는) static이어야 합니다
jvm.inspections.junit.malformed.param.method.source.unresolved.descriptor=타깃 메서드 소스를 확인할 수 없습니다. ''{0}''
jvm.inspections.junit.malformed.param.multiple.parameters.descriptor=이 소스는 여러 매개변수를 지원하지 않습니다
jvm.inspections.junit.malformed.param.no.sources.are.provided.descriptor=제공된 소스가 없어 스위트가 공백으로 남습니다
jvm.inspections.junit.malformed.param.no.value.source.is.defined.descriptor=정의된 값 소스가 없습니다
jvm.inspections.junit.malformed.param.unresolved.enum.descriptor='enum' 상수 참조를 해결할 수 없습니다.
jvm.inspections.junit.malformed.param.wrapped.in.arguments.descriptor=여러 매개변수는 'Arguments'로 감싸야 합니다
jvm.inspections.junit.malformed.repetition.number.descriptor=반복 횟수는 0보다 커야 합니다
jvm.inspections.junit.malformed.source.without.params.descriptor=\n메서드에 매개변수가 없으므로 ''@{0}''은(는) 메서드에 인수를 제공할 수 없습니다
jvm.inspections.junit.malformed.suspend.function.descriptor=메서드 <code>\#ref</code>은(는) 일시 중지하는 함수가 아니어야 합니다
jvm.inspections.junit.malformed.test.combination.descriptor={0}와 ''@{1}''의 의심스러운 조합
jvm.inspections.junit.mixed.annotations.junit.descriptor=클래스 내에서 ''@{0}'' 어노테이션이 추가된 메서드 <code>\#ref()</code>이(가) JUnit {1} TestCase를 확장합니다 \#loc
jvm.inspections.junit.mixed.annotations.name=하나의 TestCase 내에 여러 버전의 JUnit API 사용
jvm.inspections.junit3.super.teardown.display.name=JUnit 3 'super.tearDown()'이 'finally' 블록에서 호출되지 않음
jvm.inspections.junit3.super.teardown.problem.descriptor=<code>\#ref()</code>이(가) 'finally' 블록에서 호출되지 않습니다 \#loc
jvm.inspections.junit4.converter.display.name=JUnit 3 테스트가 JUnit 4가 될 수 있음
jvm.inspections.junit4.converter.problem.descriptor=<code>\#ref</code>을(를) JUnit4 테스트 케이스로 변환할 수 있습니다
jvm.inspections.junit4.converter.quickfix.conflict.call.compile={1}이(가) JUnit 4로 변환될 경우 메서드 호출 {0}이(가) 컴파일링하지 않습니다
jvm.inspections.junit4.converter.quickfix.conflict.name=메서드 {0}은(는) 상위 메서드와 이름이 충돌됩니다
jvm.inspections.junit4.converter.quickfix.conflict.semantics={1}이(가) JUnit 4로 변환될 경우 메서드 호출 {0}이(가) 의미를 변경할 수 있습니다
jvm.inspections.junit4.converter.quickfix.conflict.suite={0}의 suite 메서드 마이그레이션에 삭제될 부수 효과가 있습니다
jvm.inspections.junit4.converter.quickfix.name=JUnit4 테스트 케이스로 변환
jvm.inspections.junit4.inherited.runwith.display.name='@RunWith' 어노테이션이 이미 상위 클래스에 있습니다
jvm.inspections.junit4.inherited.runwith.problem.descriptor=''@RunWith'' 어노테이션이 이미 {0} 클래스에 있습니다
jvm.inspections.junit5.assertions.converter.display.name=JUnit 5 이전 버전의 어설션
jvm.inspections.junit5.assertions.converter.familyName=JUnit 5 호환 호출로 바꾸기
jvm.inspections.junit5.assertions.converter.problem.descriptor=''{0}''의 <code>\#ref()</code> 호출을 ''{1}''의 메서드 호출로 바꿔야 합니다 \#loc
jvm.inspections.junit5.assertions.converter.quickfix=''{0}'' 메서드 호출로 바꿉니다
jvm.inspections.junit5.converter.display.name=JUnit 4 테스트가 JUnit 5가 될 수 있음
jvm.inspections.junit5.converter.problem.descriptor=\#ref이(가) JUnit 5 테스트일 수 있습니다
jvm.inspections.junit5.converter.quickfix=JUnit 5로 마이그레이션
jvm.inspections.junit5.converter.quickfix.conflict.inheritor=호환되지 않는 상속자가 있으므로 클래스 {0}을(를) JUnit 5로 변환할 수 없습니다. {1}
jvm.inspections.junit5.converter.quickfix.presentation.text=어설션 변환
jvm.inspections.migrate.assert.to.matcher.description=Assert expression <code>\#ref</code> can be replaced with ''{0}'' call \#loc
jvm.inspections.migrate.assert.to.matcher.option=매처 메서드를 정적으로 가져오기
jvm.inspections.migrate.assertion.name=JUnit 어설션은 'assertThat()' 호출이 될 수 있음
jvm.inspections.unconstructable.test.case.junit3.descriptor=테스트 클래스 <code>\#ref</code>은(는) 'public'인 비인수 혹은 단일 'String' 매개변수 구성자가 없으므로 구성할 수 없습니다 \#loc
jvm.inspections.unconstructable.test.case.junit4.descriptor=테스트 클래스 <code>\#ref</code>은(는) 하나의 'public' 비인수 구성자만을 가져야 하므로 구성할 수 없습니다 \#loc
jvm.inspections.unconstructable.test.case.not.public.descriptor=테스트 클래스 <code>\#ref</code>은(는) 'public'이 아니므로 구성할 수 없습니다 \#loc
method.name.not.specified.error.message=메서드 이름이 지정되지 않았습니다
module.does.not.exists=프로젝트 ''{1}''에 모듈 ''{0}''이(가) 없습니다
module.to.choose.classpath.not.specified.error.message=클래스 경로를 선택한 모듈이 지정되지 않았습니다
multiple.exceptions.declared.on.test.method.display.name=테스트 메서드에서 선언된 여러 예외
multiple.exceptions.declared.on.test.method.problem.descriptor=<code>\#ref</code>을(를) 'throws Exception'으로 바꿀수 있습니다 \#loc
no.module.selected.error.message=선택된 모듈 없음
no.pattern.error.message=선택된 패턴이 없습니다
no.test.class.specified.error.text=테스트 클래스가 지정되지 않았습니다
package.does.not.exist.error.message=패키지 ''{0}''이(가) 없습니다
pattern.label=패턴
progress.title.download.additional.dependencies=추가 종속성 다운로드 중...
repeat.count.label=반복 횟수(&R)\:
repeat.label=반복(&R)\:
repeat.name=반복
running.tests.disabled.during.index.update.error.message=색인 업데이트 중 테스트 실행이 비활성화되어 있습니다
search.scope.module=단일 모듈에서
search.scope.module.deps=모듈 종속성 전체
search.scope.name=테스트 검색
search.scope.project=전체 프로젝트에서
tag.expression.label=태그 표현식
tag.name.0.must.be.syntactically.valid.warning=태그 이름[{0}]이 구문적으로 유효해야 합니다
tags.are.not.specified.error.message=태그가 지정되지 않았습니다
test.class.hint=테스트를 포함하는 클래스의 정규화된 이름
test.discovery.by.all.changes.combo.item=모두
test.group=테스트
test.kind.hint=테스트를 검색할 리소스 유형
test.method.doesnt.exist.error.message=테스트 메서드 ''{0}''이(가) 없습니다
test.method.hint=테스트 메서드의 정규화된 이름
test.package.hint=테스트를 포함하는 패키지 이름
test.pattern.hint=테스트를 포함하는 클래스 이름과 일치하는 정규식
uniqueid.label=UniqueId
unused.declaration.junit.test.entry.point=Junit 테스트 케이스
usage.of.obsolete.assert.display.name=곧 사용할 수 없게 될 'junit.framework.Assert' 메서드 사용
use.of.obsolete.assert.problem.descriptor=''{0}''의 <code>\#ref()</code> 호출을 ''org.junit.Assert''의 메서드 호출로 바꿔야 합니다 \#loc
use.of.obsolete.assert.quickfix='org.junit.Assert' 메서드 호출로 바꿉니다.
