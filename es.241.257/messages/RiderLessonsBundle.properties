alt.enter.invert.condition=조건 반전
alt.enter.remove.parameter=매개변수 제거
basic.completion.activate=코드 완성이 자동으로 제안되지 않으면 {0}을(를) 눌러 수동으로 호출하세요.
basic.completion.choose.first=가장 일치하는 항목은 완성 목록에서 파란색으로 강조 표시됩니다. 선택하려면 {0}을(를) 누르세요.
basic.completion.choose.item=코드 완성 목록에서 {0}을(를) 선택한 후 {1}을(를) 누릅니다.
basic.completion.complete=필요한 모든 구문 요소(소괄호, 중괄호, 세미콜론 등)를 자동으로 삽입하고, 다음 구문 입력을 시작할 수 있는 위치로 이동할 수 있습니다. 이 구문을 완성하려면 {0}을(를) 누르세요.
basic.completion.lesson.name=코드 완성
basic.completion.start.typing=기본적으로 <ide/>은(는) 코드 완성을 즉시 제안합니다. 캐릿의 위치에서 바로 {0}을(를) 입력하기 시작하면 일치하는 제안 항목이 표시됩니다.
comment.block.comment=블록 주석 {0}(으)로 주석을 다려느 경우 코드 블럭을 선택하고 {1}을(를) 누르세요.
comment.block.uncomment=블록 주석을 해제하려면 캐럿을 주석 블록 내 아무곳에 둔 뒤 {0}을(를) 누르세요.
comment.lesson.name=코드 줄 및 블록을 주석 처리
comment.line.uncomment.several.lines=여러 줄을 주석 해제하려면 주석 처리된 줄을 모두 선택하고 {0}을(를) 누르세요.
comment.line.uncomment.that.line=주석 처리된 줄을 같은 단축키로 주석 해제\: 캐럿을 줄 내의 아무곳에 둔 뒤 {0}을(를) 누르세요.
extract.variable.choose.name=변수 이름을 지정하거나 제안된 대로 둡니다. 리팩터링을 완료하려면 {0}을(를) 다시 누릅니다.
extract.variable.choose.type=새 변수에 ''var'' 또는 명시적 타입을 사용할지 여부를 선택하고 {0}을(를) 누릅니다.
extract.variable.replace.all=이 샘플 코드에는 선택한 표현식의 찾은 항목이 3개 있습니다. 해당 항목을 선택하여 모두 바꾸세요.
file.structure.help.link=파일 구조 및 기타 컨텍스트 탐색 명령어
file.structure.lesson.name=파일 멤버 및 구조
file.structure.open.popup=큰 파일은 탐색하기 어려울 수 있습니다. 시작하는 좋은 방법은 멤버를 확인하는 것입니다. 모든 파일 멤버를 나열하려면 {0}을(를) 누르세요.
file.structure.request.prefixes=이름에 {0} 및 {1}(이)라는 단어가 포함된 메서드를 찾으려 한다고 가정해 보겠습니다. {2}(필요한 단어의 접두사)을(를) 입력하여 멤버 목록을 필터링하세요.
file.structure.toolwindow=전용 도구 창에서 파일 구조를 참조할 수도 있습니다. 열려면 {0}을(를) 누르세요.
got.it.balloon.button.text=다음
help.refactor.this='다음을 리팩터링' 메뉴
onboarding.module.description=IDE 설정 및 사용을 위한 첫 단계
onboarding.module.name=시작하기
onboarding.tour.lesson.name=온보딩 투어
refactoring.menu.extract.interface=현재 클래스의 멤버를 기반으로 새 인터페이스를 빠르게 만드는 데 도움이 되는 {0} 리팩터링을 선택해 보겠습니다.
refactoring.menu.extract.interface.dialog=새 인터페이스의 이름을 지정하고 거기에서 선언되어야 하는 메서드 옆의 체크박스를 선택한 다음, <strong>다음</strong>을 클릭하여 리팩토터을 완료합니다.
refactoring.menu.finish=다른 컨텍스트에서 사용 가능한 리팩터링을 보려면 캐럿이 멤버, 변수 또는 문자열 리터럴에 있을 때 {0}을(를) 누르세요.
rename.dialog.title=이름 바꾸기
rename.epilogue=리팩터링이 <strong>Person</strong>의 <code>Name</code> 프로퍼티를 건드리지 않은 것을 확인하세요. 즉, 동일한 컨텍스트에 유사한 이름의 심볼이 있는 경우에도 리팩터링을 사용해도 안전합니다.
rename.press.rename=<strong>이름 변경</strong> 리팩터링은 이름이 변경된 심볼에 대한 모든 참조를 자동으로 업데이트합니다. 심볼의 선언 또는 임의의 사용 위치에서 리팩터링을 시작할 수 있습니다. {0}을(를) 눌러 <code>Car</code> 클래스의 {1} 프로퍼티의 이름을 변경하세요.
rename.type.new.name=이 프로퍼티의 새 이름(예\: {0})을 입력한 후 {1}을(를) 누릅니다.
rider.onboarding.alt.enter={0}은(는) 에디터에서 가장 중요한 단축키입니다. 예를 들어, 이 키를 누르면 {1} 매개변수를 안전하게 제거할 수 있습니다.
rider.onboarding.alt.enter.menu={0} 수정을 적용하기 전에 이 팝업에서 할 수 있는 다른 유용한 작업이 무엇이 있을지 생각해 보세요.
rider.onboarding.balloon.open.file=두 번 클릭하여 {0}을(를) 여세요
rider.onboarding.balloon.open.learn.window={0} 도구 창으로 전환하여 이 수업을 계속 진행하세요
rider.onboarding.balloon.project.directory=솔루션 노드를 두 번 클릭한 다음, <strong>Learning</strong> project를 펼칩니다
rider.onboarding.change.ui.settings=이 수업에서는 Rider의 일부 UI 설정이 디폴트 값으로 변경됩니다. 이 수업을 완료하거나 종료하면 해당 환경 설정이 복원됩니다.
rider.onboarding.debug.window.toolbar=The <strong>Debug</strong> window has all necessary controls. Let''s press {0} or click {1} to step over the {2} call and check how the value of {3} changes.
rider.onboarding.finish=이상으로 이번 수업이 끝났습니다. 이제 메인 메뉴에서 <strong>파일</strong> | <strong>새 솔루션</strong>을 선택하여 고유한 솔루션을 시작하거나 <strong>파일</strong> | <strong>열기</strong>를 선택하여 기존 솔루션을 열어보세요.
rider.onboarding.online.help=온라인 도움말
rider.onboarding.project.view.description=Use the {0} view to access your solution files\: click the sidebar icon or press {1}
rider.onboarding.resume={0}을(를) 누르거나 {1}을(를) 클릭하여 프로그램을 다시 시작합니다
rider.onboarding.run.configuration.widget=With the ''run'' widget, you can configure and launch run configurations.  Press {0} or click {1} to start debugging with the current configuration.
rider.onboarding.search.everywhere=찾아 보려면 {0}을(를) 두 번 누르거나 {1}을(를) 클릭하세요
rider.onboarding.search.everywhere.query=검색 범위를 파일 액션 등으로 한정하는 몇 개의 탭이 있습니다. 지금은 <strong>모두</strong> 탭에서 {0}을(를) 입력해 보겠습니다.
rider.onboarding.search.everywhere.result=이 검색어는 조합된 이름의 앞부분 글자가 {0}와(과) 일치합니다. 목록에서 이 항목을 선택하고 {1}을(를) 누릅니다.
rider.onboarding.settings=마지막으로 모든 것을 구성해볼 차례입니다. {0}을(를) 누르거나 {1}을(를) 클릭하여 해당하는 항목을 선택합니다
rider.onboarding.settings.save=변경 사항을 적용하려면 {0}을(를) 클릭합니다
rider.onboarding.settings.search=검색창을 사용하여 특정 옵션을 찾아봅니다
rider.onboarding.settings.theme=예를 들어, {0} | {1} 페이지에서 밝은 테마 또는 어두운 테마 사이를 전환할 수 있습니다
rider.onboarding.toggle.breakpoint=이제 프로그램을 디버그해 보겠습니다. 먼저 줄 번호를 클릭하거나 {0}을(를) 눌러 중단점을 전환합니다.
