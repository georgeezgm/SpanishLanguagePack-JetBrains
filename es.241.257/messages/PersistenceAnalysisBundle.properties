inspection.jvm.languages.group.name=JVM 언어
jvm.inspections.sql.source.to.sink.flow.display.name=안전하지 않은 문자열이 SQL로 사용되었습니다
jvm.inspections.sql.source.to.sink.flow.too.complex=SQL에서 사용된 해당 문자열은 안전한지 확인하기에 너무 복잡합니다
jvm.inspections.sql.source.to.sink.flow.unsafe=SQL에서 사용된 문자열이 안전하지 않을 수도 있습니다
jvm.inspections.sql.source.unsafe.to.sink.flow.check.private.final.field=같은 클래스 내의 private 혹은 final 필드를 안전한 것으로 간주
jvm.inspections.sql.source.unsafe.to.sink.flow.check.private.final.field.comment=활성화된 경우 private 혹은 final 필드는 안전한 것으로 간주되며, 그렇지 않은 경우 규칙에 따라 처리됩니다
jvm.inspections.sql.source.unsafe.to.sink.flow.check.private.methods=private 메서드의 매개변수를 안전한 것으로 간주
jvm.inspections.sql.source.unsafe.to.sink.flow.check.private.methods.comment=비활성화 시 private 메서드의 매개변수는 알려지지 않은 것으로 간주됩니다
jvm.inspections.sql.source.unsafe.to.sink.flow.check.warn.if.complex=검증하기에 너무 복잡한 문자열을 보고
jvm.inspections.sql.source.unsafe.to.sink.flow.check.warn.if.complex.comment=이러한 문자열은 수동으로 확인하는 것이 좋습니다
jvm.inspections.sql.source.unsafe.to.sink.flow.safe.class=안전한 클래스\:
jvm.inspections.sql.source.unsafe.to.sink.flow.safe.class.comment=이러한 클래스는 안전한 데이터만 포함하는 것으로 간주됩니다
jvm.inspections.sql.source.unsafe.to.sink.flow.untainted.annotations=Untainted 어노테이션\:
jvm.inspections.sql.source.unsafe.to.sink.flow.untainted.annotations.comment=이러한 어노테이션은 분석 중에는 '@Untainted' 어노테이션으로 사용됩니다
jvm.inspections.sql.source.unsafe.to.sink.flow.untainted.methods=Untainted 메서드\:
jvm.inspections.sql.source.unsafe.to.sink.flow.untainted.methods.comment=이러한 메서드는 안전한 객체만 반환하는 것으로 간주됩니다
