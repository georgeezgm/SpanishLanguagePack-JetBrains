swift.editor.module.name=Editor
swift.editor.module.description=줄을 선택, 삭제, 복제, 이동하고 줄에 주석을 추가하는 방법과 코드 블록을 이동 및 축소하는 방법을 알아봅니다.
swift.code.generations.module.name=코드 생성
swift.code.generations.module.description=사용 위치에서 생성하고, 재정의/구현하고, 빠른 수정을 적용합니다.
swift.navigation.module.name=Navegar
swift.navigation.module.description=창, 뷰, 코드 탐색 및 소스, 선언/구현, 파일 구조 등으로 이동.
swift.refactorings.module.name=Refactorización
swift.refactorings.module.description=이름 변경, 변수/메서드 추출, 기타 리팩터링.
swift.run.debug.test.module.name=실행, 디버그, 테스트
swift.run.debug.test.module.description=애플리케이션을 실행, 디버그 및 테스트하는 방법을 알아봅니다.
swift.codegeneration.cfu.name=사용 위치에서 생성
swift.codegeneration.cfu.create.local=<ide/>에서는 해결되지 않은 엔티티에서 {0} 을(를) 눌러 사용 위치에서 다양한 코드 구문을 생성할 수 있습니다. {1} 을(를) 누르고 <strong>지역 변수 ''label'' 생성</strong>을 선택한 다음 {2} 을(를) 누르세요.
swift.codegeneration.cfu.repeat=이제 같은 동작을 반복하여 {0} 함수를 생성하세요.
swift.codegeneration.cfu.nice=좋습니다\! 매개변수가 이름과 함께 생성되는 과정에 유의하세요.
swift.codegeneration.cfu.create.class=이번에는 같은 방법을 사용하여 클래스 선언을 생성할 수 있습니다. {0} 을(를) 누른 후 <strong>유형 ''IDE'' 생성</strong>을 선택하세요. 현재 클래스 또는 새 파일에 중첩되도록 자동으로 생성할 수 있습니다.
swift.codegeneration.cfu.create.init=좋습니다\! 같은 동작을 반복하여 {0} 클래스의 이니셜라이저를 생성해봅시다. {1} 을(를) 누르고 <strong>이니셜라이저 생성</strong>을 선택한 다음 {2} 을(를) 누르세요.
swift.codegeneration.cfu.create.empty.init=마지막으로 같은 동작을 사용해 빈 이니셜라이저를 추가해봅시다.
swift.codegeneration.generate.name=\ 생성
swift.codegeneration.generate.intro=<strong>생성</strong> 액션을 사용하여 {0}, {1}, {2}, {3} 프로퍼티와 이니셜라이저를 생성할 수 있습니다.
swift.codegeneration.generate.init={0} 을(를) 누르고 <strong>생성</strong> 팝업 내 <strong>이니셜라이저</strong>를 선택하세요. 이니셜라이저 시그니처에 포함할 프로퍼티를 선택한 다음 {1} 을(를) 누르세요.
swift.codegeneration.generate.hash={2} → <strong>equals 및 hash</strong>을 사용하여 {0} 및 {1} 생성하세요.
swift.codegeneration.generate.description=마지막으로 {1} → <strong>설명</strong> 액션을 사용하여 {0} 을(를) 생성하세요.
swift.codegeneration.overrideimplement.name=재정의/구현
swift.codegeneration.overrideimplement.intro=<strong>재정의/구현</strong> 액션({0}/{1})을 사용하여 상위 클래스의 메서드를 재정의하거나 프로토콜을 구현할 수 있습니다
swift.codegeneration.overrideimplement.implement={0} → {1} 을(를) 누르고 {2} 의 모든 필수 메서드에 스텁을 추가하세요.
swift.codegeneration.overrideimplement.override=몇 가지 메서드를 동시에 재정의해봅시다. {0} 을(를) 누르고 {1} 을(를) 입력하세요. 재정의할 수 있는 메서드 및 프로퍼티 목록이 단 두 가지 메서드로 필터링되어야 합니다. {2} → {3} 을(를) 눌러 메서드를 재정의하세요.
swift.codegeneration.quickfix.name=빠른 수정 및 인텐션
swift.codegeneration.quickfix.intro=<ide/>는 Xcode와 같이 Swift 코드의 {0} 을(를) 동일하게 보여줍니다.
swift.codegeneration.quickfix.fixit={0} 을(를) 누른 후 <strong>수정 적용</strong>을 선택하여 사용되지 않은 변수를 {1} (으)로 교체하세요.
swift.codegeneration.quickfix.sourcekit.inspection=AppCode는 SourceKit을 별도 검사로 통합합니다. 즉 전체 파일에 대해 실행하여 여러 수정이 가능한 경우 모든 문제를 한꺼번에 수정할 수 있습니다. {0} 을(를) 누르세요.
swift.codegeneration.quickfix.sourcekit.fixit=볼 수 있듯이 이 코드 조각에는 몇 가지 문제가 있습니다. 일부를 수정해봅시다. <strong>Swift → SourceKit 검사</strong>를 선택한 후 오른쪽의 <strong>수정 적용</strong> 버튼을 클릭하세요. 그러면 이 그룹 안의 모든 문제가 해결됩니다.
swift.codegeneration.quickfix.typo.in.var=이제 {0} 을(를) 눌러 에디터 창으로 되돌아가 캐럿을 철자가 잘못된 변수 이름에 둔 다음 {1} 을(를) 누르세요. <strong>오타\: 이름을 다음으로 변경...</strong>을 선택하고 올바른 옵션을 선택한 다음 {2} 을(를) 누르세요.
swift.codegeneration.quickfix.typo.in.string=필요한 부분만 수정되었으며 사용된 모든 변수의 이름이 자동으로 변경되었습니다. 이제 같은 동작을 두 번 반복하여 {0} 문자열을 수정하세요.
swift.codegeneration.quickfix.go.next.error={0} 을(를) 눌러 다음 오류로 이동하세요.
swift.codegeneration.quickfix.error.handling=오류 처리 인텐션을 사용하여 필요한 곳에 {0} 을(를) 추가할 수 있습니다. {1}→{2} 을(를) 누르고 빠른 수정 중 하나를 선택하세요.
swift.codegeneration.quickfix.go.next.warning={0} 을(를) 눌러 다음 경고로 이동하세요.
swift.codegeneration.quickfix.redundant=불필요한 {0} 속성을 제거할 수도 있습니다. <shortcut>⇧⌥⏎</shortcut>을 누르세요.
swift.codegeneration.quickfix.explicit.type=몇몇 변수에 대해 명시적 유형을 추가하거나 제거해야 하는 경우 {0} 을(를) 누른 후 <strong>명시적 유형 추가/제거</strong>를 선택하세요. {1} 변수를 사용하여 시도해보세요.
swift.editor.format.name=코드 서식 지정
swift.editor.format.reformat=<ide/>를 사용하여 단 하나의 액션만으로 코드 서식을 수정할 수 있습니다. 선택한 코드의 서식을 {0} (으)로 다시 지정하세요.
swift.editor.format.reformat.whole.file=줄이 선택되지 않은 경우 전체 소스 파일의 서식을 다시 지정하려면, {0} 을(를) 누른 다음 {2}.
swift.editor.comment=Comentario
swift.editor.comment.intro={0} (으)로 어느 줄이든 주석 처리하세요.
swift.editor.comment.uncomment=같은 단축키 {0} (으)로 주석 처리된 줄의 주석 처리를 해제하세요.
swift.editor.comment.several.lines={0} (으)로 여러 줄을 선택한 후 {1} (으)로 주석 처리하세요.
swift.editor.comment.block={0} 을(를) 두 번 눌러 {1} 을(를) 선택한 다음 {2} 을(를) 사용하여 블록 주석으로 주석 처리하세요.
swift.editor.completion.name=코드 완성
swift.editor.completion.basic=기본적으로 <ide/>는 코드 즉시 완성합니다. 캐릿이 위치한 곳에서 {0} 을(를) 입력하고 {1} 을(를) 눌러 {2} 함수를 선택하세요.
swift.editor.completion.basic.shortcut=기본 완료를 활성화하려면 {0} 을(를) 누르세요. 조회 메뉴를 다시 표시됩니다.
swift.editor.completion.smart=스마트 유형 완성은 제안 목록을 필터링하여 현재 컨텍스트 내에서 적용 가능한 유형만을 포함합니다. {0} 을(를) 눌러 일치하는 제안 목록을 확인하세요. {1} 을(를) 눌러 첫 번째 항목을 선택합니다.
swift.editor.completion.show={0} 을(를) 다시 눌러 코드 완성 옵션을 표시하세요.
swift.editor.completion.tab={0} 항목을 선택한 후 ({2} 대신) {1} 을(를) 누르세요. 이는 단순히 단어를 삽입하는 것이 아니라 캐럿에 위치한 단어를 교체합니다.
swift.editor.completion.tab.method=이제 {0} 및 {1} 을(를) 호출하여 {2} 을(를) {3} (으)로 쉽게 덮어쓰세요.
swift.editor.completion.go.next=좋습니다\! 아래 버튼을 클릭하고 다음 강의를 시작하거나 {0} 을(를) 사용하세요.
swift.editor.delete.name=삭제
swift.editor.delete.action={0} (으)로 현재 줄을 삭제하세요.
swift.editor.delete.undo=삭제된 줄을 복구하려면 {0} 을(를) 누르세요.
swift.editor.duplicate.name=복제
swift.editor.duplicate.line={0} (으)로 어느 줄이든 복제하세요.
swift.editor.duplicate.several.lines=같은 액션을 여러 줄에 적용할 수 있습니다. 둘 이상의 줄을 선택한 후 {0} (으)로 복제하기만 하면 됩니다.
swift.editor.folding.name=접기
swift.editor.folding.collapse=더 나은 가독성을 위해 코드의 일부를 접어야 하는 경우가 있습니다. {0} (으)로 코드를 접어보세요.
swift.editor.folding.expand=코드 영역을 확장하려면 {0} 을(를) 누르세요.
swift.editor.folding.collapse.all=파일 내 모든 영역을 접고자 할 경우 {0} 을(를) 누르세요.
swift.editor.folding.expand.all=마찬가지로 {0} 을(를) 눌러 사용 가능한 모든 영역을 확장하세요.
swift.editor.folding.collapse.statement.any=<ide/>에는 구문 또는 선언의 어느 시퀀스든 접을 수 있는 방법이 있습니다. {0} (으)로 선택한 영역을 접어보세요.
swift.editor.folding.expand.statement={0} 을(를) 눌러 다른 방식으로 이동하세요.
swift.editor.folding.block=마지막으로 {0} 을(를) 사용해 제어 흐름 구문을 접으세요.
swift.editor.move.name=이동
swift.editor.move.line.down=줄 재배치는 보통 잘라내기와 붙여넣기의 두 가지 액션을 포함합니다. <ide/>에서는 {0} 을(를) 눌러 현재 줄을 아래로 이동할 수 있으므로 하나의 액션만으로 실행할 수 있습니다. 현재 줄을 {1} 함수 끝으로 이동하세요.
swift.editor.move.line.up=마찬가지로 줄을 위로 이동하려면 {0} 을(를) 사용하세요. {1} 선언을 이동하여 설정보다 선행하도록 합니다.
swift.editor.selections.name=여러 선택 범위
swift.editor.selections.next={0} 을(를) 눌러 캐럿에 위치한 심볼을 선택하세요.
swift.editor.selections.next.again={0} 을(를) 눌러 이 심볼의 다음 사용 위치를 선택하세요.
swift.editor.selections.unselect={0} 을(를) 눌러 마지막 사용 위치를 선택 해제하세요.
swift.editor.selections.select.all={0} 을(를) 눌러 이 파일의 모든 사용 위치를 선택하세요.
swift.editor.selections.replace={0} 을(를) 입력하여 {1} 의 모든 사용 위치를 {2} (으)로 바꾸기한 다음 {3} 을(를) 누르세요.
swift.editor.selections.column={0} 을(를) 사용하여 열 선택 범위를 전환한 다음 키보드로 {1} 부터 {2} 까지의 모든 줄을 선택하세요.
swift.editor.selections.select.sample=이제 {0} 을(를) 입력하고 {1} (으)로 모든 케이스 이름을 선택하세요.
swift.editor.selections.select.sample.toggle={0} 을(를) 눌러 케이스를 전환한 다음 {1} 을(를) 다시 눌러 열 선택 모드를 종료하세요.
swift.editor.selections.reformat={0} 을(를) 눌러 {1} (으)로 코드 서식을 다시 지정하면 끝입니다\!
swift.editor.popups.name=빠른 팝업
swift.editor.popups.param.info={0} 을(를) 눌러 이니셜라이저 시그니처를 확인하세요.
swift.editor.popups.close.param.info={0} 을(를) 눌러 팝업을 닫으세요.
swift.editor.popups.doc={0} 을(를) 눌러 캐럿에 위치한 심볼에 대한 문서를 확인하세요.
swift.editor.popups.impl={0} 을(를) 눌러 캐럿에 위치한 심볼의 정의를 확인하세요.
swift.editor.selection.name=선택 범위
swift.editor.selection.word=캐럿을 단어 앞에 배치하세요. {0} 을(를) 눌러 캐럿을 다음 단어로 이동하고 그 사이의 모든 것을 선택하세요.
swift.editor.selection.expand={0} 을(를) 눌러 선택 범위를 다음 코드 블록으로 확장하세요.
swift.editor.selection.expand.more=파일 전체가 선택될 때까지 {0} (으)로 선택 범위를 늘려보세요.
swift.editor.selection.shrink={0} 은(는) 현재 선택 범위를 축소합니다. 눌러보세요.
swift.editor.selection.all=이제 {0} (으)로 메서드 전체를 즉시 선택하세요.
swift.navigation.code.name=코드 탐색
swift.navigation.code.intro=프로젝트에서 작업 시 특정 클래스 파일 또는 심볼을 열어 편집해야 할 일이 종종 있습니다. 이를 위한 가장 빠른 방법은 세 가지 주요 탐색 기능\: <strong>클래스/파일/심볼로 이동</strong>을 사용하는 것입니다.
swift.navigation.code.class={0} 클래스로 이동해봅시다. {1} 을(를) 누르고 {2} 을(를) 입력한 다음 {3} 을(를) 누르세요.
swift.navigation.code.fuzzy=각 <strong>다음으로 이동...</strong> 대화상자에서는 퍼지 일치 사용이 허용되므로 찾으려는 클래스 파일 또는 심볼의 이름을 일부만 입력할 수 있습니다.
swift.navigation.code.file=좋습니다\! {0} 파일을 열어봅시다\: {1} 을(를) 누르고 {2} 을(를) 입력한 다음 {3} 을(를) 누르세요.
swift.navigation.code.symbol={1} 클래스의 {0} 선언으로 즉시 이동해봅시다. {2} 을(를) 누르고 {3} 을(를) 입력한 다음 {4} 을(를) 누르세요.
swift.navigation.code.non.project.files=표준 라이브러리와 기타 프로젝트가 아닌 파일, 심볼, 클래스를 포함해야 하는 경우, 단축키를 두 번 누르세요.
swift.navigation.code.declaration=<strong>다음으로 이동...</strong> 액션군 중 또 다른 중요한 액션은 <strong>Ir a declaración</strong>입니다. 캐럿을 {0} 에 두고 {1} 을(를) 눌러 선언으로 이동하세요.
swift.navigation.code.implementation=메서드 또는 클래스의 구현이 여러 개인 경우, {0} (으)로 첫 번째 구현으로 이동할 수 있습니다. {1} 을(를) 사용해 {2} 의 모든 정의를 확인해보세요.
swift.navigation.code.go.back={1} 을(를) 통해 {0} (으)로 다시 이동하세요.
swift.navigation.code.super=<strong>상위 정의로 이동</strong>을 통해 상위 클래스 선언으로 이동할 수 있습니다. {0} 을(를) 눌러 {1} 클래스로 이동하세요.
swift.navigation.code.super.again=이제 {0} 을(를) 다시 눌러 {1} 프로토콜 선언으로 이동하세요.
swift.navigation.code.recent=마지막으로 최근 파일과 도구창 사이를 빠르게 전환하는 데 매우 유용하며 자주 사용되는 두 가지 탐색 액션이 있습니다. 첫째는 <strong>최근 파일</strong> 팝업입니다. {0} 을(를) 통해 이 팝업을 열고 키보드의 방향키를 사용하여 필요한 항목을 선택하세요.
swift.navigation.code.switcher=둘째는 <strong>전환기</strong>이며, 이는 동일해 보이지만 무언가를 선택하면 즉시 사라집니다. <shortcut>⌃</shortcut> 키를 누른 채 {0} 을(를) 누른 후 다시 한 번 눌러 파일 또는 도구창을 선택하도록 전환하세요. 원하는 항목을 선택한 후 <shortcut>⌃</shortcut> 키를 해제하세요.
swift.navigation.windows.name=중요 창 \\& 뷰
swift.navigation.windows.intro=<ide/>에는 많은 탐색 뷰가 있습니다. 특정 상황에서 무엇을 호출해야 하는지 알면 IDE를 더 효율적으로 사용할 수 있습니다.
swift.navigation.windows.project=<strong>프로젝트</strong> 뷰는 Xcode의 프로젝트 탐색기와 비슷합니다. 이는 특정 작업공간 내 모든 프로젝트와 프로젝트 내부의 모든 파일과 그룹을 보여줍니다. ({0})을(를) 눌러 <strong>프로젝트</strong> 뷰를 여세요.
swift.navigation.windows.project2=기본적으로 <ide/>의 <strong>프로젝트</strong> 뷰는 파일 및 폴더를 파일 시스템에 저장된 순서대로 보여줍니다.
swift.navigation.windows.project.settings=프로젝트 뷰 옵션 메뉴의 {0} 아이콘을 클릭한 다음 <strong>Xcode 순서</strong>를 선택하여 Xcode와 같은 파일 순서로 설정하세요(<ide/> 설정 시 Xcode 동작은 선택한 경우, 이 옵션은 자동으로 활성화됩니다).
swift.navigation.windows.project.settings.more=기타 기능은 <strong>단일 클릭으로 파일 열기</strong>와 <strong>열린 파일 항상 선택</strong>을 포함합니다. <strong>단일 클릭으로 파일 열기</strong>는 파일 선택 시 파일의 코드를 자동으로 열어주며 <strong>열린 파일 항상 선택</strong>은 에디터 영역에 포커스가 있는 경우 <strong>프로젝트</strong> 뷰 안의 파일 이름에 자동으로 포커스를 둡니다.
swift.navigation.windows.files=<strong>파일</strong> 뷰는 <ide/><strong>프로젝트</strong> 뷰의 추가 도움 모드입니다. 이 뷰는 {0} 또는 {1} 이 위치한 디렉터리의 모든 파일을 보여줍니다. 이 뷰를 사용하면 프로젝트에 포함되지 않은 파일을 쉽게 열어서 볼 수 있습니다.
swift.navigation.windows.files.activate={0} 을(를) 눌러 <strong>파일</strong> 뷰를 활성화하세요.
swift.navigation.windows.return.to.editor={0} 을(를) 눌러 에디터 창으로 되돌아가세요.
swift.navigation.windows.structure=<strong>구조</strong> 뷰 및 <strong>구조</strong> 팝업은 특정 파일의 구조와 코드의 모든 {0}, {1} 와(과) {2} 또는 {3} 주석을 보여줍니다. 이는 Xcode의 <strong>심볼</strong> 탐색기와 비슷하게 작동합니다.
swift.navigation.windows.structure.activate={0} 을(를) 눌러 <strong>구조</strong> 뷰를 활성화하세요.
swift.navigation.windows.jump.to.source=↑ 및 ↓ 키를 사용하여 여기서 코드 구문을 선택하고 {0} 을(를) 눌러 코드의 어느 위치로 이동하세요.
swift.navigation.windows.structure.popup=이제 {0} 을(를) 눌러 <strong>구조</strong> 팝업을 활성화하세요.
swift.navigation.windows.dismiss.structure.popup={0} 을(를) 사용하여 팝업을 닫거나 ⏎를 눌러 코드의 어느 위치로 이동할 수 있습니다.
swift.navigation.windows.find=<strong>파일에서 찾기</strong>({0}) 대화상자는 Xcode의 <strong>찾기</strong> 탐색기와 같은 기능을 제공합니다. 이제 이 대화상자를 사용하여 전체 텍스트를 검색해보세요.
swift.navigation.windows.build={0} 을(를) 호출하여 프로젝트를 빌드하세요.
swift.navigation.windows.build.messages=<strong>빌드 메시지</strong> 도구 창에서는 컴파일러 출력을 확인할 수 있으며 빌드 메시지를 유형별로 필터링할 수 있습니다(왼쪽의 <strong>메시지 필터링({0}) 버튼을 참조하세요).
swift.navigation.windows.run=이제 시뮬레이터에서 프로젝트를 실행하여 <strong>실행</strong> 도구 창을 확인해봅시다. {0} 을(를) 누르세요.
swift.navigation.windows.run.window=이 도구 창은 콘솔을 표시하며 이곳에서 애플리케이션(또는 <strong>테스트</strong> 실행 구성을 실행 중인 경우 <strong>테스트 러너</strong>)의 출력을 볼 수 있습니다. ({0})을(를) 통해 항상 활성화할 수 있습니다.
swift.navigation.windows.stop={0} 을(를) 눌러 애플리케이션을 중지하세요.
swift.navigation.windows.go.to.file={1} (을)를 사용하여 에뮬레이터 창에서 IDE로 다시 전환하고 {0} (으)로 이동하세요.
swift.navigation.windows.toggle.break={0} 을(를) 사용하여 줄 11에 중단점을 둔 다음 {1} 을(를) 누르세요.
swift.navigation.windows.debug=<strong>디버그</strong> 도구 창({0})은 Xcode의 <strong>디버그</strong> 탐색기와 비슷합니다. 이 도구 창은 오른쪽에 모든 감시, 지역 변수를 표시하며 왼쪽에 스레드 목록을 보여줍니다.
swift.navigation.windows.stop.debug={0} 을(를) 눌러 애플리케이션을 중지하세요.
swift.navigation.windows.breakpoints=<strong>중단점</strong> 대화상자는 Xcode의 <strong>중단점</strong> 탐색기와 같은 기능을 제공합니다. 이 대화상자는 프로젝트 내 모든 중단점 목록을 보여줍니다. {0} 을(를) 사용하여 활성화하세요.
swift.navigation.windows.init.git=Inicialice el repositorio de Git a través de {0}→<strong>Crear repositorio de Git</strong>. Ahora active la ventana de la herramienta <strong>SCV</strong> con el acceso directo {1}.
swift.navigation.windows.vcs.window=<strong>VCS</strong> 도구 창은 <strong>변경</strong> 뷰, <strong>VCS 로그</strong> 등을 포함하여 버전 관리 시스템을 사용하기 위해 필요한 모든 것을 제공합니다.
swift.navigation.precise.name=정밀 탐색
swift.navigation.precise.intro=코드 파일 내부에서 탐색하기 위한 몇몇 단축키를 사용하면 더욱 효율적으로 개발할 수 있습니다. 이러한 단축키를 빠르게 살펴봅시다.
swift.navigation.precise.next.error=이 파일에 여러 경고와 오류가 있습니다. {0} 을(를) 눌러 첫 번째 오류로 이동하세요.
swift.navigation.precise.next.error.again=이제 동일한 단축키를 사용하여 다음 오류로 이동하세요.
swift.navigation.precise.first.error={0} (으)로 첫 번째 오류로 다시 이동하세요.
swift.navigation.precise.comment.combo=이제 {0} - {1} - {2} 을(를) 눌러 각 줄을 주석 처리하세요.
swift.navigation.precise.first.warning=좋습니다\! 이제 {0} 을(를) 다시 누르세요. 파일 내 번째 경고 위치를 알려줍니다.
swift.navigation.precise.fix.warning={0} 을(를) 누른 후 {1} 을(를) 사용하여 첫 번째 경고를 수정하세요.
swift.navigation.precise.next.method=현재 파일의 다음 메서드로 빠르게 이동하려면 {0} 을(를) 누르세요.
swift.navigation.precise.prev.method={0} 을(를) 사용하여 이전 메서드로 이동하세요.
swift.navigation.precise.jump.last.changes=파일이 길며 어디서 무엇을 변경했는지 기억이 잘 나지 않는다고 가정해봅시다. {0} 을(를) 눌러 파일 내 가장 최근 변경 내용으로 이동하세요.
swift.navigation.precise.jump.line=마지막으로 코드에서 특정 줄 또는 열로 이동해야 하는 경우, {0} 을(를) 누르세요.
swift.navigation.search.name=검색
swift.navigation.search.intro=AppCode 내 검색은 다릅니다. 텍스트 검색을 위한 특수 기능 및 기타 코드 검색 기능을 제공합니다. 이는 코드가 단순한 텍스트가 아니라 코드 구문에 의해 형성된 특정 구조를 가지고 있기 때문입니다.
swift.navigation.search.var=이 샘플 파일에는 단어 {0} 을(를) 포함하는 코드 구문이 많습니다. 캐럿은 이름이 {1} 인 변수 위에 있습니다. {2} 을(를) 눌러 단어 {3} 의 모든 텍스트 사용 위치를 찾으세요.
swift.navigation.search.find.usages.var=매우 유용하지 않은가요? 실제 코드에서는 클래스 이름, 메서드 이름, 또는 기타 코드 구문을 포함하지 않고 {0} 변수를 검색해야 할 수도 있습니다. {1} 을(를) 누른 다음 {2} 을(를) 시도해보세요.
swift.navigation.search.find.usages.var.result=이제 AppCode는 {0} 변수의 실제 사용 위치만 표시합니다.
swift.navigation.search.find.usages.proto=기타 코드 구문에도 똑같은 워크플로가 적용됩니다. {0} → {1} 을(를) 눌러 프로젝트 내 {2} 프로토콜의 모든 사용 위치를 찾으세요.
swift.navigation.search.find.usages.method=이제 메서드 {0} 의 모든 사용 위치를 찾아봅시다. {1} → {2} 을(를) 다시 누르세요.
swift.navigation.search.rule=간단한 규칙은 찾아야 하는 텍스트 조각 대신 찾아야 하는 심볼을 식별하는 것입니다. <strong>사용 위치 찾기</strong>는 프로젝트 컨텍스트 내 모든 코드 구문에서 작동하므로 전체 코드 베이스 내 모든 사용 위치를 찾을 수 있습니다.
swift.navigation.search.text.search=물론 무엇을 찾으려는지 정확히 알 수 없어 일부 텍스트를 검색하여 가능한 한 많은 일치 항목을 찾아야 하는 경우도 있습니다. 이 경우에는 {0} 을(를) 사용하여 현재 파일을 검색하거나 {1} 을(를) 사용하여 전체 프로젝트를 검색하세요.
swift.navigation.search.everything=심볼, 파일 이름, 심지어 IDE 설정 및 메뉴 항목에서 일부 텍스트를 검색하고자 하는 경우에는 어떻게 해야 할까요? <shortcut>Double⇧</shortcut>를 눌러 <strong>어디서나 검색</strong> 대화상자를 여세요.
swift.navigation.search.action=마지막으로 <strong>액션 찾기</strong>({0})을 사용하여 IDE 액션을 빠르게 찾고 실행하세요. 예를 들어 ''plugins''를 입력하고 <strong>환경 설정 | 플러그인</strong>을 여세요.
swift.navigation.todo.name=TODO \\& 북마크
swift.navigation.todo.activate=코드 안에 TODO가 얼마나 많이 있는지 궁금한 적이 있으신가요? <ide/>에는 전용 <strong>TODO</strong> 도구창이 있습니다. {0} 을(를) 눌러 이 도구창을 활성화하세요.
swift.navigation.todo.custom=자체 사용자 지정 <strong>TODO</strong> 필터를 정의할 수 있습니다. {0} → <strong>필터 수정</strong>으로 TODO 필터 대화상자를 연 다음 정규식을 사용하여 자체 필터를 추가해보세요.
swift.navigation.todo.go.back={0} 을(를) 눌러 에디터로 되돌아가세요.
swift.navigation.todo.bookmark=이제 {0} 을(를) 누르세요. 이 단축키 설정은 코드 내 북마크를 전환합니다. 북마크는 프로젝트 디렉터리에 저장되며 코드 내 동료에게 특정 위치를 알려주고 싶은 경우 유용합니다.
swift.navigation.todo.all.bookmarks={0} 단축키를 사용하여 모든 북마크를 보세요.
swift.navigation.todo.change.bookmark=북마크 이름을 변경할 수 있습니다. {0} 을(를) 누른 후 새 이름을 입력하세요.
swift.navigation.todo.favorites={0} 을(를) 사용하여 <strong>북마크</strong> 대화상자를 닫으세요. {1} 을(를) 누르세요. 표시되는 <strong>즐겨찾기</strong> 도구 창은 북마크, 중단점, 즐겨찾기를 종합합니다.
swift.refactoring.change.signature.name=시그니처 변경
swift.refactoring.change.signature.intro=<strong>시그니처 변경</strong>은 메서드 및 함수 이름을 변경하고 내부 및 외부 매개변수 이름과 순서를 수정하며 메서드 및 함수의 가시성을 한 번에 변경할 수 있는 리팩터링입니다.
swift.refactoring.change.signature.exec={0} 을(를) 눌러 {1} 이름을 {2} (으)로 변경하세요.
swift.refactoring.change.signature.exec.again={0} 을(를) 다시 누르세요. {1} 매개변수가 있는 행을 클릭하고 이를 {2} (으)로 변경하거나 내부 매개변수 이름을 추가하세요.
swift.refactoring.change.signature.final=마지막으로 <strong>시그니처 변경</strong>을 다시 호출하여 {0}/{1} 버튼 또는 <shortcut>⌥↑</shortcut>/<shortcut>⌥↓</shortcut> 단축키를 사용해 매개변수 순서를 변경하세요.
swift.refactoring.extract.closure.name=클로저 추출
swift.refactoring.extract.closure.intro=클로저 추출을 사용하면 사용자 지정 가능한 매개변수와 반환 유형과 함께 코드 선택 범위를 새 클로저로 캡슐화할 수 있습니다. 이는 추출 메서드 리팩터링과 비슷하게 작동합니다.
swift.refactoring.extract.closure.exec={0} 을(를) 누른 다음 <strong>클로저...</strong>를 선택하세요.
swift.refactoring.extract.function.name=함수 추출
swift.refactoring.extract.function.intro=함수 추출은 선택한 코드를 사용자 지정 가능한 매개변수 및 반환 타입을 가진 새로운 함수로 캡슐화할 수 있는 리팩터링 기능입니다. 일부 코드 줄을 새 {0} 함수로 추출하세요. {1}을(를) 누르세요.
swift.refactoring.extract.function.undo={0}을(를) 눌러 변경을 실행 취소하세요.
swift.refactoring.extract.function.change.params=<ide/>에서 메서드 추출 시 시그니처를 변경할 수 있습니다.<strong>매개변수</strong> 섹션에서 매개변수 중 하나를 클릭하고 {0}/{1} 아이콘을 사용하여 매개변수 순서를 변경하세요. 매개변수 행을 클릭하여 이름을 변경하세요.
swift.refactoring.extract.function.exec.again=이제 {0}을(를) 눌러 추출한 함수의 시그니처를 변경해보세요.
swift.refactoring.extract.variable.name=변수 추출
swift.refactoring.extract.variable.exec={0} 을(를) 눌러 상수 {1} 을(를) 변수 또는 필드 {2} (으)로 추출하세요.
swift.refactoring.extract.variable.description=변수 추출 시 추출하고자 하는 정확한 코드 조각을 선택할 필요는 없습니다. 캐럿을 구문에 둔 다음 필요한 표현식을 선택하면 됩니다.
swift.refactoring.extract.variable.exec.again=이제 {0} 을(를) 누르고 목록에서 변수를 선택하여 {1} 을(를) 변수 {2} (으)로 추출하세요.
swift.refactoring.rename.name=이름 바꾸기
swift.refactoring.rename.any=캐럿을 심볼에 두고 이름 변경 리팩터링을 사용하여 무엇이든 이름을 변경할 수 있습니다.
swift.refactoring.rename.go.to.file={1} 을(를) 눌러 {0} (으)로 이동하세요.
swift.refactoring.rename.var={0} 필드의 이름을 {1} (으)로 변경하는 것과 같은 간단한 동작부터 시작해봅시다. {2} 을(를) 누르고 새 이름을 입력한 다음 {3} 을(를) 누르세요.
swift.refactoring.rename.class=같은 동작을 반복하여 {0} 유형의 이름을 새 값으로 변경하세요.
swift.refactoring.rename.check={0} 을(를) 누르세요. 볼 수 있듯이 리팩터링 이름 변경은 사용 위치가 .xib 및 .storyboard 파일 안에 있더라도 전역적으로 작동합니다.
swift.rdt.debug.name=디버그
swift.rdt.debug.intro=이제 코드를 디버그하는 방법을 익혀봅시다.
swift.rdt.debug.prepare={1} 을(를) 눌러 {0} (으)로 이동하세요.
swift.rdt.debug.toggle.break={0} 을(를) 사용하여 줄 11에 중단점을 둔 다음 {1} 을(를) 누르세요.
swift.rdt.debug.step.into={0} 을(를) 눌러 스텝인투한 다음 {1} (을)를 눌러 스텝오버하세요.
swift.rdt.debug.run.cursor=이제 캐럿을 줄 21에 두고 {0} (으)로 <strong>커서까지 실행</strong>을 실행하세요.
swift.rdt.debug.step.over.next.line=다음 줄로 스텝오버하세요.
swift.rdt.debug.eval={1} (으)로 {0} 을(를) 선택하고 <strong>표현식 평가</strong>({2} → {3})를 사용하세요.
swift.rdt.debug.eval.again=마침표 심볼을 입력하고 프로퍼티를 선택한 다음 {0} 을(를) 눌러 LLDB 콘솔로 전환하지 않고 평가하세요.
swift.rdt.debug.stop={0} 을(를) 눌러 애플리케이션 디버그를 중지하세요.
swift.rdt.run.name=Ejecutar
swift.rdt.run.actions=<ide/>에는 프로젝트 실행을 위한 액션과 디버그를 위한 액션이 따로 있습니다(일반적으로 디버그가 더 느리기 때문에). {0} 을(를) 눌러 애플리케이션을 실행하세요.
swift.rdt.run.stop={0} (으)로 애플리케이션을 중지하세요.
swift.rdt.run.another=좋습니다\! 다른 실행 구성 또는 현재 실행 구성의 시뮬레이터를 선택하여 애플리케이션을 빠르게 실행하려면 {0} 을(를) 누른 후 대상 실행 구성 또는 시뮬레이터를 선택한 다음 {1} 을(를) 누르세요.
swift.rdt.run.final={0} (으)로 애플리케이션을 중지하세요.
swift.rdt.test.name=테스트
swift.rdt.test.prepare={0} 을(를) 눌러 {0} (으)로 이동하세요.
swift.rdt.test.intro=<ide/>는 XCTest, Quick, Kiwi, Catch, Boost.Test, and Google Test를 비롯한 많은 테스트 프레임워크를 지원합니다. 애플리케이션 테스트 시 사용할 수 있는 모든 공통 기능을 살펴봅시다.
swift.rdt.test.intro.tests=<ide/>는 캐럿 위치를 기반으로 테스트 범위를 자동으로 식별합니다. 캐럿이 테스트 파일 내 어딘가에 위치하는 경우, 파일 내 모든 테스트가 실행될 수 있습니다. 단일 테스트에도 똑같이 적용됩니다. 하나의 테스트를 실행하려면 캐럿을 테스트 메서드 안에 두세요.
swift.rdt.test.suite={0} 을(를) 눌러 테스트 도구 내 모든 테스트를 실행하세요.
swift.rdt.test.show=이제 트리 뷰에 테스트를 표시해봅시다. {0} 아이콘을 클릭하세요.
swift.rdt.test.single=같은 {0} 단축키를 사용해 단일 테스트를 실행하세요.
swift.rdt.test.debug.single=테스트를 디버그해봅시다. {0} 을(를) 사용하여 줄 중단점을 둔 다음 {1} (으)로 테스트를 디버그하세요.
swift.rdt.test.resume={0} 을(를) 눌러 계속 실행하세요.
swift.rdt.test.stop.debug={0} 을(를) 눌러 디버그를 중지하세요.
swift.rdt.test.go.back={0} 을(를) 눌러 {0} (으)로 다시 이동하세요.
swift.rdt.test.failing=실패 테스트를 해봅시다. {0} 단축키로 모든 테스트를 다시 실행하세요.
swift.rdt.test.filter.failed={0} 아이콘을 클릭하여 실패한 테스트만 필터링하세요.
swift.rdt.test.delete.failed={1} (으)로 {0} 을(를) 삭제하세요.
swift.rdt.test.rerun.failed=이제 {0} 을(를) 클릭하여 실패한 테스트만 다시 실행하세요.
swift.rdt.test.additional=<strong>테스트 러너</strong>도구창 내 특정 아이콘을 누르면 테스트를 길이별({0})로 또는 알파벳순({1})으로 정렬할 수 있습니다. {2} 을(를) 누른 다음 길이별로 정렬하여 모든 테스트를 다시 실행하세요.
swift.rdt.test.history=기본 제공 테스트 기록은 몇몇 최신 테스트 실행 결과를 자동으로 저장하며 이를 테스트 러너 도구창에 로드할 수도 있습니다. {0} 아이콘을 클릭한 후 목록에 표시된 항목 중 하나를 선택하여 이전 테스트 실행을 로드해보세요.
swift.rdt.test.more=이상입니다\! <ide/>는 <strong>Quick</strong>과 같은 일부 프레임워크에 대해서 더 향상된 테스트 결과 렌더링을 제공합니다. <ide/>에서 지원되는 모든 테스트 프레임워크의 개요를 보려면 <a href\="https\://www.youtube.com/watch?v\=DXvx6xNG_jc">이 동영상</a>을 시청하세요.
