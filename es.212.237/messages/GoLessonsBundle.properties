go.feature.trainer.specify.sdk.to.continue.learning.title=Especifique el Go SDK para continuar aprendiendo
go.feature.trainer.too.old.go.sdk.notification.title=Actualizar Go SDK a una versión posterior <b>{0}</b>
go.feature.trainer.too.old.go.sdk.notification.text=El tutorial requiere GoSDK <b>{1}</b> o posterior para la gestión de dependencias con módulos Go. La versión actual de GoSDK es <b>{0}</b>.
go.onboarding.module.name=Tour de incorporación
go.onboarding.module.description={0} Esta es una vista previa de las funciones clave.
go.onboarding.lesson.name={0} Aprender
go.onboarding.project.view.description=La vista <strong>Proyecto</strong> es una de las ventanas de herramientas principales. Esta vista incluye directorios de proyectos, paquetes específicos del SDK y archivos borrador. Ábralo usando el botón rayado y verá un proyecto de demostración simple. También puede abrir la vista presionando {0}.
go.onboarding.balloon.project.view=Haga clic para abrir la vista <strong>Proyecto</strong>
go.onboarding.balloon.project.directory=Puede ver los archivos del proyecto haciendo doble clic en el directorio del proyecto para expandirlo.
go.onboarding.balloon.open.file=Haga doble clic para abrir {0}
go.onboarding.balloon.open.learn.toolbar=Cambie a la ventana de herramientas {0} para continuar con esta lección
go.onboarding.context.menu=Hay varias formas de ejecutar su código. Uno de ellos es a través del menú contextual.\nSeleccione {0} o pruebe {1}.
go.onboarding.temporary.configuration.description=<ide/> ha creado una configuración de ejecución temporal. Esta configuración se puede encontrar en la barra de herramientas Ejecutar. Esta barra de herramientas le permite ejecutar acciones de ejecución populares para la configuración seleccionada, incluidas Ejecutar {0}, Depurar {1}, Generar código {2} y Ejecutar código con cobertura {3}.
go.onboarding.balloon.click.here=Haga clic aquí para establecer un punto de interrupción
go.onboarding.toggle.breakpoint.1=Quizás hayas notado que el método {1} devuelve {2} en lugar de {0}, que es el valor esperado. Vayamos a la declaración de devolución y depuremos el código problemático.
go.onboarding.toggle.breakpoint.2=Haga clic en el margen del área resaltada para establecer un punto de interrupción.
go.onboarding.balloon.start.debugging=Haga clic en el icono para comenzar a depurar
go.onboarding.start.debugging=Haga clic en el icono {0} para iniciar el proceso de depuración.
go.onboarding.balloon.about.debug.panel=La ventana de herramientas {0} proporciona una barra de herramientas con varias acciones de depuración. Pruebe esta acción más tarde tomando la clase {1}.
go.onboarding.balloon.stop.debugging=Haga clic en el icono para comenzar a depurar
go.onboarding.stop.debugging=Comencemos a depurar. Haga clic en el icono {0}.
go.onboarding.close.debug.tool.window=Cierre la ventana de la herramienta {0} y presione {1}.
go.onboarding.type.division=Encontramos un problema en nuestro código, así que solucionémoslo. Divida la suma resultante por la longitud de los valores. Por favor ingrese {0}.
go.onboarding.choose.len.item=A medida que escribe, <ide/> muestra automáticamente las opciones de finalización de código. Utilice las flechas del teclado para seleccionar el elemento {0} y luego presione {1}.
go.onboarding.invoke.completion=Ahora llamemos a la finalización del código para insertar {0} dentro del paréntesis {1}. Presione {2} para abrir la lista de finalización de código.
go.onboarding.choose.values.item=Puede reducir la cantidad de elementos sugeridos escribiendo {0}. Seleccione {1} y luego presione {2}.
go.onboarding.invoke.intention.for.warning.1=Acabamos de corregir un error, pero podemos hacer que este código se vea más limpio. <ide/> resalta líneas de código que podrían mejorarse y agrega una bombilla de luz amarilla.
go.onboarding.invoke.intention.for.warning.2=Presione {0} para obtener una vista previa de las advertencias y aplicar soluciones rápidas.
go.onboarding.select.fix=Aplicar el primer elemento: {0}. La adaptación de esta solución elimina paréntesis innecesarios.
go.onboarding.reformat.code=Sigamos organizando el código. Haga clic en {0} para reformatear.
go.onboarding.invoke.intention.for.code=Las intenciones también le ahorran tiempo y hacen que su código sea más fácil de escribir. Convirtamos rápidamente la función {0} en una función exportada usando intenciones. Presiona 1}.
go.onboarding.apply.intention=Seleccione {0} y presione {1}.
go.onboarding.invoke.search.everywhere.1=Cuando trabaje en <ide/>, es posible que desee buscar archivos dentro de un proyecto, símbolo, tipo o acción IDE. En esta lección, busquemos la acción {0} y pongamos en minúscula la cadena {1}.
go.onboarding.invoke.search.everywhere.2=Haga clic en {0} dos veces para abrir el cuadro de diálogo {1}.
go.onboarding.search.everywhere.description=Como puede ver, el texto seleccionado, {0}, se ha copiado automáticamente a la cadena de entrada. Intentemos ingresar {1} en lugar de {0}.
go.onboarding.apply.action=Seleccione la acción {0} y presione {1}.
go.onboarding.case.changed=El caso ha sido cambiado.
go.onboarding.epilog=Felicidades. Ha completado el recorrido de incorporación. Ahora puede continuar con lo siguiente:\n"{0}">Cerrar</callback>\n"{2}">Ver</callback>
go.onboarding.return.to.welcome=\ y volver a la pantalla de inicio
go.onboarding.finish.title=Felicidades
go.onboarding.finish.text=<ide/> Acaba de completar el recorrido de incorporación.\nCerrar proyecto de demostración
go.onboarding.finish.modules=Ver más clases
toggle.case.part=case
go.working.with.json.name=Trabajar con JSON
go.working.with.json.copy=<ide/> tiene varias herramientas para ayudarle a procesar su código JSON de manera más efectiva.\nReemplace la sección de comentarios haciendo clic en {0}. Cuando aparezca el cuadro de diálogo {1}, haga clic en <strong>Sí</strong>.\nCambie el nombre de la estructura, ingrese {0} y luego presione {1} para finalizar la edición. El IDE corrige automáticamente el formato.
go.working.with.json.introduce.type=Extraigamos la estructura {0} contenida dentro de la estructura {1}.\nPuede aplicar diferentes estilos de código a los nombres de campo dentro de las etiquetas. Por ejemplo, intente cambiarlo a camelCase. Presione {0}, haga clic en {1} y luego seleccione {2}.
go.working.with.json.update.value.in.tags=Lo mismo ocurre con las actualizaciones de ubicación del valor de la etiqueta. Digamos que desea agregar {0} a todas las etiquetas en la estructura actual.\nTambién puede usar acciones de intención para agregar etiquetas XML y etiquetas ASN1.\nCree tipos y solucione incompatibilidades de tipos.
go.quick.fixes.create.type=En el ejemplo, utilizamos un tipo de estructura con campos pero no los definimos.\nHaga clic en {0} para pasar al siguiente error.
go.quick.fixes.type.incompatibility=Aquí <ide/> espera el tipo {0} pero se le pasa el segmento {1}.\ngetter y creación del definidor
go.generate.getters.and.setters.action=Utilice acciones de intención en situaciones en las que necesite crear captadores y definidores para campos de estructura.\nManejo de errores no controlados
go.handling.unhandled.errors.handle.error={0} La cobertura del código advierte sobre funciones o métodos que devuelven valores de error, pero estos valores de error no se verifican. Para solucionar esto, puede utilizar la siguiente solución rápida:\nIngrese {0} como nombre de la variable y presione {1}.
go.handling.unhandled.errors.wrap.in.closure=Otra solución rápida es utilizar las declaraciones {0} y {1}. {2} Funciona de manera similar a la solución rápida, pero envuelve el código dentro de un cierre.\n//go:embed compatible.
go.support.of.go.embed.string=Puede usar la directiva {0} para incluir archivos y directorios en el binario de Go durante el tiempo de compilación.\n{0}: para usar la directiva {1}, asegúrese de tener instalado Go 1.16 o posterior. Para obtener más información sobre la instalación del SDK de Go, consulte <a href="{2}">Descargar el SDK de Go desde la documentación</a>.
go.support.of.go.embed.navigate=Todavía hay problemas con el archivo. Presione {0} para pasar a otro problema.
go.support.of.go.embed.fs=Una verificación mostró que el directorio especificado no existe. Puede reemplazar este directorio con un directorio existente.\nvarCheckError plantilla de sufijo
go.var.check.error.postfix.template.call=Continuemos nuestra discusión sobre el manejo de errores. Esta vez es la plantilla de sufijo {0}. Si lo escribe después de un identificador que devuelve un error, <ide/> agrega automáticamente el nombre de la variable predeterminada y devuelve el error generado por la función.\nUse un identificador vacío escribiendo {0} y luego presione {1}.
go.var.check.error.postfix.template.quick.fix=Go 1.16 introduce una nueva verificación para {0}. Esta verificación garantiza que el segmento de bytes no sea el valor no clasificado {1}. <ide/> detecta estos casos y tiene una solución rápida para resolver el problema. Presione {2} y luego seleccione {3}.
go.wrapping.lesson.name=envoltura de línea larga
go.wrapping.put.arguments.on.separate.lines=La función {0} recibe bastantes argumentos. El problema es que el primer argumento es muy largo y no puedo determinar qué viene después. Puedes solucionar este problema. Ahora que el signo de intercalación está colocado después del corchete de apertura, debemos presionar {1} y seleccionar {2}.
go.wrapping.enable.soft.wrap=El primer argumento todavía está fuera del área visible. Recomendamos habilitar el ajuste suave para filas largas. Presione {0}, ingrese {1} y luego active el interruptor {2}. Luego podrás cerrar la búsqueda presionando {3}.
go.wrapping.put.parameters.on.same.lines=Creo que se vería mejor si los argumentos de la función {0} se manejaran en una sola línea. Para fusionar, coloque el signo de intercalación después del corchete de apertura, llame a la acción de intención presionando {1} y luego seleccione {2}.
go.struct.inspections.lesson.name=Inspección de estructura
go.struct.inspections.jump.to.warning=Go tiene reglas para la programación de etiquetas de estructura. Puede encontrar más información sobre esta regla en <a href\="{0}">este artículo en golang.org</a>.\nAdvertencia: dos campos de estructura ({0} y {1}) para el mismo JSON El nombre del campo es una mala idea. Cuando se produce este error, el programa se ejecuta, pero falta una clave en el resultado.\nMover de comentarios
go.comment.navigation.task=El paquete {0} no es muy grande, por lo que es fácil de navegar. Sin embargo, algunos paquetes pueden ser enormes y contener cientos de códigos y líneas de comentarios.\nCancelación de contexto no seguro
go.inspection.unsafe.context.cancellation.go.to.error=La verificación del código {0} garantiza que la función {1} devuelta por {2} y funciones similares se llamen en todas las rutas de ejecución. Para obtener más información sobre los paquetes de contexto, consulte <a href\="{3}">Contextos de paquetes</a> en golang.org.\nNo llame a {0} en la ruta de ejecución {1}. Por lo tanto, debe escribir. {2} para corregir la advertencia.
go.formatting.lesson.name=Aplicar estilo de código a su código
go.formatting.reformat.selection=<ide/> admite el formato de código. Para reformatear el bloque de código seleccionado, presione {0}.
go.formatting.clear.selection=Para borrar la selección, presione {0}.
go.formatting.whole.file=Para reformatear todo el archivo fuente cuando no hay líneas seleccionadas, use {0}.
go.fmt.lesson.name=ir a correr
go.fmt.task=Si desea formatear su código como {0}, puede ejecutarlo presionando {1}.
go.comments.lesson.name=Agregar y eliminar comentarios
go.comments.comment.one.line=Comente cualquier línea con {0}.
go.comments.uncomment.line=Eliminar comentarios de líneas comentadas con el mismo acceso directo {0}
go.comments.comment.block=Puede eliminar comentarios de bloques de código. Por ejemplo, para eliminar un comentario de un bloque seleccionado, presione {0}.
go.code.completion.for.time.package.name=Finalización del código del paquete de tiempo
go.code.completion.for.time.package.year=Para dar formato a los elementos de fecha y hora, el paquete {0} utiliza un diseño ya definido, {1}. Es por eso que utilizamos el elemento de tiempo de referencia como marcador de posición para definir el formato.\nPresione {0} nuevamente y seleccione {1} como mes.
go.code.completion.for.time.package.hour=Haga lo mismo con el tiempo seleccionando {0} de la lista de sugerencias.
go.code.completion.for.time.package.minute=Complete la plantilla seleccionando {0} como minutos.
go.basic.completion.lesson.name=Finalización de código básico
go.basic.completion.complete.again=Seleccione {0} en el menú de búsqueda y presione {1}.
go.basic.completion.complete.statement=Presione {0} para completar esta declaración y moverla a una nueva línea.
go.basic.completion.invoke.completion=<ide/> inserta automáticamente una nueva declaración de importación. Ahora, al presionar {0} para activar la "finalización predeterminada", aparecerá nuevamente el menú de búsqueda.
go.basic.completion.type.and.choose=De forma predeterminada, <ide/> sugiere inmediatamente la finalización del código. Si comienza a escribir {0} donde está el cursor, aparecerá un menú de búsqueda con las sugerencias correspondientes. Cuando presiona {2}, puede seleccionar {1} en el menú de búsqueda.
go.smart.type.completion.lesson.name=Finalización de tipo inteligente
go.smart.type.completion.task=La finalización de tipo inteligente filtra la lista de sugerencias para incluir solo aquellos tipos que son aplicables en el contexto actual. Haga clic en {0} para ver una lista de las sugerencias correspondientes. Presione {1} para seleccionar el primer elemento.
go.smart.type.completion.special.cases.lesson.name=Creación de aserción de tipo y cambio
go.smart.type.completion.special.cases.number=Si necesita validar o verificar el tipo de una variable, puede usar afirmaciones de tipo o declaraciones de cambio. <ide/> muestra esos tipos al principio de la lista de sugerencias. Continúe ingresando nombres de tipos para reducir la cantidad de sugerencias.\nSi decide pasar una cadena a la función {0}, verá un error {1}. Si desea comprobar el tipo de un valor, puede utilizar la sintaxis de cambio de tipo. Presione {2} para seleccionar {3}.
go.smart.type.completion.and.pointers.lesson.name=Punteros y finalización de tipos inteligentes
go.smart.type.completion.and.pointers.first.task=<ide/> puede sugerir una lista de posibles direcciones de punteros y variables.\nLa finalización inteligente de tipos también funciona con punteros. Para devolver un puntero, presione {0} para seleccionar {1}.
go.postfix.templates.lesson.name=Plantillas de sufijos (nn, pánico, rr, retorno)
go.postfix.templates.nn=Las plantillas de sufijo le permiten convertir una expresión ya ingresada en otra expresión según el sufijo después del punto, el tipo de expresión y su contexto. Puede utilizar un conjunto de plantillas de finalización de sufijos predefinidas o crear una nueva plantilla. Para obtener más información sobre las plantillas de sufijos personalizadas, consulte <a href \= "{0}">Este artículo</a>.\nEscriba {0} e ingrese <action>EditorEnter</action> Presione . Seleccione {1} de la lista de sugerencias.
go.postfix.templates.rr=La plantilla de finalización de sufijo {0} genera código para comprobar que la variable de error no es {1}. Puede utilizar la plantilla de finalización de sufijo {0} para el manejo de errores.\nEscriba {0} y aplique la plantilla de sufijo {1}.
go.postfix.completion.lesson.name=Completar y ordenar sufijos
go.postfix.completion.task=Las porciones del alfabeto están desordenadas. Para ordenar correctamente un segmento de cadena, puede aplicar la función {0} del paquete {1} al segmento.\nFinalización de código para la función
go.completion.for.functions.choose.item=Seleccione {0} de la lista y presione {1}. Cuando vea una lista de sugerencias, puede comenzar a escribir para reducir la cantidad de resultados.
go.completion.for.functions.press.twice=Presione {0} <strong>doble</strong> para buscar todas las funciones que acepten un elemento como primer argumento. Tenga en cuenta que el elemento no es un método, pero el punto hace que parezca así.
go.debug.function.calls.lesson.name=Llamadas a funciones de depuración
go.debug.function.calls.version.warning=<strong>Nota</strong>\: Debe tener instalado Go 1.11 o posterior para utilizar esta función.
go.debug.function.calls.toggle.breakpoint=En el modo de depuración, puede pasar diferentes valores a una función y ver qué devuelve la función. Para obtener más información sobre la función de evaluación de expresiones, consulte la <a href\="{0}">documentación</a>.\nPara iniciar el servidor de depuración, su sistema operativo puede solicitar una contraseña.
go.debug.function.calls.start.debug=Presione {0} para iniciar una sesión de depuración.
go.debug.function.calls.run.to.cursor=El cursor se encuentra ahora al final de la línea 15. Presione {0} para ver cómo funciona la acción {1}.
go.debug.function.calls.step.over=Intente utilizar {1} para omitir la declaración {0}.
go.debug.function.calls.evaluate.expression=Presione {1} para invocar la acción {0}.
go.debug.function.calls.enter.expression.to.evaluate=Comience a escribir {1} en el campo {0} y luego seleccione {2} de la lista de sugerencias.
go.debug.function.calls.add.arguments.for.evaluation=Introduzca {0} entre paréntesis. El campo debe mostrar {1}.
go.debug.function.calls.click.evaluate=Haga clic en {0} o presione {1}. Luego puede cerrar el cuadro de diálogo.
go.debug.function.calls.stop.debug=Presione {0} para detener la depuración y finalizar la lección.
go.better.variable.names.in.templates.lesson.name=Nombres de variables mejorados en plantillas activas y de sufijos
go.better.variable.names.in.templates.description=<ide/> le ayuda a especificar nombres para las variables creadas con las plantillas activas {0} y {1}. Por ejemplo, podría elegir {2} o {3} para índices y {4}, {5} o {6} para valores de las siguientes sugerencias:
go.better.variable.names.in.templates.use.forr=Ingrese {0} y seleccione la plantilla de sufijo {1} de la lista de finalización.
go.better.variable.names.in.templates.finish=Observe que <ide/> sugiere {0} para el índice y {1} para el valor. Presione {2} para finalizar esta lección.
go.dump.goroutines.name=Volcado de gorutinas
go.dump.goroutines.toggle.breakpoint=La sección {4} describe algunas de las funciones agregadas a <ide/>. Para conocer otras funciones, consulte la <a href\="{0}">Página de novedades</a>.\nHaga clic en el botón {1} en la ventana de herramientas {0}.
go.dump.goroutines.click.button.DlvFilterGoroutinesAction=En la pestaña {0} abierta, haga clic en el botón {1}.
go.dump.goroutines.filter.goroutines=Ingrese {1} en el campo de búsqueda {0} para filtrar la lista. Este filtro deja solo la pila de ejecución con gorutinas con {1} en su nombre.
go.general.templates.lesson.name=Plantillas activas y de sufijo\: else, fori, var
go.general.templates.else=Las plantillas activas insertan construcciones comunes en su código, como bucles, condicionales, declaraciones varias o declaraciones impresas. Esto, junto con las plantillas de sufijos, le ayudará a escribir código más rápido.\nAhora escriba {0} y seleccione esta plantilla activa de la lista de sugerencias. Establezca las siguientes condiciones en el bucle: {Uno}.
go.general.templates.type.iteration=En cada iteración, el bucle {0} debe ejecutar {1}
go.general.templates.vars=Mi programa actual lee los números que el usuario ingresa en el teclado y los usa en un bucle {0}. Sin embargo, a partir de <ide/> 2020.1, puede usar plantillas ({1} para constantes, {2} para variables, {3} para tipos y {4} para declaraciones de importación) para codificar grupos de declaraciones más rápido.\nEn vivo y manejo de errores en plantillas de sufijo\: if y rr
go.handling.errors.with.templates.if.not.null=Algunas funciones devuelven dos valores. Por ejemplo, {0} devuelve un puntero a {1} y un valor de error. Si el valor del error es {2}, el archivo se abre correctamente. Si el error no es {3}, se produjo un error. El uso de plantillas activas y de sufijos en <ide/> le permite escribir el manejo de valores de error mucho más rápido.\nSi ocurre un error al abrir un archivo, debe devolver un segmento y un error. Aquí podemos devolver {0} y {1}. Empiece a escribir {2} y seleccione {3} plantilla activa.
go.handling.errors.with.templates.error.case=La finalización del código con sufijos ayuda a reducir el movimiento del cursor hacia atrás al escribir código. Estas plantillas le permiten convertir expresiones que ya ha ingresado en otras expresiones. Puede encontrar más lecciones sobre cómo completar sufijos en la sección {0}.\nUtilice plantillas y tipos activos
go.live.templates.with.types.struct.template=Una estructura es un tipo que contiene campos con nombre. Las estructuras son útiles para agrupar datos para formar registros. Creemos uno para este código.\nAgregue {0} como campo en la estructura {1}.
go.live.templates.with.types.interface.template=En Go, una interfaz es un tipo personalizado que le permite especificar un conjunto de firmas de métodos. Agreguemos uno\!\nAgregue {0} como firma del método para la interfaz {1}.
go.live.templates.with.types.complete.in.comment=Los comentarios describen cómo funciona un programa y la intención del usuario implícita en el mismo. Puede utilizar la finalización de código en los comentarios para completar los nombres de parámetros, funciones y métodos.\nActualmente, el método {0} devuelve solo parámetros de cadena. Debe agregar un valor de retorno {1} con el valor del área. <ide/> agrega automáticamente paréntesis alrededor de múltiples tipos de retorno.\nSi el cursor sigue a la palabra clave {0} dentro de una función, la finalización del código sugiere variables locales y valores cero, incluso si se produce un error. Completemos el método {1} para calcular el área.\nFinalmente, creemos una nueva instancia del rectángulo y pasemos valores para {0} y {1}.\nCreemos el método que falta.
go.generate.missing.methods.task=La acción {0} le permite crear métodos faltantes y especificar nombres de parámetros incluso si el nombre del método o parámetro se omite en la definición de la interfaz.\nModificar archivo de prueba
go.fixing.test.open.problems.toolwindow=La ventana de la herramienta {0} muestra una lista de advertencias y errores para el archivo actual y proporciona una descripción del problema.\nHay algunos problemas a los que debe prestar atención. Algunos problemas se pueden solucionar desde la propia ventana de herramientas {0}. Sin embargo, algunos problemas requieren acciones específicas en el editor. ¡Intentemos aplicar todas las correcciones en el editor\!\nEsta conversión a {0} devuelve la representación UTF-8 del punto de código Unicode, no la representación de cadena decimal requerida.\nEl siguiente error es bastante obvio: no hay llaves y comas. Sin embargo, no quiero escribirlo repetidamente en cada línea. Aquí es donde varios cursores pueden ayudar.\nEn la <a href\="{0}">documentación de Go</a> para el paquete {1}, puede especificar nombres de funciones en notación camel (por ejemplo, {2}). Dice que debe escribirse como . Aquí la función {3} no cumple con esta regla.\nEl último no es en realidad un error, sino una simple refactorización para simplificar el código. Verifique la negación de la función {0}. Veamos qué podemos hacer aquí.\nSoluciones rápidas, refactorización, documentación externa
go.quick.fix.refactorings.change.to.formatting=La función {0} imprime la lista de variables en el formato predeterminado. Mientras tanto, la función {1} le permite especificar el formato de salida. Este ejemplo utiliza el verbo de formato ({2}) para números de punto flotante. Pero use {0} en lugar de {1}.\nHay varias formas de declarar variables. Una vez declarada una variable, puede utilizar el signo igual ({0}) para asignar su valor.\nSi cambia el nombre de un elemento en <ide/>, se aplicará ese cambio. <ide/> cambia el nombre de los elementos del código y actualiza sus ubicaciones de uso en consecuencia.\nLa refactorización de extracción de métodos le permite tomar un fragmento de código, moverlo a una función separada y reemplazar el código antiguo con una llamada de función. Movamos toda la impresión a una función separada.\nLos documentos externos abren la información que necesita en su navegador web, lo que le permite navegar a símbolos relacionados mientras archivan la información para mayor referencia.\nSeleccione {0} y presione {1}.
go.introduce.function.lesson.name=Crear una función a partir de un tipo de función
go.introduce.function.intro=<ide/> puede generar funciones y métodos a partir de llamadas. Ahora, si falta una función o método, también puedes crearlo a partir de ese tipo.
go.introduce.function.invoke.intentions=Asegúrese de que el cursor esté en la posición del identificador {0} utilizado como referencia de función. Presione {1} para llamar a la acción de intención.
go.introduce.function.final.propose=Luego, ahora puede ajustar los parámetros según sus necesidades.
go.delete.parameter.names.lesson.name=Eliminar nombre del parámetro
go.delete.parameter.names.intro=<ide/> solo resalta los nombres de los parámetros obsoletos si su tipo se utiliza para implementar la especificación del método. En este caso, puede cambiar el nombre de este parámetro a {0} o eliminarlo por completo.
go.delete.parameter.names.invoke.intentions=Si un método que implementa una interfaz requiere parámetros, no es seguro eliminarlos. Presione {0} para ver una lista de opciones posibles.
go.delete.unused.parameters.lesson.name=Eliminar parámetros no utilizados
go.delete.unused.parameters.intro=<ide/> puede detectar parámetros de una firma que no se utilizan en el cuerpo de un método o función. Si ese parámetro no se utiliza, puede utilizar la solución rápida {0} para eliminarlo.
go.delete.unused.parameters.invoke.intentions=Verifique el método {0} en el editor. El cursor está en la posición del primer parámetro. Presione {1} para llamar a la acción de intención.
go.fill.struct.fields.lesson.name=Entrada de campo de estructura
go.fill.struct.fields.intro=Cuando crea una nueva estructura, puede generar automáticamente nombres de campos para esa estructura. {0} Para obtener información sobre acciones intencionales, consulte la <a href\="{1}">documentación de GoLand</a>.
go.fill.struct.fields.invoke.intentions=Observe que el signo de intercalación se coloca entre las llaves en la estructura {0}. Presione {1} para llamar a la acción de intención.
go.implement.missing.methods.lesson.name=Implementación del método faltante
go.implement.missing.methods.goto.next.error=Presione {0} para pasar al siguiente error resaltado en el archivo.
go.delete.conversion.lesson.name=Conversión de tipo redundante
go.delete.conversion.intro=La comprobación de <strong>conversión de tipo duplicado</strong> advierte sobre conversiones de tipo redundantes que pueden omitirse (por ejemplo, al convertir un literal de cadena en una cadena). Para obtener más información sobre esta verificación, consulte <a href\="{0}">Conversión de tipo duplicado</a>.
go.delete.conversion.invoke.intentions=Verifique la función {0} en el editor. El cursor está en la posición del elenco del tipo {2} al {1}. Presione {3} para llamar a la acción de intención.
go.parameters.specification.lesson.name=Especificaciones de tipo corto y largo para parámetros.
go.parameters.specification.intro=Si su función o firma de método tiene múltiples parámetros de un solo tipo, puede usar una especificación de tipo corta ({0}) para esos parámetros, o una especificación de tipo separada ({1}) para cada parámetro.
go.parameters.specification.invoke.intentions=Observe que el símbolo de intercalación está en la posición del primer parámetro del método {0}. Presione {1} para llamar a la acción de intención.
go.parameters.specification.notice.signature.combined=Vea cómo se combinan los tipos de firma.
go.parameters.specification.press.again=Presione {0} nuevamente.
go.parameters.specification.notice.signature.expanded=La firma ha vuelto a su estado inicial.
go.variadic.functions.lesson.name=Procesamiento de funciones variables
go.variadic.functions.unpack.slice=Una función variada es una función que se puede llamar con un número variable de argumentos, como {0}.\nPuede reemplazar un segmento con los argumentos variados del segmento. Presione {0} para invocar la refactorización {1}.
go.variadic.functions.introduce.variable=Para revertir la refactorización {0}, utilice la refactorización {1}. Presione {2} y seleccione {3} de la lista de sugerencias.
go.improve.names.lesson.name=Denominación mejorada de variables de error.
go.improve.names.intro=<ide/> sugiere las variantes de nombre más populares para las variables de error ({0}) y contexto ({1}).
go.improve.names.introduce.variable=Asegúrese de que el cursor esté en la posición de la llamada {0}. Haga clic en {1} para extraer variables.
go.improve.names.apply.fix=Seleccione todas las llamadas de la lista y presione {0}. {1} es el nombre de error más común, por lo que lo sugerimos como nombre de variable en <ide/>.
go.extract.method.lesson.name=Extraer funciones y métodos.
go.extract.method.task=La refactorización {0} le permite encapsular su código en una nueva función o método con parámetros y tipos de retorno personalizables. Extraigamos algunas líneas de código en una nueva función. Presiona 1}.
go.extract.methods.with.returns.lesson.name=Método de extracción que contiene retorno
go.extract.methods.with.returns.intro={0} La refactorización le permite tomar un fragmento de código, moverlo a un método independiente y reemplazar el código antiguo con una llamada al nuevo método. Si el código termina en una declaración de devolución, se extrae palabra por palabra. {0} Para obtener más información sobre la refactorización, consulte el artículo <a href\="{1}">Extracción de funciones y métodos</a>.
go.extract.methods.with.returns.invoke.refactoring=Asegúrese de que haya un signo de intercalación antes de la cláusula {0} que se pueda extraer. Presiona 1}.
go.extract.methods.with.returns.complete.refactoring=Ingrese {0} y presione {1}.
go.extract.variable.lesson.name=Extracción de variables
go.extract.variable.task=Presione {0} para extraer la variable y seleccione una expresión de cadena, luego ingrese un nuevo nombre y presione {1} para completar la refactorización.
go.inline.variable.lesson.name=Variables extraídas en línea
go.inline.variable.task=A diferencia de la {0} refactorización, {1} ayuda a eliminar variables redundantes. Presione {2} para alinear la variable {3} en una única ubicación de uso.
go.rename.lesson.name=cambiar nombre
go.rename.invoke.intentions=Puede colocar un símbolo de intercalación en un símbolo y cambiarle el nombre usando la refactorización {0}. Coloque el cursor en el campo {1} de su código y presione {2}.
go.rename.apply.intention=Introduzca un nuevo nombre para este campo. Por ejemplo, escriba {0} y luego presione {1} para guardar el resultado.
go.what.s.new.module.name=Novedades de GoLand 2020.3
go.what.s.new.module.description=Novedades de GoLand 2020.3 (diciembre de 2020).
go.basic.editing.module.name=edición básica
go.basic.editing.module.description=Estas son acciones básicas que pueden ayudarte a editar código.
go.code.completion.module.name=Finalización de código
go.code.completion.module.description=La finalización de código consciente del contexto acelera el proceso de codificación y reduce los errores tipográficos.
go.debugging.module.name=depurar
go.debugging.module.description=La depuración puede ayudarle a encontrar y solucionar problemas dentro de su aplicación.
go.testing.module.name=Pruebas
go.testing.module.description=Las pruebas garantizan que su código funcione correctamente y como se esperaba.
go.generating.code.module.name=Codigo de GENERACION
go.generating.code.module.description=Acciones y plantillas que generan fragmentos de código.
go.intention.actions.module.name=Acción de intención
go.intention.actions.module.description=Las acciones intencionales pueden sugerir variaciones alternativas a su código, así como soluciones a los problemas detectados.
go.refactorings.module.name=Refactorización
go.refactorings.module.description=La refactorización ayuda a mantener su código manejable y libre de espacios vacíos o código duplicado.
go.support.for.table.tests.name=Soporte de pruebas de tabla
go.support.for.table.tests.call.context.menu=Al ejecutar una prueba, <ide/> tiene en cuenta la posición del signo de intercalación.\nPuede ejecutar cada subprueba utilizando el mismo método. El cursor actual está en la subprueba {2}. Haga clic en {0} para ejecutar. Puedes consultarlo en \n"{1}">documentación de GoLand</a>.
go.code.completion.for.benchmarks.bn.name=Finalización del código de prueba comparativa
go.code.completion.for.benchmarks.bn.for.loop=Cuando ingresa {0} dentro de un punto de referencia, <ide/> sugiere {1} como expresión condicional para el bucle {0}.\nPara crear un nuevo punto de referencia, escriba {0} Comience a escribir, luego seleccione {0} en el lista de sugerencias.
go.support.of.testify.framework.completion.and.subtests.name=Finalización de código y subpruebas dentro del marco testify
go.support.of.testify.framework.completion.and.subtests.assert=<strong>Requisitos previos</strong>\: Para salir de esta clase, debe <a href\="{0}">Habilitar la indexación de todo el GOPATH</a> y <a href\="{1}"> { 2} Instale el paquete</a>.\nAdemás, puede ejecutar las subpruebas {0} y {1} siempre que los nombres de las subpruebas sean constantes de cadena.\nNavegación, restricciones de compilación, formato de código
go.to.internal.directory.build.constraints=<a href="{0}">Restricciones de compilación antierrores sugeridas</a> reemplaza {1} por {2}. Durante el período de transición {1}-{2}, la sintaxis se mantendrá en las versiones de Go 1.16-1.18. En Go versión 1.16, puede usar la sintaxis anterior o usar ambas sintaxis simultáneamente.\nA partir de {0} 2021.2, puede navegar a la interfaz almacenada en la carpeta {1}.\nPara verificar la ubicación del archivo, coloque el cursor sobre las pestañas del editor. .Sólo señala. Por ejemplo, coloque el cursor sobre la pestaña {0}.
go.to.internal.directory.reformat.gofmt.on.save=Es necesario reformatear el código del archivo {0}. Haga clic en {1} para reformatear el archivo.\nUtilice parámetros de tipo
go.enable.generics.in.go.files.enable.quick.fix=De forma predeterminada, la compatibilidad con parámetros de tipo (o genéricos) está deshabilitada. Antes de 2021.2, los parámetros de tipo solo se podían experimentar en archivos {1}, pero ahora también se admiten en archivos {0}.\nLa forma más sencilla de ejecutar el código es utilizar {0}. Para utilizar esto, debe convertir su archivo a la extensión {3}. Esto se puede hacer con la acción {1}.\nCambie la extensión del archivo. El nombre completo del archivo debe ser {0}.
