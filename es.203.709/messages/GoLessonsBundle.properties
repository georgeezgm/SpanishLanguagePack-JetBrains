go.feature.trainer.specify.sdk.to.continue.learning.title=Especifique el Go SDK para continuar aprendiendo
go.feature.trainer.too.old.go.sdk.notification.title=Actualizar Go SDK a una versión posterior <b>{0}</b>
go.feature.trainer.too.old.go.sdk.notification.text=El tutorial requiere GoSDK <b>{1}</b> o posterior para la gestión de dependencias con módulos Go. La versión actual de GoSDK es <b>{0}</b>.
go.dump.goroutines.name=Volcado de gorutinas
go.dump.goroutines.toggle.breakpoint=La sección {4} describe algunas de las funciones agregadas a <ide/>. Para conocer otras funciones, consulte la <a href\="{0}">página Novedades</a>.\nEn Go, las operaciones simultáneas se denominan gorutinas. Para crear una gorutina, use la sintaxis {1} antes de llamar a una función o método.\nPuede crear un volcado de todas las gorutinas utilizadas por su programa, aplicar un filtro para buscar gorutinas específicas o examinar los resultados filtrados. \n Para volcar ngoroutine necesita iniciar la depuración. Sin embargo, primero debes crear un punto de interrupción. Presione {2} para alternar el punto de interrupción.{3}
go.dump.goroutines.click.button.DlvDumpAction=Haga clic en el botón {1} en la ventana de herramientas {0}.
go.dump.goroutines.click.button.DlvFilterGoroutinesAction=En la pestaña {0} abierta, haga clic en el botón {1}.
go.dump.goroutines.filter.goroutines=Ingrese {1} en el campo de búsqueda {0} para filtrar la lista. Este filtro deja solo la pila de ejecución con gorutinas con {1} en su nombre.
go.support.for.table.tests.name=Soporte de pruebas de tabla
go.support.for.table.tests.call.context.menu=Al ejecutar pruebas, <ide/> tiene en cuenta la posición del cursor.\nPor ejemplo, el cursor actual se coloca en la función {0}. Presione {1} para ejecutar todas las pruebas dentro de esta función.
go.support.for.table.tests.run.subtest=Puede ejecutar cada subprueba utilizando el mismo método. El cursor actual está en la subprueba {2}. Haga clic en {0} para ejecutar. Puedes consultarlo en \n"{1}">documentación de GoLand</a>.
go.code.completion.for.benchmarks.bn.name=Finalización del código de prueba comparativa
go.code.completion.for.benchmarks.bn.for.loop=Si ingresa {0} dentro del punto de referencia, <ide/> sugerirá {1} como expresión condicional para el bucle {0}.\nPor ejemplo, {0} escríbalo y luego seleccione {2} de la lista de sugerencias. .
go.code.completion.for.benchmarks.bn.create.bench=Para crear un nuevo punto de referencia, comience a escribir {0} y luego seleccione {0} de la lista de sugerencias.
go.code.completion.for.time.package.name=Finalización del código del paquete de tiempo
go.code.completion.for.time.package.year=Para dar formato a los elementos de fecha y hora, el paquete {0} utiliza un diseño ya definido, {1}. Es por eso que utilizamos elementos de tiempo de referencia como marcadores de posición para definir el formato.\nSi no recuerda el diseño predefinido, puede usar la finalización de código para obtener sugerencias. Por ejemplo, presione {2} y luego seleccione {3} para pegar el elemento de año.
go.code.completion.for.time.package.month=Presione {0} nuevamente y seleccione {1} como mes.
go.code.completion.for.time.package.hour=Haga lo mismo con el tiempo seleccionando {0} de la lista de sugerencias.
go.code.completion.for.time.package.minute=Complete la plantilla seleccionando {0} como minutos.
go.inspection.unsafe.context.cancellation.name=Cancelación de contexto inseguro
go.inspection.unsafe.context.cancellation.go.to.error=La verificación del código {0} garantiza que la función {1} devuelta por {2} y funciones similares se llamen en todas las rutas de ejecución. Para obtener más información sobre los paquetes de contexto, consulte <a href\="{3}">Contextos de paquetes</a> en golang.org.\nAl hacer clic en {4}, aparecerá el error.
go.inspection.unsafe.context.cancellation.add.defer=Dado que la ruta de ejecución {1} no llama a {0}, debe ingresar {2} para corregir la advertencia.
go.support.of.testify.framework.completion.and.subtests.name=Finalización de código y subpruebas dentro del marco testify
go.support.of.testify.framework.completion.and.subtests.assert=<strong>Requisitos previos</strong>\: Para salir de esta clase, debe <a href\="{0}">Habilitar la indexación de todo el GOPATH</a> y <a href\="{1}"> { 2} Instale el paquete</a>\n<strong>Nota</strong>\: Indexar todo el GOPATH puede llevar algún tiempo. La velocidad de indexación depende de la cantidad de paquetes en su GOPATH y el rendimiento de su computadora.\n<ide/> puede completar una función o método que acepte {3} como su primer argumento, y el IDE se pasa automáticamente. \nPor ejemplo, coloque el símbolo de intercalación después de {6} en la línea 16. Seleccione {4} de la lista de finalización escribiendo {4} después del punto. Complete la lista de argumentos escribiendo {5} (no olvide poner un espacio después de la coma).
go.support.of.testify.framework.completion.and.subtests.run.subtest=Además, si el nombre de la subprueba es una constante de cadena, puede ejecutar las subpruebas {0} y {1}.\nPor ejemplo, dado que el cursor ahora está ubicado en {2}, puede ejecutarlo presionando {3}.
go.wrapping.lesson.name=envoltura de línea larga
go.wrapping.put.arguments.on.separate.lines=La función {0} recibe bastantes argumentos. El problema es que el primer argumento es muy largo y no puedo determinar qué viene después. Puedes solucionar este problema. Ahora que el signo de intercalación está colocado después del corchete de apertura, debemos presionar {1} y seleccionar {2}.
go.wrapping.enable.soft.wrap=El primer argumento todavía está fuera del área visible. Recomendamos habilitar la envoltura suave para filas largas. Presione {0}, ingrese {1} y luego active el interruptor {2}. Luego podrás cerrar la búsqueda presionando {3}.
go.wrapping.put.parameters.on.same.lines=Creo que se vería mejor si los argumentos de la función {0} se manejaran en una sola línea. Para fusionar, coloque el signo de intercalación después del corchete de apertura, llame a la acción de intención presionando {1} y luego seleccione {2}.
go.struct.inspections.lesson.name=Inspección de estructura
go.struct.inspections.jump.to.warning=Go tiene reglas para la programación de etiquetas de estructura. Puede encontrar más información sobre estas reglas en <a href\="{0}">este artículo en golang.org</a>.\nEl IDE ya conoce estas reglas, por lo que puede crear inconsistencias que violen las reglas de Go. encuentras artículos. Todos los problemas encontrados se resaltan. Por ejemplo, el área alrededor del campo {1} está resaltada.\nVayamos a este error y veamos qué está mal. Presione {2} para ir a la alerta.
go.struct.inspections.delete.line=La advertencia indica que intentar asignar dos campos de estructura ({0} y {1}) al mismo nombre de campo JSON no es una buena idea. Cuando se produce este error, el programa se ejecuta, pero falta una clave en el resultado.\nPara solucionar este problema, simplemente cambie el nombre del valor de la cadena de etiquetas o elimine la cadena completa. Para simplificar las cosas, presionemos {2} para eliminar toda la cadena.
go.comment.navigation.lesson.name=Pasar de la anotación
go.comment.navigation.task=El paquete {0} no es muy grande, por lo que es fácil de navegar. Sin embargo, algunos paquetes pueden ser enormes y contener cientos de líneas de código y comentarios.\nEn el IDE, puede pasar de un comentario a una declaración si las declaraciones están en el mismo paquete. Los nombres de los métodos, funciones y estructuras dentro de un comentario tienen colores ligeramente diferentes, como la función {1} en la sección de comentarios en la línea 32.\nPara saltar a una declaración de función en este comentario, coloque un signo de intercalación en el nombre de la función. en el comentario, luego presione {2}.
go.formatting.lesson.name=Aplicar estilo de código a su código
go.formatting.reformat.selection=<ide/> admite el formato de código. Para reformatear el bloque de código seleccionado, presione {0}.
go.formatting.clear.selection=Para borrar la selección, presione {0}.
go.formatting.whole.file=Para reformatear todo el archivo fuente cuando no hay líneas seleccionadas, use {0}.
go.fmt.lesson.name=ir a correr
go.fmt.task=Si desea formatear su código como {0}, puede ejecutarlo presionando {1}.
go.comments.lesson.name=Agregar y eliminar comentarios
go.comments.comment.one.line=Comente cualquier línea con {0}.
go.comments.uncomment.line=Eliminar comentarios de líneas comentadas con el mismo acceso directo {0}
go.comments.comment.block=Puede eliminar comentarios de bloques de código. Por ejemplo, para eliminar un comentario de un bloque seleccionado, presione {0}.
go.basic.completion.lesson.name=Finalización de código básico
go.basic.completion.complete.again=Seleccione {0} en el menú de búsqueda y presione {1}.
go.basic.completion.complete.statement=Presione {0} para completar esta declaración y moverla a una nueva línea.
go.basic.completion.invoke.completion=<ide/> inserta automáticamente una nueva declaración de importación. Ahora, al presionar {0} para activar la "finalización predeterminada", aparecerá nuevamente el menú de búsqueda.
go.basic.completion.type.and.choose=De forma predeterminada, <ide/> sugiere inmediatamente la finalización del código. Si comienza a escribir {0} donde está el cursor, aparecerá un menú de búsqueda con las sugerencias correspondientes. Cuando presiona {2}, puede seleccionar {1} en el menú de búsqueda.
go.smart.type.completion.lesson.name=Finalización de tipo inteligente
go.smart.type.completion.task=La finalización de tipo inteligente filtra la lista de sugerencias para incluir solo aquellos tipos que son aplicables en el contexto actual. Haga clic en {0} para ver una lista de las sugerencias correspondientes. Presione {1} para seleccionar el primer elemento.
go.smart.type.completion.special.cases.lesson.name=Creación de aserción de tipo y cambio
go.smart.type.completion.special.cases.number=Si necesita validar o verificar el tipo de una variable, puede usar afirmaciones de tipo o declaraciones de cambio. <ide/> muestra esos tipos al principio de la lista de sugerencias. Continúe ingresando nombres de tipos para reducir la cantidad de sugerencias.\nCompletemos la validación en la función {0}. Para completar esto necesitamos pasar el tipo {1} para la interfaz {2}. Presione {3} para seleccionar el tipo {4}.
go.smart.type.completion.special.cases.line=Si decide pasar una cadena a la función {0}, obtendrá el error {1}. Si desea comprobar el tipo de un valor, puede utilizar la sintaxis de cambio de tipo. Presione {2} para seleccionar {3}.
go.smart.type.completion.and.pointers.lesson.name=Punteros y finalización de tipos inteligentes
go.smart.type.completion.and.pointers.first.task=<ide/> puede sugerir una lista de posibles direcciones de puntero y variables.\nDevolvamos la dirección de {0} de la función {1}. Presione {2} para seleccionar {3} de la lista de finalización.
go.smart.type.completion.and.pointers.second.task=La finalización de tipo inteligente también funciona con punteros. Para devolver un puntero, presione {0} para seleccionar {1}.
go.postfix.templates.lesson.name=Plantillas de sufijos (nn, pánico, rr, retorno)
go.postfix.templates.nn=Las plantillas de sufijo le permiten convertir una expresión ya ingresada en otra expresión según el sufijo después del punto, el tipo de expresión y su contexto. Puede utilizar un conjunto de plantillas de finalización de sufijos predefinidas o crear una nueva plantilla. Para obtener más información sobre las plantillas de sufijos personalizadas, consulte <a href \= "{0}">Este artículo</a>.\nEscriba {1} y seleccione {2} plantilla de sufijo en la lista de finalización Seleccionar.
go.postfix.templates.choose.item=Ingrese {0} y presione <action>EditorEnter</action>. Seleccione {1} de la lista de sugerencias.
go.postfix.templates.rr=La plantilla de finalización de sufijo {0} genera código para comprobar que la variable de error no es {1}. Puede utilizar la plantilla de finalización de sufijo {0} para el manejo de errores.\nAhora escriba {2} y presione {3} para seleccionar la plantilla de sufijo.
go.postfix.templates.return=Ingrese {0} y aplique la plantilla de sufijo {1}.
go.postfix.completion.lesson.name=Completar y ordenar sufijos
go.postfix.completion.task=Las porciones del alfabeto están desordenadas. Para ordenar correctamente un segmento de cadena, puede aplicar la función {0} del paquete {1} al segmento.\nLa variable que contiene ese segmento ya se ha ingresado. Sin tener que ir y venir, apliquemos la plantilla de sufijo {1}. Para ver una lista de sugerencias para completar sufijos, escriba un punto ({2}) después de la variable {3}. Seleccione {1} de la lista o ingréselo en el editor, luego presione {4} para completar la frase.
go.completion.for.functions.lesson.name=Finalización de código para funciones.
go.completion.for.functions.choose.item=Seleccione {0} de la lista y presione {1}. Cuando vea una lista de sugerencias, puede comenzar a escribir para reducir la cantidad de resultados.
go.completion.for.functions.press.twice=Presione {0} <strong>doble</strong> para buscar todas las funciones que acepten un elemento como primer argumento. Tenga en cuenta que el elemento no es un método, pero el punto hace que parezca así.
go.debug.function.calls.lesson.name=Llamadas a funciones de depuración
go.debug.function.calls.version.warning=<strong>Nota</strong>\: Debe tener instalado Go 1.11 o posterior para utilizar esta función.
go.debug.function.calls.toggle.breakpoint=En el modo de depuración, puede pasar diferentes valores a una función y ver qué devuelve la función. Para obtener más información sobre la función de evaluación de expresiones, consulte la <a href\="{0}">Documentación</a>.\n{1}Para comenzar a depurar, debe crear un punto de interrupción. Presione {2} para alternar el punto de interrupción.
go.debug.function.calls.mac.note=Su sistema operativo puede solicitar una contraseña para iniciar el servidor de depuración.
go.debug.function.calls.start.debug=Presione {0} para iniciar una sesión de depuración.
go.debug.function.calls.run.to.cursor=El cursor se encuentra ahora al final de la línea 15. Presione {0} para ver cómo funciona la acción {1}.
go.debug.function.calls.step.over=Intente utilizar {1} para omitir la declaración {0}.
go.debug.function.calls.evaluate.expression=Presione {1} para invocar la acción {0}.
go.debug.function.calls.enter.expression.to.evaluate=Comience a escribir {1} en el campo {0} y luego seleccione {2} de la lista de sugerencias.
go.debug.function.calls.add.arguments.for.evaluation=Introduzca {0} entre paréntesis. El campo debe mostrar {1}.
go.debug.function.calls.click.evaluate=Haga clic en {0} o presione {1}. Luego puede cerrar el cuadro de diálogo.
go.debug.function.calls.stop.debug=Presione {0} para detener la depuración y finalizar la lección.
go.better.variable.names.in.templates.lesson.name=Nombres de variables mejorados en plantillas activas y de sufijos
go.better.variable.names.in.templates.description=<ide/> le ayuda a especificar nombres para las variables creadas con las plantillas activas {0} y {1}. Por ejemplo, podría elegir {2} o {3} para índices y {4}, {5} o {6} para valores de las siguientes sugerencias:
go.better.variable.names.in.templates.use.forr=Ingrese {0} y seleccione la plantilla de sufijo {1} de la lista de finalización.
go.better.variable.names.in.templates.finish=Observe que <ide/> sugiere {0} para el índice y {1} para el valor. Presione {2} para finalizar esta lección.
go.general.templates.lesson.name=Plantillas activas y de sufijo\: else, fori, var
go.general.templates.else=Las plantillas activas insertan construcciones comunes en su código, como bucles, condicionales, declaraciones varias o declaraciones impresas. Esto, junto con las plantillas de sufijo, le ayudará a escribir código más rápido.\nComencemos primero con la plantilla de sufijo {0}. Puede utilizar la plantilla de sufijo {0} para comprobar si una expresión es {1}.\nIngrese {2} después del punto. Si el campo {3} es {1}, ejecute la función {4}.
go.general.templates.fori=Ahora ingrese {0} y seleccione esta plantilla activa de la lista de sugerencias. Establezca las siguientes condiciones en el bucle: {Uno}.
go.general.templates.type.iteration=En cada iteración, el bucle {0} debe ejecutar {1}
go.general.templates.vars=Mi programa actual lee los números que el usuario ingresa en el teclado y los usa en un bucle {0}. Sin embargo, a partir de <ide/> 2020.1, puede usar plantillas ({1} para constantes, {2} para variables, {3} para tipos y {4} para declaraciones de importación) para codificar grupos de declaraciones más rápidamente.\nUsuarios Reemplacemos la entrada con los valores codificados de las variables {5} y {6}. Comience a escribir {7} y seleccione {2} plantilla activa de la lista de finalización. Establezca valores aleatorios para las variables {5} y {6}.
go.handling.errors.with.templates.lesson.name=Manejo de errores en plantillas activas y de sufijo\: if y rr
go.handling.errors.with.templates.if.not.null=Algunas funciones devuelven dos valores. Por ejemplo, {0} devuelve un puntero a {1} y un valor de error. Si el valor del error es {2}, el archivo se abre correctamente. Si el error no es {3}, se produjo un error. El uso de plantillas activas y de sufijos en <ide/> hace que el manejo de valores de error sea mucho más rápido.\nEscriba {4} y seleccione {5} plantilla activa de la lista de finalización.
go.handling.errors.with.templates.select.err=Seleccione la variable {0} que desea procesar de la lista de autocompletar.
go.handling.errors.with.templates.return.nil.err=Si se produce un error al abrir un archivo, debería devolver un segmento y un error. Aquí podemos devolver {0} y {1}. Empiece a escribir {2} y seleccione {3} plantilla activa.
go.handling.errors.with.templates.error.case=La finalización del código con sufijos ayuda a reducir el movimiento del cursor hacia atrás al escribir código. Estas plantillas le permiten convertir expresiones que ya ha ingresado en otras expresiones. Puede encontrar más lecciones sobre cómo completar sufijos en la sección {0}.\nPuede ocurrir un error en {1} al verificar el archivo. Si se produce un error, una llamada al método {2} en el escáner devolverá ese error.\nPara manejar posibles errores devueltos por el método {2}, escriba {3} y presione {4}. Simplemente aplique la plantilla de sufijo.
go.live.templates.with.types.lesson.name=Utilice plantillas y tipos en vivo
go.live.templates.with.types.struct.template=Una estructura es un tipo que contiene campos con nombre. Las estructuras son útiles para agrupar datos para formar registros. Creemos uno para este código.\nEmpiece a escribir {0} y seleccione {1}. Utilice {2} como nombre de la estructura. Presione {3}.
go.live.templates.with.types.type.fields=Agregue {0} como campo en la estructura {1}.
go.live.templates.with.types.interface.template=En Go, una interfaz es un tipo personalizado que le permite especificar un conjunto de firmas de métodos. Agreguemos uno\!\nEscriba {0} y seleccione {1}. Asigne un nombre a la interfaz {2} y presione {3}.
go.live.templates.with.types.add.method=Agregue {0} como firma del método para la interfaz {1}.
go.live.templates.with.types.complete.in.comment=Los comentarios describen cómo funciona un programa y la intención del usuario implícita en el mismo. Puede utilizar la finalización de código en los comentarios para completar los nombres de parámetros, funciones y métodos.\nHaga clic en {0} y seleccione {1} para completar el comentario antes de la función {2}.
go.live.templates.with.types.add.second.return.value=Actualmente, el método {0} devuelve sólo parámetros de cadena. Debe agregar un valor de retorno {1} con el valor del área. <ide/> agrega automáticamente paréntesis alrededor de diferentes tipos de devolución.\nEscriba una coma ({2}), presione el botón de espacio y luego escriba {3}.
go.live.templates.with.types.complete.return=Si el signo de intercalación se coloca después de la palabra clave {0} dentro de una función, la finalización del código sugerirá una variable local y un valor cero, incluso si se produce un error. Completemos el método {1} para calcular el área.\nEmpiece a escribir {2} y seleccione {3}. Luego seleccione la variable {4} y presione {5}. Ingrese la siguiente fórmula para calcular el área rectangular: {6}.
go.live.templates.with.types.fill.all.fields=Finalmente, creemos una nueva instancia del rectángulo y pasemos los valores para {0} y {1}.\nEmpiece a escribir {2} y seleccione este tipo de la lista de autocompletar. Luego seleccione la acción {3}. Introduzca valores arbitrarios para {4} y {5}.
go.generate.missing.methods.lesson.name=Crear método faltante
go.generate.missing.methods.task=La acción {0} le permite crear el método que falta y especificar el nombre del parámetro incluso si el nombre del método o del parámetro se omite en la definición de la interfaz.\nHaga clic en {1} y seleccione escribir {2}. En la ventana {3}, ingrese {4} y presione {5}.
go.fixing.test.lesson.name=Editar archivo de prueba
go.fixing.test.open.problems.toolwindow=La ventana de la herramienta {0} muestra una lista de advertencias y errores para el archivo actual y proporciona una descripción del problema.\nEl archivo de prueba está dañado. Veamos qué ocurre.\nHaga clic en {1} para abrir la ventana de la herramienta {0}.
go.fixing.test.close.problems=Hay algunas cuestiones a tener en cuenta. Algunos problemas se pueden solucionar desde la propia ventana de herramientas {0}. Sin embargo, algunos problemas requieren acciones específicas en el editor. Apliquemos todas las modificaciones en el editor\!\nHaga clic en {2} nuevamente para cerrar la ventana de herramientas {1}.
go.fixing.test.fix.string.conversion=Esta conversión {0} devuelve la representación UTF-8 del punto de código Unicode en lugar de la representación de cadena decimal requerida.\nPara resolver este problema, usemos el método {1} del paquete {2}. Presione {3} y seleccione {4}.
go.fixing.test.use.multicursors=El siguiente error es bastante obvio: a la estructura anónima le falta una llave de cierre y una coma. Sin embargo, no quiero escribirlo repetidamente en cada línea. Aquí es donde varios cursores pueden ayudar.\nPara activar varios cursores, seleccione un área y presione {0}. Ingrese {1} para completar la estructura.
go.fixing.test.fix.camelcase=La <a href\="{0}">documentación de Go</a> para el paquete {1} establece que los nombres de las funciones deben escribirse en notación camel (por ejemplo, {2}). Aquí, la función {3} no cumple con esta regla.\nPara editar el nombre de la función, presione {4} y seleccione {5}.
go.fixing.test.negate=El último no es realmente un error, sino una simple refactorización para simplificar el código. Verifique la negación de la función {0}. Veamos qué puedes hacer aquí.\nPresiona {1} para mover tu selección al nodo {2}, luego presiona {3} para obtener una vista previa de los cambios que deseas realizar.\nVer Eso está bien. Presionemos {5} para aplicar la sugerencia {4}.
go.quick.fix.refactorings.lesson.name=Arreglos rápidos, refactorización, documentación externa.
go.quick.fix.refactorings.change.to.formatting=La función {0} imprime la lista de variables en el formato predeterminado. Mientras tanto, la función {1} le permite especificar el formato de salida. Este ejemplo utiliza el verbo de formato ({2}) para números de punto flotante. Pero en lugar de {1} usamos {0}.\n¡Arreglemos esto\n! Presione {3} y seleccione {4}.
go.quick.fix.refactorings.create.variable=Hay varias formas de declarar variables. Una vez declarada una variable, puede utilizar el signo igual ({0}) para asignar un valor.\nAquí, la variable {1} ha sido declarada, pero la variable {2} aún no se ha declarado.\nPresione {3 } y seleccione {4}. Ahora la variable ha sido declarada pero no inicializada. ¡Guardemos el valor cero aquí\! Para hacer esto, seleccione {5} de la lista de sugerencias.
go.quick.fix.refactorings.rename=Puede aplicar ese cambio cambiando el nombre del elemento en <ide/>. <ide/> cambia el nombre de un elemento de código y actualiza su uso en consecuencia.\nCambie el nombre de la función a {2} poniendo {0} antes de la función {1}. Presione {3} y seleccione {4}.
go.quick.fix.refactorings.extract.method=La refactorización de extracción de métodos le permite tomar un fragmento de código, moverlo a una función separada y reemplazar el código anterior con una llamada de función. Movamos toda la impresión a una función separada.\nPresione {0}.
go.quick.fix.refactorings.external.doc=El documento externo abre la información que necesita en su navegador web, lo que le permite navegar a símbolos relacionados mientras conserva la información para mayor referencia.\nEl cursor se encuentra ahora en la ubicación de la función {0}. Haga clic en {1} para abrir el documento sobre {0} en {2}.
go.apply.fix=Seleccione {0} y presione {1}.
go.introduce.function.lesson.name=Crear una función a partir de un tipo de función
go.introduce.function.intro=<ide/> puede generar funciones y métodos a partir de llamadas. Ahora, si falta una función o método, también puedes crearlo a partir de ese tipo.
go.introduce.function.invoke.intentions=Asegúrese de que el cursor esté en la posición del identificador {0} utilizado como referencia de función. Presione {1} para llamar a la acción de intención.
go.introduce.function.final.propose=Luego, ahora puede ajustar los parámetros según sus necesidades.
go.delete.parameter.names.lesson.name=Eliminar nombre del parámetro
go.delete.parameter.names.intro=<ide/> solo resalta los nombres de los parámetros obsoletos si su tipo se utiliza para implementar la especificación del método. En este caso, puede cambiar el nombre de este parámetro a {0} o eliminarlo por completo.
go.delete.parameter.names.invoke.intentions=Si un método que implementa una interfaz requiere parámetros, no es seguro eliminarlos. Presione {0} para ver una lista de opciones posibles.
go.delete.unused.parameters.lesson.name=Eliminar parámetros no utilizados
go.delete.unused.parameters.intro=<ide/> puede detectar parámetros de una firma que no se utilizan en el cuerpo de un método o función. Si ese parámetro no se utiliza, puede utilizar la solución rápida {0} para eliminarlo.
go.delete.unused.parameters.invoke.intentions=Verifique el método {0} en el editor. El cursor está en la posición del primer parámetro. Presione {1} para llamar a la acción de intención.
go.fill.struct.fields.lesson.name=Entrada de campo de estructura
go.fill.struct.fields.intro=Cuando crea una nueva estructura, puede generar automáticamente nombres de campos para esa estructura. {0} Para obtener información sobre acciones intencionales, consulte la <a href\="{1}">documentación de GoLand</a>.
go.fill.struct.fields.invoke.intentions=Observe que el signo de intercalación se coloca entre las llaves en la estructura {0}. Presione {1} para llamar a la acción de intención.
go.implement.missing.methods.lesson.name=Implementación del método faltante
go.implement.missing.methods.goto.next.error=Presione {0} para pasar al siguiente error resaltado en el archivo.
go.delete.conversion.lesson.name=Conversión de tipo redundante
go.delete.conversion.intro=La comprobación de <strong>conversión de tipo duplicado</strong> advierte sobre conversiones de tipo redundantes que pueden omitirse (por ejemplo, al convertir un literal de cadena en una cadena). Para obtener más información sobre esta verificación, consulte <a href\="{0}">Conversión de tipo duplicado</a>.
go.delete.conversion.invoke.intentions=Verifique la función {0} en el editor. El cursor está en la posición del elenco del tipo {2} al {1}. Presione {3} para llamar a la acción de intención.
go.parameters.specification.lesson.name=Especificaciones de tipo corto y largo para parámetros.
go.parameters.specification.intro=Si su función o firma de método tiene múltiples parámetros de un solo tipo, puede usar una especificación de tipo corta ({0}) para esos parámetros, o una especificación de tipo separada ({1}) para cada parámetro.
go.parameters.specification.invoke.intentions=Observe que el símbolo de intercalación está en la posición del primer parámetro del método {0}. Presione {1} para llamar a la acción de intención.
go.parameters.specification.notice.signature.combined=Vea cómo se combinan los tipos de firma.
go.parameters.specification.notice.signature.expanded=La firma ha vuelto a su estado inicial.
go.parameters.specification.press.again=Presione {0} nuevamente.
go.variadic.functions.lesson.name=Procesamiento de funciones variables
go.variadic.functions.unpack.slice=Una función variada es una función que se puede llamar con un número variable de argumentos, como {0}.\nUna función variada trata sus argumentos variados como sectores.\nEn este ejemplo, esta función variada es {1}.\n Sin embargo , el segmento {2} no se puede pasar tal cual a la función variable {3}. Para estos casos, Go proporciona una sintaxis especial. Estos son los puntos suspensivos ({4}) después del segmento.\nPresione {5} y seleccione {6} para corregir el error.
go.variadic.functions.inline=Puede reemplazar un sector con el argumento variable del sector. Presione {0} para invocar la refactorización {1}.
go.variadic.functions.introduce.variable=Para revertir la refactorización {0}, utilice la refactorización {1}. Presione {2} y seleccione {3} de la lista de sugerencias.
go.improve.names.lesson.name=Denominación mejorada de variables de error.
go.improve.names.intro=<ide/> sugiere las variantes de nombre más populares para las variables de error ({0}) y contexto ({1}).
go.improve.names.introduce.variable=Asegúrese de que el cursor esté en la posición de la llamada {0}. Haga clic en {1} para extraer variables.
go.improve.names.apply.fix=Seleccione todas las llamadas de la lista y presione {0}. {1} es el nombre de error más común, por lo que lo sugerimos como nombre de variable en <ide/>.
go.extract.method.lesson.name=Extraer funciones y métodos.
go.extract.method.task=La refactorización {0} le permite encapsular su código en una nueva función o método con parámetros y tipos de retorno personalizables. Extraigamos algunas líneas de código en una nueva función. Presiona 1}.
go.extract.methods.with.returns.lesson.name=Método de extracción que contiene retorno
go.extract.methods.with.returns.intro={0} La refactorización le permite tomar un fragmento de código, moverlo a un método independiente y reemplazar el código antiguo con una llamada al nuevo método. Si el código termina en una declaración de devolución, se extrae palabra por palabra. {0} Para obtener más información sobre la refactorización, consulte el artículo <a href\="{1}">Extracción de funciones y métodos</a>.
go.extract.methods.with.returns.invoke.refactoring=Asegúrese de que haya un signo de intercalación antes de la cláusula {0} que se pueda extraer. Presiona 1}.
go.extract.methods.with.returns.complete.refactoring=Ingrese {0} y presione {1}.
go.extract.variable.lesson.name=Extracción de variables
go.extract.variable.task=Presione {0} para extraer la variable y seleccione una expresión de cadena, luego ingrese un nuevo nombre y presione {1} para completar la refactorización.
go.inline.variable.lesson.name=Variables extraídas en línea
go.inline.variable.task=A diferencia de la {0} refactorización, {1} ayuda a eliminar variables redundantes. Presione {2} para alinear la variable {3} en una única ubicación de uso.
go.rename.lesson.name=cambiar nombre
go.rename.invoke.intentions=Puede colocar un símbolo de intercalación en un símbolo y cambiarle el nombre usando la refactorización {0}. Coloque el cursor en el campo {1} de su código y presione {2}.
go.rename.apply.intention=Introduzca un nuevo nombre para este campo. Por ejemplo, escriba {0} y luego presione {1} para guardar el resultado.
go.what.s.new.module.name=Novedades de GoLand 2020.3
go.what.s.new.module.description=Novedades de GoLand 2020.3 (diciembre de 2020).
go.basic.editing.module.name=edición básica
go.basic.editing.module.description=Estas son acciones básicas que pueden ayudarte a editar código.
go.code.completion.module.name=Finalización de código
go.code.completion.module.description=La finalización de código consciente del contexto acelera el proceso de codificación y reduce los errores tipográficos.
go.debugging.module.name=depurar
go.debugging.module.description=La depuración puede ayudarle a encontrar y solucionar problemas dentro de su aplicación.
go.generating.code.module.name=Codigo de GENERACION
go.generating.code.module.description=Acciones y plantillas que generan fragmentos de código.
go.intention.actions.module.name=Acción de intención
go.intention.actions.module.description=Las acciones intencionales pueden sugerir variaciones alternativas a su código, así como soluciones a los problemas detectados.
go.refactorings.module.name=Refactorización
go.refactorings.module.description=La refactorización ayuda a mantener su código manejable y libre de espacios vacíos o código duplicado.
