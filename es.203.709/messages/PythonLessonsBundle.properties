python.f.string.completion.lesson.name=f finalización del código de cadena
python.f.string.completion.type.prefix=<ide/> admite la conversión automática de cadenas f. Por favor ingrese {0}.
python.f.string.completion.invoke.manually=Puede invocar manualmente la finalización de código usando {0}.
python.f.string.completion.complete.it=Completa la frase con {0}. Simplemente presione {1} y el primer elemento entrará en vigor.
python.f.string.completion.result.message=Después de completar el código, puede ver que la cadena simple de Python ha sido reemplazada por la cadena f.
python.postfix.completion.select.item=Seleccione {0} elemento de la lista de finalización de código.
python.smart.completion.lesson.name=Finalización de código inteligente
python.smart.completion.try.basic.completion=Haga clic en {0} para utilizar la finalización de código básico.
python.smart.completion.use.smart.completion=Desafortunadamente, <ide/> no tiene información directa sobre el tipo {0}. Sin embargo, dependiendo del contexto, a veces puede sugerir la finalización del código. Utilice {1} para llamar a la finalización inteligente.
python.smart.completion.finish.completion=Ahora seleccione el elemento {0} para completar esta lección.
python.tab.completion.lesson.name=Completar tabulación
python.tab.completion.start.completion=Supongamos que desea reemplazar {0} con {1}. Presione {2} para invocar la finalización del código.
python.tab.completion.select.item=Utilice las flechas de su teclado para seleccionar el elemento {0} o ingresar un elemento.
python.tab.completion.use.tab.completion=Cuando presiona {0}, {1} se inserta antes de {2}. En su lugar, presione {3} para reemplazar {2} con {1}.
python.in.place.refactoring.lesson.name=Refactorizar sobre la marcha
python.in.place.refactoring.start.type.new.name=Consideremos un enfoque alternativo para realizar la refactorización. Digamos que queremos cambiar el nombre de la variable local {0} a {1}. Por favor ingrese un nuevo nombre.
python.in.place.refactoring.invoke.intentions=<ide/> está adivinando que deseas cambiar el nombre de la variable. Puedes comprobarlo con el icono {0} situado en el margen. Después de ingresar el nuevo nombre, llame a la intención en {1}.
python.in.place.refactoring.finish.rename=Presione {0} para completar el cambio de nombre.
python.in.place.refactoring.add.parameter=Agreguemos un argumento a este método. Coloque el cursor del editor después del primer parámetro. Ahora ingrese una coma y el nombre del parámetro \: {0}.
python.in.place.refactoring.invoke.intention.for.parameter=<ide/> espera cambiar la firma del método. Puedes reconocer esto por el mismo ícono {0} ubicado en el margen. Cuando haya terminado de ingresar nuevos parámetros, presione {1} para llamar la intención.
python.in.place.refactoring.update.callers=Presione {0} para actualizar la persona que llama.
python.in.place.refactoring.signature.preview=<ide/> muestra una breve vista previa de la firma. Presione {0} para continuar.
python.in.place.refactoring.set.default.value=Ahora necesitamos ingresar los valores que se insertan como argumentos en cada llamada. En este ejemplo puede seleccionar {0}. Luego presione {1} para continuar.
python.in.place.refactoring.remark.about.application.scope=Nota\: La refactorización inmediata solo se puede aplicar en la ubicación de la definición, mientras que la refactorización de cambio de nombre directo o cambio de firma se puede invocar tanto en las ubicaciones de definición como de uso.
python.quick.fix.refactoring.lesson.name=Refactorización de solución rápida
python.quick.fix.refactoring.type.new.argument=Puede implementar alguna refactorización como solución rápida. Supongamos que desea agregar un parámetro al método {0} y pasar la variable {1} al método. Ingresemos {2} después del primer argumento.
python.quick.fix.refactoring.close.completion.list=Actualmente no queremos aplicar ninguna función de finalización de código. Cierra la lista ({0}).
python.quick.fix.refactoring.invoke.intentions=Como puede ver, <ide/> muestra una advertencia aquí. Presione {0} para llamar la intención.
python.quick.fix.refactoring.choose.change.signature={0} Seleccione Solución rápida.
python.quick.fix.refactoring.select.new.parameter=Establezcamos un valor predeterminado para el nuevo parámetro. Haga clic en la nueva línea de parámetro. Alternativamente, puede presionar {0} y luego {1} para cambiar el foco al parámetro.
python.quick.fix.refactoring.set.default.value=Puede utilizar {0} para mover campos (y casillas de verificación). Si marca esta casilla, <ide/> incorporará el valor predeterminado en otras personas que llaman o lo establecerá como el valor predeterminado para nuevos parámetros. Una vista previa de la firma le ayudará a comprender las diferencias. Ahora establezca el valor predeterminado en 0.
python.quick.fix.refactoring.finish.refactoring=Haga clic en {0} (o haga clic en {1}) para finalizar la refactorización.
python.rename.press.rename=Presione {0} para cambiar el nombre del campo {1}, por ejemplo a {2}.
python.rename.expand.dynamic.references=En el caso simple, {0} ejecuta una refactorización de cambio de nombre sin confirmación. Sin embargo, en este ejemplo, <ide/> detecta dos llamadas al método {0} en un objeto de tipo desconocido. Expanda la entrada {1}.
python.rename.find.window.closed.warning=Vuelva a abrir la ventana de la herramienta Buscar para {0}.
python.rename.exclude.item={0} probablemente debería excluirse de la refactorización de cambio de nombre. Después de seleccionar, presione {1}.
python.rename.finish.refactoring=Complete el cambio de nombre con el botón {0}.
python.editor.coding.assistance.fix.error=¡Arreglemos este error! Presione {0} y luego seleccione {1} o {2} <strong>→ matemáticas</strong>
python.run.configuration.lets.run=Ejecutemos un ejemplo simple usando {0}.
python.debug.workflow.rerun=Ejecute el programa nuevamente. Haga clic en {0} nuevamente o use {1}.
