# suppress inspection "UnusedProperty" for whole file
demorgans.law.intention.family.name=드모르간 법칙
demorgans.intention.name1='\\&\\&'를 '||'로 교체
demorgans.intention.name2='||'를 '\\&\\&'로 교체
merge.if.and.intention.name='if' 문 병합
merge.if.and.intention.family.name=중첩된 if를 AND 조건으로 병합
make.closure.call.explicit.intention.name=클로저 호출을 명시적으로 설정
make.closure.call.explicit.intention.family.name=클로저 호출을 명시적으로 설정
make.closure.call.implicit.intention.name=클로저 호출을 묵시적으로 설정
make.closure.call.implicit.intention.family.name=클로저 호출을 묵시적으로 설정
convert.closure.arg.to.it.intention.name=클로저 인수를 'it'으로 변환
convert.closure.arg.to.it.intention.family.name=클로저 인수를 'it'으로 변환
flip.conjunction.intention.family.name=연결 피연산자 반전
flip.comparison.intention.family.name=비교 피연산자 반전
negate.comparison.intention.family.name=비교 부정
expand.boolean.intention.name=부울 사용을 if-else 문으로 확장
expand.boolean.intention.family.name=부울 확장
for.to.each.intention.name=".each"로 교체
for.to.each.intention.family.name=For-In을 Each로 교체
each.to.for.intention.name=For-In으로 교체
each.to.for.intention.family.name=Each를 For-In으로 교체
convert.integer.to.hex.intention.name=16진수로 변환
convert.integer.to.hex.intention.family.name=16진수로 변환
convert.integer.to.decimal.intention.name=10진수로 변환
convert.integer.to.decimal.intention.family.name=10진수로 변환
convert.integer.to.octal.intention.name=8진수로 변환
convert.integer.to.octal.intention.family.name=8진수로 변환
convert.integer.to.binary.intention.name=2진수로 변환
convert.integer.to.binary.intention.family.name=2진수로 변환
flip.comparison.intention.name=''{0}''을(를) ''{1}''(으)로 반전
negate.comparison.intention.name=''{0}''을(를) ''{1}''(으)로 부정
flip.smth.intention.name=''{0}'' 반전
merge.else.if.intention.name=else-if 문 병합
merge.else.if.intention.family.name=else if 문 병합
split.else.if.intention.name=else-if 문 분할
split.else.if.intention.family.name=else if 문 분할
split.if.intention.name=if 문 2개로 분할
split.if.intention.family.name=if 문 2개로 분할
invert.if.intention.name='if' 조건을 반전시킵니다.
invert.if.intention.family.name='if' 조건을 반전시킵니다.
replace.ternary.with.if.else.intention.name='?\:'을 if else로 교체
replace.ternary.with.if.else.intention.family.name='?\:'을 if else로 교체
simplify.ternary.operator.intention.name=조건식 단순화
simplify.ternary.operator.intention.family.name=조건식 단순화
flip.conditional.intention.name='?\:' 반전
flip.conditional.intention.family.name=조건식 반전
conditional.to.elvis.intention.name=조건식을 Elvis로 변환
conditional.to.elvis.intention.family.name=조건식 변환
change.to.end.of.line.comment.intention.name=end-of-line 주석으로 교체
change.to.end.of.line.comment.intention.family.name=end of line 주석으로 교체
change.to.c.style.comment.intention.name=C 스타일 주석으로 교체
change.to.c.style.comment.intention.family.name=C 스타일 주석으로 교체
convert.string.to.g.string.intention.name=GString으로 변환
convert.string.to.g.string.intention.family.name=문자열을 GString으로 변환
convert.g.string.to.string.intention.name=문자열로 변환
convert.g.string.to.string.intention.family.name=GString을 문자열로 변환
indexing.method.conversion.intention.name=[] 양식으로 변환
indexing.method.conversion.intention.family.name=색인 생성 메소드를 [] 양식으로 변환
indexed.expression.conversion.intention.name=[] 액세스를 메소드 양식으로 변환
indexed.expression.conversion.intention.family.name=[] 양식을 색인 메소드로 변환
dynamic.property.dialog.class=클래스(&C)\:
dynamic.property.dialog.type=프로퍼티 유형(&T)
remove.parentheses.from.method.call.intention.family.name=메소드 호출에서 불필요한 소괄호 제거
remove.parentheses.from.method.call.intention.name=불필요한 소괄호를 제거합니다.
java.style.properties.invocation.intention.family.name=Java 스타일 접근자 호출을 Groovy 스타일 프로퍼티 참조로 변경
java.style.properties.invocation.intention.name=Groovy 스타일 프로퍼티 참조로 변경
replace.abstract.class.instance.by.map.intention.family.name=익명 클래스를 동적 인스턴스화로 변경
replace.abstract.class.instance.by.map.intention.name=동적 인스턴스화로 변경
remove.unnecessary.braces.in.g.string.intention.family.name=GString에서 불필요한 중괄호 제거
remove.unnecessary.braces.in.g.string.intention.name=GString에서 불필요한 중괄호 제거
convert.concatenation.to.gstring.intention.family.name=문자열 연결을 GString으로 변환
convert.concatenation.to.gstring.intention.name=GString으로 변환
convert.closure.to.method.intention.name=메소드로 변환
convert.closure.to.method.intention.family.name=프로퍼티를 메소드로 변환
convert.method.to.closure.intention.name=클로저 속성으로 변환
convert.method.to.closure.intention.family.name=메소드를 클로저 유형 속성으로 변환
convert.string.to.multiline.intention.name=여러 줄로 변환
convert.string.to.multiline.intention.family.name=리터럴을 여러 줄 리터럴로 변환
convert.junit.assertion.to.assert.statement.intention.name=JUnit 어설션을 assert 문으로 변환
convert.junit.assertion.to.assert.statement.intention.family.name=JUnit 어설션을 assert 문으로 변환
###########################################################################################################
# Convert parameter to map entry refactoring
###########################################################################################################
convert.parameter.to.map.entry.intention.family.name=메소드 또든 클로저 매개변수를 맵 항목으로 변환
convert.parameter.to.map.entry.intention.name=매개변수를 맵 항목으로 변환
find.method.ro.closure.usages.0=프로젝트 내 둘러싸는 {0}의 사용 위치 검색 중
conversion.not.allowed.in.non.groovy.files=Groovy가 아닌 파일에서 사용되는 {0}에는 리팩토링을 사용할 수 없습니다.
wrong.first.parameter.type={0} ''{1}''은(는) 이름 지정된 인수와 함께 사용되지만 내부의 첫 번째 인수 ''{2}''이(가) Map 유형을 준수하지 않습니다.
create.first.new=이름 지정된 인수에 대한 매개변수 생성(&C)
do.not.create.first.new=기존 첫 번째 매개변수를 이름 지정된 인수에 대한 맵으로 사용(&E)
convert.cannot.itself=리팩토링은 맵 매개변수 자체에 사용할 수 없습니다.
perform.refactoring=리팩토링 수행 중
map.param.name=맵 매개변수 이름(&N)\:
convert.param.to.map.entry=매개변수를 맵 항목으로 변환

convert.java.style.array.intention.name=Java 스타일의 배열 생성 변환
convert.java.style.array.intention.family.name=Java 스타일의 배열 생성을 Groovy 구문으로 변환

create.parameter.for.field.intention.name = 필드에 대한 생성자 매개변수 추가
create.parameter.for.field.intention.family.name = 필드에 대한 생성자 매개변수 추가
cannot.suggest.parameter.name=매개변수 이름을 제안할 수 없습니다.
create.parameter.for.field=필드 매개변수 ''{0}'' 추가
create.parameter.for.fields=필드 매개변수 추가...
closure.used.as.variable=클로저가 인수로서 전달되었습니다. 리팩토링을 하면 의미가 변경될 수 있습니다.

convert.map.to.class.intention.name=클래스로 변환
convert.map.to.class.intention.family.name=Groovy 네이티브 맵을 클래스 인스턴스로 변환
do.you.want.to.change.method.return.type=''{0}'' 메소드의 반환 유형을 변경하시겠어요?
do.you.want.to.change.variable.type=''{0}''의 유형을 변경하시겠어요?

closure.is.accessed.outside.of.groovy=필드 <b>{0}</b>이(가) Groovy 외부에서 액세스됩니다.
write.access.to.closure.variable=필드 <b>{0}</b>에 대한 쓰기 액세스
field.is.used.in.argument.label=필드 <b>{0}</b>이(가) 인수 라벨에서 사용됩니다.
method.with.signature.already.exists=시그니처 {0} 이(가) 포함된 메소드가 이미 있습니다
field.already.exists=필드 <b>{0}</b>이(가) 이미 있습니다.
method.is.used.outside.of.groovy=메소드가 Groovy 외부에서 액세스됩니다.

do.you.want.to.change.type.of.parameter.in.method=메소드 ''{1}''에서 매개변수 ''{0}''의 유형을 변경하시겠어요?

rename.file.with.class.intention.name=파일 이름을 클래스 이름으로 변경
rename.file.with.class.intention.family.name=파일 이름을 해당하는 클래스 이름으로 변경

rename.class.to.file.name.intention.family.name=클래스 이름을 해당하는 파일 이름으로 변경
rename.class.to.0=클래스 이름을 ''{0}''(으)로 변경

move.class.to.new.file.intention.name=개별 파일로 이동
move.class.to.new.file.intention.family.name=클래스를 개별 파일로 이동

file.exists=파일 ''{0}''이(가) 디렉토리 ''{1}''에 이미 있습니다.
intention.crete.test.groovy=Groovy

import.static.intention.name=정적 import 문 추가
import.static.intention.family.name=Groovy에서 단일 멤버 정적 import 문 추가
import.on.demand.intention.name=온디맨드 import 문 추가
import.on.demand.intention.family.name=Groovy에서 온디맨드 정적 import 문 추가
replace.qualified.reference.with.import.intention.name=import 문으로 교체
replace.qualified.reference.with.import.intention.family.name=정규화된 참조를 import 문으로 교체
move.to.correct.dir.family.name=올바른 패키지로 파일 이동
move.to.correct.dir=''{0}''(으)로 이동
convert.to.geese.braces.intention.name=중괄호를 한 줄로 서식 지정
convert.to.geese.braces.intention.family.name=닫는 클로저 중괄호를 한 줄로 서식 지정

convert.from.geese.braces.intention.name=중괄호를 개별 줄로 서식 지정
convert.from.geese.braces.intention.family.name=중괄호를 개별 줄로 서식 지정
add.return.type=반환 유형 추가
add.return.type.to.method.declaration=반환 유형을 메소드 선언에 추가
infer.method.parameters.types=명시적 유형을 매개변수에 추가
infer.method.parameters.types.for.method.declaration=메소드 선언 내 모든 매개변수의 명시적 유형을 추가
replace.with.wrapper={0}(으)로 교체
replace.primitive.type.with.wrapper=기본 유형을 래퍼로 교체
split.into.declaration.and.assignment=선언 및 할당 분할
split.into.separate.declaration=개별 선언으로 분할
gr.split.declaration.intention.family.name=변수 선언 분할
remove.parameter.0=매개변수 ''{0}''을(를) 제거합니다.
remove.unused.parameter=사용되지 않는 매개변수 제거
remove.exception=예외 제거
remove.catch.block=catch 블록 제거
try.catch.fix=Try-catch 수정
gr.convert.string.to.char.intention.name=char로 형 변환
gr.convert.string.to.char.intention.family.name=char로 형 변환
create.field.for.parameter.0 = 매개변수 {0}의 필드 생성
create.field.for.parameter=매개변수 필드 생성
gr.set.strong.type.intention.name=명시적 유형 선언
gr.set.strong.type.intention.family.name=명시적 유형 선언
remove.unnecessary.escape.characters.intention.name=불필요한 이스케이프 문자 제거
remove.unnecessary.escape.characters.intention.family.name=불필요한 이스케이프 문자 제거
gr.break.string.on.line.breaks.intention.name=Break string on '\\\n'
gr.break.string.on.line.breaks.intention.family.name=Break string on '\\\n'
gr.create.missing.switch.branches.intention.name=누락된 'switch' 브랜치 생성
gr.create.missing.switch.branches.intention.family.name=누락된 'switch' 브랜치 생성
remove.redundant.class.property.intention.name=중복 .class 제거
remove.redundant.class.property.intention.family.name=중복 .class 제거
convert.simple.getter.to.property.intention.name=속성으로 변환
convert.simple.getter.to.property.intention.family.name=간단한 getter를 속성으로 변환
remove.unnecessary.return.intention.name=Remove 'return' 키워드 제거
remove.unnecessary.return.intention.family.name=불필요한 'return' 키워드를 제거합니다.
gr.alias.import.intention.name=별칭 가져오기
gr.alias.import.intention.family.name=가져온 멤버를 정적으로 별칭 가져오기
gr.copy.string.concatenation.content.intention.name=문자열 연결 텍스트를 클립보드에 복사
gr.copy.string.concatenation.content.intention.family.name=문자열 연결 텍스트를 클립보드에 복사
gr.make.member.private.intention.name='private'으로 만듭니다.
gr.make.member.private.intention.family.name='private'으로 만듭니다.
gr.make.member.public.intention.name='public'으로 설정
gr.make.member.public.intention.family.name='public'으로 설정
gr.make.member.protected.intention.name='protected'로 설정
gr.make.member.protected.intention.family.name='protected'로 설정
convert.multiline.string.to.single.line.intention.name=단일 줄 리터럴로 변환
convert.multiline.string.to.single.line.intention.family.name=여러 줄 문자열을 단일 줄로 변환
gr.convert.type.cast.to.safe.cast.intention.name=안전한 형 변환으로 변환
gr.convert.type.cast.to.safe.cast.intention.family.name=형 변환 식을 안전한 형 변환 식으로 변환
cannot.create.class=클래스를 생성할 수 없습니다.
gr.introduce.local.variable.intention.name=지역 변수 삽입
gr.introduce.local.variable.intention.family.name=Groovy 지역 변수 삽입
flip.if.intention.name=if 문 반전
flip.if.intention.family.name=if 문 반전
replace.if.with.ternary.intention.name=다음으로 교체 ?\:
replace.if.with.ternary.intention.family.name=if 문을 삼항 연산자로 교체
gr.redundant.else.intention.name=중복 'else' 키워드 제거
gr.redundant.else.intention.family.name=중복 'else' 키워드 제거
convert.to.regex.intention.name=정규 표현식으로 변환
convert.to.regex.intention.family.name=문자열 리터럴을 정규 표현식으로 변환
convert.to.dollar.slash.regex.intention.name=달러 슬래시 문자열로 변환
convert.to.dollar.slash.regex.intention.family.name=문자열 리터럴을 달러 슬래시 문자열로 변환
gr.remove.explicit.type.declaration.intention.name=명시적 유형 제거
gr.remove.explicit.type.declaration.intention.family.name=명시적 유형 선언 제거
rename.file.to.0=파일 이름을 ''{0}''(으)로 변경
gr.sort.map.keys.intention.name=알파벳순 정렬
gr.sort.map.keys.intention.family.name=맵 항목을 알파벳순으로 정렬
gr.remove.annotation.intention.name=Eliminar
gr.remove.annotation.intention.family.name=어노테이션 제거
add.annotation.value.intention.name='value\='를 추가합니다.
add.annotation.value.intention.family.name='value\='를 추가합니다.
replace.something.with=''{0}''을(를) ''{1}''(으)로 교체
