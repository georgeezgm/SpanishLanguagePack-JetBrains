### META-INF/scala-plugin-common.xml
fileName.does.not.match=클래스가 파일 이름과 일치하지 않습니다
method.signature.accessor.empty.parenthesis=접근자식 이름이 지정된 메소드가 빈 소괄호입니다
method.signature.accessor.unit.return.type=접근자식 이름이 지정된 메소드의 결과 유형이 Unit입니다
method.signature.unit.explicit.type=불필요한 Unit 결과 유형 어노테이션
method.signature.unit.functional.definition=Unit 결과 유형이 Unit인 메소드는 함수 정의를 포함합니다
method.signature.unit.parameterless=결과 유형이 Unit인 메소드는 매개변수를 포함하지 않습니다
method.signature.unit.explicit.assignment=불필요한 대입
method.signature.procedure.declaration=메소드 선언 내 프로시저 구문
method.signature.procedure.definition=메소드 정의 내 프로시저 구문
method.signature.result.type.refinement=명확한 결과 유형 개선; 대입이 누락되었습니까?
method.signature.parameterless.override.empty.paren=매개변수 없이 재정의된 빈 소괄호 Scala 메소드
method.signature.parameterless.override.java.mutator=매개변수 없이 재정의된 Java 설정자 메소드
method.signature.parameterless.override.mutator.like=설정자식 이름이 지정된 메소드 with의 매개변수가 없습니다
method.signature.override.abstract.member=재정의 키워드로 추상 멤버를 재정의하는 메소드 표시
method.signature.empty.paren.override.java.accessor=빈 소괄호로 재정의된 Java 접근자 메소드
method.signature.empty.paren.override.parameterless=빈 소괄호로 재정의된 매개변수가 없는 Scala 멤버
method.signature.parameterless.access.java.mutator=매개변수 없이 접근 가능한 Java 설정자 메소드
method.signature.parameterless.access.empty.paren=매개변수 없이 접근된 빈 소괄호 메소드
method.signature.java.accessor.empty.paren=빈 소괄호로 호출된 Java 접근자 메소드
typed.parameter.without.parenthesis.in.function.literal=함수 리터럴 내 소괄호 없이 유형 지정된 매개변수
unused.expression.name=사용되지 않은 표현식
unreachable.code.name=사용할 수 없는 코드
internal.getText.contains.shouldBe.textContains=.getText.contains는 .textContains여야 합니다
internal.getText.equals.shouldBe.textMatches=.getText.equals는 . textMatches여야 합니다
displayname.scala=Scala
displayname.scala.compile.server=Scala 컴파일 서버
displayname.scala.compiler=Scala 컴파일러
displayname.loop.variable.not.updated.inside.loop=루프 변수가 루프 내에서 업데이트되지 않음
displayname.package.name.inspection=패키지 이름 검사
displayname.scala.deprecation=Scala 사용 중단
displayname.deprecated.identifier=더 이상 사용되지 않는 식별자
displayname.deprecated.kind.projector.syntax=더 이상 사용되지 않는 kind-projector 구문
displayname.case.class.parameter=케이스 클래스 매개변수
displayname.var.could.be.a.val='var'이 'val'일 수 있습니다
displayname.unused.symbol=사용되지 않는 심볼
displayname.default.file.template.inspection=디폴트 파일 템플릿 검사
displayname.in.kind.projector.use.correct.lambda.keyword=Kind Projector\: 올바른 람다 키워드 사용
displayname.in.kind.projector.simplify.type=Kind Projector\: 유형 단순화
displayname.use.of.postfix.method.call=접두사 메소드 호출 사용
displayname.advanced.language.features=고급 언어 기능
displayname.reference.must.be.prefixed=참조에 접두사가 필요합니다
displayname.floating.point.literal.ending.with.dot='.'로 끝나는 부동 소수점 리터럴
displayname.chained.package.clause.inspection=체인 패키지 절 검사
displayname.relative.import=상대 가져오기
displayname.suspicious.shadowing.by.a.variable.pattern=변수 패턴에 의한 의심스러운 가리기
displayname.suspicious.shadowing.by.a.type.parameter=유형 매개변수에 의한 의심스러운 가리기
displayname.abstract.value.in.trait=특성 내 추상 값
displayname.unmatched.tag=일치하지 않는 태그
displayname.unnecessary.braces.in.import.inspection=가져오기 검사 내 불필요한 중괄호
displayname.name.boolean.parameters=부울 매개변수 이름 지정
displayname.redundant.cast.inspection=불필요한 형 변환 검사
displayname.redundant.conversion.inspection=불필요한 변환 검사
displayname.missing.type.annotation=유형 어노테이션 누락
displayname.malformed.format.string=형식이 잘못된 서식 문자열
displayname.legacy.string.formatting=기존 문자열 서식 지정
displayname.not.implemented.code=코드를 구현하지 않음
displayname.redundant.block=불필요한 블록
displayname.suspicious.forward.reference=의심스러운 전방 참조
displayname.type.annotation.required=유형 어노테이션 필요
displayname.double.negation=이중 부정
displayname.simplify.boolean.expression=부울 표현식 단순화
displayname.trivial.match.can.be.simplified=자명한 일치를 단순화할 수 있습니다
displayname.unnecessary.parentheses=불필요한 소괄호
displayname.type.check.can.be.pattern.matching=유형 검사가 패턴 매칭이 될 수 있습니다
displayname.comparing.unrelated.types=관련 없는 유형 비교 중
displayname.pattern.may.never.match=패턴이 한 번도 일치하지 않을 수 있습니다
displayname.match.statement.convertible.to.pattern.matching.anonymous.function=패턴 매칭 익명 함수로 변환 가능한 match 구문
displayname.view.bounds.are.deprecated=뷰 바운드가 더 이상 사용되지 않습니다
displayname.convert.expression.to.single.abstract.method=표현식을 단일 추상 메소드(SAM)로 변환
displayname.nested.stateful.monads=중첩 상태 모나드
displayname.field.from.delayedinit=DelayedInit의 필드
displayname.non.value.field.is.accessed.in.hashcode=값이 아닌 필드가 'hashCode()'에서 액세스되었습니다
displayname.unnecessary.partial.function=불필요한 부분 함수
displayname.annotator.based.error.inspection=어노테이터 기반 오류 검사
displayname.wrong.platform.method.usage=잘못된 플랫폼 메소드 사용 위치
displayname.syntactic.sugar=문법적 설탕
displayname.scala.unnecessary.semicolon.inspection=Scala 불필요한 세미콜론 검사
displayname.redundant.return=불필요한 반환
displayname.anonymous.function.convertible.to.a.method.value=메소드 값으로 변환 가능한 익명 함수
displayname.applied.type.lambda.can.be.simplified=적용된 람다 유형을 단순화할 수 있습니다
displayname.redundant.new.on.case.class=케이스 클래스의 불필요한 new
displayname.argument.duplicates.corresponding.parameter.default.value=인수가 해당 매개변수 디폴트 값을 복제합니다
displayname.auto.tupling=자동 튜플화
displayname.concealed.quot.apply.quot.call=숨겨진 "apply" 호출
displayname.null.initializer.can.be.replaced.by.underscore=Null 이니셜라이저가 _로 교체될 수 있습니다
displayname.scala.style.inspection=Scala 스타일 검사
displayname.simplifiable.empty.check=단순화 가능한 공백 검사
displayname.size.to.length.on.arrays.and.strings=배열 및 문자열의 size를 length로
displayname.equals.on.arrays.and.iterators=배열 및 반복자의 등호
displayname.sameelements.oncollections.of.a.same.kind=동일한 종류의 SameElements onCollections
displayname.corresponds.sameelements.on.unsorted.collection=정렬되지 않은 컬렉션의 Corresponds/sameElements
displayname.equals.oncollections.of.different.kinds=다른 종류의 Equals onCollections
displayname.comparing.length.to.lengthcompare=length 비교를 lengthCompare로
displayname.manually.zipping.with.indices=색인으로 수동 압축 중
displayname.access.to.first.element.by.index=색인으로 첫 요소에 액세스
displayname.access.to.last.element.by.index=색인으로 마지막 요소에 액세스
displayname.constructing.range.for.seq.indices=시퀀스 색인 범위 생성 중
displayname.filter.and.headoption.to.find=filter 및 headOption를 find로
displayname.find.and.emptiness.check.to.exists=찾기 및 공백 검사를 exists로
displayname.filter.and.emptiness.check.to.exists.forall=filter 및 공백 검사를 exists/forall로
displayname.filter.and.size.to.count=filter 및 size를 count로
displayname.find.and.map.to.apply=찾기 및 map을 apply로
displayname.exists.simplifiable.to.contains=contains로 단순화 가능한 exists
displayname.map.and.contains.true.false.to.exists.or.forall=Map 및 contains(true/false)를 exists 또는 \!forall로
displayname.filter.and.contains.to.intersect.or.diff=filter 및 contains를 intersect 또는 diff로
displayname.redundant.contains.in.filter=filter 내 불필요한 contains
displayname.double.negation.in.forall.and.exists=forall 및 exists 내 이중 부정
displayname.simplifiable.fold.or.reduce.method=단순화 가능한 fold 또는 reduce 메소드
displayname.fold.simplifiable.to.forall=forall로 단순화 가능한 fold
displayname.reverse.and.map.to.reversemap=reverse 및 map을 reverseMap으로
displayname.reverse.and.iterator.to.reverseiterator=reverse 및 iterator를 reverseIterator로
displayname.conversion.to.set.and.back.to.distinct=Set로 변환하고 distinct로 복원
displayname.drop.and.take.to.slice=drop 및 take를 slice로
displayname.reverse.take.and.reverse.to.takeright=reverse, take 및 reverse를 takeRight으로
displayname.map.and.flatten.to.flatmap=Map 및 flatten을 flatMap으롤
displayname.emulated.headoption.or.lastoption=모방된 headOption 또는 lastOption
displayname.replace.to.with.until=to를 until로 교체
displayname.replace.with.flatten=flatten으로 교체
displayname.sorted.and.head.last.to.max.min=sorted 및 head/last를 max/min로
displayname.collect.and.headoption.to.collectfirst=collect 및 headOption을 collectFirst로
displayname.index.bounds.check=색인 바운드 검사
displayname.make.array.to.string=배열을 문자열로 만들기
displayname.get.and.getorelse.to.getorelse=get 및 getOrElse를 getOrElse로
displayname.extracting.keys.manually=수동으로 키 추출 중
displayname.extracting.values.manually=수동으로 값 추출 중
displayname.redundant.get.when.getting.a.value.from.map=Map에서 값을 가져올 경우 불필요한 get
displayname.lift.to.get=Lift를 Get으로
displayname.emptiness.check.on.get.to.contains=Get 공백 검사를 Contains로
displayname.redundant.headoption.or.lastoption=불필요한 headOption 또는 lastOption
displayname.equals.some.x.to.contains.x=등호 Some(x)을 contains(x)로
displayname.map.and.getorelse.to.fold=map 및 getOrElse를 fold로
displayname.map.and.getorelse.false.to.exists=Map 및 getOrElse(false)를 exists로
displayname.getorelse.null.to.ornull=GetOrElse(null)를 orNull로
displayname.emulated.option.x=모방된 Option(x)
displayname.change.to.filter=filter로 변경
displayname.some.to.option=Some을 Option으로
displayname.filter.after.sort=정렬 후 필터링
displayname.redundant.collection.conversion=불필요한 컬렉션 변환
displayname.side.effects.in.a.monadic.transformation=모나딕 변환 시 부작용
displayname.unit.return.type.in.the.argument.of.map=map 인수 내 Unit 반환 유형
displayname.multiple.arg.lists.in.annotation.constructor=어노테이션 생성자 내 복수 인수 목록
displayname.unzip.for.extracting.a.single.element=단일 요소 추출을 위한 압축 해제
displayname.tag.unclosed=태그가 닫히지 않음
displayname.inlined.tag=인라인화된 태그
displayname.header.tags.unbalanced=짝이 맞이 않는 헤더 태그
displayname.unknown.tag=알 수 없는 태그
displayname.unknown.parameter=알 수 없는 매개변수
displayname.missing.tag.parameter.description=태그 매개변수 설명 누락
displayname.wrong.scaladoc.element=잘못된 scaladoc 요소
displayname.ammonite.unresolved.import=Ammonite 해결되지 않은 가져오기
displayname.specs2.matchers=Specs2 매처
final.modifier.is.redundant.for.toplevel.objects='final' modifier is redundant for toplevel objects
mark.inner.case.objects.as.final=Mark inner case objects as final to make compiled class final too

### org/jetbrains/plugins/scala/codeInsight/intention/expression/ConvertParameterToUnderscoreIntention.scala
introduce.implicit.incorrect.order=잘못된 매개변수 순서 때문에 묵시적 매개변수 삽입이 허용되지 않습니다
introduce.implicit.incorrect.count=잘못된 매개변수 사용 위치 개수 때문에 묵시적 매개변수 삽입이 허용되지 않습니다
introduce.implicit.not.allowed.here=이 표현식에는 묵시적 매개변수 삽입이 허용되지 않습니다

### org/jetbrains/plugins/scala/codeInsight/intention/expression/OptionWithLiteralToSomeIntention.scala
replace.with.some=Some으로 교체
replace.option.with.some=Option을 Some으로 교체

### org/jetbrains/plugins/scala/codeInsight/intention/expression/RemoveApplyIntention.scala
remove.apply.implicit.parameter=메소드 ''{0}'' 이(가) 묵시적 매개변수를 포함하기 때문에 ''apply'' 제거가 허용되지 않습니다
remove.apply.constructor.implicit.parameter=''{0}'' 의 생성자가 묵시적 매개변수를 포함하기 때문에 ''apply'' 제거가 허용되지 않습니다
remove.apply.overloaded=메소드 ''{0}'' 이(가) 오버로드되었기 때문에 ''apply'' 제거가 허용되지 않습니다

### org/jetbrains/plugins/scala/codeInspection/SAM/ConvertExpressionToSAMInspection.scala
convert.expression.to.sam=표현식을 단일 추상 메소드로 변환

### org/jetbrains/plugins/scala/codeInspection/ScalaFileNameInspection.scala
fileName.rename.text={0} {1} 을(를) {2} (으)로
fileName.rename.class=유형 정의 이름 변경
fileName.rename.file=파일 이름 변경

### org/jetbrains/plugins/scala/codeInspection/annotations/MultipleArgLists.scala
implementation.limitation.multiple.argument.lists=구현 제한\: 어노테이션의 다중 인수 목록이 현재 지원되지 않습니다

### org/jetbrains/plugins/scala/codeInspection/booleans/DoubleNegationInspection.scala
display.name.double.negation=이중 부정
remove.double.negation=이중 부정을 제거합니다.

### org/jetbrains/plugins/scala/codeInspection/booleans/SimplifyBooleanInspection.scala
simplify.boolean.expression=부울 표현식 단순화
simplify.with.text={0} 단순화

### org/jetbrains/plugins/scala/codeInspection/booleans/SimplifyBooleanMatchInspection.scala
display.name.trivial.match.can.be.simplified=자명한 일치를 단순화할 수 있습니다
simplify.match.to.if.statement=match를 if 문으로 단순화

### org/jetbrains/plugins/scala/codeInspection/caseClassParamInspection/CaseClassParamInspection.scala
display.name.case.class.parameter=케이스 클래스 매개변수

### org/jetbrains/plugins/scala/codeInspection/caseClassParamInspection/RemoveValQuickFix.scala
remove.unnecessary.val=불필요한 'val' 제거
remove.val.from.definition=정의에서 'val' 제거

### org/jetbrains/plugins/scala/codeInspection/cast/ScalaRedundantCastInspection.scala
display.name.redundant.cast=불필요한 케스트
remove.redundant.cast=불필요한 케스트 제거

### org/jetbrains/plugins/scala/codeInspection/cast/ScalaRedundantConversionInspection.scala
display.name.redundant.conversion=불필요한 변화
remove.redundant.conversion=불필요한 변환 제거
casting.a.to.b.is.redundant=''{0}''에서 ''{1}''(으)로의 형 변환은 중복됩니다

### org/jetbrains/plugins/scala/codeInspection/catchAll/DangerousCatchAllInspection.scala
catch.all=예외 유형 지정

### org/jetbrains/plugins/scala/codeInspection/collections/CollectHeadOptionInspection.scala
replace.collect.headOption.with.collectFirst=.collect 및 .headOption을 .collectFirst 교체

### org/jetbrains/plugins/scala/codeInspection/collections/ComparingDiffCollectionKindsInspection.scala
hint.comparing.different.collection.kinds=다른 컬렉션 종류 비교 중
hint.convert.left.hand.side.to.collection=왼쪽을 {0} (으)로 변환
hint.convert.right.hand.side.to.collection=오른쪽을 {0} (으)로 변환

### org/jetbrains/plugins/scala/codeInspection/collections/ComparingLengthInspection.scala
replace.with.lengthCompare=.lengthCompare로 교체

### org/jetbrains/plugins/scala/codeInspection/collections/CorrespondsUnsortedInspection.scala
sameElements.unsorted=정렬되지 않은 컬렉션의 `sameElements`, 결과를 예측할 수 없습니다
corresponds.unsorted=정렬되지 않은 컬렉션과의 'corresponds', 결과를 예측할 수 없습니다

### org/jetbrains/plugins/scala/codeInspection/collections/DropTakeToSliceInspection.scala
replace.drop.take.with.slice=.drop 및 .take를 .slice로 교체
replace.take.drop.with.slice=.take 및 .drop을 .slice로 교체

### org/jetbrains/plugins/scala/codeInspection/collections/EmptyCheckInspection.scala
replace.with.isEmpty=.isEmpty로 교체
replace.with.isDefined=.isDefined로 교체
replace.with.nonEmpty=.nonEmpty로 교체

### org/jetbrains/plugins/scala/codeInspection/collections/EmulateFlattenInspection.scala
replace.with.flatten=.flatten로 교체

### org/jetbrains/plugins/scala/codeInspection/collections/EqualityToSameElementsInspection.scala
replace.equals.with.sameElements=등호를 sameElements로 교체
config.description.for.arrays=배열
config.description.for.iterators=반복자

### org/jetbrains/plugins/scala/codeInspection/collections/ExistsEqualsInspection.scala
exists.equals.hint=exists를 contains로 교체
forall.notEquals.hint=forall를 not contains로 교체

### org/jetbrains/plugins/scala/codeInspection/collections/ExistsForallReplaceInspection.scala
replace.with.forall=.forall로 교체
replace.with.exists=.exists로 교체

### org/jetbrains/plugins/scala/codeInspection/collections/FilterEmptyCheckInspection.scala
filter.nonempty.check.hint=ffilter 및  비공백 검사를 exists로 교체
filter.empty.check.hint=filter 및 공백 검사를 \!(...).exists로 교체
filterNot.empty.check.hint=filterNot 및 공백 검사를 forall로 교체
filterNot.nonempty.check.hint=filterNot 및 비공백 검사를 \!(...).forall로 교체

### org/jetbrains/plugins/scala/codeInspection/collections/FilterHeadOptionInspection.scala
filter.headOption.hint=filter 및 headOption을 find로 교체

### org/jetbrains/plugins/scala/codeInspection/collections/FilterOtherContainsInspection.scala
replace.filter.with.intersect=filter 및 contains을 intersect로 교체
replace.filter.with.diff=filter 및 not contains을 diff로 교체

### org/jetbrains/plugins/scala/codeInspection/collections/FilterSetContainsInspection.scala
remove.redundant.contains=불필요한 .contains 제거

### org/jetbrains/plugins/scala/codeInspection/collections/FilterSizeInspection.scala
filter.size.hint=filter 및 size를 count로 교체

### org/jetbrains/plugins/scala/codeInspection/collections/FindAndMapToApplyInspection.scala
replace.find.and.map.with.apply=find 및 map을 apply로 교체

### org/jetbrains/plugins/scala/codeInspection/collections/FindEmptyCheckInspection.scala
find.isDefined.hint=find 및 비공백 검사를 exists로 교체
find.isEmpty.hint=find 및 공백 검사를 \!(...).exists로 교체

### org/jetbrains/plugins/scala/codeInspection/collections/FoldTrueAndInspection.scala
fold.true.and.hint=fold를 forall로 교체

### org/jetbrains/plugins/scala/codeInspection/collections/GetGetOrElseInspection.scala
get.getOrElse.hint=getOrElse(key, defaultValue)로 교체

### org/jetbrains/plugins/scala/codeInspection/collections/GetOrElseNullInspection.scala
getOrElse.null.hint=getOrElse(null)를 orNull로 교체

### org/jetbrains/plugins/scala/codeInspection/collections/HeadOrLastOptionInspection.scala
replace.with.headOption=.headOption으로 교체
replace.with.lastOption=.lastOption으로 교체
ifstmt.to.headOption=If-else를 headOption으로
ifstmt.to.lastOption=If-else를 lastOption으로
lift.to.headOption=.lift를 headOption으로
lift.to.lastOption=.lift를 lastOption으로

### org/jetbrains/plugins/scala/codeInspection/collections/IfElseToFilteredOptionInspection.scala
ifstmt.to.filteredOption=if를 필터 옵션로 교체

### org/jetbrains/plugins/scala/codeInspection/collections/IfElseToOptionInspection.scala
hint.replace.with.option.expr=Option(x)로 교체
hint.replace.with.option.expr.with.preview=Option({0})으로 교체

### org/jetbrains/plugins/scala/codeInspection/collections/IndexBoundsCheckInspection.scala
ifstmt.to.lift=If-else를 lift로

### org/jetbrains/plugins/scala/codeInspection/collections/LastIndexToLastInspection.scala
replace.with.last=.last로 교체

### org/jetbrains/plugins/scala/codeInspection/collections/MakeArrayToStringInspection.scala
format.with.mkstring=.mkString("Array(", ", ", ")")으로 서식 지정

### org/jetbrains/plugins/scala/codeInspection/collections/MapFlattenInspection.scala
replace.map.flatten.with.flatMap=.map 및 .flatten을 .flatMap으로 교체

### org/jetbrains/plugins/scala/codeInspection/collections/MapGetEmptinessCheckInspection.scala
replace.get.nonEmpty.with.contains=.contains(key)로 교체
replace.get.isEmpty.with.not.contains=\!.contains(key)로 교체

### org/jetbrains/plugins/scala/codeInspection/collections/MapGetGetInspection.scala
get.get.hint=.(key)로 교체

### org/jetbrains/plugins/scala/codeInspection/collections/MapGetOrElseBooleanInspection.scala
map.getOrElse.false.hint=map 및 getOrElse(false)를 exists로 교체
map.getOrElse.true.hint=map 및 getOrElse(true)를 forall로 교체

### org/jetbrains/plugins/scala/codeInspection/collections/MapGetOrElseInspection.scala
map.getOrElse.hint=map 및 getOrElse를 fold로 교체

### org/jetbrains/plugins/scala/codeInspection/collections/MapKeysInspection.scala
replace.with.keys=.keys로 교체
replace.with.keySet=.keySet으로 교체
replace.with.keysIterator=.keysIterator로 교체

### org/jetbrains/plugins/scala/codeInspection/collections/MapLiftInspection.scala
replace.with.get=.get으로 교체

### org/jetbrains/plugins/scala/codeInspection/collections/MapToBooleanContainsInspection.scala
replace.map.contains.true.with.exists=.map(...).contains(true)를 .exists(...)로 교체
replace.map.contains.false.with.not.forall=.map(...).contains(false)를 \! .forall(...)로 교체

### org/jetbrains/plugins/scala/codeInspection/collections/MapValuesInspection.scala
replace.with.values=.values로 교체
replace.with.valuesIterator=.valuesIterator로 교체

### org/jetbrains/plugins/scala/codeInspection/collections/OperationOnCollectionInspectionBase.scala
operation.on.collection.id=OperationsOnCollection
operation.on.collection.name=콜렉션의 단순화 가능한 연산
operation.on.collection.like.option.input.message=검사에서 이러한 클래스는 scala.Option과 같이 처리됩니다
operation.on.collection.like.option.input.title=like-option 클래스 추가
operation.on.collection.like.option.panel.title=Like-option 클래스
operation.on.collection.like.collection.input.message=검사에서 이러한 클래스는 컬렉션과 같이 처리됩니다
operation.on.collection.like.collection.input.title=like-collection 클래스 추가
operation.on.collection.like.collection.panel.title=like-collection 클래스

### org/jetbrains/plugins/scala/codeInspection/collections/OptionEqualsSomeToContainsInspection.scala
replace.with.contains=.contains로 교체
replace.with.not.contains=\!.contains로 교체

### org/jetbrains/plugins/scala/codeInspection/collections/RangeToIndicesInspection.scala
hint.replace.with.indices=.indices로 교체
hint.replace.with.indices.with.preview={0}.indices로 교체

### org/jetbrains/plugins/scala/codeInspection/collections/RedundantCollectionConversionInspection.scala
redundant.collection.conversion=불필요한 컬렉션 변환 제거

### org/jetbrains/plugins/scala/codeInspection/collections/RedundantHeadOrLastOptionInspection.scala
remove.redundant.headOption=불필요한 .headOption 제거
remove.redundant.lastOption=불필요한 . lastOption 제거

### org/jetbrains/plugins/scala/codeInspection/collections/ReplaceToWithUntilInspection.scala
replace.to.with.until=`to`를 `until`로 교체

### org/jetbrains/plugins/scala/codeInspection/collections/ReverseIteratorInspection.scala
replace.reverse.iterator=.reverse.iterator를 .reverseIterator로 교체

### org/jetbrains/plugins/scala/codeInspection/collections/ReverseMapInspection.scala
replace.reverse.map=.reverse.map을 .reverseMap으로 교체

### org/jetbrains/plugins/scala/codeInspection/collections/ReverseTakeReverseInspection.scala
replace.reverse.take.reverse.with.takeRight=.reverse.take(...).reverse를 .takeRight(...)로 교체

### org/jetbrains/plugins/scala/codeInspection/collections/SameElementsToEqualsInspection.scala
replace.sameElements.with.equals=sameElements를 equals로 교체
replace.corresponds.with.equals=corresponds를 등호로 교체

### org/jetbrains/plugins/scala/codeInspection/collections/SideEffectsInMonadicTransformationInspection.scala
side.effects.in.monadic=모나딕 변환 시 부작용

### org/jetbrains/plugins/scala/codeInspection/collections/SimplifiableFoldOrReduceInspection.scala
fold.sum.hint=fold를 sum으로 교체
fold.product.hint=fold를 product로 교체
fold.sum.short=fold를 sum으로
fold.product.short=fold를 product로
reduce.sum.hint=reduce를 sum으로 교체
reduce.product.hint=reduce를 product로 교체
reduce.min.hint=reduce를 min으로 교체
reduce.max.hint=reduce를 max로 교체
reduce.sum.short=reduce를 sum으로
reduce.product.short=reduce를 product로
reduce.min.short=reduce를 min으로
reduce.max.short=reduce를 max로

### org/jetbrains/plugins/scala/codeInspection/collections/SizeToLengthInspection.scala
size.to.length=배열 및 문자열의 .size를 .length로 교체

### org/jetbrains/plugins/scala/codeInspection/collections/SomeToOptionInspection.scala
replace.with.option=Option으로 교체

### org/jetbrains/plugins/scala/codeInspection/collections/SortFilterInspection.scala
sort.filter.hint=sort 및 filter의 순서 변경

### org/jetbrains/plugins/scala/codeInspection/collections/SortedMaxMinInspection.scala
replace.sorted.head.with.min=.min으로 교체
replace.sorted.last.with.max=.max로 교체
replace.sortBy.head.with.minBy=.minBy로 교체
replace.sortBy.last.with.maxBy=.maxBy로 교체

### org/jetbrains/plugins/scala/codeInspection/collections/ToSetAndBackInspection.scala
replace.toSet.and.back.with.distinct=Set으로 변환 및 복원을 .distinct로 교체

### org/jetbrains/plugins/scala/codeInspection/collections/UnitInMapInspection.scala
expression.unit.return.in.map=map 인수 내 Unit 반환 유형을 가진 표현식
use.foreach.instead.of.map=map 대신 foreach 사용

### org/jetbrains/plugins/scala/codeInspection/collections/UnzipSingleElementInspection.scala
replace.with.map=.map으로 교체

### org/jetbrains/plugins/scala/codeInspection/collections/ZeroIndexToHeadInspection.scala
replace.with.head=.head로 교체

### org/jetbrains/plugins/scala/codeInspection/collections/ZipWithIndex.scala
replace.with.zipWithIndex=zipWithIndex로 교체

### org/jetbrains/plugins/scala/codeInspection/controlFlow/ScalaUnreachableCodeInspection.scala
remove.unreachable.code=도달할 수 없는 코드 제거
unwrap.do.statement=do-구문 줄 바꿈 해제

### org/jetbrains/plugins/scala/codeInspection/controlFlow/ScalaUnusedExpressionInspection.scala
unused.expression.throws=사용되지 않은 표현식, 발생 가능한 유일한 부작용은 예외입니다
unused.expression.no.side.effects=사용되지 않은 부작용 없는 표현식
add.return.keyword=반환 키워드 추가
remove.expression=표현식 제거

### org/jetbrains/plugins/scala/codeInspection/delayedInit/FieldFromDelayedInitInspection.scala
display.name.field.from.delayedinit=DelayedInit의 필드
field.defined.in.delayedinit.is.likely.to.be.null=DelayedInit에 정의된 필드가 null일 수 있습니다

### org/jetbrains/plugins/scala/codeInspection/deprecation/DeprecatedKindProjectorSyntaxInspection.scala
replace.with.star.syntax=`*`-구문으로 교체
kind.projector.deprecated.tip='?' 자리표시자는 더 이상 사용되지 않습니다. 대신 '*'를 사용해 주세요.
kind.projector.deprecated.tip.with.update='?' 자리표시자는 더 이상 사용되지 않습니다. 대신 kind-projector 플러그인을 업데이트한 후 '*'를 사용해 주세요.

### org/jetbrains/plugins/scala/codeInspection/deprecation/ScalaDeprecatedIdentifierInspection.scala
usage.of.deprecatedname.as.identifier.is.deprecated={0} 은(는) 식별잘로 더 이상 사용되지 않습니다. Scala 향후 버전에서 키워드로 사용될 수 있습니다.

### org/jetbrains/plugins/scala/codeInspection/deprecation/ScalaDeprecationInspection.scala
parameter.name.is.deprecated=매개변수 이름\: {0} 은(는) 더 이상 사용되지 않습니다.
symbol.name.is.deprecated.with.message=심볼 {0} 은(는) 더 이상 사용할 수 없습니다. {1}
super.method.name.is.deprecated.with.message=상위 메소드 {0} 은(는) 더 이상 사용되지 않습니다. {1}

### org/jetbrains/plugins/scala/codeInspection/feature/LanguageFeatureInspection.scala
advanced.language.feature=고급 언어 기능\: {0}
display.name.advanced.language.features=고급 언어 기능
import.feature.flag.for.language.feature=\ %s 의 기능 플래그 가져오기
enable.language.feature.plural={0} 활성화

### org/jetbrains/plugins/scala/codeInspection/format/LegacyStringFormattingInspection.scala
legacy.string.formatting.use.interpolated.string=기존 문자열 서식 지정 시 보간된 문자열로 대체될 수 있습니다
convert.to.interpolated.string=보간된 문자열로 변환

### org/jetbrains/plugins/scala/codeInspection/format/ScalaMalformedFormatStringInspection.scala
format.specifier.cannot.be.used.for.an.argument=서식 지정자 {0} 에 인수 {1}({2}) 을(를) 사용할 수 없습니다
argument.cannot.be.used.for.a.format.specifier=형식 지정자 {2} 에 인수 {0}({1}) 을(를) 사용할 수 없습니다
malformed.format.specifier=형식이 잘못된 서식 지정자
no.argument.for.a.format.specifier=서식 지정자 {0} 에 인수 없음
no.argument.at.position=위치 {0} 에 인수 없음
no.format.specifer.for.an.argument=인수 {0} 에 서식 지정자 없음

### org/jetbrains/plugins/scala/codeInspection/functionExpressions/MatchToPartialFunctionInspection.scala
convert.match.statement.to.pattern.matching.function=match 구문을 패턴 매칭 익명 함수로 변환

### org/jetbrains/plugins/scala/codeInspection/functionExpressions/UnnecessaryPartialFunctionInspection.scala
unnecessary.partial.function=불필요한 부분 함수

### org/jetbrains/plugins/scala/codeInspection/functionExpressions/UnnecessaryPartialFunctionQuickFix.scala
convert.to.anonymous.function=익명 함수로 변환

### org/jetbrains/plugins/scala/codeInspection/hashCodeUsesVar/HashCodeUsesVarInspection.scala
non.value.field.is.accessed.in.hashcode=값이 아닌 필드가 'hashCode()'에서 액세스되었습니다

### org/jetbrains/plugins/scala/codeInspection/implicits/DeprecatedViewBoundInspection.scala
view.bounds.are.deprecated=뷰 바운드가 더 이상 사용되지 않습니다
replace.with.implicit.parameters=묵시적 매개변수로 대체

### org/jetbrains/plugins/scala/codeInspection/imports/SingleImportInspection.scala
single.import=하나의 가져오기만 포함하는 import 문에서 중괄호 제거

### org/jetbrains/plugins/scala/codeInspection/infiniteCycle/LoopVariableNotUpdatedInspection.scala
display.name.loop.variable.not.updated.inside.loop=루프 변수가 루프 내에서 업데이트되지 않음

### org/jetbrains/plugins/scala/codeInspection/internal/AnnotatorBasedErrorInspection.scala
warning.with.message=경고\: {0}
error.detected=오류 탐지됨
error.detected.with.message=오류 탐지됨\: {0}

### org/jetbrains/plugins/scala/codeInspection/internal/ScalaShouldBeTextContainsInspection.scala
internal.replace.with.textContains=.textContains로 대체

### org/jetbrains/plugins/scala/codeInspection/internal/ScalaShouldBeTextMatchesInspection.scala
internal.replace.with.textMatches=.textMatches로 교체

### org/jetbrains/plugins/scala/codeInspection/literal/FloatLiteralEndingWithDecimalPointInspection.scala
display.name.floating.point.literal.ending.with.dot='.'로 끝나는 부동 소수점 리터럴
convert.to.floating.point={0}(으)로 변환합니다.

### org/jetbrains/plugins/scala/codeInspection/methodSignature/ApparentResultTypeRefinementInspection.scala
insert.missing.assignment=누락된 대입 삽입

### org/jetbrains/plugins/scala/codeInspection/methodSignature/JavaAccessorEmptyParenCallInspection.scala
remove.call.parentheses=호출 소괄호 제거

### org/jetbrains/plugins/scala/codeInspection/methodSignature/OverrideAbstractMemberInspection.scala
add.override.modifier.quickfix=재정의 제어자 추가

### org/jetbrains/plugins/scala/codeInspection/methodSignature/ParameterlessAccessInspection.scala
add.call.parentheses=호출 소괄호 추가

### org/jetbrains/plugins/scala/codeInspection/methodSignature/UnitMethodInspection.scala
convert.to.function.syntax=함수 구문 변환
remove.redundant.type.annotation=불필요한 유형 어노테이션 제거
remove.redundant.type.annotation.and.equals.sign=불필요한 유형 어노테이션 및 등호 기호 제거
remove.redundant.equals.sign=불필요한 등호 기호 제거

### org/jetbrains/plugins/scala/codeInspection/methodSignature/quickfix/AddEmptyParentheses.scala
empty.parentheses=빈 소괄호 추가

### org/jetbrains/plugins/scala/codeInspection/methodSignature/quickfix/RemoveParentheses.scala
redundant.parentheses=중복 된 소괄호 제거

### org/jetbrains/plugins/scala/codeInspection/modifiers/SetModifierQuickfix.scala
add.modifier=Add ''{0}'' modifier
remove.modifier=Remove ''{0}'' modifier

### org/jetbrains/plugins/scala/codeInspection/monads/NestedStatefulMonadsInspection.scala
nested.stateful.monads=중첩 상태 모나드

### org/jetbrains/plugins/scala/codeInspection/notImplementedCode/NotImplementedCodeInspection.scala
not.implemented=구현되지 않음
implement.quickfix.name=구현

### org/jetbrains/plugins/scala/codeInspection/packageNameInspection/ChainedPackageInspection.scala
package.declaration.could.use.chained.package.clauses=패키지 선언이 체인 패키지 절을 사용할 수 있습니다
use.chained.package.clauses.like=체인 패키지 절 사용\: 패키지 {0}; 패키지...
use.chained.package.clauses=체인 패키지 절 사용

### org/jetbrains/plugins/scala/codeInspection/packageNameInspection/EnablePerformanceProblemsQuickFix.scala
enable.setting=설정 활성화, 해결 문제 해결(에디터 성능을 향상시킬 수 있습니다)
disable.setting=설정 비활성화, 해결 문제 해결(에디터 성능을 향상시킬 수 있습니다)
family.name.enable.setting=설정 활성화
fimaly.name.disable.setting=설정 비활성화

### org/jetbrains/plugins/scala/codeInspection/packageNameInspection/ScalaMoveToPackageQuickFix.scala
fimaly.name.move.file.to.package=파일을 패키지로 이동
move.file.to.default.package=파일 {0} 을(를) 디폴트 패키지로 이동
move.file.to.package.with.packagename=파일 {0} 을(를) 패키지 {1} (으)로 이동

### org/jetbrains/plugins/scala/codeInspection/packageNameInspection/ScalaPackageNameInspection.scala
package.names.does.not.correspond.to.directory.structure=패키지 이륾이 디렉토리 구조와 일치하지 않습니다. 이로 인해 이 파일의 클래스를 해결하는 데 문제가 발생할 수 있습니다.

### org/jetbrains/plugins/scala/codeInspection/packageNameInspection/ScalaRenamePackageQuickFix.scala
rename.package.quickfix.command.name=패키지 QuickFix 이름 변경
family.name.rename.package=패키지 이름 변경
remove.package.statement=패키지 구문 제거
rename.package.to=패키지 이름을 {0} (으)로 변경

### org/jetbrains/plugins/scala/codeInspection/parameters/NameBooleanParametersInspection.java
name.boolean.ignore.single.parameter.methods=매개변수가 하나인 메소드 무시

### org/jetbrains/plugins/scala/codeInspection/parameters/NameBooleanParametersInspectionBase.scala
name.boolean.params=부울 매개변수 이름 지정

### org/jetbrains/plugins/scala/codeInspection/parameters/RedundantDefaultArgumentInspection.scala
argument.duplicates.corresponding.parameter.default.value=인수가 해당 매개변수 디폴트 값을 복제합니다
delete.redundant.default.argument=불필요한 디폴트 인수 삭제

### org/jetbrains/plugins/scala/codeInspection/parameters/TypedParameterWithoutParenthesisInspection.scala
surround.with.parenthesis=소괄호로 둘러싸기

### org/jetbrains/plugins/scala/codeInspection/parentheses/ScalaUnnecessaryParenthesesInspection.java
clarifying.parentheses=명확히 구분 짓는 소괄호
around.function.type=함수 유형 주위
around.function.type.parameter=함수 유형의 매개변수 주위
around.function.expr.parameter=함수 표현식의 매개변수 주위

### org/jetbrains/plugins/scala/codeInspection/parentheses/ScalaUnnecessaryParenthesesInspectionBase.scala
remove.unnecessary.parentheses.with.text=불필요한 소괄호 {0} 제거
unnecessary.parentheses=불필요한 소괄호
remove.unnecessary.parentheses=불필요한 소괄호를 제거합니다.

### org/jetbrains/plugins/scala/codeInspection/postfix/PostfixMethodCallInspection.scala
use.of.postfix.method.call=접두사 메소드 호출 사용
add.dot.to.method.call=메소드 호출에 마침표 추가

### org/jetbrains/plugins/scala/codeInspection/prefixMutableCollections/ReferenceMustBePrefixedInspection.scala
reference.must.be.prefixed=참조에 접두사가 필요합니다
add.prefix.to.reference=참조에 접두사 추가

### org/jetbrains/plugins/scala/codeInspection/redundantBlock/RedundantBlockInspection.scala
remove.redundant.braces=불필요한 중괄호 제거
unwrap.the.expression=표현식 줄 바꿈 해제
the.enclosing.block.is.redundant=해당 블록이 불필요합니다
redundant.braces.in.case.clause=case 절의 불필요한 중괄호

### org/jetbrains/plugins/scala/codeInspection/relativeImports/RelativeImportInspection.scala
relative.import.detected=상대 가져오기 탐지됨
display.name.relative.import=상대 가져오기
family.name.enable.full.qualified.imports=정규화된 import 문 활성화

### org/jetbrains/plugins/scala/codeInspection/resourceLeaks/SourceNotClosedInspection.scala
source.not.closed=소스가 닫히지 않습니다

### org/jetbrains/plugins/scala/codeInspection/scaladoc/ScalaDocInlinedTagInspection.scala
display.name.inlined.tag=인라인화된 태그

### org/jetbrains/plugins/scala/codeInspection/scaladoc/ScalaDocMissingParameterDescriptionInspection.scala
display.name.missing.parameter.description=매개변수 설명 누락

### org/jetbrains/plugins/scala/codeInspection/scaladoc/ScalaDocUnbalancedHeaderInspection.scala
all.text.from.header.closing.tag.to.end.of.line.will.be.lost=헤더 닫기 태그에서부터 줄 끝까지의 모든 텍스트가 손실됩니다

### org/jetbrains/plugins/scala/codeInspection/scaladoc/ScalaDocUnclosedTagWithoutParserInspection.scala
display.name.unclosed.tag=닫히지 않은 태그

### org/jetbrains/plugins/scala/codeInspection/scaladoc/ScalaDocUnknownParameterInspection.scala
unknown.tag.parameter=알 수 없는 태그 매개변수
unknown.tag.type.parameter=알 수 없는 태그 유형 매개변수
one.param.or.tparam.tag.for.one.param.or.type.param.allowed=하나의 param/type 매개변수 당 하나의 param/tparam 태그가 허용됨
scaladoc.cant.process.tparams.for.type.alias.now=Scaladoc이 이제 유형 별칭의 tparams를 처리할 수 없습니다
param.and.tparams.tags.arnt.allowed.there=@param 및 @tparams 태그는 허용되지 않습니다

### org/jetbrains/plugins/scala/codeInspection/scaladoc/ScalaDocUnknownTagInspection.scala
missing.tag.parameter=태그 매개변수 누락
unknown.scaladoc.tag=알 수 없는 scaladoc 태그

### org/jetbrains/plugins/scala/codeInspection/scaladoc/package.scala
family.name.scala.scaladoc=Scala\: Scaladoc

### org/jetbrains/plugins/scala/codeInspection/shadow/TypeParameterShadowInspection.scala
display.name.suspicious.shadowing.by.a.type.parameter=유형 매개변수에 의한 의심스러운 가리기

### org/jetbrains/plugins/scala/codeInspection/shadow/VariablePatternShadowInspection.scala
suspicious.shadowing.by.a.variable.pattern=변수 패턴에 의한 의심스러운 가리기
rename.variable.pattern=변수 패턴 이름 변경
convert.to.stable.identifier.pattern=식별자 패턴 `{0}` (으)로 변환

### org/jetbrains/plugins/scala/codeInspection/specs2/BuiltinMatcherExistsInspection.scala
specs2.builtin.matcher.alternative.exists=사용 가능한 매처가 존재합니다
specs2.use.builtin.matcher=내장 매처로 교체

### org/jetbrains/plugins/scala/codeInspection/suppression/ScalaSuppressForStatementFix.scala
suppress.inspection.function=함수 억제
suppress.inspection.typeAlias=유형 별칭 억제
suppress.inspection.variable=변수 정의 억제

### org/jetbrains/plugins/scala/codeInspection/syntacticClarification/AutoTuplingInspection.scala
scala.compiler.will.replace.this.argument.list.with.tuple=Scala 컴파일러가 이 인수 목록을 튜플로 교체합니다
display.name.auto.tupling=자동 튜플화
make.tuple.explicit=튜플을 명시적으로 만들기

### org/jetbrains/plugins/scala/codeInspection/syntacticClarification/ConcealedApplyCall.scala
concealed.apply.call=숨겨진 "apply" 호출
make.apply.call.explicit="apply" 호출을 명시적으로 만들기

### org/jetbrains/plugins/scala/codeInspection/syntacticClarification/VariableNullInitializerInspection.scala
use.option.type=Use Option type
use.underscore.initializer=Use _ initializer
variable.with.null.initializer=Variable with null initializer

### org/jetbrains/plugins/scala/codeInspection/syntacticSimplification/ConvertibleToMethodValueInspection.scala
convertible.to.method.value.name=메소드 값으로 변환 가능한 익명 함수
convertible.to.method.value.anonymous.hint=메소드 값으로 변환
convertible.to.method.value.eta.hint=불필요한 자리표시자 제거

### org/jetbrains/plugins/scala/codeInspection/syntacticSimplification/FunctionTupleSyntacticSugarInspection.scala
syntactic.sugar.could.be.used=문법적 설탕을 사용할 수 있습니다

### org/jetbrains/plugins/scala/codeInspection/syntacticSimplification/RedundantNewCaseClassInspection.scala
display.name.redundant.new.on.case.class=케이스 클래스의 불필요한 new

### org/jetbrains/plugins/scala/codeInspection/syntacticSimplification/RemoveRedundantReturnInspection.scala
return.keyword.is.redundant=키워드 반환이 불필요합니다
display.name.redundant.return=불필요한 반환

### org/jetbrains/plugins/scala/codeInspection/syntacticSimplification/ScalaUnnecessarySemicolonInspection.scala
remove.unnecessary.semicolon=불필요한 세미콜론 제거
unnecessary.semicolon=불필요한 세미콜론

### org/jetbrains/plugins/scala/codeInspection/typeAnnotation/AddTypeAnnotationQuickFix.scala
add.type.annotation=유형 어노테이션 추가

### org/jetbrains/plugins/scala/codeInspection/typeAnnotation/TypeAnnotationInspection.scala
learn.why=이유 알아보기...
quickfix.modify.code.style=코드 스타일 수정...
quickfix.make.private=private으로 설정
type.annotation.required.for={0} 에 유형 어노테이션 필요

### org/jetbrains/plugins/scala/codeInspection/typeChecking/ComparingUnrelatedTypesInspection.scala
comparing.unrelated.types.name=관련 없는 유형 비교 중
comparing.unrelated.types.hint=관련 없는 유형 비교 중\: {0} 및 {1}

### org/jetbrains/plugins/scala/codeInspection/typeChecking/PatternMayNeverMatchInspection.scala
pattern.may.never.match=패턴이 한 번도 일치하지 않을 수 있습니다

### org/jetbrains/plugins/scala/codeInspection/typeChecking/TypeCheckCanBeMatchInspection.scala
type.check.can.be.replaced.by.pattern.matching=유형 검사가 패턴 매칭으로 교체될 수 있습니다

### org/jetbrains/plugins/scala/codeInspection/typeLambdaSimplify/AppliedTypeLambdaCanBeSimplifiedInspection.scala
applied.type.lambda.can.be.simplified=적용된 람다 유형을 단순화할 수 있습니다
simplify.type=유형 단순화

### org/jetbrains/plugins/scala/codeInspection/typeLambdaSimplify/KindProjectorSimplifyTypeProjectionInspection.scala
kind.projector.simplify.type=Kind Projector\: 유형 단순화

### org/jetbrains/plugins/scala/codeInspection/typeLambdaSimplify/KindProjectorUseCorrectLambdaKeywordInspection.scala
kind.projector.replace.lambda.with.lamda.char=Kind Projector\: 람다를 λ로 교체
kind.projector.replace.lambda.char.with.lambda=Kind Projector\: λ를 람다로 교체
kind.projector.use.correct.lambda.keyword=Kind Projector\: 올바른 람다 키워드 사용
kind.projector.code.style.setting.use.lamda.char=Kind Projector\: 코드 스타일 설정 변경\: 람다 대신 λ 사용
kind.projector.code.style.setting.use.lamda.word=Kind Projector\: 코드 스타일 설정 변경\: λ 대신 람다 사용

### org/jetbrains/plugins/scala/codeInspection/unusedInspections/DeleteUnusedElementFix.scala
remove.unused.element=사용하지 않는 요소 제거

### org/jetbrains/plugins/scala/codeInspection/unusedInspections/ScalaOptimizeImportsFix.scala
mark.import.as.always.used.in.this.project=import를 이 프로젝트에서 항상 사용으로 표시

### org/jetbrains/plugins/scala/codeInspection/unusedInspections/ScalaUnusedImportPassBase.scala
unused.import.statement=사용되지 않는 import 문

### org/jetbrains/plugins/scala/codeInspection/unusedInspections/ScalaUnusedSymbolInspection.scala
display.name.unused.symbol=사용되지 않은 심볼
declaration.is.never.used=선언이 한 번도 사용되지 않습니다

### org/jetbrains/plugins/scala/codeInspection/valInTraitInspection/AbstractValueInTraitInspection.scala
display.name.abstract.value.in.trait=특성 내 추상 값
abstract.value.used.in.trait=특성에 사용된 추상 값
abstract.variable.used.in.trait=특성에 사용된 추상 변수

### org/jetbrains/plugins/scala/codeInspection/varCouldBeValInspection/ValToVarQuickFix.scala
convert.val.to.var='val'을 'var'로 변환

### org/jetbrains/plugins/scala/codeInspection/varCouldBeValInspection/VarCouldBeValInspection.scala
var.could.be.a.val=var이 val일 수 있습니다
convert.var.to.val='var'을 'val'로 변환

### org/jetbrains/plugins/scala/codeInspection/xml/package.scala
family.name.scala.general=Scala\: 일반

### <unused>
drop.one.hint=drop(1)을 tail로 교체
replace.equals.with.arrays.equals=배열 상등 대신 java.util.Arrays.equals 사용
suppress.inspection.argument=인수 억제
internal.string.should.be.in.bundle=문자열이 번들로 추출되어야 합니다
internal.only.pass.hardcoded.strings.as.property.keys=프로퍼티 키로 하드코딩된 문자열만 전달
internal.expression.without.nls.passed.to.nls=@Nls로 전달된 @Nls가 없는 표현식
