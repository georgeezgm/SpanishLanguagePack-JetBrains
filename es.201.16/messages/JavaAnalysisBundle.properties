add.explicit.type.arguments=Agregar argumentos de tipo explícito

# suprimir la inspección "UnusedProperty"
annotation.target.ANNOTATION_TYPE=Tipo de anotación
# suprimir la inspección "UnusedProperty"
annotation.target.CONSTRUCTOR=Constructor
# suprimir la inspección "UnusedProperty"
annotation.target.FIELD=Campo
# suprimir la inspección "UnusedProperty"
annotation.target.LOCAL_VARIABLE=Variables locales
# suprimir la inspección "UnusedProperty"
annotation.target.METHOD=Método
# suprimir la inspección "UnusedProperty"
annotation.target.MODULE=Módulo
# suprimir la inspección "UnusedProperty"
annotation.target.PACKAGE=Paquete
# suprimir la inspección "UnusedProperty"
annotation.target.PARAMETER=Parámetro
# suprimir la inspección "UnusedProperty"
annotation.target.RECORD_COMPONENT=Componente de registro
# suprimir la inspección "UnusedProperty"
annotation.target.TYPE=Tipo
# suprimir la inspección "UnusedProperty"
annotation.target.TYPE_PARAMETER=Tipo de parámetro
# suprimir la inspección "UnusedProperty"
annotation.target.TYPE_USE=Tipo de uso

change.type.arguments=Cambiar tipo de argumentos
change.type.arguments.to.0=Cambiar tipo de argumento a <{0}>
convert.0.to.float=Convertir ''{0}'' a float

dataflow.message.array.index.out.of.bounds=Índice de matriz fuera de límites.
dataflow.message.arraystore=Almacenar elementos de tipo <code> {0}</code> en una matriz de elementos <code> {1}</code> arroja <code>java.lang.ArrayStoreException</code>
dataflow.message.assigning.null.notannotated=Asignar valores <code> nulos</code> a campos no anotados
dataflow.message.assigning.null=<code>null</code> se asigna a una variable anotada con @NotNull
dataflow.message.assigning.nullable.notannotated=La expresión <code>\#ref</code> puede ser\#loc nula pero se asignará a un campo no anotado
dataflow.message.assigning.nullable=La expresión <code>\#ref</code> se puede evaluar como <code>null</code> pero se asigna a una variable anotada con @NotNull.
dataflow.message.cce.always=la conversión de <code>{0}</code> a <code>\#ref</code> da\#loc cualquier <código>ClassCastException</code> no nulo que se genere.
dataflow.message.cce=La conversión de <code>{0}</code> a <code>\#ref</code> \#loc puede producir <code>java.lang.ClassCastException</code>
dataflow.message.constant.condition.when.reached=condition <code>\#ref</code> es siempre <code>{0, choice, 0\#false |1\#true cuando se alcanza\#loc}</código>.
dataflow.message.constant.condition=La condición <code>\#ref</code> es\#loc siempre <code>{0, choice, 0\#false |1\#true}</code>.
dataflow.message.constant.method.reference=El resultado de la referencia del método es siempre ''{0}''.
dataflow.message.constant.no.ref=La condición es siempre {0, choice, 0\#false |1\#true}.
dataflow.message.contract.fail.index=La llamada ''\#ref '' siempre falla cuando el índice está fuera de rango.
dataflow.message.contract.fail=The call to ''\#ref'' always fails,according to its method contracts
dataflow.message.immutable.modified=Los objetos inmutables se modifican.
dataflow.message.immutable.passed=Se pasan objetos inmutables donde se espera mutable.
dataflow.message.npe.array.access.sure=El acceso a la matriz <code>\#ref</code> generará\#loc <code>NullPointerException</code>.
dataflow.message.npe.array.access=Array access <code>\#ref</code> \#loc may produce <code>java.lang.NullPointerException</code>
dataflow.message.npe.field.access.sure=Dereference of <code>\#ref</code> \#loc will produce <code>java.lang.NullPointerException</code>
dataflow.message.npe.field.access=Dereference of <code>\#ref</code> \#loc may produce <code>java.lang.NullPointerException</code>
dataflow.message.npe.inner.class.construction.sure=La estructura de clases interna generará <code> NullPointerException</code>.
dataflow.message.npe.inner.class.construction=La construcción de la clase interna puede producir <code>java.lang.NullPointerException</code>
dataflow.message.npe.method.invocation.sure=La invocación del método <code>\#ref</code> generará\#loc <code>NullPointerException</code>.
dataflow.message.npe.method.invocation=La invocación del método <code>\#ref</code> generará\#loc <code>NullPointerException</code>
dataflow.message.npe.methodref.invocation=Method reference invocation <code>\#ref</code> \#loc may produce <code>java.lang.NullPointerException</code>
dataflow.message.only.switch.label=La etiqueta del conmutador <code>\#ref</code>\#loc se alcanza de forma única en todo el conmutador.
dataflow.message.passing.null.argument.nonannotated=pasando argumentos <code> nulos</code> a campos no anotados
dataflow.message.passing.null.argument=<code>null</code> Pasa argumentos a parámetros anotados con @NotNull
dataflow.message.passing.nullable.argument.methodref.nonannotated=El argumento de referencia del método es nulo pero se puede pasar como un parámetro no anotado
dataflow.message.passing.nullable.argument.methodref=El argumento de referencia del método puede ser nulo.
dataflow.message.passing.nullable.argument.nonannotated=El argumento <code>\#ref</code> puede ser\#loc nulo pero puede pasarse a parámetros no anotados
dataflow.message.passing.nullable.argument=El argumento <code>\#ref</code> puede ser\#loc nulo.
dataflow.message.pointless.assignment.expression=La condición <code>\#ref</code> en el lado izquierdo de la expresión de asignación\#loc es siempre <code> {0}</code>. Puedes simplificar esto.
dataflow.message.pointless.same.arguments=Los argumentos de ''\# ref '' son los mismos. Por lo tanto, no tiene sentido llamar a este método con los mismos argumentos.
dataflow.message.redundant.assignment=La variable ya ha sido asignada a este valor.
dataflow.message.redundant.instanceof=La condición <code>\#ref</code> es un duplicado de\#loc y se puede reemplazar con comprobaciones nulas.
dataflow.message.redundant.update=No se ha realizado ninguna acción con la actualización de la variable.
dataflow.message.return.null.from.notnull=<code>null</code> se devuelve desde un método declarado como @ {0}.
dataflow.message.return.null.from.notnullable=<code>null</code> se devuelve desde un método no declarado como @ {0}.
dataflow.message.return.nullable.from.notnull.function=La función puede devolver un valor nulo, pero no está permitido aquí
dataflow.message.return.nullable.from.notnull=La expresión <code>\#ref</code> se puede evaluar como <code> null</code> pero se declaró como @ {0} devuelta por el método.
dataflow.message.return.nullable.from.notnullable=La expresión <code>\#ref</code> se puede evaluar como <code> null</code> pero no se declara como @ {0} devuelta desde un no método.
dataflow.message.storing.array.null=<code>null</code> se almacena en una matriz de elementos @NotNull.
dataflow.message.storing.array.nullable=La expresión <code>\#ref</code> se puede evaluar como nula pero se almacena en una matriz de elementos @NotNull.
dataflow.message.unboxing.method.reference=El uso de <code>\#ref</code> \#loc necesitaría unboxing que puede producir <code> java.lang.NullPointerException</code>
dataflow.message.unboxing=Unboxing de <code>\#ref</code> \#loc puede producir <code> java.lang.NullPointerException</code>
dataflow.message.unreachable.switch.label=no se alcanza la etiqueta de cambio <code>\#ref</code>.
dataflow.method.fails.with.null.argument=El método genera una excepción cuando el parámetro es nulo.
dataflow.not.precise={0} es complejo y puede dar como resultado resultados de flujo de datos inexactos.
dataflow.too.complex=El método <code>\#ref</code> es demasiado complejo para analizarlo mediante el algoritmo de flujo de datos

delete.repeated.0=Eliminar repetidos ''{0}''
delete.repeated.interface=Eliminar interfaz repetida
exception.removal.will.break.source.code.proceed.anyway=Eliminar la excepción romperá el código fuente. Sin embargo, ¿te gustaría continuar?

feature.generics=Genéricos
feature.annotations=Anotaciones
feature.static.imports=Declaración de importación estática
feature.for.each=Para cada bucle
feature.varargs=Métodos de aridad variable
feature.hex.fp.literals=literales de punto flotante hexadecimal
feature.diamond.types=Tipos de diamantes
feature.multi.catch=Varias capturas
feature.try.with.resources=Try-with-resources
feature.binary.literals=literal binario
feature.underscores.in.literals=Guiones bajos en literales
feature.extension.methods=Métodos de extensión
feature.method.references=Referencias de métodos
feature.lambda.expressions=Expresiones Lambda
feature.type.annotations=Tipo de anotaciones
feature.type.receivers=Parámetros del receptor
feature.intersections.in.casts=Tipos de intersección en moldes
feature.static.interface.calls=Llamadas a métodos de interfaz estática
feature.try.with.resources.refs=Referencias de recursos
feature.modules=Módulos
feature.lvti=Inferir tipos de variables locales
feature.text.blocks=Literales de bloque de texto
feature.enhanced.switch=Bloque ''switch'' mejorado
feature.switch.expressions=Expresión ''switch''
feature.records=Registros
feature.patterns.instanceof=Patrón ''instanceof''
feature.text.block.escape.sequences='\\s' \ubc0f '\' \uc774\uc2a4\ucf00\uc774\ud504 \uc2dc\ud000\uc2a4

find.searching.for.references.to.class.progress=Buscando referencias para la clase {0}...
find.usages.panel.title.derived.classes=Clases derivadas
find.usages.panel.title.derived.interfaces=Interfaces derivadas
find.usages.panel.title.implementing.classes=Implementación de clase
find.usages.panel.title.implementing.methods=implementación del método
find.usages.panel.title.overloaded.methods.usages=Dónde usar métodos sobrecargados
find.usages.panel.title.overriding.methods=Métodos de reemplazo
message.class.inaccessible.from.module=No se pudo acceder a la clase ''{0}'' desde el módulo ''{1}''
message.class.inaccessible=\ ''{0}'' no es accesible

inspection.i18n.quickfix.annotate=Anotar...
inspection.i18n.quickfix.annotate.as=Anotado con @{0}
inspection.i18n.quickfix.annotate.element={0} Agregar anotación a ''{1}''...
inspection.i18n.quickfix.annotate.element.as={0} anotado ''{1}'' como @ {2}
inspection.reference.default.package=<predeterminado>
error.message.invalid.java.type=Tipo de Java no válido
move.0.to.the.beginning=Mover ''{0}'' al principio
move.to.front=Avanzar
processing.method.usages=Usos del método de procesamiento...
qualify.0={0} normalizar
qualify.with.0.this=Normalizar con {0} .this
remove.annotation=Eliminar anotación
remove.left.side.of.assignment=Eliminar asignación izquierda
replace.get.class.with.class.literal=reemplaza getClass () con .class literal
service.provides=Proporcionar servicio <a href\="\#javaClass/{0}"> {0}</a><br><div style \='' margin-top\: 5px ''><tamaño de fuente \='' 2 ''> Haga clic para explorar</font></div>
service.uses=Servicio utilizado <a href\="\#javaClass/{0}"> {0}</a><br><div style \='' margin-top\: 5px ''><tamaño de fuente \='' 2 ''> Haga clic para explorar</font></div>
suppress.for.parameter=Suprimir parámetro
suppress.for.statement.with.comment=Suprimir por declaración con comentario
intention.add.annotation.family=Agregar anotaciones
intention.text.remove.annotation=Eliminar

scope.package=Paquete {0}

0.field.is.always.initialized.not.null=El campo @ {0} siempre se inicializa a un estado no nulo.
access.can.be.0=El acceso puede ser {0}
access.to.field.code.ref.code.outside.of.declared.guards.loc=Acceso al campo <code>\#ref</code> fuera de la guardia declarada\#loc
call.to.method.code.ref.code.outside.of.declared.guards.loc=Llamar al método <code>\#ref ()</code> fuera de la guardia declarada\#loc
annotate.as.safevarargs=Anotar con @SafeVarargs
annotate.overridden.methods.parameters.family.name=Agregar al parámetro de método anulado
annotate.overridden.methods.parameters=Anotar los parámetros del método anulado con ''@{0} ''
anonymous.ref.loc.can.be.replaced.with.0=Anonymous\#ref\#loc se puede reemplazar con {0}.
anonymous.ref.loc.can.be.replaced.with.lambda=Puede reemplazar una\#ref\#loc lambda anónima.
assigning.a.collection.of.nullable.elements=Asignar una colección de elementos que aceptan valores NULL a una colección de elementos que no aceptan valores NULL
comparision.between.object.and.primitive=Las comparaciones entre objetos y primitivos son ilegales y solo se permiten en Java 7.
custom.exception.class.should.have.a.constructor=Una clase de excepción personalizada debe tener un constructor con un único parámetro de mensaje de tipo String.
delimiters.argument.contains.duplicated.characters=El argumento delimiters contiene caracteres duplicados.
deprecated.class.usage.group.xml=XML
deprecated.member.0.is.still.used=El miembro obsoleto ''{0}'' todavía está en uso.
detach.library.quickfix.name=Desconectar biblioteca
detach.library.roots.quickfix.name=Desconectar las raíces de la biblioteca no utilizadas
don.t.report.unused.jars.inside.used.library=No informe los frascos no utilizados dentro de las bibliotecas usadas
explicit.type.argument.ref.loc.can.be.replaced.with=Puede reemplazar el argumento de tipo explícito\#ref\#loc con <>.
exports.to.itself.delete.module.ref.fix=Eliminar referencia al módulo ''{0}''.
exports.to.itself.delete.statement.fix=Eliminar directiva.
html.classes.exposed.with.code.module.info.code.html=Clases expuestas como <html><code> module-info</code></html>
html.ignore.overrides.of.deprecated.abstract.methods=<html>Ignorar anulaciones de métodos abstractos obsoletos en ancestros obsoletos</html>
ignore.casts.in.suspicious.collections.method.calls=Ignorar las conversiones en llamadas a métodos de recolección sospechosos
ignore.exceptions.thrown.by.entry.points.methods=Ignorar excepciones lanzadas por métodos de punto de entrada
ignore.in.the.same.outermost.class=Ignorar en la misma clase más externa
ignore.inside.deprecated.members=Ignorar dentro de miembros obsoletos
ignore.inside.non.static.imports=Ignorar las declaraciones de importación no estáticas
ignore.members.of.deprecated.classes=Ignorar miembros de clases obsoletas
ignore.operation.which.results.in.negative.value=Ignorar la operación '' << '' que da como resultado valores negativos
inspection.annotate.method.quickfix.family.name=Método anotado
inspection.annotate.overridden.method.and.self.quickfix.family.name=Método reemplazado y agregar una anotación a sí mismo
inspection.annotate.overridden.method.quickfix.family.name=Agregar una anotación al método reemplazado
inspection.c.style.array.declarations.option=Ignorar declaraciones de estilo C en variables
inspection.can.be.final.accept.quickfix=Haga que la inspección pueda ser final.
inspection.can.be.final.option1=Método de informe
inspection.can.be.final.option2=Campo de informe
inspection.can.be.final.option=Informe de clase
inspection.can.be.local.parameter.problem.descriptor=Los parámetros <code>\#ref</code> pueden tener modificadores <code> finales</code>.
inspection.can.be.local.variable.problem.descriptor=La variable <code>\#ref</code> puede tener modificadores <code> final</code>.
inspection.can.be.replaced.with.message=''{0}''
inspection.class.getclass.display.name=llamada Class.getClass ()
inspection.class.getclass.fix.remove.name=llamada '' getClass()'' eliminada
inspection.class.getclass.fix.replace.name=Reemplace '' Class.class ''.
inspection.class.getclass.message='' getClass()'' se llama en una instancia de clase.
inspection.class.has.no.to.string.method.description=La clase ''{0}'' no anula el método '' toString() ''.
inspection.class.has.no.to.string.method.exclude.classes.reg.exp.option=Excluir clase (regex)\:
inspection.class.has.no.to.string.method.ignore.abstract.classes.option=Ignorar clases abstractas
inspection.class.has.no.to.string.method.ignore.deprecated.classes.option=Ignorar clases obsoletas
inspection.class.has.no.to.string.method.ignore.enum.classes.option=Ignorar clases de enumeración
inspection.class.has.no.to.string.method.ignore.exception.classes.option=Ignorar clases de excepción
inspection.class.has.no.to.string.method.ignore.inner.classes.option=Ignorar clases internas
inspection.class.has.no.to.string.method.ignore.test.classes.option=Ignorar clases de prueba
inspection.common.if.parts.disable.highlight.tail.call=No resalte partes comunes cuando se invoca la sintaxis de cola.
inspection.common.if.parts.family.else.if.description='' else if '' puede fusionarse.
inspection.common.if.parts.family.else.if=combinación de sentencias '' else if ''
inspection.common.if.parts.family=Extrae partes comunes de la declaración '' if ''
inspection.common.if.parts.settings.highlight.when.tail.call=Resaltar cuando se llama a la última sintaxis común.
inspection.compiler.javac.quirks.anno.array.comma.fix=Elimine las comas finales.
inspection.compiler.javac.quirks.anno.array.comma.problem=La coma final en el inicializador de la matriz de anotaciones puede causar errores de compilación en algunas versiones de Javac (por ejemplo, JDK 5 y JDK 6).
inspection.compiler.javac.quirks.name=Problema de Javac
inspection.compiler.javac.quirks.qualifier.type.args.fix=Eliminar parámetros genéricos.
inspection.compiler.javac.quirks.qualifier.type.args.problem=Los genéricos en las referencias de los calificadores pueden causar errores de compilación en algunas versiones de Javac (por ejemplo, JDK 5 y JDK 6)
inspection.constant.on.wrong.side.of.a.comparison.side.option=Donde debe estar la constante en la comparación\:
inspection.contract.display.name=problema del contrato
inspection.data.flow.redundant.instanceof.quickfix=Reemplazo de inspección nula.
inspection.data.flow.simplify.boolean.expression.quickfix=Simplificar expresiones booleanas
inspection.data.flow.simplify.to.assignment.quickfix.name=Simplificar con asignación genérica
inspection.data.flow.turn.off.constant.references.quickfix=No informa los valores garantizados como constantes.
inspection.data.flow.turn.off.nullable.returning.notnull.quickfix=No informe de métodos que aceptan valores NULL que siempre devuelven un valor no nulo.
inspection.data.flow.turn.off.true.asserts.quickfix=No informe siempre afirmaciones verdaderas.
inspection.duplicate.throws.display.name=Lanza duplicado
inspection.duplicate.throws.ignore.subclassing.option=Ignorar excepciones que subclasifican otras clases
inspection.duplicate.throws.more.general.problem=Ya hay una excepción más general, ''{0}'', en la lista de lanzamientos.
inspection.duplicate.throws.problem=Lanza como duplicados.
inspection.equals.hashcode.only.one.defined.problem.descriptor=La clase {0} está definida, pero la clase no define {1}.
inspection.export.results.can.be.final.description=La declaración puede tener el controlador final
inspection.field.not.used.in.to.string.description2=El campo ''{0}'' no se usa en el método '' toString() ''.
inspection.field.not.used.in.to.string.description=El método ''{0}'' no se usa en el método '' toString() ''.
inspection.implicit.subclass.display.forClass=La clase ''{0}'' puede ser subclasificada implícitamente y no debe ser final.
inspection.implicit.subclass.display.name=No se puede anular la declaración final en tiempo de ejecución.
inspection.implicit.subclass.extendable=Haga que la ''{0}'' sea reemplazable.
inspection.implicit.subclass.make.class.extendable=Class ''{0}'' {1, choice, 0\# |1\# y método {2} con | 1 <y el método requerido {1 Make}} extensible .
inspection.infinite.loop.option=Ignorar si se coloca en Thread.run
inspection.java.module.naming.terminal.digits=El componente del nombre del módulo ''{0}'' debe evitar dígitos terminales.
inspection.java.module.naming=Convención de nomenclatura de módulos Java
inspection.local.can.be.final.display.name=La variable o parámetro local puede ser final
inspection.local.can.be.final.option1=Parámetros del método de informe
inspection.local.can.be.final.option2=informe de parámetro de captura
inspection.local.can.be.final.option3=Informe para cada parámetro
inspection.local.can.be.final.option4=Informe de la variable final implícita
inspection.local.can.be.final.option=Informar variable local
inspection.module.exports.package.to.itself=Exporta un paquete a sí mismo desde un módulo o lo abre en sí mismo.
inspection.nullable.problems.NotNull.parameter.overrides.Nullable=El parámetro anotado con @{0} NO DEBE anular el parámetro @ {1}
inspection.nullable.problems.NotNull.parameter.overrides.not.annotated=Los parámetros anotados con @{0} NO DEBEN anular los parámetros no anotados
inspection.nullable.problems.NotNull.parameter.receives.null.literal=El parámetro anotado con @{0} NO DEBE aceptar '' nulo '' como argumento
inspection.nullable.problems.Nullable.NotNull.conflict=No se pueden anotar tanto @ {0} como @ {1}.
inspection.nullable.problems.Nullable.method.overrides.NotNull=El método anotado con @{0} NO DEBE anular el método @ {1}
inspection.nullable.problems.annotated.field.constructor.parameter.not.annotated=El parámetro de constructor para el campo @ {0} se puede anotar como @ {0}.
inspection.nullable.problems.annotated.field.getter.conflict=Getter para el campo @ {0} anotado con @ {1}
inspection.nullable.problems.annotated.field.getter.not.annotated=El captador para el campo @ {0} se puede anotar como @ {0}.
inspection.nullable.problems.annotated.field.setter.parameter.conflict=Parámetro de establecimiento para el campo @ {0} anotado con @ {1}
inspection.nullable.problems.annotated.field.setter.parameter.not.annotated=El parámetro Setter para el campo @ {0} se puede anotar con @ {0}.
inspection.nullable.problems.method.overrides.NotNull=Los métodos no anotados anulan los métodos anotados con @ {0}
inspection.nullable.problems.parameter.overrides.NotNull=Los parámetros no anotados anulan los parámetros @ {0}
inspection.nullable.problems.primitive.type.annotation=No se pueden anotar miembros de tipo primitivo
inspection.objects.equals.can.be.simplified.display.name=Puede reemplazar objects.equals () con equals ().
inspection.redundant.cast.problem.descriptor=Conversión duplicada de {0} a {1}.
inspection.redundant.cast.remove.quickfix=Eliminar moldes duplicados
inspection.redundant.field.initialization.option=Advertir solo cuando se inicializa en null
inspection.redundant.requires.statement.description=La directiva duplicada '' requiere {0} ''
inspection.redundant.requires.statement.fix.family=Eliminar la directiva '' require '' duplicada
inspection.redundant.requires.statement.fix.name=La directiva de eliminación '' requiere {0} ''
inspection.redundant.throws.problem.descriptor1=La excepción declarada {0} nunca se lanza en este método, ni en sus derivables.
inspection.redundant.throws.problem.descriptor2=La excepción declarada {0} no se lanza en absoluto.
inspection.redundant.throws.problem.descriptor=La implementación del método nunca lanza la excepción declarada {0}.
inspection.redundant.throws.remove.quickfix=Eliminar declaraciones de lanzamientos innecesarios
inspection.redundant.type.display.name=Argumentos de tipo duplicado
inspection.redundant.type.no.generics.method.reference.problem.descriptor=Los argumentos de tipo son redundantes para referencias de métodos no genéricos.
inspection.redundant.type.no.generics.problem.descriptor=Los argumentos de tipo son redundantes para llamadas a métodos no genéricos.
inspection.redundant.type.problem.descriptor=Puede inferir argumentos de tipo explícito.
inspection.redundant.type.remove.quickfix=Eliminar argumento de tipo
inspection.reference.anonymous.name=Anónimo ({0})
inspection.reference.implicit.constructor.name=Constructor implícito para la {0}
inspection.reference.jsp.holder.method.anonymous.name=<% contenido de la página%>
inspection.requires.auto.module.message=directiva '' requiere '' para módulos automáticos
inspection.requires.auto.module.option=Resaltar dependencias transitivas solamente
inspection.requires.auto.module.transitive=directiva '' requiere transitiva '' para módulos automáticos
inspection.requires.auto.module=Dependencias del módulo automatizado
inspection.same.return.value.display.name=El método devuelve el mismo valor
inspection.same.return.value.problem.descriptor1=El método y todos sus derivados siempre devuelven {0}.
inspection.same.return.value.problem.descriptor2=Todas las implementaciones de este método siempre devuelven {0}.
inspection.same.return.value.problem.descriptor=El método siempre devuelve {0}.
inspection.surround.requirenonnull.quickfix=Reemplazar con '' Objects.requireNonNull ({0}) ''.
inspection.suspicious.array.method.call.display.name=Llamada sospechosa al método de matriz
inspection.suspicious.array.method.call.problem.arrays=Los tipos de matriz son incompatibles. El arreglo siempre es diferente.
inspection.suspicious.array.method.call.problem.element=El tipo de elemento no es compatible con el tipo de matriz.
inspection.suspicious.collections.method.calls.display.name=Llamada sospechosa al método de recolección
inspection.suspicious.collections.method.calls.problem.descriptor1=Llamada sospechosa ''{0}''.
inspection.suspicious.collections.method.calls.problem.descriptor=''{0}'' no puede contener {2} del tipo ''{1}''.
inspection.suspicious.getter.setter.field.option=Advertir solo si el campo tiene un nombre de captador/definidor coincidente
inspection.suspicious.integer.div.assignment.option=Informe de rotura sospechoso pero preciso
inspection.test.only.problems.display.name=Llamar a clases o métodos solo de prueba en el código de producción
inspection.test.only.problems.test.only.class.reference=Las clases de solo prueba se referencian en el código de producción.
inspection.test.only.problems.test.only.field.reference=Los campos de solo prueba están referenciados en el código de producción.
inspection.test.only.problems.test.only.method.call=Los métodos de solo prueba se llaman desde el código de producción.
inspection.unary.plus.unary.binary.option=Informe solo en un contexto unario o binario confuso
inspection.unnecessary.super.qualifier.option=Ignore el calificador '' super '' para mayor claridad
inspection.use.compare.method.fix.family.name=Reemplazar con método de comparación simple
inspection.visibility.accept.quickfix=Acepte el nivel de acceso sugerido.
inspection.visibility.compose.suggestion=podría ser {0}.
inspection.visibility.option.constants=Sugerir visibilidad débil para constantes
inspection.visibility.option.package.private.members=Proponer el nivel de visibilidad del paquete privado para los miembros de la clase
inspection.visibility.package.private.top.level.classes=Proponer nivel de visibilidad de paquete privado para clases de nivel superior
inspection.visibility.private.inner.members=<html>Proponer privado para miembros de la clase interna solo cuando se hace referencia a ella desde la clase externa</html>
instance.member.guarded.by.static.0.loc=miembro de instancia estático\#loc protegido por "{0}"
instance.member.guarded.by.static.ref.loc=miembro de instancia protegido por static\#ref\#loc
junit.rule.classrule.option=@ClassRule Informar un problema
junit.rule.rule.option=@Rule Informar un problema
make.0.default.annotation=Hacer que "{0}" sea la anotación predeterminada
make.default.the.last.case.family.name=Haga que '' default '' sea el último caso
make.final.and.annotate.as.safevarargs=final y anotar con @SafeVarargs
method.reference.mapped.to.comparator=Una referencia de método asignada a una interfaz de comparador no cumple con el contrato del comparador.
module.0.with.language.level.1.depends.on.module.2.with.language.level.3=El módulo {0} con nivel de idioma {1} tiene nivel de idioma {3} Depende del módulo { 2}.
non.final.field.code.ref.code.in.immutable.class.loc=@Immutable Campo no final de la clase <code>\#ref</code>\#loc
non.final.guarded.by.field.0.loc=Campo @GuardedBy no final "{0}"\#loc
non.final.guarded.by.field.ref.loc=Campo @GuardedBy no final\#ref\#loc
non.null.type.argument.is.expected=Se requiere un argumento de tipo no nulo.
not.annotated.method.is.used.as.an.override.for.a.method.annotated.with.0=El método sin anotar se usa como anulación del método anotado con {0}
nullable.stuff.problems.overridden.method.parameters.are.not.annotated=No se agregaron anotaciones al parámetro del método anulado
nullable.stuff.problems.overridden.methods.are.not.annotated=Método anulado no anotado
parameter.can.be.null=El parámetro puede ser nulo.
parameter.is.always.not.null=El parámetro siempre es no nulo.
possible.heap.pollution.from.parameterized.vararg.type.loc=Contaminación potencial del montón de tipos de vararg parametrizados\#loc
redundant.block.marker=Marcador de bloque duplicado
remove.block.marker.comments=Eliminar comentarios de marcadores de bloque
remove.dependency=Eliminar dependencia
remove.switch.branch.0=Eliminar la rama del interruptor ''{0}''
remove.switch.label.0=Eliminar etiqueta del interruptor ''{0}''
remove.switch.label=cambiar eliminar etiqueta
replace.0.with=''''{0}'''' con ''''\=''''
replace.anonymous.class.with.lambda.alternative=Reemplazar clase anónima con reemplazar lambda
replace.operator.assignment.with.assignment=Reemplazar asignación de operador con asignación
replace.stringtokenizer.delimiters.parameter.with.unique.symbols=Reemplazar el parámetro delimitador StringTokenizer con símbolos únicos
replace.var.with.explicit.type=Reemplazar '' var '' con un tipo explícito
replace.with.0=Reemplazar con {0}
replace.with.comparator=Reemplazar con comparador
replace.with.constant.value=Reemplazar con valor constante
replace.with.expression.lambda=Reemplazar con expresión lambda
replace.with.lambda=Reemplazar con lambda
report.suspicious.but.possibly.correct.method.calls=& Informar llamadas a métodos sospechosos pero posiblemente correctos
report.when.interface.is.not.annotated.with.functional.interface=Informar si la interfaz no está anotada con @FunctionalInterface
searching.for.overriding.methods=Buscar métodos de reemplazo
statement.lambda.can.be.replaced.with.expression.lambda=Una declaración lambda se puede reemplazar con una expresión lambda
static.inheritrance.fix.replace.progress=Reemplazo del uso de {0}
static.member.guarded.by.instance.0.loc=miembro estático\#loc protegido por la instancia "{0}"
static.member.guarded.by.instance.ref.loc=Miembro estático protegido por instancia\#ref\#loc
suppress.all.for.class=Suprimir todas las comprobaciones de clase
suppress.inspection.class=Suprimir clase
suppress.inspection.field=Suprimir campo
suppress.inspection.member=Suprimir miembro
suppress.inspection.method=Suprimir método
suppress.inspection.module=Suprimir la declaración del módulo
suspected.module.dependency.problem.descriptor=El módulo ''{0}'' no depende del módulo ''{1}''. Sin embargo, no se verificó ''{1}'' para una dependencia exportada requerida en el alcance ''{2}''.
unknown.guardedby.reference.0.loc=Desconocido @GuardedBy referencia "{0}" \#loc
unknown.guardedby.reference.ref.loc=Desconocido @GuardedBy reference\#ref \#loc
unnecessary.module.dependency.display.name=Dependencias de módulo innecesarias
unnecessary.module.dependency.problem.descriptor=El módulo fuente ''{0}'' no depende del módulo fuente ''{1}''.
unused.import.display.name=Importación no utilizada
unused.import.statement=Declaración import obsoleta
unused.library.display.name=biblioteca obsoleta
unused.library.problem.descriptor=Biblioteca no utilizada ''{0}''
unused.library.roots.problem.descriptor=Raíz no utilizada {0} en la biblioteca ''{1}''
var.can.be.replaced.with.explicit.type=Puede reemplazar ''var'' con un tipo explícito.
vararg.method.call.with.50.poly.arguments=Llamar a un método vararg con más de 50 argumentos puede ralentizar la compilación y el análisis.
visible.for.testing.makes.little.sense.on.test.only.code=@VisibleForTesting tiene poco significado en el código @TestOnly.
