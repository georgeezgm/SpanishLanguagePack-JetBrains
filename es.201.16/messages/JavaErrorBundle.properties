# @interface (anotación) mensajes relacionados
annotation.not.allowed.here=Aquí no se permiten anotaciones
annotation.unknown.method=No se puede resolver el método ''{0}''
annotation.missing.method=No se puede encontrar el método ''{0}''
annotation.illegal.array.initializer=Inicializador ilegal para ''{0}''
annotation.duplicate.annotation=Anotación duplicada
annotation.duplicate.attribute=Atributo duplicado ''{0}''
annotation.missing.attribute={0} falta aunque es obligatorio
annotation.not.applicable=''@{0}'' no se aplica a {1}
annotation.non.constant.attribute.value=El valor del atributo debe ser constante
annotation.non.class.literal.attribute.value=El valor del atributo debe ser un literal de clase
annotation.non.enum.constant.attribute.value=El valor del atributo debe ser una constante de enumeración
annotation.invalid.annotation.member.type=Tipo no válido ''{0}'' para miembro de anotación
annotation.cyclic.element.type=Tipo de elemento de anotación cíclica
annotation.annotation.type.expected=Se esperaba Tipo de anotación
annotation.members.may.not.have.throws.list=@interface miembros pueden no tener lista de lanzamientos
annotation.may.not.have.extends.list=@interface puede no tener una lista de extensiones
annotation.not.allowed.ref=Anotación no aplicable a este tipo de referencia
annotation.not.allowed.static=No se puede anotar el tipo de miembro estático que califica
annotation.not.allowed.void=el tipo 'void' no puede ser anotado
annotation.not.allowed.class=El tipo de literal de clase no se puede anotar
annotation.container.no.value=Anotación de contenedor no válida ''{0}'': ningún método de '' valor '' declarado
annotation.container.bad.type=Anotación de contenedor no válida ''{0}'': el método '' valor '' debe tener el tipo ''{1}''
annotation.container.low.retention=La anotación de contenedor ''{0}'' tiene una retención más corta (''{1}'') que la anotación contenida
annotation.container.wide.target=El objetivo de la anotación del contenedor ''{0}'' no es un subconjunto del objetivo de esta anotación
annotation.container.abstract=La anotación de contenedor ''{0}'' no tiene un valor predeterminado para ''{1}''
annotation.duplicate.explained=Anotación duplicada. {0}
annotation.non.repeatable=La declaración de ''{0}'' no tiene una anotación java.lang.annotation.Repetible válida
annotation.container.wrong.place=La anotación de contenedor ''{0}'' no debe estar presente al mismo tiempo que el elemento que contiene
annotation.container.not.applicable=La anotación de contenedor ''@{0}'' no se aplica a {1}

receiver.wrong.context=No se permiten receptores fuera de la lista de parámetros del método
receiver.static.context=El receptor no se puede utilizar en un contexto estático
receiver.wrong.position=El receptor debe ser el primer parámetro
receiver.type.mismatch=El tipo de receptor no coincide con el tipo de clase adjunto
receiver.name.mismatch=El nombre del receptor no coincide con el tipo de clase adjunto

# mensajes relacionados con genéricos
generics.holder.type=Tipo
generics.holder.method=Método

generics.inferred.type.for.type.parameter.is.not.within.its.bound.extend=El tipo inferido ''{2}'' para el parámetro de tipo ''{0}'' no está dentro de su límite; debería extender ''{1}''
generics.inferred.type.for.type.parameter.is.not.within.its.bound.implement=El tipo inferido ''{2}'' para el parámetro de tipo ''{0}'' no está dentro de su límite; debería implementar ''{1}''
generics.type.parameter.is.not.within.its.bound.extend=El parámetro de tipo ''{0}'' no está dentro de su límite; debería extender ''{1}''
generics.type.parameter.is.not.within.its.bound.implement=El parámetro de tipo ''{0}'' no está dentro de su límite; debería implementar ''{1}''

# {0} - tipo (clase) o método
generics.type.or.method.does.not.have.type.parameters={0} ''{1}'' no tiene parámetros de tipo
generics.wrong.number.of.type.arguments=Número incorrecto de argumentos de tipo: {0}; requerido: {1}
generics.cannot.be.inherited.with.different.type.arguments=''{0}'' no se puede heredar con argumentos de tipo diferente: ''{1}'' y ''{2}''
generics.select.static.class.from.parameterized.type=No se puede seleccionar la clase estática ''{0}'' del tipo parametrizado
generics.methods.have.same.erasure={0}; ambos métodos tienen el mismo borrado
generics.methods.have.same.erasure.override={0}; Ambos métodos tienen el mismo borrado, pero ninguno anula al otro.
generics.methods.have.same.erasure.hide={0}; Ambos métodos tienen el mismo borrado, pero ninguno oculta el otro.
generics.type.parameter.cannot.be.instantiated=El parámetro de tipo ''{0}'' no se puede instanciar directamente
wildcard.type.cannot.be.instantiated=El tipo de comodín ''{0}'' no se puede instanciar directamente
generics.wildcard.not.expected=No se esperan comodines
generics.wildcards.may.be.used.only.as.reference.parameters=Los comodines solo pueden usarse como parámetros de referencia
generics.type.argument.cannot.be.of.primitive.type=El argumento de tipo no puede ser de tipo primitivo
generics.unchecked.assignment=Asignación sin marcar: ''{0}'' a ''{1}''
generics.unchecked.cast=Reparto sin marcar: ''{0}'' a ''{1}''
generics.unchecked.call.to.member.of.raw.type=Llamada sin marcar a ''{0}'' como miembro del tipo sin formato ''{1}''
generics.unchecked.call=Invocación del método no verificado ''{0}''
generics.diamond.not.applicable=El operador de diamante no es aplicable para tipos no parametrizados
generics.reference.parameters.not.allowed=Los parámetros de referencia no están permitidos aquí
foreach.not.applicable=foreach no aplicable al tipo ''{0}''
illegal.to.access.static.member.from.enum.constructor.or.instance.initializer=Es ilegal acceder al miembro estático ''{0}'' desde el constructor de enumeración o el inicializador de instancia
enum.types.cannot.be.instantiated=No se pueden crear instancias de tipos de enumeración
generic.array.creation=Creación de matriz genérica
array.creation.with.type.arguments=No se puede crear una matriz con argumentos de tipo
generics.enum.may.not.have.type.parameters=Enum puede no tener parámetros de tipo
generics.annotation.members.may.not.have.type.parameters=@interface miembros pueden no tener parámetros de tipo
annotation.may.not.have.type.parameters=@interface puede no tener parámetros de tipo
generics.duplicate.type.parameter=Parámetro de tipo duplicado: ''{0}''
generics.cannot.catch.type.parameters=No se pueden capturar los parámetros de tipo
generics.cannot.instanceof.type.parameters=Clase o matriz esperada
illegal.generic.type.for.instanceof=Tipo genérico ilegal, por ejemplo
unsafe.cast.in.instanceof=''{0}'' no se puede convertir de forma segura a ''{1}''
cannot.select.dot.class.from.type.variable=No se puede seleccionar de una variable de tipo
method.does.not.override.super=El método no anula el método de su superclase
call.to.super.is.not.allowed.in.enum.constructor=La llamada a super no está permitida en el constructor de enumeración
bad.qualifier.in.super.method.reference=Calificador de tipo incorrecto en la súper llamada predeterminada: {0}
vararg.not.last.parameter=El parámetro Vararg debe ser el último en la lista
modifiers.for.enum.constants=No se permiten modificadores para las constantes de enumeración
generics.type.arguments.on.raw.type=Argumentos de tipo dados en un tipo sin formato
generics.type.arguments.on.raw.method=Escriba los argumentos dados en un método sin procesar
classes.extends.prohibited.super=Las clases no pueden extender directamente ''{0}''
unchecked.overriding.incompatible.return.type=Anulación sin marcar: el tipo de retorno requiere una conversión sin marcar. Encontrado ''{0}'', obligatorio ''{1}''
local.enum=\uc5f4\uac70\ud615\uc740 local\uc774\uc5b4\uc57c \ud569\ub2c8\ub2e4

interface.expected=Interfaz esperada aquí
no.interface.expected=No se espera ninguna interfaz aquí
class.expected=Nombre de clase esperado aquí
implements.after.interface=No se permite ninguna cláusula de implementos para la interfaz
extends.after.enum=No se permite la cláusula de extensión para enum
static.declaration.in.inner.class=Las clases internas no pueden tener declaraciones estáticas
class.must.be.abstract=La clase ''{0}'' debe ser declarada abstracta o implementar el método abstracto ''{1}'' en ''{2}''
class.must.implement.method=La clase ''{0}'' debe implementar el método abstracto ''{1}'' en ''{2}''
abstract.cannot.be.instantiated=''{0}'' es abstracto; no se puede instanciar
duplicate.class.in.other.file=Clase duplicada encontrada en el archivo ''{0}''
duplicate.class=Clase duplicada: ''{0}''
public.class.should.be.named.after.file=La clase ''{0}'' es pública, debe declararse en un archivo llamado '' {0} .java ''
inheritance.from.final.class=No se puede heredar de {1} ''{0}''
package.name.file.path.mismatch=El nombre del paquete ''{0}'' no corresponde a la ruta del archivo ''{1}''
missing.package.statement=Falta la declaración del paquete: ''{0}''
interface.cannot.be.local=La interfaz no está permitida
cyclic.inheritance=Herencia cíclica que involucra ''{0}''
class.already.imported=''{0}'' ya está definido en esta unidad de compilación
class.cannot.extend.multiple.classes=La clase no puede extender varias clases
not.allowed.in.interface=No permitido en la interfaz
qualified.new.of.static.class=Nuevo calificado de clase estática
invalid.qualified.new=Nuevo calificado no válido
class.name.expected=Nombre de clase esperado
no.enclosing.instance.in.scope=Ninguna instancia adjunta del tipo ''{0}'' está en el alcance
is.not.an.enclosing.class=''{0}'' no es una clase adjunta
cannot.be.referenced.from.static.context=''{0}'' no puede ser referenciado desde un contexto estático
no.default.constructor.available=No hay ningún constructor predeterminado disponible en ''{0}''
missing.return.statement=Falta la declaración de devolución
unreachable.statement=Declaración inalcanzable
variable.not.initialized=Es posible que la variable ''{0}'' no se haya inicializado
variable.already.assigned=Es posible que la variable ''{0}'' ya se haya asignado a
variable.assigned.in.loop=La variable ''{0}'' podría asignarse en bucle
assignment.to.final.variable=No se puede asignar un valor a la variable final ''{0}''
variable.must.be.final=Se accede a la variable ''{0}'' desde dentro de la clase interna, debe declararse final
variable.must.be.final.or.effectively.final=Se accede a la variable ''{0}'' desde dentro de la clase interna, debe ser final o efectivamente final
lambda.variable.must.be.final=La variable utilizada en la expresión lambda debe ser final o efectivamente final
resource.variable.must.be.final=La variable utilizada como recurso de prueba con recursos debe ser final o efectivamente final
declaration.or.variable.expected=Declaración, variable final o efectivamente final esperada
initializer.must.be.able.to.complete.normally=El inicializador debe poder completarse normalmente
weaker.privileges={0}; intentar asignar privilegios de acceso más débiles (''{1}''); era ''{2}''
incompatible.return.type=intentando utilizar un tipo de retorno incompatible
final.method.override=''{0}'' no se puede anular ''{1}'' en ''{2}''; el método anulado es final
overridden.method.does.not.throw={0}; El método anulado no arroja ''{1}''
exception.is.never.thrown=La excepción ''{0}'' nunca se lanza en el método
wrong.method.arguments=''{0}'' in ''{1}'' no se puede aplicar a ''{2}''
method.call.expected=Se esperaba una llamada al método
ambiguous.method.call=Llamada al método ambiguo: ambos ''{0}'' y ''{1}'' coinciden
ambiguous.reference=La referencia a ''{0}'' es ambigua, tanto ''{1}'' como ''{2}'' coinciden
cannot.resolve.method=No se puede resolver el método ''{0}''
ambiguous.method.call.no.match=No se puede resolver el método ''{0}'' en ''{1}''
missing.method.body=Falta el cuerpo del método o declarar abstracto
abstract.method.in.non.abstract.class=Método abstracto en clase no abstracta
missing.return.type=Declaración de método no válida; tipo de retorno requerido
duplicate.method=''{0}'' ya está definido en ''{1}''
constructor.call.must.be.first.statement=La llamada a ''{0}'' debe ser la primera declaración en el cuerpo del constructor
direct.abstract.method.access=No se puede acceder al método abstracto ''{0}'' directamente
unrelated.overriding.methods.return.types=los métodos tienen tipos de retorno no relacionados
overrides.deprecated.method=Anula el método obsoleto en ''{0}''
overrides.marked.for.removal.method=Anula el método que está obsoleto y marcado para su eliminación en ''{0}''
deprecated.default.constructor=El constructor predeterminado en ''{0}'' está obsoleto
marked.for.removal.default.constructor=El constructor predeterminado en ''{0}'' está obsoleto y marcado para su eliminación
recursive.constructor.invocation=Invocación de constructor recursivo
wrong.constructor.arguments=''{0}'' no se puede aplicar a ''{1}''
cannot.resolve.constructor=No se puede resolver el constructor ''{0}''
invalid.package.annotation.containing.file=Las anotaciones del paquete deben estar en el archivo package-info.java
repeated.annotation.target=Objetivo de anotación repetida

clash.methods.message=''{0}'' choca con ''{1}''
clash.methods.message.show.classes=''{0}'' en ''{2}'' choca con ''{1}'' en ''{3}''

package.clashes.with.class=El paquete ''{0}'' choca con la clase del mismo nombre
class.clashes.with.package=La clase ''{0}'' choca con el paquete del mismo nombre

# {0} - colspan, {1} - método1, {2} - clase1, {3} - método2, {4} - clase2
ambiguous.method.html.tooltip=\
  <html><body><table border=0>\
  <tr><td colspan={0}>Llamada de método ambigua. Ambos</td></tr>\
  <tr>{1}<td>en <b>{2}</b>\\and</td></tr>\
  <tr>{3}<td>en <b>{4}</b>\\match</td></tr>\
 </table></body></html>

# {0} - tipo sin formato a la izquierda, {1} - fila de argumentos de tipo obligatorio, {2} - tipo sin formato a la derecha, {3} - fila de argumentos de tipo encontrado, {4} - motivo, {5} - color del título en gris
incompatible.types.html.tooltip=\
  <html><body><tabla>\
  <tr><td style=''padding: 0px 16px 8px 4px;color: {5}''>Tipo obligatorio:</td><td style=''padding: 0px 4px 8px 0px;''>{0}</td>{1}</tr>\
  <tr><td style=''padding: 0px 16px 0px 4px;color: {5}''>Proporcionado:</td><td style=''padding: 0px 4px 0px 0px;''>{2}</td>{3}</tr>\
 </table>{4}</body></html>

interface.methods.cannot.have.body=Los métodos abstractos de la interfaz no pueden tener cuerpo
abstract.methods.cannot.have.a.body=Los métodos abstractos no pueden tener cuerpo
native.methods.cannot.have.a.body=Los métodos nativos no pueden tener cuerpo
extension.method.should.have.a.body=El método de extensión debe tener un cuerpo
extension.method.in.class=Los métodos de extensión solo se pueden usar dentro de una interfaz

instance.method.cannot.override.static.method=El método de instancia ''{0}'' en ''{1}'' no puede anular el método estático ''{2}'' en ''{3}''
static.method.cannot.override.instance.method=El método estático ''{0}'' en ''{1}'' no puede anular el método de instancia ''{2}'' en ''{3}''
inconvertible.type.cast=Tipos inconvertibles; no se puede transmitir ''{0}'' a ''{1}''
variable.expected=Variable esperada
binary.operator.not.applicable=El operador ''{0}'' no se puede aplicar a ''{1}'', ''{2}''
unary.operator.not.applicable=El operador ''{0}'' no se puede aplicar a ''{1}''
return.outside.method=Método de retorno externo
return.from.void.method=No se puede devolver un valor de un método con tipo de resultado nulo
missing.return.value=Falta el valor de retorno
return.outside.switch.expr=Regresar fuera de la expresión del interruptor adjunto

#{0} - lista de excepciones (separada por comas), {1} - recuento de excepciones en la lista, {2} - fuente de excepción
unhandled.exceptions=Excepci{1, choice, 0#ón no controlada|2#ones no controladas}: {0}
unhandled.close.exceptions=Excepci{1, choice, 0#ón no controlada|2#ones no controladas} de {2}: {0}

variable.already.defined=La variable ''{0}'' ya está definida en el alcance
break.outside.switch.or.loop=Romper el interruptor o bucle exterior
yield.unexpected=Rendimiento fuera de la expresión de cambio
yield.void=El tipo de expresión no debe ser 'void'
break.outside.switch.expr=Romper fuera de la expresión del interruptor adjunto
continue.outside.loop=Continuar fuera del bucle
continue.outside.switch.expr=Continuar fuera de la expresión del interruptor adjunto
not.loop.label=No es una etiqueta de bucle: ''{0}''
incompatible.modifiers=Combinación ilegal de modificadores: ''{0}'' y ''{1}''
modifier.not.allowed=Modificador ''{0}'' no permitido aquí
exception.never.thrown.try=La excepción ''{0}'' nunca se lanza en el bloque try correspondiente
exception.already.caught.warn=Sección inaccesible: {1, choice, 0#excepción|2#excepciones} ''{0}'' {1, choice, 0#| 2#han} ya sido detectadas
not.a.statement=No es una declaración
invalid.statement=Declaración no válida
incompatible.types=Tipos incompatibles. Encontrado: ''{1}'', obligatorio: ''{0}''
incompatible.types.reason.ambiguous.method.reference=<br/> motivo: la referencia del método es ambigua: tanto ''{0}'' como ''{1}'' coinciden
inaccessible.type=''{0}'' es inaccesible aquí
incompatible.call.types={0, choice, 1#1ro|2#2do|3#3ro|4#{0,number}to} tipo de argumento incorrecto. Encontrado: ''{2}'', obligatorio: ''{1}''

valid.switch.selector.types=byte, char, short o int
valid.switch.17.selector.types=char, byte, short, int, Character, Byte, Short, Integer, String o una enumeración
dot.expected.after.super.or.this=Se esperaba '.'
unqualified.super.disallowed=No se permite la super referencia no calificada en el método de extensión
static.interface.method.call.qualifier=El método estático se puede invocar solo en la clase de interfaz que contiene
non.static.symbol.referenced.from.static.context=No se puede hacer referencia a {0} ''{1}'' no estático desde un contexto estático
private.symbol=''{0}'' tiene acceso privado en ''{1}''
protected.symbol=''{0}'' tiene acceso protegido en ''{1}''
package.local.symbol=''{0}'' no es público en ''{1}''. No se puede acceder desde el paquete externo
visibility.access.problem=No se puede acceder a ''{0}'' en ''{1}''
visibility.module.access.problem={2} impide el acceso a ''{0}'' en ''{1}''
array.type.expected=Tipo de matriz esperado; encontrado: ''{0}''
expression.expected=Expresión esperada
array.initializer.not.allowed=El inicializador de matriz no está permitido aquí
case.statement.outside.switch=Declaración de caso fuera del interruptor
qualified.enum.constant.in.switch=Una etiqueta de caso de cambio de enumeración debe ser el nombre no calificado de una constante de enumeración
constant.expression.required=Expresión constante requerida
duplicate.default.switch.label=Etiqueta predeterminada duplicada
duplicate.switch.label=Etiqueta duplicada ''{0}''
switch.colon.expected.after.case.label=Se esperaba ':'
switch.expr.empty=la expresión 'switch' no tiene cláusulas de caso
switch.expr.incomplete=la expresión 'switch' no cubre todos los valores de entrada posibles
switch.expr.no.result=La expresión de cambio no tiene ninguna expresión de resultado
switch.expr.should.produce.result=La expresión de cambio debe producir un resultado en todas las rutas de ejecución
switch.expr.rule.should.produce.result=La regla de expresión de cambio debe producir un resultado en todas las rutas de ejecución

illegal.forward.reference=Referencia hacia adelante ilegal
illegal.self.reference=Autorreferencia ilegal

unknown.class=Clase desconocida: ''{0}''
illegal.type.void=Tipo ilegal: 'void'
member.referenced.before.constructor.called=No se puede hacer referencia a ''{0}'' antes de que se haya llamado al constructor de supertipo
label.without.statement=Etiqueta sin declaración
duplicate.label=Etiqueta ''{0}'' ya en uso
unclosed.comment=Comentario sin cerrar
exception.already.caught=La excepción ''{0}'' ya ha sido detectada
exception.must.be.disjoint=Los tipos de captura múltiple deben estar separados: ''{0}'' es una subclase de ''{1}''
statement.must.be.prepended.with.case.label=La declaración debe ir precedida de la etiqueta del caso
different.case.kinds.in.switch=Diferentes tipos de casos usados ??en el interruptor
void.type.is.not.allowed=El tipo 'void' no está permitido aquí
single.import.class.conflict=''{0}'' ya está definido en una importación de tipo único
numeric.overflow.in.expression=Desbordamiento numérico en expresión
static.member.accessed.via.instance.reference=Miembro estático ''{0}.{1}'' al que se accede mediante referencia de instancia
unresolved.label=Etiqueta no definida: ''{0}''
deprecated.symbol=''{0}'' está obsoleto
marked.for.removal.symbol=''{0}'' está obsoleto y marcado para su eliminación
qualifier.must.be.expression=El calificador debe ser una expresión
cannot.resolve.symbol=No se puede resolver el símbolo ''{0}''
class.is.already.defined.in.single.static.import=La clase ''{0}'' ya está definida en una única importación estática
class.is.ambiguous.in.single.static.import=Class ''{0}'' es ambigua en una sola importación estática
field.is.already.defined.in.single.static.import=El campo ''{0}'' ya está definido en una única importación estática
field.is.ambiguous.in.single.static.import=El campo ''{0}'' es ambiguo en una sola importación estática
annotation.interface.members.may.not.have.parameters=@interface miembros pueden no tener parámetros
class.in.default.package=Class ''{0}'' está en el paquete predeterminado

local.variable.is.never.used=La variable ''{0}'' nunca se usa
local.variable.is.not.used.for.reading=La variable ''{0}'' está asignada pero nunca se accede
local.variable.is.not.assigned=La variable ''{0}'' nunca se asigna
private.field.is.not.used=El campo privado ''{0}'' nunca se usa
field.is.not.used=El campo ''{0}'' nunca se usa
private.field.is.not.used.for.reading=El campo privado ''{0}'' está asignado pero nunca se accede
private.field.is.not.assigned=El campo privado ''{0}'' nunca se asigna
parameter.is.not.used=El parámetro ''{0}'' nunca se usa
pattern.variable.is.not.used=La variable de patrón ''{0}'' nunca se usa
private.method.is.not.used=El método privado ''{0}'' nunca se usa
method.is.not.used=El método ''{0}'' nunca se usa
constructor.is.not.used=El constructor ''{0}'' nunca se usa
private.constructor.is.not.used=El constructor privado ''{0}'' nunca se usa
private.inner.class.is.not.used=La clase interna privada ''{0}'' nunca se usa
private.inner.interface.is.not.used=La interfaz interna privada ''{0}'' nunca se usa
type.parameter.is.not.used=El parámetro de tipo ''{0}'' nunca se usa
local.class.is.not.used=La clase local ''{0}'' nunca se usa
class.is.not.used=La clase ''{0}'' nunca se usa
interface.is.not.used=La interfaz ''{0}'' nunca se usa
enum.is.not.used=Enum ''{0}'' nunca se usa

hexadecimal.numbers.must.contain.at.least.one.hexadecimal.digit=Los números hexadecimales deben contener al menos un dígito hexadecimal
binary.numbers.must.contain.at.least.one.hexadecimal.digit=Los números binarios deben contener al menos un dígito binario
integer.number.too.large=Número entero demasiado grande
long.number.too.large=Número largo demasiado grande
malformed.floating.point.literal=Literal de punto flotante con formato incorrecto
illegal.escape.character.in.character.literal=Carácter de escape ilegal en carácter literal
too.many.characters.in.character.literal=Demasiados caracteres en el carácter literal
empty.character.literal=Literal de carácter vacío
illegal.line.end.in.string.literal=Final de línea ilegal en literal de cadena
unclosed.char.literal=Literal de carácter no cerrado
illegal.escape.character.in.string.literal=Carácter de escape ilegal en literal de cadena
floating.point.number.too.large=Número de coma flotante demasiado grande
floating.point.number.too.small=Número de coma flotante demasiado pequeño
illegal.underscore=subrayado ilegal
text.block.new.line=Inicio ilegal del bloque de texto: falta una nueva línea después de abrir las comillas
text.block.unclosed=Bloque de texto sin cerrar

expected.identifier=Identificador esperado
unexpected.token=Token inesperado
expected.identifier.or.type=Identificador o tipo esperado
expected.rbracket=Se esperaba ']'
expected.expression=Expresión esperada
expected.semicolon=Se esperaba ';'
expected.lparen=Se esperaba '('
expected.rparen=Se esperaba ')'
expected.rbrace=Se esperaba '}'
expected.lbrace=Se esperaba '{'
expected.parameter=Se esperaba Parámetro
expected.comma=Se esperaba ','
expected.comma.or.rparen=Se esperaba ',' o ')'
expected.colon=Se esperaba ':'
expected.lparen.or.lbracket=Se esperaba '(' o '['
expected.array.initializer=Se esperaba un inicializador de matriz
else.without.if='else' sin 'if'
catch.without.try='atrapar' sin 'intentar'
finally.without.try='finalmente' sin 'intentar'
expected.statement=Declaración esperada
expected.while=Se esperaba 'while'
expected.catch.or.finally=Se esperaba 'catch' o 'finally'
expected.boolean.expression=Se esperaba una expresión booleana
expected.switch.label=Se esperaba 'case', 'default' o '}'
expected.switch.rule=Expresión, bloqueo o declaración de lanzamiento esperada
error.cannot.resolve.class=No se puede resolver la clase ''{0}''
error.cannot.resolve.class.or.package=No se puede resolver la clase o el paquete ''{0}''
expected.class.or.package=Clase o paquete esperado
suspicious.name.assignment=''{0}'' probablemente no debería asignarse a ''{1}''
suspicious.name.parameter=''{0}'' probablemente no debería pasarse como parámetro ''{1}''
suspicious.name.return=''{0}'' probablemente no debería devolverse del método ''{1}''
type.parameter.cannot.be.followed.by.other.bounds=El parámetro de tipo no puede ser seguido por otros límites
generic.extend.exception=La clase genérica no puede extender 'java.lang.Throwable'
illegal.initializer=Inicializador ilegal para ''{0}''
class.cannot.inherit.from.its.type.parameter=La clase no puede heredar de su parámetro de tipo
cannot.resolve.package=No se puede resolver el paquete {0}
override.not.allowed.in.interfaces=@Override no está permitido al implementar el método de interfaz
declaration.not.allowed=Declaración no permitida aquí

underscore.identifier.error=A partir de Java 9, '_' es una palabra clave y no se puede utilizar como identificador
underscore.lambda.identifier=No se permite el uso de '_' como nombre de parámetro lambda

assert.identifier.warn=El uso de 'assert' como identificador no se admite en las versiones desde Java 1.4
enum.identifier.warn=El uso de 'enum' como identificador no se admite en las versiones desde Java 1.5
underscore.identifier.warn=El uso de '_' como identificador no se admite en versiones desde Java 9
var.identifier.warn=El uso de 'var' como nombre de clase no se admite en versiones desde Java 10
module.unwanted.modifier.warn=Los modificadores en 'requires java.base' están prohibidos en las versiones desde Java 10
yield.identifier.warn=Es posible que el uso de 'yield' como nombre de clase no sea compatible con versiones desde Java 14
yield.unqualified.method.warn=Es posible que la llamada no calificada al método 'yield' no sea compatible con versiones desde Java 14

module.no.package=Un archivo de módulo no debe tener la declaración 'paquete'
module.file.wrong.name=La declaración del módulo debe estar en un archivo llamado 'module-info.java'
module.file.duplicate='module-info.java' ya existe en el módulo
module.duplicate.requires=Duplicar ''requires'': {0}
module.duplicate.exports=Duplicar ''exports'': {0}
module.duplicate.opens=Duplicar ''opens'': {0}
module.duplicate.uses=Duplicar ''uses'': {0}
module.duplicate.provides=Duplicar ''provides'': {0}
module.duplicate.exports.target=Destino de ''exports'' duplicado: {0}
module.duplicate.opens.target=Duplicar ''opens'' objetivo: {0}
module.duplicate.impl=Implementación duplicada: {0}
module.file.wrong.location=La declaración del módulo debe estar ubicada en la raíz de origen de un módulo
module.open.duplicate.text=Ir a duplicar
module.not.found=Módulo no encontrado: {0}
module.ambiguous=Referencia de módulo ambiguo: {0}
module.not.on.path=El módulo no está en dependencias: {0}
module.cyclic.dependence=Dependencia cíclica: {0}
module.opens.in.weak.module='opens' no está permitido en un módulo abierto
package.not.found=Paquete no encontrado: {0}
package.is.empty=El paquete está vacío: {0}
module.service.enum=La definición del servicio es una enumeración: {0}
module.service.alien=La implementación del servicio debe definirse en el mismo módulo que la directiva proporciona
module.service.impl=El tipo de implementación del servicio debe ser un subtipo del tipo de interfaz de servicio, o tener un método de 'proveedor' público estático no-args
module.service.abstract=La implementación del servicio es una clase abstracta: {0}
module.service.inner=La implementación del servicio es una clase interna: {0}
module.service.no.ctor=La implementación del servicio no tiene un constructor público predeterminado: {0}
module.service.provider.type=El tipo de retorno del método '' proveedor '' debe ser un subtipo del tipo de interfaz de servicio: {0}
module.service.unused=Interfaz de servicio proporcionada pero no exportada ni utilizada
module.conflicting.reads=Módulo ''{0}'' lee el paquete ''{1}'' tanto de ''{2}'' como de ''{3}''
module.conflicting.packages=El paquete ''{0}'' existe en otro módulo: {1}
module.access.to.unnamed=El paquete ''{0}'' está declarado en el módulo sin nombre, pero el módulo ''{1}'' no lo lee
module.access.from.named=El paquete ''{0}'' se declara en el módulo ''{1}'', que no lo exporta al módulo ''{2}''
module.access.from.unnamed=El paquete ''{0}'' se declara en el módulo ''{1}'', que no lo exporta al módulo sin nombre
module.access.does.not.read=El paquete ''{0}'' está declarado en el módulo ''{1}'', pero el módulo ''{2}'' no lo lee
module.access.not.in.graph=El paquete ''{0}'' se declara en el módulo ''{1}'', que no está en el gráfico del módulo
module.access.bad.name=El paquete ''{0}'' se declara en el módulo con un nombre no válido (''{1}'')

restricted.identifier=''{0}'' es un identificador restringido y no se puede utilizar para declaraciones de tipo
restricted.identifier.reference=Referencia ilegal al tipo restringido ''{0}''

lvti.no.initializer=No se puede inferir el tipo: 'var' en la variable sin inicializador
lvti.lambda=No se puede inferir el tipo: la expresión lambda requiere un tipo de destino explícito
lvti.method.ref=No se puede inferir el tipo: la referencia del método requiere un tipo de destino explícito
lvti.compound='var' no está permitido en una declaración compuesta
lvti.array='var' no está permitido como tipo de elemento de una matriz
lvti.null=No se puede inferir el tipo: el inicializador de la variable es 'nulo'
lvti.void=No se puede inferir el tipo: el inicializador de la variable es 'vacío'
lvti.selfReferenced=No se puede inferir el tipo: el inicializador de variable es autoreferenciado

record.no.header=El registro no tiene ningún encabezado declarado
record.header.regular.class=Encabezado de registro declarado para no registro
record.extends=No se permite la cláusula de extensiones para el registro
record.component.vararg.not.last=El componente de registro de Vararg debe ser el último en la lista
record.component.restricted.name=Nombre de componente de registro ilegal ''{0}''
record.instance.initializer=El inicializador de instancia no está permitido en el registro
record.instance.field=El campo de instancia no está permitido en el registro
record.accessor.wrong.return.type=Tipo de retorno de acceso de componente incorrecto. Esperado: ''{0}'', encontrado: ''{1}''
record.canonical.constructor.wrong.parameter.type=Tipo de parámetro incorrecto para el componente de registro ''{0}''. Esperado: ''{1}'', encontrado: ''{2}''
record.canonical.constructor.wrong.parameter.name=Los nombres de los parámetros del constructor canónico deben coincidir con los nombres de los componentes del registro. Esperado: ''{0}'', encontrado: ''{1}''
record.constructor.call.in.canonical=El constructor canónico no puede delegar en otro constructor
record.no.constructor.call.in.non.canonical=El constructor de registros no canónicos debe delegar en otro constructor
record.special.method.type.parameters={0} no puede tener parámetros de tipo
record.special.method.non.public={0} debe ser ''public''
record.special.method.throws={0} no puede declarar excepciones lanzadas
record.canonical.constructor=Constructor canónico
record.compact.constructor=Constructor compacto
record.accessor=Accesor de componente de registro
record.component.not.initialized=Es posible que el componente de registro ''{0}'' no esté inicializado en el constructor canónico
compact.constructor.in.regular.class=Lista de parámetros esperada
record.compact.constructor.return=la declaración 'return' no está permitida en el constructor compacto

insufficient.language.level={0} no se admiten en el nivel de lenguaje ''{1}''
