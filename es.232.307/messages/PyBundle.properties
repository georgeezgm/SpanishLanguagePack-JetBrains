CONFLICT.name.obscured.by.local.definitions=이름 ''{0}''이(가) 지역 정의로 모호해졌습니다
CONFLICT.name.obscured.cannot.convert=이름 ''{0}''이(가) 모호해졌습니다. 변환할 수 없습니다.
CONFLICT.occurrence.pl=찾은 항목
INSP.GROUP.python=Python
INSP.NAME.pyproject.packages=pyproject.toml 내 종속 요소
INSP.poetry.package.versions.display.name=Poetry 패키지 버전
INSP.settings.bdd.behave.specific=잘못된 BDD Behave 전용 정의
INSP.settings.bdd.step.definition.arguments=단계 정의 함수에 사용된 잘못된 인수
INSP.settings.pep8.ignore.errors.label=무시된 오류:
QFIX.FAMILY.NAME.rename.element=요소 이름 변경
QFIX.NAME.change.signature=시그니처 변경
QFIX.NAME.implement.methods=abstract 메서드 구현
QFIX.NAME.rename.element=요소 이름 변경
QFIX.add.import.add.import="''{0}''" 추가
QFIX.bold.html.text=<b>{0}</b>
QFIX.change.signature.of={0}의 시그니처 변경
QFIX.change.to.same.directory.import=동일한 디렉터리 가져오기로 변경
QFIX.fill.paragraph=단락 채우기
QFIX.generate.binary.stubs=바이너리 스텁 생성
QFIX.generating.skeletons.for.binary.module=바이너리 모듈용 스켈레톤 생성
QFIX.ignore.unresolved.reference=해결되지 않은 참조 무시
QFIX.ignore.unresolved.reference.0=해결되지 않은 참조 ''{0}'' 무시
QFIX.mark.all.unresolved.attributes.of.0.as.ignored=모든 해결되지 않은 ''{0}''의 속성을 무시됨으로 표시
QFIX.mark.as.namespace.package=디렉터리 ''{0}''을(를) 네임스페이스 패키지로 표시
QFIX.pep8.edit.inspection.profile.setting=검사 프로파일 설정 편집
QFIX.reformat.file=파일 서식 다시 지정
QFIX.remove.trailing.blank.lines=후행 빈 줄 제거
action.AnActionButton.text.show.early.releases=조기 릴리스 표시
action.AnActionButton.text.use.conda.package.manager=Conda 패키지 관리자 사용
action.CleanPyc.description=선택한 디렉터리 및 하위 디렉터리의 컴파일된 바이트코드 파일 삭제
action.CleanPyc.progress.title.cleaning.up.pyc.files=.pyc 파일 정리 중…
action.CleanPyc.status.bar.text.deleted.bytecode.files={0} 바이트코드 {0,choice,0#파일|1#파일|2#파일} 삭제됨
action.CleanPyc.text=Python 컴파일 파일 지우기
action.CollapsePythonTypeAnnotations.description=Python 타입 어노테이션을 접습니다
action.CollapsePythonTypeAnnotations.text=Python 타입 어노테이션 접기
action.CompuleQrc.text=.qrc 파일 컴파일
action.DumbAware.ConcurrencyToolWindowPanel.description.stop.process=프로세스 중지
action.DumbAware.ConcurrencyToolWindowPanel.text.stop.process=프로세스 중지
action.DumbAware.PydevConsoleRunnerImpl.description.stop.python.console=Python 콘솔 중지
action.DumbAware.PydevConsoleRunnerImpl.text.stop.console=콘솔 중지
action.ExecuteInPyConsoleAction.description=Python/Django 콘솔에서 선택된 코드 조각을 실행합니다
action.ExecuteInPyConsoleAction.text=선택 범위를 콘솔에서 실행
action.ExpandPythonTypeAnnotations.description=Python 타입 어노테이션을 펼칩니다
action.ExpandPythonTypeAnnotations.text=Python 타입 어노테이션 펼치기
action.ForceStepInto.description=Step into합니다.
action.ForceStepInto.text=스텝인투 강제 실행(_R)
action.MarkNamespacePackageDirectory.text=네임스페이스 패키지
action.NewPythonPackage.description=새 디렉터리 및 내부에 __init__.py 생성
action.NewPythonPackage.text=Python 패키지
action.PyConsoleRenameAction.text=콘솔 이름 변경
action.PyConvertModuleToPackage.description=동일한 이름으로 패키지 생성 및 __init__.py로 모듈 콘텐츠 이동
action.PyConvertModuleToPackage.text=Python 패키지로 변환
action.PyConvertPackageToModuleAction.description=동일한 이름으로 모듈 생성 및 해당 모듈로 __init__.py 콘텐츠 이동
action.PyConvertPackageToModuleAction.text=Python 모듈로 변환
action.PyDebugger.CustomizeDataView.text=데이터 뷰 사용자 지정
action.PyDebugger.ViewArray.text=배열로 표시
action.PyExecuteCellAction.text=콘솔에서 셀 실행
action.PyManagePackages.text=Python 패키지 관리…
action.PySyncPythonRequirements.description=Python requirements 파일을 프로젝트에 사용되는 패키지와 동기화합니다
action.PySyncPythonRequirements.text=Python Requirements 동기화…
action.PythonGenerateDictionaries.text=Python 맞춤법 검사기 사전 생성
action.RunPythonToolwindowAction.text=Python 콘솔
action.SetNextStatement.description=캐럿이 있는 줄까지 이동합니다
action.SetNextStatement.text=커서로 이동(&J)
action.StepIntoMyCode.description=라이브러리를 무시하고 실행된 다음 줄로 이동
action.StepIntoMyCode.text=내 코드로 스텝인투
action.com.jetbrains.python.console.RunPythonOrDebugConsoleAction.description=디버그 세션이 실행 중인 경우 빠르게 Python 콘솔이나 디버그 콘솔을 열 수 있습니다
action.com.jetbrains.python.console.RunPythonOrDebugConsoleAction.text=Python 혹은 디버그 콘솔
action.create.python.file.description=지정된 템플릿에서 Python 파일을 생성합니다
action.create.python.file.title=Python 파일
action.run.file.in.python.console.description=Python 콘솔에서 현재 파일을 실행합니다
active.sdk.dialog.link.add.interpreter.text=인터프리터 추가
active.sdk.dialog.project.interpreter=Python 인터프리터:
active.sdk.dialog.project.interpreter.path.mappings=경로 매핑:
active.sdk.dialog.project.interpreter.path.mappings.default.project.error=매핑을 구성할 프로젝트 열기 또는 생성
active.sdk.dialog.show.all.item=모두 표시…
acton.run.file.in.python.console.title=Python 콘솔에서 파일 실행
advanced.setting.python.code.vision.usages.limit=Code Vision: 검색할 최대 사용 위치 수
advanced.setting.python.debugger.attach.timeout=디버거: 연결 타임아웃을 처리하기 위해 연결
advanced.setting.python.pytest.show_summary=Pytest: '--no-header --no-summary -q'를 추가 안 함
advanced.setting.python.pytest.swapdiff=Pytest에서 실제 어설션과 필요한 어설션의 순서 바꾸기
available.to.all.projects=모든 프로젝트에서 사용할 수 있도록 설정
black.action.on.save.executable.info=Black 실행 파일 v{0} 사용
black.action.on.save.executable.path.not.specified=Black 실행 파일 경로가 지정되지 않았습니다.
black.action.on.save.name=Black 실행
black.action.on.save.package.info=Black 패키지 v{0} 사용
black.advanced.settings.panel.title=고급 설정
black.advertising.service.configure.button.label=구성
black.advertising.service.dont.show.again.label=다시 표시 안 함
black.advertising.service.found.in.PATH=Black 서식 지정 도구의 실행 파일이 {0, choice, 0#%PATH%|1#$PATH} 내에서 감지되었습니다. 통합된 Black 서식 지정 도구를 통합해 보세요!
black.advertising.service.found.in.packages=프로젝트 인터프리터에서 Black 서식 지정 도구 패키지가 감지되었습니다. Black 서식 지정 도구를 통합해 보세요!
black.advertising.service.notification.title=Black 서식 지정 도구 통합
black.cli.args.comment=명령줄 인수를 공백으로 구분하여 나열합니다. <a href='https://black.readthedocs.io/en/stable/usage_and_configuration/the_basics.html#command-line-options'>자세히 알아보기</a><br>Black v21.4.0 이상에 pyproject.toml의 설정이 자동으로 적용됩니다.
black.cli.args.text.field.label=설정:
black.cli.args.validation.notification=매개변수 ''{0}''에 값이 전달되지 않습니다
black.configurable.name=Black
black.empty.output.error=Black 서식 지정 도구가 빈 출력물을 반환했습니다
black.empty.path.to.executable.exception.text=Black 실행 파일을 찾을 수 없거나 파일이 비어 있습니다
black.enable.action.on.save.label=저장 시
black.enable.black.checkbox.label=코드 서식 다시 지정 시
black.exception.error.message=Black 서식 지정 도구 오류
black.executable.auto.detected.path=자동 탐지: {0}
black.executable.label=Black 실행 파일:
black.executable.not.found={0, choice, 0#%PATH%|1#$PATH}에서 Black 실행 파일을 자동 감지할 수 없습니다
black.execution.mode.binary=바이너리
black.execution.mode.label=실행 모드:
black.execution.mode.package=패키지
black.execution.mode.tooltip.text=프로젝트 인터프리터에 설치되어 있는 실행 파일이나 패키지를 사용
black.failed.to.format.on.save.error.label=Black: 파일 {0}의 서식을 지정할 수 없습니다
black.file.ignored.notification.label=Black: 파일이 무시되었습니다
black.file.ignored.notification.message=--exclude 혹은 --force-exclude 규칙에 따라 파일 {0}이(가) 무시되었습니다
black.format.fragment.inline.error=Black: 조각의 서식을 지정할 수 없습니다. {0}
black.formatted.n.lines=Black: 서식 지정된 {0} {1, choice, 0#줄|1#줄}
black.formatting.service.name=Black 서식 지정 도구
black.formatting.with.black=Black으로 서식 지정 중
black.install.button.label=Black 설치
black.installation.error.title=Black 서식 지정 도구를 설치할 수 없습니다
black.installing.modal.title=Black 서식 지정 도구 설치 중
black.interpreter.selection.combobox.label=Python 인터프리터:
black.no.lines.changed=Black: 변경된 줄이 없습니다. 내용의 서식이 이미 올바르게 지정되었습니다.
black.not.installed.error=현재 인터프리터에 Black 서식 지정 도구 패키지가 설치되어 있지 않습니다
black.processing.file.name=Black: 파일 {0} 처리 중
black.remote.sdk.error=원격 SDK는 패키지 모드를 사용할 수 없습니다. 바이너리 모드를 사용하세요.
black.remote.sdk.exception.text=원격 SDK는 패키지 모드에서 Black 서식 지정 도구 호출할 수 없습니다
black.sdk.not.configured.error=프로젝트 {0}의 프로젝트 SDK가 구성되지 않았습니다
black.sdk.not.configured.error.title=SDK가 구성되지 않음
black.select.path.to.executable=Black 서식 지정 도구 실행 파일 경로 선택
black.use.section.label=Black 서식 지정 도구 사용:
button.install.to.user.site.packages.directory=사용자의 사이트 패키지 디렉터리에 설치
choose.packages.to.install=설치할 패키지 선택:
code.insight.create.test=테스트 생성
code.insight.goto.superclass.attribute.chooser.title=상위 클래스 속성 선택
code.insight.ignore.packages.qfix={0,choice, 1#패키지|2#패키지} 무시
code.insight.ignore.type.hints=무시
code.insight.install.type.hints.action=스텁 패키지 설치
code.insight.install.type.hints.content=코드 분석 기능을 개선할 수 있습니다.
code.insight.select.methods.to.implement=구현할 메서드 선택
code.insight.select.methods.to.override=재정의할 메서드 선택
code.insight.select.target.directory=타깃 디렉터리 선택
code.insight.stub.checked.packages.are.not.installed.message=스텁 {0,choice,1#패키지|2#패키지} {1}{0,choice,1#이(가)|2#이(가)} 설치되지 않았습니다
code.insight.stub.forced.packages.are.not.installed.message=스텁 {0,choice,1#패키지|2#패키지} {1}{0,choice,1#이(가)|2#이(가)} 설치되지 않았습니다.\n\
{0,choice,1#패키지|2#패키지}는 향상된 코드 분석이 필요한 타입 힌트를 {0,choice,1#포함합니다|2#포함합니다}.
code.insight.stub.package.advertiser.notifications.group.title=Python 스텁 패키지 권장
code.insight.stub.packages.ignored.notification.content=제안된 {0} {1,choice,1#은(는)|2#은(는)} 현재 환경에 호환되지 않습니다.\n\
{1,choice,1#이러한|2#이러한} 스텁 {1,choice,1#패키지|2#패키지} 는 새 버전이 출시될 때까지 제거 및 무시됩니다.
code.insight.stub.packages.install.requirements.fix.name=스텁 {0,choice, 1#패키지|2#패키지} 설치
code.insight.type.hints.are.not.installed=타입 힌트가 설치되지 않았습니다
command.line.parser.error.message=인수와 해당 값 사이에는 공백이 필요하지 않습니다
command.name.create.new.package=새 패키지 {0} 생성
commandLine.commandNotFound={0}: 명령어를 찾을 수 없습니다
commandLine.inspection.badArgument=인수로 이 값을 사용할 수 없습니다. 자동 완성을 사용하여 가능한 값 목록을 확인하세요.
commandLine.inspection.badCommand=잘못되었거나 알 수 없는 명령어입니다. 이 명령어가 있는지 확인하세요.
commandLine.inspection.badOption=잘못되었거나 알 수 없는 옵션입니다. 이 옵션이 있는지 확인하세요.
commandLine.inspection.excessArgument=인수가 초과되었거나 인수를 이곳에서 사용할 수 없습니다
commandLine.inspection.name=잘못된 CLI 구문
compile.cython.extensions.error=Cython 확장 컴파일 오류
compile.cython.extensions.help=작동 원리
compile.cython.extensions.install=설치
compile.cython.extensions.notification=Python 디버거 확장 가능
compile.cython.extensions.title=Cython 확장 컴파일
conda.packaging.button.install.with.conda=conda로 설치
conda.packaging.button.install.with.pip=pip으로 설치
conda.packaging.cache.update.progress=사용 가능한 conda 패키지 목록 업데이트 중
conda.packaging.empty.pypi.info=<html><head></head><body><p class="empty_description">PyPl에서 패키지 설명을 찾을 수 없습니다.<br/>conda를 사용하면 계속 설치할 수 있습니다.</p></body></html>
conda.packaging.error.rendering.description=<html><head></head><body><p class="empty_description">패키지 설명을 읽을 수 없습니다.<br/>하지만 계속 설치할 수 있습니다.</p></body></html>
conda.packaging.exception.non.zero=0이 아닌 종료 코드
conda.packaging.exception.timeout=시간 초과
conda.packaging.install.progress=conda 패키지 {0} 설치 중
conda.packaging.list.progress=설치된 conda 패키지를 읽는 중
conda.packaging.uninstall.progress=conda 패키지 {0} 제거 중
conda.packaging.update.progress=conda 패키지 {0}을(를) 업데이트 중
configurable.PyActiveSdkModuleConfigurable.python.interpreter.display.name=Python 인터프리터
configurable.PyConsoleOptionsConfigurable.child.display.name=Python 콘솔
configurable.PyConsoleOptionsConfigurable.display.name=콘솔
configurable.PyContentEntriesModuleConfigurable.display.name=프로젝트 구조
configurable.PyDebuggerConfigurable.display.name=Python 디버거
configurable.PyDependenciesConfigurable.display.name=프로젝트 종속성
configurable.PyIntegratedToolsConfigurable.display.name=Python 통합 도구
configurable.PyIntegratedToolsModulesConfigurable.display.name=Python 통합 도구
configurable.PyLanguageCodeStyleSettingsProvider.display.name=Python
configurable.PySmartKeysOptions.display.name=Python
configurable.PyUserTypeRenderersConfigurable.display.name=Python 타입 렌더러
configurable.PythonContentEntriesConfigurable.display.name=프로젝트 구조
configurable.PythonSdkEditorTab.display.name=Python SDK
configurable.choose.path.to.the.package.requirements.file=패키지 requirements 파일의 경로 선택:
configurable.choose.working.directory=작업 디렉터리 선택:
configurable.name.python.language=Python 언어
configurable.pipenv.auto.detected=자동 탐지: {0}
configurable.select.working.directory=작업 디렉터리 선택
configuring.interpreters.link=인터프리터 구성
connecting.to.console.progress=콘솔에 연결 중…
connecting.to.console.title=콘솔에 연결 중
console.attach.debugger=디버거 연결
console.attach.debugger.description=콘솔에서 실행된 코드 추적 활성화
console.cannot.connect.to.debugger=디버거에 연결할 수 없습니다
console.changing.variable=변수 변경 중
console.close.console.communication=콘솔 통신 닫기
console.connecting.to.debugger=디버거에 연결 중
console.error.connecting.debugger=디버거 연결 중 오류 발생
console.evaluating.expression.in.console=콘솔 내 표현식 평가 중
console.executing.code.in.console=콘솔에서 코드 실행 중…
console.executing.dataviewer.command="DataViewer 명령어 실행 중"
console.getting.array=배열
console.getting.completion=코드 완성
console.getting.documentation=문서
console.getting.frame.variables=프레임 변수
console.getting.from.runtime=Python 런타임에서 {0} 가져오는 중
console.getting.table.data=테이블 데이터
console.getting.variable.value=가변 값
console.interrupting.execution=실행 중단 중
console.new.console=새 콘솔
console.new.console.description=새 Python 콘솔 생성
console.restarting.console=콘솔 다시 시작 중
console.setting.user.type.renderers=사용자 타입 렌더러
console.show.variables.description=활성화된 콘솔 변수 표시
console.show.variables.title=변수 표시
console.stopping.console=콘솔 중지 중
console.table.failed.to.load=로드 실패: 
console.waiting.execution.result=실행 결과 대기 중
create.python.file.action.new.python.file=새 Python 파일
create.python.file.action.python.file=Python 파일
create.python.file.action.python.stub=Python 스텁
create.python.file.action.python.unit.test=Python 유닛 테스트
create.python.file.script.action=Python 스크립트 {0} 생성 
current.interpreter=현재 인터프리터: {0}
debug.notification.group=Python 디버거
debug.notification.title.connection.failed=Python 디버거 연결 실패
debug.popup.title.step.into.function=스텝인투 기능
debugger.attach.to.process.failed.to.find.free.socket.port=빈 소켓 포트를 찾지 못했습니다
debugger.attach.to.process.filter.names=<html><b>프로세스에 연결</b>하기 위해 다음을 포함하는 이름의 프로세스 표시:</html>
debugger.connected.to.pydev.debugger.build=pydev 디버거에 연결되었습니다(빌드 {0})
debugger.cython.extension.gcc=명령어 'gcc'가 종료 상태 1로 실패했습니다
debugger.cython.extension.gcc.failed=\n\
\n\
디버거에 대한 Cython 확장을 빌드하려면 C 컴파일러를 설치하세요.\n\

debugger.cython.extension.gcc.not.found=x86_64-linux-gnu-gcc
debugger.cython.extension.gcc.not.found.suggestion=\n\
\n\
패키지 관리자를 사용하여 누락된 <code>gcc</code>를 설치하세요.\n\
\n\
다음 명령어를 사용해 보세요.\n\
<code>sudo apt install gcc</code>
debugger.cython.extension.install.python.command=<code>sudo apt-get install python{0}-dev</code>
debugger.cython.extension.non.zero.exit.code=0이 아닌 종료 코드({0}):\n\
{1}
debugger.cython.extension.permission.denied=권한 거부됨
debugger.cython.extension.python.h=Python.h: 해당 파일 또는 디렉터리가 없습니다
debugger.cython.extension.python.h.not.found=\n\
\n\
패키지 관리자를 사용하여 Python 개발 시스템 전체에서 헤더 파일 및 정적 라이브러리를 설치하세요.\n\
\n\
다음 명령어를 사용해 보세요.\n\
 {0}\n\

debugger.cython.extension.speeds.up.python.debugging=Cython 확장이 Python 디버그 속도를 높입니다
debugger.cython.please.enter.your.password.to.compile.cython.extensions=Cython 확장을 컴파일하려면 비밀번호를 입력하세요. 
debugger.cython.python.run.configuration.should.be.selected=Python 실행 구성을 선택해야 합니다
debugger.data.view.close=닫기
debugger.data.view.close.selected.viewer=선택한 뷰어 닫기
debugger.data.view.close.viewer=뷰어 닫기
debugger.data.view.colored=색으로 표시
debugger.data.view.colored.cells=색상 지정된 셀
debugger.data.view.connected.to.debug.session=디버그 세션 ''{0}''에 연결되었습니다
debugger.data.view.connected.to.python.console=Python 콘솔에 연결되었습니다
debugger.data.view.data=데이터
debugger.data.view.empty.tab=비어 있음
debugger.data.view.empty.text=Python 콘솔 또는 디버거를 실행하여 사용 가능한 데이터를 확인하세요
debugger.data.view.failed.to.evaluate.expression=표현식 {0}을(를) 평가하지 못했습니다
debugger.data.view.open.new.container.viewer=새 컨테이너 뷰어 열기
debugger.data.view.resize.automatically=자동으로 크기 조정
debugger.data.view.type.is.not.supported={0}은(는) 지원되지 않습니다
debugger.data.view.view.new.container=새 컨테이너 표시
debugger.dataviewer.action.copy.name=\ 복사
debugger.dataviewer.action.copy.properties.dialog.title=클립보드 설정에 복사
debugger.dataviewer.action.copy.properties.include.header=헤더 포함
debugger.dataviewer.action.copy.properties.include.indices=색인 포함
debugger.dataviewer.action.copy.properties.name=클립보드 설정에 복사
debugger.dataviewer.action.copy.properties.separator=구분 기호:
debugger.dataviewer.action.copy.update.message=클립보드에 복사
debugger.dataviewer.action.export.dialog.description=다음으로 저장
debugger.dataviewer.action.export.name=내보내기…
debugger.dataviewer.action.goto.dialog.label=행:열
debugger.dataviewer.action.goto.dialog.title=이동
debugger.dataviewer.action.open.in.editor.name=에디터 탭에서 열기
debugger.dataviewer.action.remove.filter.name=필터 제거
debugger.dataviewer.action.set.filter.ad.controls=적용하려면 Enter를 누르세요
debugger.dataviewer.action.set.filter.button.set=설정
debugger.dataviewer.action.set.filter.description=열 ''{0}''의 필터
debugger.dataviewer.action.set.filter.help.expression=<html>람다 함수의 변수로 <b>{0}</b> 사용</html>
debugger.dataviewer.action.set.filter.item.expression=표현식
debugger.dataviewer.action.set.filter.item.substring=문자열 자르기
debugger.dataviewer.action.set.filter.name=필터 설정…
debugger.dataviewer.action.set.filter.use.regex=정규식 사용
debugger.dataviewer.export.error.invalid.filepath=잘못된 파일 경로
debugger.dataviewer.export.error.invalid.filepath.content=파일 경로 ''{0}''이(가) 올바르지 않습니다
debugger.dataviewer.export.error.title=테이블 내보내기 실패
debugger.dataviewer.export.error.unhandled=처리되지 않는 오류
debugger.dataviewer.export.error.unhandled.content=''{0}''(으)로 내보낼 수 없습니다\n\
{1}
debugger.dataviewer.header.filter.hint={0}: {1}
debugger.dataviewer.header.filter.hint.mode.expression=표현식
debugger.dataviewer.header.filter.hint.mode.regex=정규식
debugger.dataviewer.header.filter.hint.mode.substring=문자열 자르기
debugger.dataviewer.modifier.error=제어자 오류: {0}
debugger.dataviewer.notification.group.title=데이터 뷰어 오류
debugger.debug.process.running=프로세스 실행 중
debugger.delete.signature.cache=캐시 삭제
debugger.error.in.test.setup.or.teardown.caption=테스트 설정 또는 해제에서 오류 발생
debugger.exception.breakpoint.activation.policy=활성화 정책
debugger.exception.breakpoint.any.exception=모든 예외
debugger.exception.breakpoint.ignore.library.files=라이브러리 파일 무시
debugger.exception.breakpoint.on.raise=발생 시
debugger.exception.breakpoint.on.termination=종료 시
debugger.exception.breakpoint.select.exception.class=예외 클래스 선택
debugger.exception.breakpoint.type=Python 예외 중단점
debugger.line.breakpoint.type=Python 줄 중단점
debugger.numeric.view.as.array=배열로 표시
debugger.numeric.view.as.dataframe=데이터 프레임으로 표시
debugger.numeric.view.as.series=연속으로 보기
debugger.pydev.console.pause.the.process.to.use.command.line=명령줄을 사용하려면 프로세스를 일시 중지하세요.
debugger.remote.port.out.of.boundaries=포트 번호가 범위를 벗어났습니다
debugger.remote.starting.debug.server.at.port=포트 {0}에서 디버그 서버 시작 중
debugger.remote.waiting.for.connection=연결 대기 중
debugger.remote.waiting.for.process.connection=프로세스 연결 대기 중…
debugger.sending.close.message=Python 콘솔에 닫기 메시지 전송 중…
debugger.simplified.view.description=클래스, 함수 및 모듈 객체 감시 비활성화
debugger.simplified.view.text=단순화된 변수 뷰
debugger.stack.frame.frame.not.available=<프레임 사용 불가>
debugger.stack.frame.return.values=반환 값
debugger.stack.frame.special.variables=특수 변수
debugger.stack.frame.unable.to.display.frame.variables=프레임 변수를 표시할 수 없습니다
debugger.stack.frames.not.available.in.non.suspended.state=일시 중지되지 않은 상태에서는 프레임을 사용할 수 없습니다
debugger.stepping.filter=스텝 필터
debugger.stepping.filter.specify.pattern=glob 패턴 지정('*', '?' 및 '[seq]' 허용, 이름 구분 기호로 세미콜론 ';'):
debugger.stepping.no.script.filters=스크립트 필터가 구성되지 않았습니다.
debugger.test.failed.caption=테스트 실패
debugger.use.the.following.code.to.connect.to.the.debugger=디버거에 연결하려면 다음 코드를 사용하세요:
debugger.variables.loading.asynchronously.description=비동기적으로 변숫값 로드
debugger.variables.loading.asynchronously.text=비동기적으로
debugger.variables.loading.on.demand.description=온디맨드로 가변 값 로드
debugger.variables.loading.on.demand.text=온디맨드
debugger.variables.loading.policy=변수 로드 정책
debugger.variables.loading.synchronously.description=동기적으로 변숫값 로드
debugger.variables.loading.synchronously.text=동기적으로
debugger.variables.view.loading.timed.out=로드 시간 초과
debugger.variables.view.switch.to.loading.on.demand=온디맨드 로드로 전환
debugger.variables.view.warning.message=여러 변수의 값을 로드할 수 없습니다  
debugger.waiting.to.finish=Python 콘솔 프로세스 완료 대기 중…
debugger.warning.message=이 옵션이 디버거 속도를 늦출 수 있습니다
debugger.warning.wrong.debugger.version=경고: 디버거 버전이 잘못되었습니다. PyCharm 설치 폴더의 pycharm-debugger.egg를 사용하거나 다음을 실행하세요. ''pip install pydevd-pycharm~=%{0}''\n\

debugger.watch.return.values.description=실행된 함수 반환 값 감시 활성화
debugger.watch.show.return.values=반환 값 표시
dialog.message.error.on.python.side.exit.code.stderr.stdout=Python 측에서 오류가 발생했습니다. 종료 코드: {0}, 오류: {1} 출력: {2}
dialog.title.can.t.create.package=패키지 생성 오류
dialog.title.new.python.package=새 Python 패키지
dict.completion.type.text=dict 키
enter.path.dialog.title=경로 입력
error.in.project.generation=프로젝트 생성 오류
external.documentation.column.name.module=모듈 이름
external.documentation.column.name.url.path.pattern=URL/경로 패턴
external.documentation.configure.description=모듈 {0}에 대해 구성된 외부 문서 URL가 없습니다.\n\
지금 구성하시겠어요?
external.documentation.edit.documentation.url=문서 URL 편집
external.documentation.pycharm=외부 문서
external.documentation.python.plugin=Python 외부 문서
external.documentation.title=Python 외부 문서
filetype.python.debug.remote.description=원격 디버그
flask.name=Flask
form.auto.import.auto.import.show.popup=자동 가져오기 툴팁 표시
form.auto.import.from.module.import.name=from <module> import <name>
form.auto.import.import.module.name=import <module>.<name>
form.auto.import.preferred.import.style=선호하는 가져오기 스타일:
form.auto.import.python=Python
form.console.options.always.show.debug.console=항상 디버그 콘솔 표시
form.console.options.auto.completion.enabled=런타임 코드 완성 자동 표시
form.console.options.settings.title.system.settings=일반 설정
form.console.options.show.console.variables.by.default=디폴트로 콘솔 변수 표시
form.console.options.use.command.queue=Python 콘솔 명령어 큐
form.console.options.use.existing.console.for.run.with.python.console="Python 콘솔로 실행" 시 기존 콘솔을 사용
form.console.options.use.ipython.if.available=가능한 경우 IPython 사용
form.console.specific.options.starting.script=시작 스크립트
form.create.test.target.directory=타깃 디렉터리
form.create.test.test.class.name=테스트 클래스 이름
form.create.test.test.file.name=테스트 파일 이름
form.data.viewer.current.slice=현재 슬라이스
form.data.viewer.dialog.show.svn.map.table.header.column.format.title=형식
form.data.viewer.format=형식:
form.debugger.attach.to.subprocess.automatically.while.debugging=디버그 중 자동으로 하위 프로세스에 첨부
form.debugger.clear.caches=캐시 지우기
form.debugger.clear.caches.action=캐시 지우기
form.debugger.collect.run.time.types.information.for.code.insight=코드 인사이트 기능을 위한 런타임 타입 정보 수집
form.debugger.drop.into.debugger.on.failed.tests=실패한 테스트에 디버거를 드롭
form.debugger.for.attach.to.process.show.processes.with.names.containing=프로세스에 연결하기 위해 다음을 포함하는 이름의 프로세스 표시:
form.debugger.gevent.compatible=Gevent 호환
form.debugger.pyqt.compatible=PyQt 호환
form.debugger.remote.interpreter.docker.default.interpreter.path=python
form.debugger.save.call.signatures=호출 시그니처 저장
form.debugger.stepping.always.do.smart.step.into=항상 스마트 스텝인투
form.debugger.stepping.checkbox.text.do.not.step.into.library.scripts=라이브러리 스크립트로 스텝인투 안 함
form.debugger.stepping.do.not.step.into.scripts=스크립트로 스텝인투 안 함:
form.debugger.variables.view.user.type.renderers.append.default.children=디폴트 하위 항목 추가
form.debugger.variables.view.user.type.renderers.apply.renderer.to.objects.of.type=타입 객체(완전히 정규화된 이름)에 렌더러 적용:
form.debugger.variables.view.user.type.renderers.class.not.found=클래스를 찾을 수 없습니다
form.debugger.variables.view.user.type.renderers.configure.renderer=렌더러 구성
form.debugger.variables.view.user.type.renderers.name=렌더러 이름:
form.debugger.variables.view.user.type.renderers.no.renderers=렌더러 없음
form.debugger.variables.view.user.type.renderers.renderer=렌더러
form.debugger.variables.view.user.type.renderers.unnamed=이름이 지정되지 않음
form.debugger.variables.view.user.type.renderers.use.default.renderer=디폴트 렌더러 사용
form.debugger.variables.view.user.type.renderers.use.following.expression=다음의 표현식 사용:
form.debugger.variables.view.user.type.renderers.use.list.of.expressions=표현식 목록 사용:
form.debugger.variables.view.user.type.renderers.variable.name='self'를 변수 이름으로 사용
form.debugger.variables.view.user.type.renderers.when.expanding.node=노드를 확장할 때:
form.debugger.variables.view.user.type.renderers.when.rendering.node=노드를 렌더링할 때:
form.documentation.entry.available.macros=사용 가능한 매크로
form.documentation.entry.insert=삽입(&I)
form.documentation.entry.module.name=모듈 이름(&M):
form.documentation.entry.url.path.pattern=URL/경로 패턴(&U):
form.edit.sdk.associate.this.virtual.environment.with.current.project=이 가상 환경을 현재 프로젝트와 연결(&A)
form.edit.sdk.html.href.remove.association=<html><a href=\"#\">연결 제거</a>
form.edit.sdk.interpreter.path=인터프리터 경로(&I):
form.edit.sdk.label.create.connection.pool.options.name=이름(&N):
form.edit.smart.indent.pasted.lines=스마트 들여쓰기로 줄 붙여넣기
form.integrated.tools.analyze.python.code.in.docstrings=docstring 내 Python 코드 분석
form.integrated.tools.default.test.runner=디폴트 테스트 러너:
form.integrated.tools.docstring.format=Docstring 형식:
form.integrated.tools.package.requirements.file=패키지 requirements 파일:
form.integrated.tools.path.to.pipenv.executable=Pipenv 실행 파일 경로:
form.integrated.tools.render.external.documentation.for.stdlib=stdlib에 대한 외부 문서 렌더링
form.integrated.tools.sphinx.working.directory=Sphinx 작업 디렉터리:
form.integrated.tools.treat.txt.files.as.restructuredtext=*.txt 파일을 reStructuredText로 취급 
form.introduce.field.initialize.in=다음에서 초기화(&I)
form.introduce.name=이름(&N):
form.move.module.members.from=원 위치:
form.move.module.members.to=대상 위치:
form.python.run.configuration.emulate.terminal.in.output.console=출력 콘솔에서 터미널 에뮬레이션
form.python.run.configuration.redirect.input.from=다음 위치의 입력 리디렉션:
form.python.run.configuration.run.with.python.console=Python 콘솔로 실행
form.remote.path.remote.project.location=원격 프로젝트 위치:
form.test.run.configuration.params=매개변수:
form.test.run.configuration.specify.nosetests.command.line.options=nosetests 명령줄 옵션 지정
form.test.run.configuration.unittest=Unittest
form.test.shared.target=타깃:
form.test.shared.test=테스트
form.tox.configuration.arguments=인수:
form.tox.configuration.environments.to.run=실행할 환경:
form.tox.configuration.runcfg.tox=tox
formatter.after.hash = '#' 뒤
formatter.after.local.imports=지역 import 문 뒤:
formatter.align.when.multiline=여러 줄일 경우 정렬
formatter.around.eq.in.keyword.argument = 키워드 인수의 = 주위
formatter.around.eq.in.named.parameter = 이름이 지정된 매개변수의 = 주위  
formatter.around.multiplicative.operators=곱셈 연산자(*, @, /, %)
formatter.around.power.operator=거듭제곱 연산자(**)
formatter.around.top.level.classes.and.function=최상위 클래스 및 함수 주위:
formatter.around.top.level.imports = 최상위 import 뒤:
formatter.before.backslash = '\' 앞
formatter.before.first.method=첫 번째 메서드 이전:
formatter.before.hash = '#' 앞
formatter.braces = 중괄호
formatter.collections.and.comprehensions=컬렉션 및 컴프리헨션
formatter.dictionary.literals=딕셔너리 리터럴
formatter.force.new.line.after.colon=콜론 뒤에 새 줄을 강제로 생성
formatter.from.import.statements="From" Import 문
formatter.from.import.statements.force.comma.if.multline=여러 줄인 경우 강제 후행 쉼표 넣기
formatter.from.import.statements.force.parentheses.if.multiline=여러 줄인 경우 강제 소괄호 넣기
formatter.hang.closing.brackets=닫는 대괄호 줄 바꿈
formatter.imports.panel.from.imports.always.split=import 문을 항상 나누기
formatter.imports.panel.from.imports.join.with.same.source=소스가 같은 import 문 합치기
formatter.imports.panel.from.imports.leave.as.is=그대로 유지
formatter.imports.panel.from.imports.structure.title="from" import의 구조
formatter.imports.panel.optimize.imports=import 문 최적화
formatter.imports.panel.sort.by.type=그룹 내에서 일반 및 "from" import를 별도로 정렬
formatter.imports.panel.sort.case.insensitively=대소문자를 가리지 않고 정렬
formatter.imports.panel.sort.imports=import 문 정렬
formatter.imports.panel.sort.names.in.from.imports="from" import의 가져온 이름 정렬
formatter.imports.panel.title=Import
formatter.left.bracket = 왼쪽 대괄호
formatter.multi.clause.statements=절이 여러 개인 문
formatter.panel.add.trailing.line.feed=파일 끝에 라인 피드 추가
formatter.panel.dict.alignment.label=딕셔너리 정렬:
formatter.panel.use.continuation.indent.for.arguments=메서드 호출 인수
formatter.panel.use.continuation.indent.for.collection.literals=컬렉션 및 컴프리헨션
formatter.panel.use.continuation.indent.for.parameters=메서드 선언 매개변수
formatter.panel.use.continuation.indent.for.title=다음에 연속 들여쓰기 사용
formatter.single.clause.statements=절이 하나인 문
framework.not.supported.for.the.selected.interpreter=선택한 인터프리터의 {0}이(가) 지원되지 않습니다
framework.support.python.sdk.combobox.label=Python SDK:
goto.superclass.choose=상위 클래스 선택
group.PyDebugger.ViewAsGroup.text=다음으로 표시
group.PyPackagingMenu.text=패키지 생성
group.advanced.settings.python=Python
inlay.hints.usages.text={0,choice, 0#0개의 사용 위치|1#1개의 사용 위치|2#{0,number}'{1,choice, |1#}' 개의 사용 위치}
inlay.hints.usages.with.dynamic.text={0,choice, 0#사용 위치 없음|1#1개의 사용 위치|2#{0,number}개의 사용 위치}({1,choice, 1#1개의 동적|2#{1,number}개의 동적})
inlay.parameters.python.hints.blacklist.explanation=<p>메서드 또는 함수에 대한 힌트를 비활성화하려면, 다음 패턴 중 하나를 사용하세요. </p><ul><li><code><b>(*info)</b></code> - 매개변수 이름이 <em>info</em>으로 끝나는 모든 단일 매개변수 함수<br></li><li><code><b>(a, b)</b></code> - 매개변수<em>a</em> 및 <em>b</em>가 있는 함수<br></li><li><code><b>*.put(self, key, value)</b></code> - 매개변수 <em>key</em> 및 <em>value</em>가 있는 모든 <em>put</em> 메서드<br></li><li><code><b>Foo.bar(self, a, b)</b></code> - 클래스 <em>Foo</em>에 속하며 매개변수 <em>a</em> 및 <em>b</em>가 있는 메서드 <em>bar</em><br></li><li><code><b>foo(\\&lt;star\\&gt;\\&lt;star\\&gt;kwargs)</b></code> - 매개변수 <em>**kwargs</em>가 있는 함수 <em>foo</em><br></li></ul><p>선택적인 매개변수를 포함한 모든 매개변수에 이름 혹은 플레이스홀더를 입력해야 합니다.<br>정규화된 메서드 이름은 클래스 또는 인터페이스 이름이 포함되어야 합니다.<br>"현재 메서드에 대한 힌트 표시 안 함" {0} 액션을 사용하여 코드를 편집할 때 패턴을 추가할 수 있습니다.</p>
inlay.parameters.python.show.class.constructor.call.parameter.names=클래스 생성자 호출
inlay.parameters.python.show.hints.for.non-literal.arguments=리터럴이 아닌 인수
install.packages.from.pipfile=Pipfile에서 패키지 설치
integrated.tools.configurable.docstrings=Docstring
integrated.tools.configurable.packaging=패키징
integrated.tools.configurable.pipenv=Pipenv
integrated.tools.configurable.restructuredtext=reStructuredText
integrated.tools.configurable.testing=테스트
line.markers.popup.title.choose.overriding.method={0}의 재정의할 메서드 선택
line.markers.popup.title.choose.subclass={0}의 하위 클래스 선택
line.markers.popup.title.choose.super.attribute={0}의 상위 속성 선택
line.markers.popup.title.choose.super.method={0}의 상위 메서드 선택
line.markers.tooltip.has.overridden.methods=재정의된 메서드 있음
line.markers.tooltip.has.subclasses=하위 클래스 있음
line.markers.tooltip.header.is.overridden.in=다음에서 재정의됨:
line.markers.tooltip.header.is.subclassed.by=하위 클래스:
line.markers.tooltip.overrides.attribute.in.class={0} 내 속성 재정의
line.markers.tooltip.overrides.method.in.class={0} 내 메서드 재정의
live.template.context.class=클래스
live.template.context.top.level=최상위
looking.for.default.interpreter=새 프로젝트의 디폴트 인터프리터 설정 검색 중
looking.for.inner.venvs=내부 가상 환경 검색 중
looking.for.previous.interpreter=이전에 사용한 인터프리터 찾기
looking.for.previous.system.interpreter=이전에 사용하던 시스템 전체 인터프리터 검색 중
looking.for.related.venv=프로젝트와 관련된 가상 환경 찾는 중
looking.for.shared.conda.environment=공유 conda 환경 검색 중
looking.for.system.interpreter=시스템 전체 인터프리터 검색 중
manage.python.packages=Python 패키지 관리
new.package.list.item.namespace.package=네임스페이스 패키지
new.package.list.item.ordinary.package=패키지
notification.action.edit.settings=설정 편집
notification.group.cython=Python 디버거 네이티브 확장 가능
notification.group.package.requirements=Python 패키지 요구 사항
notification.group.packaging=Python 패키징
notification.group.packaging.toolwindow=Python 패키지
notification.group.sciview.advertiser=Python 과학 뷰 권장
pandas.completion.type.text=데이터프레임: {0}
path.ends.with.whitespace.warning.message=경로가 공백으로 끝납니다
path.label=경로:
path.must.be.absolute.error.message=절대 경로여야 합니다
path.must.not.be.empty.error.message=경로가 공백일 수 없습니다
path.to.python.interpreter.dialog.title=Python 인터프리터 경로
postfix.template.condition.boolean.name=부울
postfix.template.condition.builtin.len.applicable.name=기본 제공 len 적용 가능
postfix.template.condition.dict.name=dict
postfix.template.condition.exception.name=exception
postfix.template.condition.iterable.name=iterable
postfix.template.condition.list.name=list
postfix.template.condition.non.none.name=비 None
postfix.template.condition.number.name=숫자
postfix.template.condition.set.name=set
postfix.template.condition.string.name=문자열
postfix.template.condition.tuple.name=tuple
postfix.template.provider.name=Python
progress.text.connecting.to.console=콘솔에 연결 중…
progress.title.debugger.connection=디버거 연결
project.cannot.be.generated=프로젝트를 생성할 수 없습니다
pure.python.project=순수 Python
py.commandline.configure=프로젝트의 Python SDK 구성
py.module.dependencies.configurable.list.title=프로젝트가 다음 프로젝트에 종속:
py.sdk.editor.python.interpreter.label.text=Python 인터프리터:
pydev.console.console.process.terminated.with.error=콘솔 프로세스가 오류로 종료되었습니다\n\
{0}{1}
pydev.console.console.process.terminated.with.exit.code=종료 코드 {0}(으)로 콘솔 프로세스가 종료되었습니다. 출력: {1}
pydev.console.couldnt.connect.to.console.process=콘솔 프로세스에 연결할 수 없습니다.
pydev.console.couldnt.read.integer.value.from.stream=스트림에서 정수 값을 읽을 수 없습니다
pydev.console.debugger.connected=\n\
디버거가 연결되었습니다.\n\

pydev.console.python.interpreter.is.not.selected=Python 인터프리터가 선택되지 않았습니다. 먼저 Python 인터프리터를 설정하세요.
pydev.console.runner.error.running.console=콘솔 실행 중 오류가 발생했습니다
pydev.console.runner.python.console.debugger=Python 콘솔 디버거
pydev.console.runner.settings=설정
pydev.console.runner.unknown.error=알 수 없는 오류
python.add.sdk.conda.detecting=conda 탐지 중...
python.add.sdk.conda.executable.path.is.empty=Conda 실행 파일 경로가 비어 있습니다
python.add.sdk.error=오류
python.add.sdk.panel.conda.create.new=새 환경 생성
python.add.sdk.panel.conda.env.name=환경 이름:
python.add.sdk.panel.conda.use.existing=기존 환경 사용
python.add.sdk.panel.load.envs=환경 로드
python.add.sdk.panel.name.conda.environment=Conda 환경
python.add.sdk.panel.name.existing.environment=기존 환경
python.add.sdk.panel.name.new.environment=새 환경
python.add.sdk.panel.name.new.environment.using=다음을 사용한 새 환경
python.add.sdk.panel.name.new.project.interpreter=새 프로젝트 인터프리터
python.add.sdk.panel.name.pipenv.environment=Pipenv 환경
python.add.sdk.panel.name.previously.configured.interpreter=이전에 구성된 인터프리터
python.add.sdk.panel.name.system.interpreter=시스템 인터프리터
python.add.sdk.panel.name.virtualenv.environment=Virtualenv 환경
python.add.sdk.panel.path.to.conda.field=Conda 실행 파일
python.add.sdk.panel.wait=기다려주세요...
python.add.sdk.python.version=Python 버전:
python.call.graph=호출 그래프
python.cldt.checking=명령줄 개발자 도구 설치를 위해 확인 중
python.cldt.installing.indicator=macOS가 명령줄 개발자 도구를 설치 중입니다
python.cldt.installing.skip=이 과정을 건너뛰고 다음에 인터프리터 구성
python.cldt.installing.suggestion=명령줄 개발자 도구로 Python을 설치하세요
python.cldt.installing.title=Python 설치 및 인터프리터 설정을 기다리는 중
python.cldt.required=선택된 Python은 명령줄 개발자 도구가 필요합니다. {0}
python.colors.braces.and.operators.braces=괄호 및 연산자//중괄호
python.colors.braces.and.operators.brackets=괄호 및 연산자//대괄호
python.colors.braces.and.operators.comma=괄호 및 연산자//쉼표
python.colors.braces.and.operators.dot=괄호 및 연산자//마침표
python.colors.braces.and.operators.operation.sign=괄호 및 연산자//연산자 기호
python.colors.braces.and.operators.parentheses=괄호 및 연산자//소괄호
python.colors.built.in.name=기본 제공 이름
python.colors.class.definition=클래스 정의
python.colors.decorator=데코레이터
python.colors.docstring.tag=Docstring//태그
python.colors.docstring.text=Docstring//텍스트
python.colors.functions.function.call=함수//함수 호출
python.colors.functions.function.definition=함수//함수 정의
python.colors.functions.method.call=함수//메서드 호출
python.colors.functions.nested.function.definition=함수//중첩된 함수 정의
python.colors.keyword=키워드
python.colors.keyword.argument=키워드 인수
python.colors.line.comment=줄 주석
python.colors.local.variables=로컬 변수
python.colors.number=숫자
python.colors.parameters.parameter=매개변수//매개변수
python.colors.parameters.self.parameter=매개변수//'self' 매개변수
python.colors.python=Python
python.colors.special.names.definition=특수 이름//정의
python.colors.special.names.usage=특수 이름//사용 위치
python.colors.string.binary.bytes=문자열//바이너리(바이트)
python.colors.string.escape.sequence.invalid=문자열//이스케이프 시퀀스//유효하지 않음
python.colors.string.escape.sequence.valid=문자열//이스케이프 시퀀스//유효함
python.colors.string.f.string.expression.braces=문자열//f-문자열//표현식 중괄호
python.colors.string.f.string.format.specifier.start=문자열//f-string//형식 지정자 시작
python.colors.string.f.string.type.conversion=문자열//f-string//타입 변환
python.colors.string.text.unicode=문자열//텍스트(유니코드)
python.colors.type.annotation=타입 어노테이션
python.colors.type.parameters=타입 매개변수
python.compatibility.inspection.advertiser.notifications.group.title=Python 호환성 검사 권장
python.compatibility.inspection.advertiser.notifications.title=Python 버전 호환성
python.compatibility.inspection.advertiser.using.future.imports.warning.message=소스 코드에 __future__ import가 포함되어 있습니다.<br/>코드 호환성 검사를 활성화하시겠어요?<br/><a href="#yes">예</a>\\&nbsp;\\&nbsp;<a href="#no">아니요</a>
python.compatibility.inspection.advertiser.using.six.warning.message=소스 코드가 'six' 패키지를 가져옵니다.<br/>코드 호환성 검사를 활성화하시겠어요?<br/><a href="#yes">예</a>\\&nbsp;\\&nbsp;<a href="#no">아니요</a>
python.compatibility.inspection.advertiser.version.stale.python3.version.warning.message=코드 호환성 검사는 최대 Python {0} 버전에서 구성됩니다.<br/>Python {1}에서 활성화하시겠어요?<br/><a href="#yes">예</a>\\&nbsp;\\&nbsp;<a href="#no">아니요</a>
python.concurrency.visualizer.scroll.end=끝으로 스크롤
python.configuration.choose.target.to.run=실행 타깃 선택
python.console=Python 콘솔
python.console.command.queue.add.title={0} 명령어 큐
python.console.command.queue.got.it.tooltip.id=python.console.command.queue.show
python.console.command.queue.got.it.tooltip.text=실행을 위해 대기 중인 명령어가 명령어 큐 팝업에 나열됩니다
python.console.command.queue.got.it.tooltip.title=콘솔 명령어 큐
python.console.command.queue.show.action.description=명령어 큐가 있는 창 표시
python.console.command.queue.show.action.text=명령어 큐 표시
python.console.history.root=Python 콘솔
python.console.not.supported={0} 인터프리터의 Python 콘솔은 지원되지 않습니다
python.console.rename.message=새 콘솔 이름 입력:
python.console.run.anything.provider=Python 콘솔을 실행
python.console.toolbar.action.available.non.interactive=이 액션은 비대화형 셸에 사용할 수 없습니다 
python.debug.remote.name=PyRemoteDebug
python.debugger.attaching=디버거 연결 중
python.debugger.attaching.to.process.with.pid=PID={0}(으)로 프로세스에 연결 중
python.debugger.collection.signatures.deleted=수집한 시그니처가 삭제되었습니다
python.debugger.nothing.to.delete=삭제할 항목이 없음
python.debugger.qt.backend.auto=자동
python.debugger.settings.connecting.to.debugger=디버거에 연결 중
python.debugger.settings.waiting.for.connection=연결 대기 중…
python.execute.selection.action.execute.line.in.console=Python 콘솔에서 줄 실행
python.execute.selection.action.execute.selection.in.console=Python 콘솔에서 선택 실행
python.facet.name=Python
python.find.module.usages.dialog.label.prefix.module=모듈
python.find.module.usages.dialog.label.prefix.package=패키지
python.folding.options.title=Python
python.input.file.doesn.t.exist=입력 파일이 없습니다
python.install.framework.checking.is.installed={0} 설치 여부 확인 중…
python.install.framework.ensure.installed={0} 설치 여부 확인 중
python.install.framework.installing={0} 설치 중…
python.interpreter.banner.slogan=Python 인터프리터 ''{0}''
python.interpreter.label=Python 인터프리터:
python.interpreter.local.configurable.remove.association=연결 제거
python.interpreters.add.interpreter.action.text=새 인터프리터 추가
python.interpreters.remove.interpreter.action.text=인터프리터 제거
python.interpreters.rename.interpreter.action.text=이름 변경
python.interpreters.rename.interpreter.dialog.message=새 이름:
python.interpreters.rename.interpreter.dialog.title=Python 인터프리터 이름 변경
python.interpreters.show.interpreter.paths.text=인터프리터 경로 표시
python.introduce.variable.refactoring.name=변수 삽입
python.language.configure.label=Python 구성
python.language.run.label=Python 애플리케이션 실행
python.local.attach.group.name=Python
python.long.collection.literals=긴 컬렉션 리터럴
python.long.string.literals=긴 문자열 리터럴
python.module.description=Python 모듈은 <b>Python</b> 애플리케이션 개발에 사용됩니다.
python.module.description.extended=지원되는 기술로는 <b>Django, Google App Engine, Jinja2</b> 등이 있습니다.
python.module.name=Python 모듈
python.namespace.package.folder=네임스페이스 패키지
python.namespace.packages.description=네임스페이스 패키지 폴더
python.namespace.packages.name=네임스페이스 패키지
python.new.project.error.solution.another.sdk=다른 SDK 선택
python.new.project.install.failed.title={0} 설치 실패
python.new.project.more.settings=추가 설정(&E)
python.new.project.remote.path.not.provided=원격 경로가 제공되지 않았습니다
python.new.project.synchronization.not.configured.dialog.message=로컬/원격 동기화가 올바르게 구성되지 않았습니다.\n\
{0}\n\
로컬 프로젝트 및 원격 프로젝트를 수동으로 동기화해야 할 수도 있습니다.\n\
\n\
 계속 진행하시겠어요? \n\
\n\
잘못 구성된 매핑을 유지하려면 ''예'', 수동 구성 프로세스를 시작하려면 ''아니오''라고 답하세요.
python.new.project.synchronization.not.configured.dialog.title=동기화가 구성되지 않음
python.package.and.packaging.tools.installation.notification.message=Python 패키징 도구 및 {0}이(가) 선택한 인터프리터에 설치됩니다
python.package.installation.notification.message={0}이(가) 선택한 인터프리터에 설치됩니다
python.packages.dictionary.name=Python 패키지 사전
python.packages.no.details.in.repo=<html><head></head><body><p class="empty_description">{0}에서 패키지 설명을 읽을 수 없습니다.</p></body></html>
python.packaging.adding.conda.channel=Conda 채널 추가 중
python.packaging.button.install.package=패키지 설치
python.packaging.choose.packages.to.install=설치할 패키지 선택
python.packaging.collapse.options=<< 접기 옵션
python.packaging.command.line=명령줄
python.packaging.could.not.parse.response=<html><head></head><body><p class="empty_description">저장소 {1}에서 패키지 {0}의 응답을 분석할 수 없습니다</p></body></html>
python.packaging.create.setup.author=작성자
python.packaging.create.setup.author.email=작성자 이메일
python.packaging.create.setup.description=설명
python.packaging.create.setup.license=라이선스
python.packaging.create.setup.package.name=패키지 이름
python.packaging.create.setup.py=setup.py 생성
python.packaging.create.setup.url=URL
python.packaging.create.setup.version=버전
python.packaging.dialog.description.attempt.to.uninstall.for.one.dependent.package={1} {2, choice, 1#패키지|2#패키지}에 필요한 {0} 패키지를 제거하려고 합니다.\n\
\n\
계속하시겠어요?
python.packaging.dialog.description.attempt.to.uninstall.for.several.dependent.packages=다른 패키지가 필요한 패키지를 제거하려 합니다.\n\
\n\
{0}\n\
\n\
계속하시겠어요?
python.packaging.dialog.description.attempt.to.uninstall.for.several.dependent.packages.single.package.description={0} -> {1}
python.packaging.enter.setup.py.task=setup.py 작업 이름 입력
python.packaging.expand.options=펼치기 옵션 >>
python.packaging.failed.to.install.packages.title=패키지 설치 실패
python.packaging.failed.to.install.packaging.tools.title=Python 패키징 도구를 설치하지 못했습니다
python.packaging.failed.to.run.task=작업을 실행하지 못했습니다. {0}
python.packaging.install=설치
python.packaging.install.packaging.tools=패키징 도구 설치
python.packaging.install.progress=패키지 {0} 설치 중
python.packaging.installing.packages=패키지 설치 중…
python.packaging.installing.packaging.tools=패키징 도구 설치 중…
python.packaging.interpreter.widget.manage.packages=패키지 관리…
python.packaging.list.progress=설치된 python 패키지를 읽는 중
python.packaging.loading.packages.progress.text=패키지 로드 중…
python.packaging.no.tasks.found=작업을 찾을 수 없습니다
python.packaging.notification.deleted=패키지 {0}이(가) 삭제되었습니다
python.packaging.notification.description.details.link=세부 정보…
python.packaging.notification.description.installed.all.requirements=모든 requirements가 설치되었습니다
python.packaging.notification.description.installed.packages=설치된 패키지: {0}
python.packaging.notification.description.installed.python.packaging.tools=설치된 Python 패키징 도구
python.packaging.notification.description.uninstalled.packages=제거된 패키지: {0}
python.packaging.notification.installed=패키지 {0}이(가) 설치되었습니다
python.packaging.notification.title.error.occurred={0}: 오류 발생.
python.packaging.notification.title.install.packages.failed=패키지 설치 실패
python.packaging.notification.title.packages.installed.successfully=패키지 설치 완료
python.packaging.notification.title.packages.uninstalled.successfully=패키지 제거 완료
python.packaging.notification.title.uninstall.packages.failed=패키지 제거 실패
python.packaging.notification.update.failed={0}을(를) 업데이트하지 못했습니다
python.packaging.notification.updated=패키지 {0}이(가) 버전 {1}(으)로 업데이트되었습니다
python.packaging.open.toolwindow.link=도구 창으로 이동
python.packaging.operation.failed.title=패키징 작업 실패
python.packaging.progress.text.installing.specific.package=패키지 ''{0}'' 설치 중…
python.packaging.progress.title.installing.packages=패키지 설치 중
python.packaging.progress.title.uninstalling.packages=패키지 제거 중
python.packaging.removing.conda.channel=Conda 채널 제거 중
python.packaging.repository.form.authorization=허가:
python.packaging.repository.form.authorization.basic=기본 HTTP
python.packaging.repository.form.authorization.none=없음
python.packaging.repository.form.default.name=패키지 저장소
python.packaging.repository.form.login=로그인:
python.packaging.repository.form.password=비밀번호:
python.packaging.repository.form.url=저장소 URL:
python.packaging.repository.manage.dialog.name=Python 패키지 저장소
python.packaging.run.setup.py.task=setup.py 작업 실행…
python.packaging.run.setup.task.0=설치 작업 {0} 실행
python.packaging.toolwindow.advertisement=Python 패키지 도구 창에서 새로 디자인된 패키지 지원을 사용해 보세요.
python.packaging.uninstall.progress=패키지 {0} 제거 중
python.packaging.update.progress=패키지 {0} 업데이트 중
python.packaging.warning=경고
python.project.view.py.skeletons=바이너리 스켈레톤
python.project.view.remote.libraries=원격 라이브러리
python.project.view.typeshed.stubs=Typeshed 스텁
python.project.view.user.skeletons.node=확장 정의
python.provide.a.qualified.name.of.a.module=모듈의 정규화된 이름을 제공하세요
python.pyproject.install.package=패키지 {0} 설치
python.pyproject.install.self.as.editable='pip install -e .' 실행
python.pyproject.install.self.as.editable.progress='pip install -e .' 실행 중
python.pyproject.install.self.error='pip install -e .' 실행 중 오류
python.pyproject.package.completion.tail=Python 패키지
python.pyproject.package.not.installed=패키지 {0}이(가) 설치되어 있지 않습니다
python.python.namespace.package.folder=Python 네임스페이스 패키지
python.remote.interpreter.can.t.create.project.this.type=원격 인터프리터에서 이 타입의 프로젝트를 생성할 수 없습니다. 로컬 인터프리터를 선택하세요.
python.remote.process.starter.can.t.run.remote.interpreter=원격 Python 인터프리터를 실행할 수 없습니다. {0}
python.rename.processor.override.message=클래스 {1}의 메서드 {0}이(가)\n\
클래스 {2}의 메서드를 재정의합니다.\n\
기본 메서드 이름을 변경하시겠어요?
python.rename.processor.property=접근자 함수인 ''{1}'' 대신 프로퍼티 ''{0}''의 이름을 변경하시겠어요?
python.requirements.action.name=Python requirements 동기화
python.requirements.analyzing.imports.title=프로젝트 내 가져오기 분석
python.requirements.balloon=Python requirements 동기화
python.requirements.error.ends.with.slash=requirements를 분석하는 동안 오류가 발생했습니다. 파일이 '/' 심볼로 끝납니다.
python.requirements.error.no.interpreter=requirements를 동기화하는 데 필요한 구성된 인터프리터
python.requirements.info.file.ref.dropped=기본 파일의 일부 requirements가 업데이트되지 않았습니다. {0}
python.requirements.keep.matching.specifier=현재 버전과 일치하는 경우 기존 버전 지정자 유지
python.requirements.modify.base.files=기본 파일(-r 또는 --requirement으로 정의됨) 수정
python.requirements.remove.unused=사용하지 않는 requirements 제거
python.requirements.version.label=requirements의 버전:
python.requirements.version.separator.compatible=호환 버전
python.requirements.version.separator.gte=더 크거나 같음
python.requirements.version.separator.no.version=버전 지정 안 함
python.requirements.version.separator.strong.eq=강력한 상등
python.requirements.warning.unhandled.lines=requirements 파일의 항목을 분석할 수 없습니다. {0}
python.run.anything.file.provider=Python 파일 실행
python.run.anything.pip.provider=pip 명령어 실행
python.run.configuration=Python 실행 구성
python.run.configuration.fragments.chooser.hint=Python 스크립트 또는 모듈 실행
python.run.configuration.fragments.content.roots=콘텐츠 루트를 PYTHONPATH에 추가
python.run.configuration.fragments.content.roots.hint=콘텐츠 루트를 PYTHONPATH에 추가
python.run.configuration.fragments.emulate.terminal=출력 콘솔에서 터미널을 에뮬레이션 처리
python.run.configuration.fragments.emulate.terminal.hint=출력 콘솔에서 터미널을 에뮬레이션 처리
python.run.configuration.fragments.interpreter.field=Python 인터프리터
python.run.configuration.fragments.interpreter.options=인터프리터 옵션
python.run.configuration.fragments.interpreter.options.hint=Python 인터프리터 옵션
python.run.configuration.fragments.module.name.hint=모듈 이름
python.run.configuration.fragments.plugin.sdk.chooser.hint=Python 인터프리터
python.run.configuration.fragments.plugin.sdk.of.module=모듈의 SDK 사용
python.run.configuration.fragments.plugin.sdk.of.module.hint=모듈 선택
python.run.configuration.fragments.plugin.specified.interpreter=지정된 인터프리터 사용
python.run.configuration.fragments.plugin.specified.interpreter.hint=Python 인터프리터 선택
python.run.configuration.fragments.project=프로젝트
python.run.configuration.fragments.project.hint=프로젝트 선택
python.run.configuration.fragments.python.group=Python
python.run.configuration.fragments.run.with.python.console=Python 콘솔로 실행
python.run.configuration.fragments.run.with.python.console.hint=Python 콘솔에서 실행 구성 실행
python.run.configuration.fragments.script.parameters=매개변수
python.run.configuration.fragments.script.parameters.hint=스크립트 매개변수
python.run.configuration.fragments.script.path.hint=Python 스크립트 경로
python.run.configuration.fragments.source.roots=소스 루트를 PYTHONPATH에 추가
python.run.configuration.fragments.source.roots.hint=소스 루트를 PYTHONPATH에 추가
python.run.python=Python
python.run.select.script=스크립트 선택
python.sdk.action.add.interpreter.based.on.target.text=위치: {0}...
python.sdk.action.add.local.interpreter.text=로컬 인터프리터 추가...
python.sdk.action.add.new.interpreter.text=새 인터프리터 추가
python.sdk.add.python.interpreter.title=Python 인터프리터 추가
python.sdk.admin.permissions.needed.consider.creating.venv=<html><strong>참고:</strong> 이 인터프리터의 패키지를 설치하려면 관리자 권한이 필요합니다. 대신 프로젝트별 가상 환경을 생성하는 방안을 검토하세요.</html>
python.sdk.admin.permissions.needed.consider.creating.venv.content=<strong>참고</strong>: 이 인터프리터의 패키지를 설치하려면 관리자 권한이 필요합니다. 대신 프로젝트별 가상 환경을 생성하는 방안을 검토하세요.
python.sdk.can.t.obtain.python.version=Python 버전을 가져올 수 없습니다
python.sdk.cannot.evaluate.sdk.version.error.message=SDK 버전을 평가할 수 없습니다
python.sdk.cannot.execute={0}을(를) 실행할 수 없습니다
python.sdk.cannot.setup.sdk=Python SDK를 {0}에 \n\
설정할 수 없습니다. \n\
SDK가 잘못된 것 같습니다.
python.sdk.choose.valid.interpreter=올바른 Python 인터프리터를 선택하세요
python.sdk.common.options.environment=환경
python.sdk.conda.cant.create.body=오류: ''{0}''
python.sdk.conda.cant.create.title=Conda가 새 환경을 생성할 수 없음
python.sdk.conda.env=환경
python.sdk.conda.getting.list.envs=conda 환경 목록을 가져오는 중
python.sdk.conda.no.exec=Conda 실행 파일을 찾을 수 없습니다
python.sdk.conda.path=Conda 실행 파일:
python.sdk.conda.problem.env.empty.invalid=환경 이름이 비어 있거나 잘못되었습니다
python.sdk.conda.problem.env.name.used=이 이름은 이미 사용되었습니다. 다른 이름을 선택하세요.
python.sdk.conda.problem.running=conda 실행 문제
python.sdk.configurable.name=Python SDK
python.sdk.configuration.tab.title=클래스
python.sdk.consider.installing.python.manually=https://www.python.org에서 Python을 수동으로 설치하는 방안을 검토하세요.
python.sdk.creating.conda.environment.sentence=Conda 환경 생성
python.sdk.creating.conda.environment.title=Conda 환경 생성 중
python.sdk.dialog.message.cannot.find.script.file.please.run.poetry.install.before.executing.scripts=스크립트 파일을 찾을 수 없습니다\n\
스크립트 실행 전에 'poetry install'을 실행하세요
python.sdk.dialog.message.creating.virtual.environments.based.on.poetry.environments.not.supported=가상 환경 생성은 Poetry 환경에서 지원되지 않습니다
python.sdk.dialog.title.poetry.scripts=Poetry 스크립트
python.sdk.dialog.title.setting.up.poetry.environment=Poetry 환경 설정
python.sdk.directory.macro.description=프로젝트에 대해 선택한 Python 인터프리터를 포함하는 디렉터리
python.sdk.directory.not.found=디렉터리 {0}을(를) 찾을 수 없습니다
python.sdk.downloading={0} 다운로드 중
python.sdk.empty.version.string=Python 인터프리터가 빈 출력을 버전 문자열로 반환했습니다
python.sdk.environment.yml.chooser=environment.yml 선택
python.sdk.environment.yml.label=environment.yml
python.sdk.error.invalid.interpreter.name=잘못된 Python 인터프리터 이름 ''{0}''입니다!
python.sdk.executable.not.found.header=Python 실행 파일을 찾을 수 없습니다. 다음 옵션 중 하나를 선택하세요.
python.sdk.executable.not.found.option.download.and.install={0}을(를) 클릭하여 python.org({1})에서 Python을 다운로드하고 설치하세요
python.sdk.executable.not.found.option.install.or.brew=python.org 혹은 Homebrew를 통해 수동으로 Python 설치
python.sdk.executable.not.found.option.install.with.cldt=명령줄 개발자 도구로 Python을 설치하려면 {0}을(를) 클릭하세요. {1}
python.sdk.executable.not.found.option.specify.path={0}을(를) 클릭하여 파일 시스템 내 {1}에 대한 경로를 지정하세요
python.sdk.failed.to.create.interpreter.title=인터프리터 생성 실패
python.sdk.failed.to.install.exit.code=종료 코드 {0}
python.sdk.failed.to.install.timed.out=시간 초과됨
python.sdk.failed.to.install.title={0} 설치 실패
python.sdk.file.not.found=파일 {0}을(를) 찾을 수 없습니다
python.sdk.finish=완료
python.sdk.getting.remote.interpreter.version=원격 인터프리터 버전 받기
python.sdk.inspection.message.poetry.interpreter.associated.with.another.project=Poetry 인터프리터가 다른 {0}와(과) 연결되어 있습니다. {1}
python.sdk.inspection.message.poetry.interpreter.not.associated.with.any.project=Poetry 인터프리터가 어느 {0}와(과)도 연결되어 있지 않습니다
python.sdk.inspection.message.version.outdated.latest=''{0}'' 버전 {1}은(는) 오래된 버전입니다(최신: {2})
python.sdk.install.requirements.from.pipenv.lock=Pipfile.lock에서 requirements 설치
python.sdk.installation.has.been.cancelled.title={0} 설치가 취소되었습니다
python.sdk.installing={0} 설치 중
python.sdk.installing.windows.warning=Windows에서 Python을 설치하려면 사용자의 승인이 필요할 수 있습니다. 작업 표시줄을 확인하세요.
python.sdk.intention.family.name.install.requirements.from.poetry.lock=poetry.lock에서 requirements 설치
python.sdk.interpreter.executable.path.title=Python 인터프리터 실행 파일 경로
python.sdk.invalid.python.sdk=잘못된 Python SDK
python.sdk.new.environment.kind=새 {0} 환경
python.sdk.new.project.environment=환경:
python.sdk.new.project.environment.type=환경 타입:
python.sdk.next=다음
python.sdk.no.interpreter.configured.warning=프로젝트에 대해 구성된 Python 인터프리터가 없습니다
python.sdk.no.interpreter.selection=선택된 Python 인터프리터가 없습니다
python.sdk.non.zero.exit.code=Python 인터프리터 프로세스가 0이 아닌 종료 코드 {0}(으)로 종료되었습니다
python.sdk.pipenv.associated.module=연결된 모듈:
python.sdk.pipenv.associated.project=연결된 프로젝트:
python.sdk.pipenv.executable=Pipenv 실행 파일:
python.sdk.pipenv.executable.not.found=Pipenv 실행 파일을 찾을 수 없습니다
python.sdk.pipenv.execution.exception.error.running.pipenv.message=Pipenv 실행 오류
python.sdk.pipenv.execution.exception.no.pipenv.message=Pipenv를 찾을 수 없습니다
python.sdk.pipenv.execution.exception.no.project.message=해당 Pipenv 환경과 관련된 프로젝트를 찾을 수 없습니다 
python.sdk.pipenv.has.been.selected=Pipenv 인터프리터가 이미 추가되었으므로 인터프리터 목록에서 ''{0}''을(를) 선택하세요
python.sdk.pipenv.pip.file.lock.not.found=Podfile.lock을 찾을 수 없습니다
python.sdk.pipenv.pip.file.lock.out.of.date=Podfile.lock이 최신 상태가 아닙니다
python.sdk.pipenv.pip.file.notification.content=<a href='#lock'>pipenv lock</a> 또는 <a href='#update'>pipenv update</a>를 실행하세요
python.sdk.pipenv.pip.file.notification.locking=Pipfile 잠그는 중
python.sdk.pipenv.pip.file.notification.updating=Pipenv 환경 업데이트 중
python.sdk.pipenv.pip.file.watcher=Pipfile 감시기
python.sdk.pipenv.quickfix.fix.pipenv.name=Pipenv 인터프리터 수정
python.sdk.pipenv.quickfix.use.pipenv.name=Pipenv 인터프리터 사용
python.sdk.pipenv.select.executable.title=Pipenv 실행 파일 경로 선택
python.sdk.poetry.action.run.script.text=''{0}'' 실행
python.sdk.poetry.associated.module=연결된 모듈:
python.sdk.poetry.associated.project=연결된 프로젝트:
python.sdk.poetry.dialog.message.poetry.interpreter.has.been.already.added=Poetry 인터프리터가 이미 추가되었습니다. ''{0}''을(를) 선택하세요
python.sdk.poetry.environment.panel.title=Poetry 환경
python.sdk.poetry.executable=Poetry 실행 파일:
python.sdk.poetry.executable.not.found=Poetry 실행 파일을 찾을 수 없습니다
python.sdk.poetry.execution.exception.error.running.poetry.message=Poetry 실행 중 오류가 발생했습니다
python.sdk.poetry.execution.exception.no.poetry.message=Poetry를 찾을 수 없습니다
python.sdk.poetry.execution.exception.no.project.message=이 Poetry 환경과 관련된 프로젝트를 찾을 수 없습니다
python.sdk.poetry.install.packages.from.toml.checkbox.text=pyproject.toml에서 패키지 설치
python.sdk.poetry.pip.file.lock.not.found=poetry.lock을 찾을 수 없습니다
python.sdk.poetry.pip.file.lock.out.of.date=poetry.lock이 최신 상태가 아닙니다
python.sdk.poetry.pip.file.notification.content=<a href='#lock'>poetry lock</a> 또는 <a href='#update'>poetry update</a>를 실행합니다
python.sdk.poetry.pip.file.notification.content.without.updating=<a href='#lock'>poetry lock</a>, <a href='#noupdate'>poetry lock --no-update</a> 또는 <a href='#update'>poetry update</a>를 실행합니다
python.sdk.poetry.pip.file.notification.locking=poetry.lock 잠금 중
python.sdk.poetry.pip.file.notification.locking.without.updating=업데이트 없이 poetry.lock 잠금 중
python.sdk.poetry.pip.file.notification.updating=Poetry 환경 업데이트 중
python.sdk.poetry.pip.file.watcher=pyproject.toml 감시기
python.sdk.poetry.quickfix.fix.pipenv.name=Poetry 인터프리터 수정
python.sdk.poetry.quickfix.use.pipenv.name=Poetry 인터프리터 사용
python.sdk.poetry.select.executable.title=Poetry 실행 파일 경로 선택
python.sdk.popup.add.interpreter=인터프리터 추가…
python.sdk.popup.interpreter.settings=인터프리터 설정…
python.sdk.previous=이전
python.sdk.python.interpreter.title.0=Python 인터프리터: {0}
python.sdk.rendering.project.default=프로젝트 디폴트
python.sdk.rendering.project.default.0=프로젝트 디폴트({0})
python.sdk.running={0} 실행
python.sdk.scanning.installed.packages=설치된 패키지 검사 중…
python.sdk.select.conda.path.title=Conda 실행 파일 경로 선택
python.sdk.select.location.for.conda.title=Conda 환경 위치 선택
python.sdk.setting.up.pipenv.sentence=pipenv 환경 설정 중
python.sdk.setting.up.pipenv.title=Pipenv 환경 설정
python.sdk.some.installed.python.components.might.get.inconsistent.after.cancellation=설치된 일부 Python 구성 요소가 취소 후 일관되지 않을 수 있습니다.
python.sdk.switch.to={0}(으)로 전환
python.sdk.there.is.no.interpreter=인터프리터 없음
python.sdk.try.to.install.python.manually=https://www.python.org에서 Python을 수동으로 설치하세요.
python.sdk.unpacking.pre.generated.skeletons=미리 생성된 스켈레톤 패킹 해제 중…
python.sdk.updater.notifications.group.title=Python 인터프리터 업데이트 실패
python.sdk.updating.skeletons=스켈레톤 업데이트 중…
python.sequential.comments=연속 주석
python.symbol.chooser.dialog.title=심볼 선택
python.task.cannot.find.python.interpreter.for.selected.module=선택한 모듈의 Python 인터프리터를 찾을 수 없음
python.template.language.none=없음
python.template.select.file.type=파일 타입 선택
python.testing.cant.find.where.declared={0}이(가) 선언된 파일을 찾을 수 없습니다. 파일이 프로젝트 루트에 있는지 확인하세요
python.testing.cant.get.importable.name={0}의 가져오기 가능한 이름을 얻을 수 없습니다. 프로젝트에 있는 Python 파일인가요?
python.testing.cant.resolve={0}을(를) 해결할 수 없습니다. 구성을 제거하고 다시 생성해보세요
python.testing.pattern.can.only.be.used=패턴은 폴더 내 파일을 일치시키는 데만 사용할 수 있습니다. 패턴을 파일에 사용할 수 없습니다
python.testing.provide.qualified.name=함수, 클래스 또는 모듈의 정규화된 이름을 제공하세요
python.testing.target.not.provided=타깃이 제공되지 않았습니다
python.toolwindow.packages.add.package.action=패키지 추가
python.toolwindow.packages.add.package.as.editable=편집 가능한 버전(-e)으로 설치
python.toolwindow.packages.add.package.dialog.title=패키지 설치
python.toolwindow.packages.add.package.from.disc=디스크에서
python.toolwindow.packages.add.package.from.vcs=버전 관리에서
python.toolwindow.packages.add.package.path=경로:
python.toolwindow.packages.add.package.path.selector=파일 또는 디렉터리 선택
python.toolwindow.packages.add.package.vcs.bzr=Bazaar
python.toolwindow.packages.add.package.vcs.git=Git
python.toolwindow.packages.add.package.vcs.hg=Mercurial
python.toolwindow.packages.add.package.vcs.svn=Subversion
python.toolwindow.packages.converting.description.progress=패키지 설명을 읽는 중
python.toolwindow.packages.custom.repo.invalid={0} (인증 실패)
python.toolwindow.packages.custom.repo.searched={0}({1}개 발견)
python.toolwindow.packages.delete.package=패키지 삭제
python.toolwindow.packages.description.panel.placeholder=문서를 보려면 패키지를 선택하세요
python.toolwindow.packages.documentation.link=문서
python.toolwindow.packages.documentation.local.interpreter=패키지 문서를 표시하려면 최소한 하나의 로컬 인터프리터가 PyCharm에 필요합니다.
python.toolwindow.packages.install.link=설치
python.toolwindow.packages.installed.label=설치됨
python.toolwindow.packages.latest.version.label=최신
python.toolwindow.packages.load.more=… 그 외 {0}개 항목. 더 표시하려면 두 번 클릭하세요.
python.toolwindow.packages.manage.repositories.action=저장소 관리
python.toolwindow.packages.no.description.placeholder=<html><head></head><body><p class="empty_description">패키지 작성자가 설명을 제공하지 않았습니다.</p></body></html>
python.toolwindow.packages.no.interpreter.text=인터프리터를 선택하여 설치된 패키지 확인
python.toolwindow.packages.reload.repositories.action=모든 저장소 다시 로드
python.toolwindow.packages.rst.parsing.failed=설명을 파싱하지 못했습니다
python.toolwindow.packages.search.text.placeholder=더 많은 패키지 검색
python.type.annotations=타입 어노테이션
python.unknown.project.synchronizer.this.interpreter.type.does.not.support.remote.project.creation=이 인터프리터 타입이 원격 프로젝트 생성을 지원하지 않습니다
python.unmark.as.namespace.package=네임스페이스 패키지 표시를 해제
python.unmark.as.python.namespace.package=Python 네임스페이스 패키지 표시 해제
python.unresolved.reference.inspection.install.package=패키지 {0} 설치
python.vagrant.refresh.skeletons=Vagrant 실행 및 스켈레톤 새로고침
refactoring.change.signature.dialog.default.value.checkbox=시그니처에서 디폴트 값 사용:
refactoring.change.signature.dialog.name.label=이름:
refactoring.change.signature.dialog.validation.default.missing=디폴트 값이 없습니다
refactoring.change.signature.dialog.validation.function.name=잘못된 함수 이름
refactoring.change.signature.dialog.validation.multiple.double.star=여러 ** 인수가 허용되지 않습니다
refactoring.change.signature.dialog.validation.multiple.star=여러 * 인수가 허용되지 않습니다
refactoring.change.signature.dialog.validation.name.defined=이름이 범위 안에 이미 정의되어 있습니다
refactoring.change.signature.dialog.validation.parameter.missing=매개변수 이름이 없습니다
refactoring.change.signature.dialog.validation.parameter.name=잘못된 매개변수 이름
refactoring.change.signature.error.lambda.call=캐럿이 람다 호출에 있습니다
refactoring.change.signature.error.not.under.source.root=함수가 소스 루트 아래에 없습니다
refactoring.change.signature.error.tuple.parameters=함수에 튜플 매개변수가 있습니다
refactoring.change.signature.error.wrong.caret.position.method.name=캐럿이 리팩터링할 메서드 이름에 있어야 합니다
refactoring.change.signature.find.usages.of.base.class=클래스 {1}의 메서드 {0}이(가) \n\
클래스 {2}의 메서드를 재정의합니다.\n\
기본 메서드를 리팩터링하시겠어요?
refactoring.change.signature.suggested.callSite.value=호출 사이트의 값
refactoring.change.signature.suggested.callSite.value.optional=호출 사이트의 선택 값
refactoring.change.signature.usage.view.declarations.header=리팩터링할 함수
refactoring.convert.package.to.module.error.not.empty.package=패키지 "{0}"이(가) 비어 있지 않습니다
refactoring.error.directory.exists=디렉터리 "{0}"이(가) 이미 있습니다
refactoring.error.file.exists=파일 "{0}"이(가) 이미 있습니다
refactoring.extract.parameter.dialog.title=매개변수 추출
refactoring.extract.super.class.no.members.allowed=추출할 수 있는 멤버가 없습니다
refactoring.extract.super.name.0.must.be.ident=이름 ''{0}''이(가) 잘못되었습니다. 올바른 Python 식별자여야 합니다
refactoring.extract.super.target.class.already.exists=클래스 ''{0}''이(가) 이 모듈에 이미 있습니다
refactoring.extract.super.target.path.outside.roots=타깃 디렉터리가 프로젝트 외부에 있습니다. 콘텐츠 루트 내부에 있어야 합니다
refactoring.introduce.field.cannot.be.used.in.static.methods=정적 메서드에서 필드 삽입 리팩터링을 사용할 수 없습니다.
refactoring.introduce.field.not.in.class=필드를 삽입할 수 없습니다. 클래스 내부에 없습니다
refactoring.introduce.field.setup.method=setUp() 메서드
refactoring.introduce.parameter.dialog.title=매개변수 삽입
refactoring.make.function.top.level.error.attribute.writes=인스턴스 속성에 쓰기를 수행하는 메서드를 이동할 수 없습니다
refactoring.make.function.top.level.error.method.calls=동일한 클래스의 다른 메서드를 호출하는 메서드를 이동할 수 없습니다
refactoring.make.function.top.level.error.nonlocal.writes=비지역 쓰기가 있는 함수를 이동할 수 없습니다
refactoring.make.function.top.level.error.outer.scope.reads=외부 범위의 이름을 참조하는 메서드를 이동할 수 없습니다
refactoring.make.function.top.level.error.private.attributes=private 인스턴스 속성을 참조하는 메서드를 이동할 수 없습니다
refactoring.make.function.top.level.error.self.reads=외부 범위의 'self' 매개변수를 사용하는 함수를 이동할 수 없습니다
refactoring.make.function.top.level.error.special.usage.of.self='self' 매개변수의 특수 사용을 포함하는 메서드를 이동할 수 없습니다
refactoring.make.local.function.top.level.dialog.description=최상위 수준으로 지역 함수 {0} 이동
refactoring.make.local.function.top.level.dialog.title=로컬 함수를 최상위 수준으로 만들기
refactoring.make.method.top.level.dialog.description=최상위 수준으로 메서드 {0} 이동
refactoring.make.method.top.level.dialog.title=메서드를 최상위 수준으로 만들기
refactoring.move.choose.destination.file.title=대상 파일 선택
refactoring.move.error.cannot.use.module.name=import에서 모듈 이름 ''{0}''을(를) 사용할 수 없습니다
refactoring.move.error.destination.file.contains.class=대상 파일에 이름이 ''{0}''인 클래스가 이미 있습니다
refactoring.move.error.destination.file.contains.function=대상 파일에 이름이 ''{0}''인 함수가 이미 있습니다
refactoring.move.error.destination.file.contains.global.variable=대상 파일에 이름이 ''{0}''인 전역 변수가 이미 있습니다
refactoring.move.module.members=모듈 멤버 이동
refactoring.move.module.members.dialog.description.class=클래스 {0} 이동
refactoring.move.module.members.dialog.description.function=함수 {0} 이동
refactoring.move.module.members.dialog.description.selection=선택한 요소 이동
refactoring.move.module.members.dialog.description.variable=전역 변수 {0} 이동
refactoring.move.module.members.dialog.table.title=일괄 이동(&M)
refactoring.move.module.members.dialog.title=모듈 멤버 이동
refactoring.move.module.members.error.selection=선택한 요소를 사용하여 리팩터링을 수행할 수 없습니다
refactoring.occurrences.count={0}({1}개 찾은 항목)
refactoring.pull.up.dialog.members.to.be.moved=다음 멤버가 이동됩니다
refactoring.pull.up.dialog.move.members.to.class=클래스로 멤버 이동
refactoring.pull.up.dialog.title=다음으로 멤버를 위로 이동
refactoring.pull.up.error.cannot.perform.refactoring.no.base.classes=클래스 {0}에 상위 클래스가 없거나 리팩터링에 사용할 수 있는 상위 클래스가 없습니다
refactoring.pull.up.error.cannot.perform.refactoring.not.inside.class=멤버를 위로 이동할 수 없습니다. 클래스 내부에 없습니다
refactoring.rename=이름 바꾸기
refactoring.rename.containing.file=포함하는 파일 이름 변경
refactoring.rename.containing.file.entity.name=포함 파일
refactoring.rename.containing.file.title=포함하는 파일 이름 변경
refactoring.rename.containing.file.with.the.following.name.to=다음 이름을 가진 포함하는 파일의 이름 변경: 
refactoring.rename.inheritor.class.entity.name=상속자 클래스
refactoring.rename.inheritor.classes.with.the.following.names.to=다음 이름을 가진 상속자 클래스의 이름 변경:
refactoring.rename.inheritors=상속자 이름 변경
refactoring.rename.inheritors.title=상속자 이름 변경
refactoring.rename.not.valid.identifier=이름 ''{0}''이(가) 올바른 Python 식별자가 아닙니다. ''{1}''에서 import 문을 업데이트할 수 없습니다
refactoring.rename.parameter.entity.name=매개변수
refactoring.rename.parameter.in.hierarchy.to=계층 구조에서 매개변수 이름을 다음으로 변경:
refactoring.rename.parameters.in.hierarchy=계층 구조에서 매개변수 이름 변경
refactoring.rename.parameters.title=매개변수 이름 변경
refactoring.will.not.be.accessible=이동하려는 멤버는 이 리팩터링 후 액세스 불가능한 ''{0}''에 종속됩니다
remote.debug.local.host=IDE 호스트 이름:
remote.debug.port=포트:
remote.debug.redirect.output=출력을 콘솔로 리디렉션
remote.debug.server.hint=디버그 서버를 시작하려면 디버그 구성을 실행하세요.
remote.debug.server.hint1.5=스크립트 업데이트:
remote.debug.server.hint2=1. PyCharm 설치 시 pydevd-pycharm.egg를 Python 경로에 추가하거나 실행하세요:
remote.debug.server.hint3=pip install pydevd-pycharm
remote.debug.server.hint4=2. 디버그 서버에 연결하려면 다음 명령어를 추가하세요.
remote.debug.suspend.on.connect=연결 후 일시 중지
remote.interpreter.accessing.remote.interpreter.progress.title=원격 인터프리터 액세스 중
remote.interpreter.configure.path.label=Python 인터프리터 경로:
remote.interpreter.configure.path.title=Python 인터프리터 선택
remote.interpreter.configure.ssh.run_as_root_via_sudo.checkbox=sudo를 통한 루트 권한으로 이 인터프리터를 사용하여 코드 실행
remote.interpreter.configure.ssh.run_as_root_via_sudo.help=Sudo가 SSH 연결을 통해 원격 인터프리터를 시작하는 경우에만 호출됩니다. 파일이 사용자 권한으로 원격 서버에 복사됩니다.
remote.interpreter.configure.temp.files.path.label=PyCharm 헬퍼 경로:
remote.interpreter.configure.temp.files.path.title=PyCharm 헬퍼용 폴더 선택
remote.interpreter.configure.title=원격 Python 인터프리터 구성
remote.interpreter.default.interpreter.path=/usr/bin/python
remote.interpreter.docker.default.interpreter.path=python
remote.interpreter.failed.to.obtain.credentials=Python SDK {0}의 연결 자격 증명을 얻지 못했습니다
remote.interpreter.feature.is.not.available=원격 인터프리터 기능을 사용할 수 없습니다
remote.interpreter.remote.server.permissions=원격 서버를 찾지 못했습니다. 사용 권한이 있는지 확인하세요.
remote.interpreter.support.is.not.available={0} 지원을 사용할 수 없습니다.\n\
해당 플러그인을 확인하세요.
remote.interpreter.unspecified.interpreter.path=Python 인터프리터 경로 지정
remote.interpreter.unspecified.temp.files.path=PyCharm 헬퍼 경로 지정
remote.interpreter.unsupported.python.sdk.type=지원되지 않는 Python SDK 타입
remote.interpreter.wsl.default.interpreter.path=/usr/bin/python
remove.elif=elif 제거…
remove.else=else 제거…
rename.python.interpreter.dialog.provide.name.error.text=Python 인터프리터의 이름을 입력하세요.
rename.python.interpreter.name.already.exists.error.text=동일한 이름의 Python 인터프리터가 이미 있습니다.
rest.configuration.editor.open.output.file.in.browser.label.text=브라우저에서 출력 파일 열기
run.configuration.remote.debug.name=Python 원격 디버그
run.configuration.remote.debug.visible.name=Python 디버그 서버
run.configuration.show.command.line.action.name=디버그 콘솔 표시
run.configuration.type.description=원격 디버그를 위한 서버 시작
run.debug.shadowing.name.import.error.open.file={0} 표시
run.debug.shadowing.name.import.error.rename={0} 이름 변경
run.debug.shadowing.name.import.error.title={0}이(가) 표준 라이브러리 파일 이름을 가리는 것 같습니다. 이러면 실행/디버그 액션이 예기치 않게 동작할 수 있습니다
runcfg.autodetect.display_name=자동 탐지
runcfg.captions.interpreter_options_dialog=인터프리터 옵션 입력
runcfg.captions.script_parameters_dialog=스크립트 매개변수 입력
runcfg.doctest.display_name=Doctest
runcfg.error.message.cannot.find.python.interpreter=이 실행 구성의 Python 인터프리터를 찾을 수 없습니다
runcfg.error.message.failed.to.find.free.socket.port=빈 소켓 포트를 찾지 못했습니다
runcfg.error.message.python.interpreter.is.invalid.configure=Python 인터프리터를 <a href="#">재구성</a>하세요
runcfg.labels.add.content.roots.to.pythonpath=콘텐츠 루트를 PYTHONPATH에 추가
runcfg.labels.add.source.roots.to.pythonpath=소스 루트를 PYTHONPATH에 추가
runcfg.labels.custom.name=사용자 지정
runcfg.labels.environment_variables=환경 변수(&E):
runcfg.labels.execution=실행
runcfg.labels.interpreter=지정된 인터프리터 사용(&U):
runcfg.labels.interpreter_options=인터프리터 옵션(&O):
runcfg.labels.module.name=모듈 이름
runcfg.labels.path.mappings=경로 매핑
runcfg.labels.project=프로젝트(&J):
runcfg.labels.python.interpreter=Python 인터프리터(&P):
runcfg.labels.script.path=스크립트 경로
runcfg.labels.script_parameters=매개변수(&P):
runcfg.labels.use.sdk.of.module=모듈의 SDK 사용:
runcfg.labels.working_directory=작업 디렉터리(&W):
runcfg.nosetests.config.regexPattern=정규식 패턴
runcfg.nosetests.display_name=Nosetest
runcfg.pytest.config.keywords=키워드
runcfg.pytest.config.parameters=매개변수
runcfg.pytest.display_name=pytest
runcfg.python_tests.config.additionalArguments=추가 인수
runcfg.python_tests.config.target=타깃
runcfg.python_tests.config.targetType=타깃 타입
runcfg.test.description=PyCharm에서 지원하는 Python 프레임워크
runcfg.test.display_name=Python 테스트
runcfg.test.suggest.name.in.path={1} 내 {0}
runcfg.test.suggest.name.in.python={1}의 {0}
runcfg.testing.no.test.framework=선택한 인터프리터에서 {0} 러너를 찾을 수 없습니다
runcfg.tests.cant_rerun=테스트 ID를 해결할 수 없으므로 테스트를 재실행할 수 없습니다. 실행 구성을 삭제하고 마우스 오른쪽 버튼으로 클릭해 새 구성을 생성하세요.
runcfg.tests.empty_suite=빈 스위트
runcfg.tox=tox
runcfg.tox.runner=tox 러너
runcfg.trial.display_name=Twisted Trial
runcfg.unittest.config.pattern=패턴
runcfg.unittest.display_name=Unittest
runcfg.unittest.dlg.all_in_folder_title=폴더 내 모든 항목
runcfg.unittest.dlg.all_in_script_title=스크립트
runcfg.unittest.dlg.class_label=클래스:
runcfg.unittest.dlg.folder_path=폴더:
runcfg.unittest.dlg.function_label=함수:
runcfg.unittest.dlg.interpreter_options_title=인터프리터 옵션:
runcfg.unittest.dlg.method_label=메서드:
runcfg.unittest.dlg.pattern=패턴:
runcfg.unittest.dlg.select.folder.path=폴더 경로 선택:
runcfg.unittest.dlg.select.script.path=스크립트 경로 선택:
runcfg.unittest.dlg.test_class_title=클래스
runcfg.unittest.dlg.test_function_title=함수
runcfg.unittest.dlg.test_method_title=메서드
runcfg.unittest.dlg.test_script_label=스크립트:
runcfg.unittest.dlg.test_type_title=테스트:
runcfg.unittest.no_class_name=클래스 이름을 지정하세요
runcfg.unittest.no_folder_name=테스트가 포함된 폴더를 지정하세요
runcfg.unittest.no_method_name=메서드 이름을 지정하세요
runcfg.unittest.no_module_name=완전히 정규화된 모듈 이름을 지정하세요
runcfg.unittest.no_module_sdk=올바른 Python SDK가 있는 모듈을 선택하세요
runcfg.unittest.no_script_name=스크립트 이름을 지정하세요
runcfg.unittest.no_sdk=Python SDK를 지정하세요
runcfg.unittest.no_valid_sdk=올바른 Python 인터프리터를 선택하세요
runcfg.unittest.suggest.name.in.class={1} 내 {0}
runcfg.unittest.suggest.name.in.folder={1} 내 {0}
runcfg.unittest.suggest.name.in.script={1} 내 {0}
sdk.create.venv.conda.dialog.label.interpreter=인터프리터:
sdk.create.venv.conda.dialog.label.location=위치:
sdk.create.venv.conda.dialog.label.python.version=Python 버전:
sdk.create.venv.dependencies.chooser=requirements.txt 또는 setup.py 선택
sdk.create.venv.dependencies.label=종속 요소:
sdk.create.venv.dialog.base.interpreter.label=기본 인터프리터:
sdk.create.venv.dialog.interpreter.label=인터프리터:
sdk.create.venv.dialog.label.inherit.global.site.packages=전역 site-packages 상속
sdk.create.venv.dialog.location.label=위치:
sdk.create.venv.environment.label=환경:
sdk.create.venv.existing.option.label=기존
sdk.create.venv.new.option.label=새로 만들기
sdk.details.dialog.error.duplicate.name=인터프리터의 고유 이름을 지정하세요
sdk.details.dialog.hide.all.virtual.envs=다른 프로젝트와 연결된 가상 환경 숨기기
sdk.details.dialog.show.interpreter.paths=선택한 인터프리터에 대한 경로 표시
sdk.details.dialog.title=Python 인터프리터
sdk.details.step.add=추가…
sdk.details.step.show.all=모두 표시…
sdk.edit.dialog.associate.virtual.env.current.project=이 환경을 현재 프로젝트와 연결
sdk.edit.dialog.associate.virtual.env.with.path={0}와(과) 이 가상 환경 연결
sdk.edit.dialog.specify.interpreter.path=인터프리터 경로 지정
sdk.edit.dialog.title=Python 인터프리터 편집
sdk.gen.cannot.create.skeleton.dir=스켈레톤 디렉터리 {0}을(를) 생성할 수 없습니다
sdk.gen.cleaning.up=스켈레톤 정리 중…
sdk.gen.failed.notification.title=원격 인터프리터의 스켈레톤 새로고침 실패
sdk.gen.launching.generator=스켈레톤 제너레이터 시작 중…
sdk.gen.reloading=생성된 스켈레톤 다시 로드 중…
sdk.gen.stubs.for.binary.modules=바이너리 모듈 {0}의 스텁 생성
sdk.gen.unpacking.prebuilt=사전 빌드된 스켈레톤 패킹 해제 중…
sdk.gen.updating.interpreter=Python 인터프리터 업데이트 중
sdk.has.been.configured.as.the.project.interpreter={0}이(가) 프로젝트 인터프리터로 구성되었습니다
sdk.has.been.configured.notification.name=Python 인터프리터가 구성됨
sdk.paths.dialog.added.by.user.suffix=(사용자가 추가)
sdk.paths.dialog.reload.paths=경로 목록 다시 로드
sdk.paths.dialog.removed.by.user.suffix=(사용자가 제거)
sdk.paths.dialog.title=인터프리터 경로
sdk.scanning.installed.packages=설치된 패키지 검사 중
sdk.select.path=Python 인터프리터 선택
sdk.some.skeletons.failed=일부 스켈레톤을 생성하지 못했습니다
sdk.updating.interpreter.paths=인터프리터 경로 업데이트 중…
sdk.updating.interpreter.version=인터프리터 버전 업데이트 중…
settings.completion.ml.python.display.name=Python
settings.default.remote.interpreter=디폴트 Python 원격 인터프리터
settings.postfix.choose.class.action.name=클래스 선택…
settings.postfix.choose.class.prompt.text=클래스 선택
settings.postfix.enter.class.action.name=클래스 이름 입력…
settings.postfix.enter.class.dialog.name=클래스 선택
settings.postfix.enter.fully.qualified.class.name=완전히 정규화된 클래스 이름 입력
show.expression.type.no.expression.found=표현식을 찾을 수 없습니다
smartKeys.insert.self.in.method=메서드 정의 시 'self' 삽입
smartKeys.insert.type.placeholder.in.docstring.stub=문서 주석 스텁에 타입 자리표시자 삽입
smartKeys.wrap.in.parentheses.instead.of.backslash=백슬래시나 줄바꿈 대신 괄호 사용
sphinx.ask.for.working.directory.label.text=Sphinx 작업 디렉터리
switch.python.interpreter=Python 인터프리터 전환
toolwindow.stripe.Jupyter_Variables=Jupyter 변수
toolwindow.stripe.Python_Console=Python 콘솔
toolwindow.stripe.Python_Packages=Python 패키지
toolwindow.stripe.SciView=SciView
unable.to.stop=현재 실행 중인 프로세스를 중지할 수 없습니다. 먼저 수동으로 중지하세요.
unwrap.elif=elif 줄 바꿈 해제…
unwrap.else=else 줄 바꿈 해제…
unwrap.for=for 줄 바꿈 해제…
unwrap.if=if 줄 바꿈 해제…
unwrap.try=try 줄 바꿈 해제…
unwrap.while=while 줄 바꿈 해제…
unwrap.with=with 줄 바꿈 해제…
vcs.activate.virtualenv.checkbox.text=훅용 virtualenv 활성화
windowWithActions.closeWindow=창 닫기
windowWithActions.stopProcess=현재 실행 중인 프로세스 중지