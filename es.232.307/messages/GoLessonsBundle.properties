go.advanced.module.description=Funciones que requieren una comprensión más profunda del idioma.
go.advanced.module.name=Avanzado
go.apply.fix=Seleccione {0} y presione {1}.
go.apply.fix.at.once=Alternativamente, si la información sobre herramientas aún aparece, puede presionar {0} para aplicar todas las soluciones rápidas sugeridas a la vez.
go.autocomplete.json.autocomplete=Cuando ingresas comillas invertidas ({0}) y comienzas a completar la etiqueta JSON, <ide/> te ofrecerá ingresar una clave.\nSelecciona el estilo que deseas aplicar. ¡Elijamos {0}! El IDE guarda su selección y sugiere el mismo estilo en otros campos de esta estructura.
go.autocomplete.json.select.style=Seleccione el estilo que desea aplicar. ¡Elijamos {0}! El IDE guarda su selección y sugiere el mismo estilo en otros campos de esta estructura.
go.basic.completion.invoke.completion=<ide/> inserta automáticamente una nueva declaración de importación. Ahora, al presionar {0} para activar la "finalización predeterminada", aparecerá nuevamente el menú de búsqueda.
go.basic.completion.lesson.name=Finalización de código básico
go.basic.completion.type.and.choose=De forma predeterminada, <ide/> sugiere inmediatamente la finalización del código. Si comienza a escribir {0} donde está el cursor, aparecerá un menú de búsqueda con las sugerencias correspondientes. Cuando presiona {2}, puede seleccionar {1} en el menú de búsqueda.
go.basic.editing.module.description=Estas son acciones básicas que pueden ayudarte a editar código.
go.basic.editing.module.name=Edición básica
go.code.completion.for.benchmarks.bn.create.bench=Para crear un nuevo punto de referencia, comience a escribir {0} y luego seleccione {0} de la lista de sugerencias.
go.code.completion.for.benchmarks.bn.for.loop=Cuando ingresa {0} dentro de un punto de referencia, <ide/> sugiere {1} como expresión condicional para el bucle {0}.\nPara crear un nuevo punto de referencia, escriba {0} Comience a escribir, luego seleccione {0} en el lista de sugerencias.
go.code.completion.for.time.package.hour=Haga lo mismo con el tiempo seleccionando {0} de la lista de sugerencias.
go.code.completion.for.time.package.minute=Complete la plantilla seleccionando {0} como minutos.
go.code.completion.for.time.package.month=Presione {0} nuevamente y seleccione {1} como mes.
go.code.completion.for.time.package.name=Finalización del código del paquete de tiempo
go.code.completion.for.time.package.year=Para dar formato a los elementos de fecha y hora, el paquete {0} utiliza un diseño ya definido, {1}. Es por eso que utilizamos el elemento de tiempo de referencia como marcador de posición para definir el formato.\nPresione {0} nuevamente y seleccione {1} como mes.
go.code.completion.module.name=Finalización de código
go.code.style.module.description=Aplicar reglas de codificación de Go al código fuente
go.code.style.module.name=Estilo de código
go.comments.comment.block=Puede eliminar comentarios de bloques de código. Por ejemplo, para eliminar un comentario de un bloque seleccionado, presione {0}.
go.comments.comment.one.line=Comente cualquier línea con {0}.
go.comments.lesson.name=Agregar y eliminar comentarios
go.comments.uncomment.line=Eliminar comentarios de líneas comentadas con el mismo acceso directo {0}
go.completion.for.functions.choose.item=Seleccione {0} de la lista y presione {1}. Cuando vea una lista de sugerencias, puede comenzar a escribir para reducir la cantidad de resultados.
go.completion.for.functions.lesson.name=Finalización de código para funciones.
go.completion.for.functions.press.twice=Presione {0} <strong>doble</strong> para buscar todas las funciones que acepten un elemento como primer argumento. Tenga en cuenta que el elemento no es un método, pero el punto hace que parezca así.
go.debug.function.calls.add.arguments.for.evaluation=Introduzca {0} entre paréntesis. El campo debe mostrar {1}.
go.debug.function.calls.click.evaluate=Haga clic en {0} o presione {1}. Luego puede cerrar el cuadro de diálogo.
go.debug.function.calls.enter.expression.to.evaluate=Comience a escribir {1} en el campo {0} y luego seleccione {2} de la lista de sugerencias.
go.debug.function.calls.evaluate.expression=Presione {1} para invocar la acción {0}.
go.debug.function.calls.lesson.name=Llamadas a funciones de depuración
go.debug.function.calls.mac.note=Su sistema operativo puede solicitar una contraseña para iniciar el servidor de depuración.
go.debug.function.calls.run.to.cursor=El cursor se encuentra ahora al final de la línea 15. Presione {0} para ver cómo funciona la acción {1}.
go.debug.function.calls.step.over=Intente utilizar {1} para omitir la declaración {0}.
go.debug.function.calls.toggle.breakpoint=En el modo de depuración, puede pasar diferentes valores a una función y ver qué devuelve la función. Para obtener más información sobre la función de evaluación de expresiones, consulte la <a href\="{0}">documentación</a>.\nPara iniciar el servidor de depuración, su sistema operativo puede solicitar una contraseña.
go.debug.function.context.menu=Hay varias formas de depurar su código. Uno de ellos es usar el menú contextual.\nCompletar etiquetas de estructura JSON automáticamente
go.debug.nil.hide.types=Si un tipo de objeto ocupa mucho espacio, puede ocultarlo en la ventana de herramientas {0}.\nHaga clic en {0} para detener la depuración y finalizar la lección.
go.debug.nil.hide.types.variables=Puede ver la diferencia entre las interfaces {1} y {2} en la ventana {0}. La interfaz {1} no tiene valores ni tipos establecidos, por lo que {3}. Esto es diferente de la interfaz {2}, que almacena {3} punteros de tipo {4} dentro del valor de la interfaz. El tipo interno de la interfaz {2} es {3}, independientemente del valor del puntero.
go.debug.run.sample=Seleccione el elemento del menú {0} o pruebe {1}.
go.debug.stop.debug=Presione {0} para detener la depuración y finalizar la lección.
go.debugging.module.description=La depuración puede ayudarle a encontrar y solucionar problemas dentro de su aplicación.
go.debugging.module.name=Depurar
go.delete.conversion.intro=La comprobación de <strong>conversión de tipo duplicado</strong> advierte sobre conversiones de tipo redundantes que pueden omitirse (por ejemplo, al convertir un literal de cadena en una cadena). Para obtener más información sobre esta verificación, consulte <a href\="{0}">Conversión de tipo duplicado</a>.
go.delete.conversion.invoke.intentions=Verifique la función {0} en el editor. El cursor está en la posición del elenco del tipo {2} al {1}. Presione {3} para llamar a la acción de intención.
go.delete.conversion.lesson.name=Conversión de tipo redundante
go.doc.click.back=Para volver a la pantalla anterior, haga clic en el botón {0}.
go.doc.click.link=Se puede hacer clic en todos los enlaces y le llevarán a la documentación del paquete o función. Por ejemplo, haga clic en {0} en la ventana de herramientas {1}.
go.doc.close.documentation.tool.window=Cerraré la ventana de la herramienta {0}. Para hacer esto, haga clic en la pestaña {0}. De forma predeterminada, la pestaña {0} se encuentra en la esquina inferior derecha de la ventana del IDE.
go.doc.module=Ir a comentarios de documentación
go.doc.show.documentation=Go 1.19 agrega soporte para enlaces, listas y títulos nuevos en los comentarios de documentos. <ide/> admite estas nuevas funciones. Puede obtener una vista previa de sus comentarios en una ventana emergente o en la ventana de herramientas {0}.\nHaga clic en {0} nuevamente para cambiar a la ventana de herramientas {1}.
go.dump.goroutines.click.button.DlvFilterGoroutinesAction=En la pestaña {0} abierta, haga clic en el botón {1}.
go.dump.goroutines.click.button.more=Haga clic en {1} en la ventana de herramientas {0}.
go.dump.goroutines.dump.tab=La pestaña {0} muestra una lista de gorutinas en su aplicación. Nuestra aplicación enumera algunos, pero su aplicación real puede tener muchos más. En <ide/>, puede aplicar filtros para buscar gorutinas específicas y profundizar en los resultados filtrados.
go.dump.goroutines.filter.goroutines=Ingrese {1} en el campo de búsqueda {0} para filtrar la lista. Este filtro deja solo la pila de ejecución con gorutinas con {1} en su nombre.
go.dump.goroutines.name=Volcado de gorutinas
go.dump.goroutines.toggle.breakpoint=La sección {4} describe algunas de las funciones agregadas a <ide/>. Para conocer otras funciones, consulte la <a href\="{0}">Página de novedades</a>.\nHaga clic en el botón {1} en la pestaña {0} abierta.
go.error.handling.module.name=Manejo de errores
go.error.string.formatting.goto=Todavía hay algunas advertencias leves dentro del programa.
go.error.string.formatting.introduction=Según las <a href="{0}">reglas de Go</a>, las cadenas de error no deben escribirse en mayúscula. Si olvida estas reglas, <ide/> se las recordará.\nNavegación, restricciones de compilación, formato de código
go.error.string.formatting.parsefloat=<ide/> tiene una plantilla de sufijo especial para ayudarle a convertir cadenas en números.\nIntente aplicar la plantilla de sufijo {0} a {1}.\nAún hay algunas advertencias menores dentro del programa.
go.export.types.quickfix=Si escribe una función exportada que devuelve un tipo no exportado, <ide/> sugiere una solución rápida para exportar el tipo \nImplementar un método con TODO.
go.extract.inline.variables.inline.task=A diferencia de la {0} refactorización, {1} ayuda a eliminar variables innecesarias. Presione {2} para alinear la variable en una única ubicación de uso.
go.extract.inline.variables.lesson.name=Extraer y variables en línea
go.extract.methods.with.returns.complete.refactoring=Ingrese {0} y presione {1}.
go.extract.methods.with.returns.intro={0} La refactorización le permite tomar un fragmento de código, moverlo a un método independiente y reemplazar el código antiguo con una llamada al nuevo método. Si el código termina en una declaración de devolución, se extrae palabra por palabra. {0} Para obtener más información sobre la refactorización, consulte el artículo <a href\="{1}">Extracción de funciones y métodos</a>.
go.extract.methods.with.returns.invoke.refactoring=Asegúrese de que haya un signo de intercalación antes de la cláusula {0} que se pueda extraer. Presiona 1}.
go.extract.methods.with.returns.lesson.name=Método de extracción que contiene retorno
go.feature.trainer.specify.sdk.to.continue.learning.title=Especifique el Go SDK para continuar aprendiendo
go.feature.trainer.too.old.go.sdk.notification.text=El tutorial requiere GoSDK <b>{1}</b> o posterior para la gestión de dependencias con módulos Go. La versión actual de GoSDK es <b>{0}</b>.
go.feature.trainer.too.old.go.sdk.notification.title=Actualizar Go SDK a una versión posterior <b>{0}</b>
go.fixing.test.close.problems=Hay algunas cuestiones a tener en cuenta. Algunos problemas se pueden solucionar desde la propia ventana de herramientas {0}. Sin embargo, algunos problemas requieren acciones específicas en el editor. Apliquemos todas las modificaciones en el editor\!\nLa <a href\="{0}">documentación de Go</a> para el paquete {1} enumera los nombres de las funciones en notación camel (por ejemplo, {2}). hay que escribirlo. Aquí la función {3} no cumple con esta regla.\nEsta conversión {0} devuelve la representación UTF-8 del punto de código Unicode en lugar de la representación de cadena decimal requerida.\nModificar archivo de prueba
go.fixing.test.negate=El último no es realmente un error, sino una simple refactorización para simplificar el código. Verifique la negación de la función {0}. Veamos qué podemos hacer aquí.\nLa ventana de herramientas {0} muestra una lista de advertencias y errores para el archivo actual y proporciona una descripción del problema.\nLos siguientes errores son bastante obvios: No hay coma. Sin embargo, no quiero escribirlo repetidamente en cada línea. En este caso, varios cursores pueden resultar útiles.\ngo run fmt
go.fmt.task=Si desea formatear su código como {0}, puede ejecutarlo presionando {1}.
go.formatting.clear.selection=Para borrar la selección, presione {0}.
go.formatting.lesson.name=Aplicar estilo de código a su código
go.formatting.reformat.selection=<ide/> admite el formato de código. Para reformatear el bloque de código seleccionado, presione {0}.
go.formatting.whole.file=Para reformatear todo el archivo fuente cuando no hay líneas seleccionadas, use {0}.
go.general.templates.fori=Ahora escriba {0} y seleccione esta plantilla activa de la lista de sugerencias. Establezca las siguientes condiciones en el bucle: {Uno}.
go.general.templates.intro=Las plantillas activas insertan construcciones comunes en su código, como bucles, condicionales, declaraciones varias o declaraciones impresas.
go.general.templates.lesson.name=Plantillas activas y de sufijo\: else, fori, var
go.general.templates.type.iteration=En cada iteración, el bucle {0} debe ejecutar {1}
go.general.templates.vars=Mi programa actual lee los números que el usuario ingresa en el teclado y los usa en un bucle {0}. Sin embargo, a partir de <ide/> 2020.1, puede usar plantillas ({1} para constantes, {2} para variables, {3} para tipos y {4} para declaraciones de importación) para codificar grupos de declaraciones más rápido.\nEn vivo y manejo de errores en plantillas de sufijo\: if y rr
go.generate.missing.methods.lesson.name=Crear método faltante
go.generate.missing.methods.task=La acción {0} le permite crear métodos faltantes y especificar nombres de parámetros incluso si el nombre del método o parámetro se omite en la definición de la interfaz.\nModificar archivo de prueba
go.generating.code.module.description=Acciones y plantillas que generan fragmentos de código.
go.generating.code.module.name=Codigo de GENERACION
go.generics.change.casing=Modifiquemos el estilo del código antes de generar el archivo de prueba. En la documentación oficial de Go, los nombres de los parámetros de tipo se escriben en mayúsculas, mientras que el parámetro {0} en el código está en minúsculas.\nEl siguiente problema en el código es que el tipo se contiene a sí mismo, lo que provoca el error {0}. Para evitar esto, debe incluir un puntero al tipo en lugar del tipo en sí. Hay una solución rápida en el IDE para estos casos.\nAhora que ha eliminado todos los errores en el archivo, puede intentar crear una prueba para la función {0}.\nHaga clic en {0} y en la ventana emergente {1}. arriba Por favor seleccione {2}.
go.generics.fix.type=El siguiente problema con este código es que el tipo se contiene a sí mismo, lo que genera un error {0}. Para evitar esto, debe incluir un puntero al tipo en lugar del tipo en sí. Hay una solución rápida en su IDE para este caso.\nHagamos una refactorización más antes de continuar. Usaremos una interfaz vacía que puede ser reemplazada por {0}. Presione {1} y seleccione {2}.
go.generics.inspections.delete.type.parameters=<ide/> 2022.2 introduce nuevas comprobaciones para ayudarle a encontrar errores que pueda haber pasado por alto.\nSegún el <a href="{0}">equipo de Go</a>, las interfaces y los métodos se agrupan dentro de una unión. No utilice. Por lo tanto, {1} se usa como término entre los elementos de unión.\nEl parámetro de tipo está sombreado porque no se usa en ninguna parte de nuestro código. Solucione este problema reemplazando el tipo {0} con {1} en la sección de parámetros.
go.generics.inspections.title=Inspección de parámetros de tipo
go.generics.inspections.union.interfaces.with.methods=Según el <a href="{0}">equipo de Go</a>, las interfaces y los métodos no se pueden utilizar juntos dentro de una unión. Por lo tanto, {1} no se puede utilizar como término entre elementos de unión.\nEl parámetro de tipo está atenuado porque no se utiliza en ninguna parte de este código. Solucione este problema reemplazando el tipo {0} con {1} en la sección de parámetros.
go.generics.right.click.function=Ahora que ha eliminado todos los errores en el archivo, puede intentar crear una prueba para la función {0}.\nAhora haga clic en el enlace de resultados para abrir el código en su navegador.\nPara usar parámetros de tipo, {0} ) {1} y por encima. Puede abrir {0} y solucionarlo manualmente o utilizar la solución rápida.\nGenerar pruebas para parámetros de tipo
go.goto.next.error=Presione {0} para pasar al siguiente error resaltado.
go.goto.next.warning=Presione {0} para pasar a la siguiente advertencia resaltada en el archivo.
go.handling.errors.with.templates.error.case=La finalización del código con sufijos ayuda a reducir el movimiento del cursor hacia atrás al escribir código. Estas plantillas le permiten convertir expresiones que ya ha ingresado en otras expresiones. Puede encontrar más lecciones sobre cómo completar sufijos en la sección {0}.\nUtilice plantillas y tipos activos
go.handling.errors.with.templates.return.nil.err=Si se produce un error al abrir un archivo, debería devolver un segmento y un error. Aquí podemos devolver {0} y {1}. Empiece a escribir {2} y seleccione {3} plantilla activa.
go.handling.unhandled.errors.handle.error={0} La cobertura del código advierte sobre funciones o métodos que devuelven valores de error, pero estos valores de error no se verifican. Para solucionar esto, puede utilizar la siguiente solución rápida:\nIngrese {0} como nombre de la variable y presione {1}.
go.handling.unhandled.errors.name=Error no controlado al procesar
go.handling.unhandled.errors.wrap.in.closure=Otra solución rápida es utilizar las declaraciones {0} y {1}. {2} Funciona de manera similar a la solución rápida, pero envuelve el código dentro de un cierre.\n//go:embed compatible.
go.improve.names.apply.fix=Seleccione todas las llamadas de la lista y presione {0}. {1} es el nombre de error más común, por lo que lo sugerimos como nombre de variable en <ide/>.
go.improve.names.intro=<ide/> sugiere las variantes de nombre más populares para las variables de error ({0}) y contexto ({1}).
go.improve.names.introduce.variable=Asegúrese de que el cursor esté en la posición de la llamada {0}. Haga clic en {1} para extraer variables.
go.improve.names.lesson.name=Denominación mejorada de variables de error.
go.inspection.unsafe.context.cancellation.add.defer=Dado que la ruta de ejecución {1} no llama a {0}, debe ingresar {2} para corregir la advertencia.
go.inspection.unsafe.context.cancellation.go.to.error=La verificación del código {0} garantiza que la función {1} devuelta por {2} y funciones similares se llamen en todas las rutas de ejecución. Para obtener más información sobre los paquetes de contexto, consulte <a href\="{3}">Contextos de paquetes</a> en golang.org.\nNo llame a {0} en la ruta de ejecución {1}. Por lo tanto, debe escribir. {2} para corregir la advertencia.
go.intention.actions.module.description=Las acciones intencionales pueden sugerir variaciones alternativas a su código, así como soluciones a los problemas detectados.
go.intention.actions.module.name=Acción de intención
go.introduce.function.final.propose=Luego, ahora puede ajustar los parámetros según sus necesidades.
go.introduce.function.intro=<ide/> puede generar funciones y métodos a partir de llamadas. Ahora, si falta una función o método, también puedes crearlo a partir de ese tipo.
go.introduce.function.invoke.intentions=Asegúrese de que el cursor esté en la posición del identificador {0} utilizado como referencia de función. Presione {1} para llamar a la acción de intención.
go.introduce.function.lesson.name=Crear una función a partir de un tipo de función
go.live.templates.with.types.add.method=Agregue {0} como firma del método para la interfaz {1}.
go.live.templates.with.types.add.second.return.value=Actualmente, el método {0} devuelve sólo parámetros de cadena. Debe agregar un valor de retorno {1} con el valor del área. <ide/> agrega automáticamente paréntesis alrededor de varios tipos de devolución.\nLos comentarios describen cómo funciona el programa y la intención del usuario implícita en ellos. Puede utilizar la finalización de código en los comentarios para completar los nombres de los parámetros, funciones y métodos.\nFinalmente, creemos una nueva instancia del rectángulo y pasemos valores para {0} y {1}.\nEn Go, la interfaz es un tipo personalizado que le permite especificar un conjunto de firmas de métodos. ¡Agreguemos uno\!\nUsando plantillas y tipos activos
go.live.templates.with.types.struct.template=Una estructura es un tipo que contiene campos con nombre. Las estructuras son útiles para agrupar datos para formar registros. Creemos uno para este código.\nAgregue {0} como campo en la estructura {1}.
go.navigate.to.error=Presione {0} para ir al siguiente error.
go.navigation.module.description=Moviéndose por la base del código
go.navigation.module.name=Navegar
go.new.intentions.and.code.completion.actions.migrate.method.receiver.to.function.parameter=<ide/> proporciona dos refactorizaciones: {0} y {1}.\nPara convertir un parámetro de función en un receptor de método, presione {0} y luego {1}.
go.new.intentions.and.code.completion.actions.name=Mejoras y finalización de código dentro de correcciones rápidas
go.new.intentions.and.code.completion.actions.pass.arguments=Ingrese {1} Proporcione dos argumentos para el método {0}.
go.new.intentions.and.code.completion.actions.show.receiver=Cuando se llama a un método directamente en un tipo (esto se denomina expresión de método), se debe proporcionar el tipo de receptor como primer argumento. Cuando <ide/> sugiere completar el código, muestra el receptor como primer argumento. Presione {0} y seleccione {1}.
go.onboarding.apply.action=Seleccione la acción {0} y presione {1}.
go.onboarding.apply.intention=Seleccione {0} y presione {1}.
go.onboarding.balloon.about.debug.panel=La ventana de herramientas {0} proporciona una barra de herramientas con varias acciones de depuración. Pruebe esta acción más tarde tomando la clase {1}.
go.onboarding.balloon.click.here=Haga clic aquí para establecer un punto de interrupción
go.onboarding.balloon.open.file=Haga doble clic para abrir {0}
go.onboarding.balloon.open.learn.toolbar=Cambie a la ventana de herramientas {0} para continuar con esta lección
go.onboarding.balloon.project.directory=Puede ver los archivos del proyecto haciendo doble clic en el directorio del proyecto para expandirlo.
go.onboarding.balloon.project.view=Haga clic para abrir la vista <strong>Proyecto</strong>
go.onboarding.balloon.start.debugging=Haga clic en el icono para comenzar a depurar
go.onboarding.balloon.stop.debugging=Haga clic en el icono para comenzar a depurar
go.onboarding.case.changed=El caso ha sido cambiado.
go.onboarding.change.ui.settings=Para esta lección, <ide/> cambiará algunas configuraciones de la interfaz de usuario a su estado predeterminado. Sus preferencias se restaurarán cuando complete o salga de esta clase.
go.onboarding.click.run.button=Click the highlighted run button {0} to show run options.
go.onboarding.click.run.button.balloon=Click to show run options
go.onboarding.close.debug.tool.window=Cierre la ventana de la herramienta {0} y presione {1}.
go.onboarding.context.menu=Hay varias formas de ejecutar su código. Uno de ellos es a través del menú contextual.\nSeleccione {0} o pruebe {1}.
go.onboarding.epilog=Felicidades. Ha completado el recorrido de incorporación. Ahora puede continuar con lo siguiente:\n"{0}">Cerrar</callback>\n"{2}">Ver</callback>
go.onboarding.feedback.system.found.sdks=SDK encontrados:
go.onboarding.feedback.system.no.sdks=Ninguno
go.onboarding.feedback.system.used.sdk=SDK utilizados:
go.onboarding.finish.exit=Cerrar proyecto de demostración
go.onboarding.finish.modules=Ver más clases
go.onboarding.finish.text=<ide/> Acaba de completar el recorrido de incorporación.\nCerrar proyecto de demostración
go.onboarding.indexing.description=Cuando abres un proyecto por primera vez, <ide/> examina el SDK de Go y el proyecto en sí para recopilar los detalles necesarios para ayudar con la codificación. Espere hasta que se complete la indexación para continuar.
go.onboarding.invoke.completion.tip=<strong>Tip</strong>: you can press {0} to show completion items in any place of the code.
go.onboarding.invoke.intention.for.code=Las intenciones también le ahorran tiempo y hacen que su código sea más fácil de escribir. Convirtamos rápidamente la función {0} en una función exportada usando intenciones. Presiona 1}.
go.onboarding.invoke.intention.for.code.balloon=Al presionar {0} se mostrarán todas las intenciones disponibles.
go.onboarding.invoke.intention.for.warning.1=Acabamos de corregir un error, pero podemos hacer que este código se vea más limpio. <ide/> resalta líneas de código que podrían mejorarse y agrega una bombilla de luz amarilla.
go.onboarding.invoke.intention.for.warning.2=Presione {0} para obtener una vista previa de las advertencias y aplicar soluciones rápidas.
go.onboarding.invoke.intention.for.warning.balloon=Presione {0} para ver todas las soluciones rápidas disponibles
go.onboarding.invoke.search.everywhere.1=Cuando trabaje en <ide/>, es posible que desee buscar archivos dentro de un proyecto, símbolo, tipo o acción IDE. En esta lección, busquemos la acción {0} y pongamos en minúscula la cadena {1}.
go.onboarding.invoke.search.everywhere.2=Haga clic en {0} dos veces para abrir el cuadro de diálogo {1}.
go.onboarding.lesson.name={0} Aprender
go.onboarding.module.description={0} Esta es una vista previa de las funciones clave.
go.onboarding.module.name=Tour de incorporación
go.onboarding.project.view.description=La vista <strong>Proyecto</strong> es una de las ventanas de herramientas principales. Esta vista incluye directorios de proyectos, paquetes específicos del SDK y archivos borrador. Ábralo usando el botón rayado y verá un proyecto de demostración simple. También puede abrir la vista presionando {0}.
go.onboarding.return.to.welcome=\ y volver a la pantalla de inicio
go.onboarding.run.sample=Seleccione {0} o pruebe {1}.
go.onboarding.run.widget.balloon=With this widget, you can execute popular running actions for the selected configuration
go.onboarding.search.everywhere.description=Como puede ver, el texto seleccionado, {0}, se ha copiado automáticamente a la cadena de entrada. Intentemos ingresar {1} en lugar de {0}.
go.onboarding.select.fix=Aplicar el primer elemento: {0}. La adaptación de esta solución elimina paréntesis innecesarios.
go.onboarding.select.item=Las opciones de finalización de código aparecen automáticamente en <ide/> a medida que escribe. Utilice las teclas de dirección del teclado para seleccionar el elemento {0} y luego presione {1}.
go.onboarding.start.debugging=Haga clic en el icono {0} para iniciar el proceso de depuración.
go.onboarding.start.typing=Now start typing {0} to show the completion options.
go.onboarding.start.typing.balloon=Cuando escribas {0} verás opciones para completar el código.
go.onboarding.stop.debugging=Comencemos a depurar. Haga clic en el icono {0}.
go.onboarding.temporary.configuration.description=<ide/> ha creado una configuración de ejecución temporal. Esta configuración se puede encontrar en la barra de herramientas Ejecutar. Esta barra de herramientas le permite ejecutar acciones de ejecución populares para la configuración seleccionada, incluidas Ejecutar {0}, Depurar {1}, Generar código {2} y Ejecutar código con cobertura {3}.
go.onboarding.toggle.breakpoint.1=Quizás hayas notado que el método {1} devuelve {2} en lugar de {0}, que es el valor esperado. Vayamos a la declaración de devolución y depuremos el código problemático.
go.onboarding.toggle.breakpoint.2=Haga clic en el margen del área resaltada para establecer un punto de interrupción.
go.onboarding.type.division=Encontramos un problema en nuestro código, así que solucionémoslo. Divida la suma resultante por la longitud de los valores. Por favor ingrese {0}.
go.postfix.completion.better.variable.names.in.templates.description=<ide/> le ayuda a nombrar las variables creadas con las plantillas de sufijo {0} y {1}. Por ejemplo, estas sugerencias le darían {2} o {3} para un índice, o {4} para {5}.
go.postfix.completion.better.variable.names.in.templates.use.forr=Ingrese {0} y seleccione la plantilla de sufijo {1} de la lista de finalización.
go.postfix.completion.intro=Las plantillas de sufijo le permiten convertir una expresión ya ingresada en otra expresión según el sufijo después del punto, el tipo de expresión y su contexto. Puede utilizar un conjunto de plantillas de finalización de sufijos predefinidas o crear una nueva plantilla. Para obtener más información sobre las plantillas de sufijos personalizadas, consulte <a href = "{0}">Este artículo</a>.
go.postfix.completion.lesson.name=Completar y ordenar sufijos
go.postfix.completion.task=Las porciones del alfabeto están desordenadas. Para ordenar correctamente un segmento de cadena, puede aplicar la función {0} del paquete {1} al segmento.\nFinalización de código para la función
go.postfix.templates.lesson.name=Plantillas de sufijos (nn, pánico, rr, retorno)
go.postfix.templates.nn=Las plantillas de sufijo le permiten convertir una expresión ya ingresada en otra expresión según el sufijo después del punto, el tipo de expresión y su contexto. Puede utilizar un conjunto de plantillas de finalización de sufijos predefinidas o crear una nueva plantilla. Para obtener más información sobre las plantillas de sufijos personalizadas, consulte <a href \= "{0}">Este artículo</a>.\nEscriba {0} e ingrese <action>EditorEnter</action> Presione . Seleccione {1} de la lista de sugerencias.
go.postfix.templates.rr=La plantilla de finalización de sufijo {0} genera código para comprobar que la variable de error no es {1}. Puede utilizar la plantilla de finalización de sufijo {0} para el manejo de errores.\nEscriba {0} y aplique la plantilla de sufijo {1}.
go.press.and.apply.fix.redundant.condition=El IDE muestra un mensaje de advertencia sobre condiciones superpuestas dentro del bucle {0}. Utilice la solución rápida para eliminar esta condición. Presione {1} y seleccione {2}.
go.quick.documentation.convert.to.pointer.receiver=Puede actualizar el método {0} para seguir las reglas. Convierta un método de un receptor de valores a un receptor de puntero ingresando {1} antes de {2}.
go.quick.documentation.iota=Puede obtener rápidamente información sobre cualquier símbolo en el editor. Por ejemplo, para ver el valor {0}, ejecute la acción {1}.\n<a href="{0}">Ir a la documentación</a> requiere que todos los métodos de un tipo tengan un valor o un receptor de puntero .Recomiendo hacerlo. En <ide/>, noté que la estructura {1} tiene métodos tanto para receptores de valor como de puntero. También puede reescribir o eliminar el método {2}. Haga clic en el enlace a continuación para continuar con los siguientes pasos.
go.quick.documentation.title=Utilice documentos rápidos
go.quick.fix.refactorings.change.to.formatting=La función {0} imprime la lista de variables en el formato predeterminado. Mientras tanto, la función {1} le permite especificar el formato de salida. Este ejemplo utiliza el verbo de formato ({2}) para números de punto flotante. Pero use {0} en lugar de {1}.\nHay varias formas de declarar variables. Una vez declarada una variable, puede utilizar el signo igual ({0}) para asignar su valor.\nSi cambia el nombre de un elemento en <ide/>, se aplicará ese cambio. <ide/> cambia el nombre de los elementos del código y actualiza sus ubicaciones de uso en consecuencia.\nLa refactorización de extracción de métodos le permite tomar un fragmento de código, moverlo a una función separada y reemplazar el código antiguo con una llamada de función. Muevamos toda la impresión a funciones separadas.\nLos documentos externos abren la información que necesita en su navegador web, lo que le permite navegar a símbolos relacionados y al mismo tiempo archivar la información para mayor referencia.\nSeleccione {0} y presione {1}.
go.quick.fix.refactorings.rename=Puede aplicar ese cambio cambiando el nombre del elemento en <ide/>. <ide/> cambia el nombre de los elementos del código y actualiza su uso en consecuencia.\nLa refactorización ayuda a mantener su código manejable y libre de espacios vacíos o código duplicado.
go.refactorings.module.name=Refactorización
go.rename.apply.intention=Introduzca un nuevo nombre para este campo. Por ejemplo, escriba {0} y luego presione {1} para guardar el resultado.
go.rename.invoke.intentions=Puede colocar un símbolo de intercalación en un símbolo y cambiarle el nombre usando la refactorización {0}. Coloque el cursor en el campo {1} de su código y presione {2}.
go.rename.lesson.name=Cambiar nombre
go.running.code.context.menu=Hay varias formas de ejecutar su código. Una forma es utilizar el menú contextual.\nHaga clic en {0} para ejecutar el código. El resultado de la aplicación se muestra en la ventana de herramientas {1}.
go.running.module.description=Ejecute su código en su IDE
go.running.module.name=correr
go.search.module.description=Conozca las funciones de búsqueda del IDE
go.search.module.name=Buscar
go.smart.type.completion.and.pointers.first.task=<ide/> puede sugerir una lista de posibles direcciones de punteros y variables.\nLa finalización inteligente de tipos también funciona con punteros. Para devolver un puntero, presione {0} para seleccionar {1}.
go.smart.type.completion.and.pointers.second.task=La finalización de tipo inteligente también funciona con punteros. Para devolver un puntero, presione {0} para seleccionar {1}.
go.smart.type.completion.lesson.name=Finalización de tipo inteligente
go.smart.type.completion.special.cases.lesson.name=Creación de aserción de tipo y cambio
go.smart.type.completion.special.cases.line=Si decide pasar una cadena a la función {0}, obtendrá el error {1}. Si desea comprobar el tipo de un valor, puede utilizar la sintaxis de cambio de tipo. Presione {2} para seleccionar {3}.
go.smart.type.completion.special.cases.number=Si necesita validar o verificar el tipo de una variable, puede usar afirmaciones de tipo o declaraciones de cambio. <ide/> muestra esos tipos al principio de la lista de sugerencias. Continúe ingresando nombres de tipos para reducir la cantidad de sugerencias.\nSi decide pasar una cadena a la función {0}, verá un error {1}. Si desea comprobar el tipo de un valor, puede utilizar la sintaxis de cambio de tipo. Presione {2} para seleccionar {3}.
go.struct.fields.create.type=Cuando trabaje con estructuras, es posible que desee crear primero una estructura con campos y sus valores, y luego definir todo como un tipo de estructura. Como en el ejemplo, creamos una nueva estructura y definimos valores para sus campos. Sin embargo, todavía no hay una definición de estructura.\nAhora la estructura {0} está definida para ese campo.
go.struct.fields.lesson.name=Crear una estructura y rellenar campos de estructura.
go.struct.fields.struct.no.fields=También hay otra situación. Hemos definido todo, pero aún necesitamos completar los nombres de los campos para nuestra nueva estructura. Puede volver a escribirlo manualmente, pero <ide/> tiene una acción intencionada para este procedimiento.
go.struct.fields.type.defined=Ahora la estructura {0} está definida para ese campo.
go.struct.inspections.delete.line=La advertencia indica que intentar asignar dos campos de estructura ({0} y {1}) al mismo nombre de campo JSON no es una buena idea. Cuando se produce este error, el programa se ejecuta, pero falta una clave en el resultado.\nGo tiene reglas sobre la programación de etiquetas de estructura. Puede encontrar más información sobre esta regla en <a href\="{0}">este artículo en golang.org</a>.\nInspección de estructuras
go.support.for.table.tests.call.context.menu=Al ejecutar una prueba, <ide/> tiene en cuenta la posición del signo de intercalación.\nPuede ejecutar cada subprueba utilizando el mismo método. El cursor actual está en la subprueba {2}. Haga clic en {0} para ejecutar. Puedes consultarlo en \n"{1}">documentación de GoLand</a>.
go.support.for.table.tests.run.subtest=Puede ejecutar cada subprueba utilizando el mismo método. El cursor actual está en la subprueba {2}. Haga clic en {0} para ejecutar. \n¡Ups, la prueba de fuzz falló! Para descubrir por qué, desplácese hacia abajo en el resultado de la ventana de herramientas {0} y haga clic en el enlace al directorio {1}.
go.support.fuzz.testing.run=La prueba difusa es un método para automatizar las pruebas mediante el envío de varias entradas de forma secuencial. Comprobemos la función con varios datos generados al ejecutar una prueba fuzz.\n¡Oh, no, la prueba fuzz falló! Para descubrir por qué, desplácese hacia abajo en el resultado de la ventana de herramientas {0} y haga clic en el enlace al directorio {1}.
go.support.of.go.embed.fs=Una verificación mostró que el directorio especificado no existe. Puede reemplazar este directorio con un directorio existente.\nvarCheckError plantilla de sufijo
go.support.of.go.embed.navigate=Todavía hay problemas con el archivo. Presione {0} para pasar a otro problema.
go.support.of.go.embed.note=Para utilizar la directiva {0}:{1}, asegúrese de tener instalado Go 1.16 o posterior. Para obtener más información sobre la instalación del SDK de Go, consulte <a href="{2}">Descargar el SDK de Go desde la documentación</a>.
go.support.of.go.embed.string=Puede usar la directiva {0} para incluir archivos y directorios en el binario de Go durante el tiempo de compilación.\n{0}: para usar la directiva {1}, asegúrese de tener instalado Go 1.16 o posterior. Para obtener más información sobre la instalación del SDK de Go, consulte <a href="{2}">Descargar el SDK de Go desde la documentación</a>.
go.support.of.testify.framework.completion.and.subtests.run.subtest=Además, puede ejecutar las subpruebas {0} y {1} siempre que los nombres de las subpruebas sean constantes de cadena.\nLas pruebas garantizarán que su código funcione correctamente como se espera.
go.testing.module.name=Pruebas
go.to.internal.directory={0} A partir de 2021.2, puede navegar a las interfaces almacenadas en la carpeta {1}.\nDe acuerdo con las <a href="{0}">sugerencias de restricciones de compilación a prueba de errores</a>, {1} será reemplazado por {2} Cambia a . Durante el período de transición {1}-{2}, la sintaxis se mantendrá en las versiones de Go 1.16-1.18. En Go versión 1.16, puede usar la sintaxis antigua o ambas sintaxis simultáneamente.\nPara verificar la ubicación del archivo, simplemente coloque el mouse sobre la pestaña del editor. Por ejemplo, coloque el cursor sobre la pestaña {0}.
go.to.internal.directory.name=Navegación, restricciones de compilación y formato de código.
go.to.internal.directory.reformat.gofmt.on.save=Es necesario reformatear el código del archivo {0}. Haga clic en {1} para reformatear el archivo.\nUtilice parámetros de tipo
go.type.parameters.module.name=Genéricos (parámetros de tipo)
go.var.check.error.postfix.template.anonymous.variable=Utilice un identificador vacío ingresando {0} y luego presione {1}.
go.var.check.error.postfix.template.call=Continuemos nuestra discusión sobre el manejo de errores. Esta vez es la plantilla de sufijo {0}. Si lo escribe después de un identificador que devuelve un error, <ide/> agrega automáticamente el nombre de la variable predeterminada y devuelve el error generado por la función.\nUse un identificador vacío escribiendo {0} y luego presione {1}.
go.var.check.error.postfix.template.quick.fix=Go 1.16 introduce una nueva verificación para {0}. Esta verificación garantiza que el segmento de bytes no sea el valor no clasificado {1}. <ide/> detecta estos casos y tiene una solución rápida para resolver el problema. Presione {2} y luego seleccione {3}.
go.variadic.functions.inline=Puede reemplazar un sector con el argumento variable del sector. Presione {0} para invocar la refactorización {1}.
go.variadic.functions.introduce.variable=Para revertir la refactorización {0}, utilice la refactorización {1}. Presione {2} y seleccione {3} de la lista de sugerencias.
go.variadic.functions.lesson.name=Procesamiento de funciones variables
go.variadic.functions.unpack.slice=Una función variada es una función que se puede llamar con un número variable de argumentos, como {0}.\nPuede reemplazar un segmento con los argumentos variados del segmento. Presione {0} para invocar la refactorización {1}.
go.what.s.new.module.name=Novedades de GoLand 2020.3
go.working.with.json.add.key.to.tags=También puede utilizar acciones de intención para agregar etiquetas XML y etiquetas ASN1.\nPuede aplicar diferentes estilos de código a los nombres de los campos dentro de las etiquetas. Por ejemplo, intente cambiarlo a camelCase. Presione {0}, haga clic en {1} y luego seleccione {2}.
go.working.with.json.copy=<ide/> tiene varias herramientas para ayudarle a procesar su código JSON de manera más efectiva.\nReemplace la sección de comentarios haciendo clic en {0}. Cuando aparezca el cuadro de diálogo {1}, haga clic en <strong>Sí</strong>.\nCambie el nombre de la estructura, ingrese {0} y luego presione {1} para finalizar la edición. El IDE corrige automáticamente el formato.
go.working.with.json.name.struct=Cambie el nombre de la estructura, ingrese {0} y luego presione {1} para finalizar la edición. El IDE corrige automáticamente el formato.
go.working.with.json.replace=Presione {0} para reemplazar la sección de comentarios. Cuando aparezca el cuadro de diálogo {1}, haga clic en <strong>Sí</strong>.\nLo mismo ocurre con la actualización de la ubicación del valor de la etiqueta. Digamos que desea agregar {0} a todas las etiquetas en la estructura actual.\nAsegúrese de que el cursor esté en la posición del primer parámetro del método {0}. Presione {1} para llamar a la acción de intención.
go.working.with.parameters.invoke.intentions.2=Verifique el método {0} en el editor. El cursor está en la posición del primer parámetro. Presione {1} para llamar a la acción de intención.
go.working.with.parameters.invoke.intentions.3=Si un método que implementa una interfaz requiere parámetros, no es seguro eliminarlos. Presione {0} para ver una lista de opciones posibles.
go.working.with.parameters.lesson.name=Usar parámetros
go.working.with.parameters.press.action.again=Presione {0} nuevamente.
go.working.with.parameters.remove.parameters=<ide/> solo resalta los nombres de los parámetros obsoletos si sus tipos se utilizan para implementar la especificación del método. En este caso, puede cambiar el nombre de este parámetro a {0} o eliminarlo por completo.
go.working.with.parameters.signature.combined=Vea cómo se combinan los tipos de firma.
go.working.with.parameters.signature.expanded=Seleccione {0} para devolver la firma a su estado inicial.
go.working.with.parameters.single.type=Si una firma de función o método tiene múltiples parámetros de un solo tipo, puede usar una especificación de tipo corta ({0}) para esos parámetros, o una especificación de tipo separada ({1}) para cada parámetro.
go.working.with.parameters.that.are.not.used=<ide/> puede detectar parámetros de una firma que no se utilizan en el cuerpo de un método o función. Si ese parámetro no se utiliza, puede utilizar la solución rápida {0} para eliminarlo.
go.wrapping.delete.line=Lo que significa la advertencia es que intentaste pasar un número entero a una función de formato. {0} toma una cadena de plantilla que contiene el texto que debe alinearse. Puede utilizar verbos de formato o soluciones rápidas para convertir números enteros en cadenas.\nEl primer argumento aún está fuera del área visible. Recomendamos habilitar la envoltura suave para filas largas. Presione {0}, ingrese {1} y luego active el interruptor {2}. Luego podrás cerrar la búsqueda presionando {3}.
go.wrapping.lesson.name=Envoltura de línea larga
go.wrapping.put.arguments.on.separate.lines=La función {0} recibe bastantes argumentos. El problema es que el primer argumento es muy largo y no puedo determinar qué viene después. Puedes solucionar este problema. Ahora que el signo de intercalación está colocado después del corchete de apertura, debemos presionar {1} y seleccionar {2}.
go.wrapping.put.parameters.on.same.lines=Creo que se vería mejor si los argumentos de la función {0} se manejaran en una sola línea. Para fusionar, coloque el signo de intercalación después del corchete de apertura, llame a la acción de intención presionando {1} y luego seleccione {2}.
toggle.case.part=Case
