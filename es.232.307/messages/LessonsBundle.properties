basic.completion.activate.explicitly=기본 코드 완성 기능을 명시적으로 활성화하려면 {0}을(를) 누르세요.
basic.completion.finish.explicit.completion={0}을(를) 선택한 후 {1}을(를) 누르세요.
basic.completion.help.code.completion=기본 코드 완성
basic.completion.just.press.to.complete=이제 {0}을(를) 눌러 이 구문을 완성하세요.
basic.completion.lesson.name=기본 코드 완성
basic.completion.start.typing=기본적으로 <ide/>은(는) 코드 완성을 즉시 제안합니다. 캐럿이 있는 곳에서 {0}을(를) 입력하기 시작하면 일치하는 제안 항목이 포함된 완성 목록이 표시됩니다.
code.assistance.module.description=코드 서식 지정 방법, 매개변수 정보를 얻는 방법, 빠른 팝업을 미리보는 방법을 배워보세요.
code.assistance.module.name=코드 지원
code.completion.module.description=IDE가 코드를 완성합니다. 기본, 스마트 및 기타 타입의 코드 완성 기능을 사용해보세요.
code.completion.module.name=코드 완성
code.format.help.link=코드 스타일 구성
code.format.lesson.name=코드 서식
code.format.optimize.imports=여기서 서식 다시 지정 옵션을 구성할 수 있습니다. 예를 들어 {0}을(를) 켜고 {1}을(를) 클릭하세요.
code.format.reformat.file=줄이 선택되지 않은 상태에서 전체 파일의 서식을 다시 지정하려면 {0}을(를) 사용하세요.
code.format.reformat.selection=<ide/>에서는 단 하나의 액션으로 코드 서식을 수정할 수 있습니다. 선택한 코드 조각의 서식을 {0}을(를) 눌러 다시 지정하세요.
code.format.show.reformat.file.dialog=서식 다시 지정 설정을 표시하려면 {0}을(를) 사용하세요.
collapse.all.collapse=파일 내 모든 영역을 접으려면 {0}을(를) 누르세요.
collapse.all.expand=마찬가지로 {0}을(를) 눌러 사용 가능한 모든 영역을 확장하세요.
collapse.help.link=코드 요소 펼치기 또는 접기
collapse.hit.expand=코드 영역을 확장하려면 {0}을(를) 누르세요.
collapse.lesson.name=접기
collapse.try.collapse=가독성 향상을 위해 코드의 일부를 접어야 하는 경우가 있습니다. {0}(으)로 코드 조각을 접어보세요.
comment.block.comment=블록 주석 {0}(으)로 주석을 다려느 경우 코드 블럭을 선택하고 {1}을(를) 누르세요.
comment.block.lesson.name=줄과 코드 블럭을 주석 처리
comment.block.uncomment=블록 주석을 주석 해제하려면 캐럿을 주석 블록 안 아무곳에 둔 뒤 {0}을(를) 누르세요.
comment.line.comment.any.line={0}(으)로 임의의 줄을 주석 처리하세요.
comment.line.comment.several.lines=여러 줄을 선택한 후 {0}(으)로 주석 처리하세요.
comment.line.lesson.name=주석 줄
comment.line.uncomment.several.lines=여러 줄을 주석 해제하려면 주석 처리된 줄을 모두 선택하고 {0}을(를) 누르세요.
comment.line.uncomment.that.line=주석 처리된 줄을 같은 단축키로 주석 해제: 캐럿을 줄 내의 아무곳에 둔 뒤 {0}을(를) 누르세요.
completion.with.tab.begin.completion={0}을(를) 눌러 완성 제안을 확인하세요. 제안 목록에 {1}이(가) 표시되지 않으면 이 항목이 표시될 때까지 {1}을(를) 입력하세요.
completion.with.tab.finish.with.tab={0}을(를) 선택하고 {1}을(를) 누르세요. 이 액션은 선택한 제안을 단순히 삽입하지 않고 캐럿이 놓인 단어를 완전히 바꿉니다.
completion.with.tab.lesson.name=탭으로 코드 완성
context.actions.apply.intention={0} 액션을 적용해봅시다.
context.actions.fix.warning=첫 번째 빠른 수정인 {0}을(를) 적용해봅시다.
context.actions.help.intention.actions=인텐션 액션
context.actions.invoke.general.intentions={0}은(는) 거의 모든 컨텍스트에서 호출할 수 있습니다. 다른 캐럿 위치에서는 무엇을 할 수 있는지 살펴보겠습니다. {1}을(를) 다시 누르세요.
context.actions.invoke.intentions.for.warning=<ide/>에는 코드를 변환, 개선 및 수정하는 데 도움을 주는 컨텍스트 기반 액션이 많습니다. {1}을(를) 눌러 {0}을(를) 호출하세요.
context.actions.lesson.name=컨텍스트 액션
context.actions.refactorings.promotion={0}을(를) 통해서는 수많은 유용한 리팩터링을 사용할 수 없습니다. {1} 모듈로 이동하여 리팩터링 호출 및 사용 방법을 학습하세요.
debug.workflow.check.result={0}을(를) 눌러 선택된 return 문을 평가하세요.
debug.workflow.choose.method.to.step.in=여러 개의 중첩된 호출이 있고 스마트 스텝인투가 이러한 호출을 모두 강조 표시한다는 점에 유의하세요. {1}을(를) 눌러 {0} 호출을 모두 선택하고 {2}을(를) 눌러 스텝인투하세요.
debug.workflow.consider.to.add.a.shortcut=(나중에 단축키를 지정해보세요)
debug.workflow.evaluate.expression=함수가 예외를 던지는지 확인하려면 이 함수를 호출하는 표현식을 평가하면 됩니다. 선택된 표현식을 복사하고 디버그 창에서 강조 표시된 필드에 붙여 넣어 보겠습니다.
debug.workflow.evaluate.it={0}을(를) 눌러 표현식을 평가합니다.
debug.workflow.exception.description=프로그램이 예외를 던지면, 실행 창에서 스택 추적을 볼 수 있습니다. 스택 추적에서 파일 이름과 줄 번호를 클릭하여 에디터로 이동할 수도 있습니다.
debug.workflow.fix.error=배열 색인에 실수가 있습니다! 지금 바로 수정해봅시다. {0}을(를) 눌러 팝업을 닫고 0을 1로 변경하세요.
debug.workflow.frames.disabled.warning=이 강의를 계속하려면 디버그 도구 창에서 {1} 뷰를 <callback id="{0}">활성화</callback>하세요.
debug.workflow.help.link=코드 디버그
debug.workflow.incorrect.breakpoints=이 수업의 중단점이 잘못 설정되어 있습니다.
debug.workflow.lesson.name=디버그 워크플로
debug.workflow.mute.breakpoints=이런, 중단점에서 다시 걸렸습니다. 하지만 이번에는 여기서 멈추지 않아도 됩니다. 디버그 창에서 {0}을(를) 클릭하여 중단점을 꺼 보겠습니다.
debug.workflow.need.restart.lesson=디버그 세션이 중지되었습니다. 수업을 다시 시작하세요.
debug.workflow.quick.evaluate={0}에 전달할 항목을 확인해 봅시다. {1}을(를) 눌러 선택한 인수의 ''빠른 표현식 평가''를 호출하세요.
debug.workflow.resume=이번에는 호출이 예외 없이 동작합니다. {0}을(를) 누르거나 디버그 창에서 {1}을(를) 클릭하여 프로그램 실행을 재개합니다.
debug.workflow.run.current=입력을 바탕으로 여러 과일의 평균 중량을 계산하는 샘플 프로그램을 실행해 보겠습니다.
debug.workflow.run.to.cursor.intro=마지막으로 {0}의 결과를 확인해 보겠습니다(편의를 위해 캐럿을 {1} 문으로 옮겨놓았습니다).
debug.workflow.run.to.cursor.press={0}을(를) 눌러 프로그램을 캐럿이 있는 곳까지 실행하세요.
debug.workflow.run.to.cursor.press.or.click={0}을(를) 눌러 프로그램을 캐럿이 있는 곳까지 실행하거나 {1}을(를) 클릭하세요.
debug.workflow.start.debug=현재 선택된 실행 구성의 디버그를 시작하려면 툴바에서 {0}을(를) 클릭하거나 {1}을(를) 누르세요.
debug.workflow.step.into=예외의 원인을 찾기 위해 선택된 호출로 스텝인투해 보겠습니다. {0}을(를) 누르거나 디버그 창에서 {1}을(를) 클릭하세요.
debug.workflow.step.over=수정 후에 {0}을(를) 호출하면 예외가 던져지는지 확인해 보겠습니다. 호출을 스텝오버하기 위해 {1}을(를) 누르거나 디버그 창에서 {2}을(를) 클릭하세요.
debug.workflow.stop.debug=올바른 결과가 나왔습니다! {0}을(를) 누르거나 툴바에서 {1}을(를) 클릭하여 디버그를 완료합니다.
debug.workflow.toggle.breakpoint=문제 조사를 시작하기 위해 중단점을 설정해 보겠습니다. 그러기 위해 원하는 줄에서 여백을 클릭하거나 캐럿을 해당 줄로 옮긴 다음 {0}을(를) 누르세요.
debug.workflow.use.watches=표현식의 결과로 예외가 발생합니다. 이 표현식을 {0}에 추가하여 다음부터는 자동으로 평가되도록 하겠습니다. {1}을(를) 누르거나 {2}을(를) 클릭하세요.
debug.workflow.use.watches.shortcut=혹은 액션 {0}을(를) 사용하여 선택된 텍스트를 {1} {2}에 추가할 수도 있습니다.
declaration.and.usages.find.usages={0}을(를) 눌러 사용 위치에 대한 세부 정보를 확인하세요. 선언 또는 사용 위치 중 하나에서 {0}을(를) 호출할 수 있습니다.
declaration.and.usages.help.link=선언과 그 타입으로 이동
declaration.and.usages.hide.view=사용 위치 찾기가 완료되면 {0}을(를) 눌러 뷰를 숨기세요.
declaration.and.usages.jump.to.declaration={0}을(를) 눌러 메서드 선언으로 이동하세요.
declaration.and.usages.lesson.name=선언 및 사용 위치
declaration.and.usages.open.find.view={0}을(를) {1} 뷰를 다시 여세요.
declaration.and.usages.pin.motivation={0} 뷰에서 선언 및 사용 위치 모두로 이동할 수 있습니다. 검색을 다시 하면 {0} 뷰의 결과가 덮어쓰기 됩니다. 이를 방지하려면, 결과를 고정하세요.
declaration.and.usages.right.click.tab=탭 제목, {0}을(를) 마우스 오른쪽 버튼으로 클릭하세요.
declaration.and.usages.select.pin.item={0}을(를) 선택하세요.
declaration.and.usages.show.usages=이제 캐럿이 메서드 선언의 위치에 있습니다. 같은 단축키 {0}을(를) 사용하여 모든 사용 위치를 확인하고 그 중 하나를 선택하세요.
duplicate.and.delete.lines.delete.line=현재 줄을 삭제하려면 {0}을(를) 누르세요.
duplicate.and.delete.lines.duplicate.line={0}을(를) 사용해 캐럿이 놓인 줄을 복제하세요.
duplicate.and.delete.lines.duplicate.several.lines=이제 {0}을(를) 눌러 선택한 줄을 복제하세요.
duplicate.and.delete.lines.lesson.name=줄 복제 및 삭제
duplicate.and.delete.lines.select.several.lines=같은 액션을 여러 줄에 적용할 수 있습니다. 예를 들어, {0}을(를) 두 번 눌러 현재 및 이전 줄을 선택하세요.
duplicate.and.delete.lines.unexpected.selection.restore=예기치 않은 선택 범위
editor.basics.module.description=스마트 단축키로 코드를 추가, 삭제, 선택, 이동, 복제하세요.
editor.basics.module.name=에디터 기초
editor.coding.assistance.fix.error=이 오류를 수정해봅시다! {0}을(를) 누른 후 {1}을(를) 선택하세요.
editor.coding.assistance.fix.warning=팝업에는 이 경고를 수정하기 위한 리팩터링 액션 제안이 표시됩니다.
editor.coding.assistance.goto.next.error={0}을(를) 눌러 파일 내 강조 표시된 다음 오류로 이동하세요.
editor.coding.assistance.goto.next.warning=다음 경고로 이동해봅시다. {0}을(를) 누르세요.
editor.coding.assistance.help.link=소스 코드로 작업
editor.coding.assistance.highlight.usages=또 하나의 편리한 도구는 사용 위치 강조 표시입니다. {0}을(를) 눌러 파일 내 캐럿의 위치에 있는 심볼의 모든 사용 위치를 강조 표시하세요.
editor.coding.assistance.lesson.name=에디터 코딩 지원
editor.coding.assistance.show.warning.description={0}을(를) 눌러 경고 설명을 펼치세요.
essential.module.description={0}의 핵심 기능을 살펴봅니다
essential.module.name=기본
extract.method.confirm.several.replaces=칵테일 정렬에는 2개의 스왑 장소가 있습니다. 첫 조각이 추출되었습니다. {0}을(를) 클릭하여 둘 다 추출하세요.
extract.method.help.link=메서드 추출
extract.method.invoke.action={0}을(를) 눌러 선택한 코드 블록을 메서드로 추출하세요.
extract.method.lesson.name=메서드 추출
extract.method.second.fragment=이제 두 번째 조각의 바꾸기를 확인 또는 거부할 수 있습니다.
extract.method.start.refactoring={0}을(를) 클릭하여 리팩터링을 시작하세요.
extract.variable.choose.name=새 변수의 이름을 선택하거나 그대로 두세요. {0}을(를) 눌러 리팩터링을 완료하세요.
extract.variable.help.link=변수 추출/삽입
extract.variable.lesson.name=변수 추출
extract.variable.replace.all=이 코드 블록에는 선택한 표현식의 찾은 항목이 3개 있습니다. 목록의 두 번째 항목을 선택하여 모두 교체하세요.
extract.variable.start.refactoring={0}을(를) 눌러 표현식 {1}에서 지역 변수를 추출하세요.
file.structure.help.link=소스 파일 구조 보기
file.structure.lesson.name=파일 구조
file.structure.navigate=남아 있는 항목은 1개뿐입니다. 이제 {0}을(를) 눌러 선택한 항목으로 이동하세요.
file.structure.open.popup=큰 소스 파일은 읽기와 탐색이 어려울 수 있습니다. 때로는 미리보기만 필요한 경우도 있습니다. {0}을(를) 눌러 파일 구조를 여세요.
file.structure.request.prefixes=이름에 {0} 및 {1}(이)라는 단어가 포함된 메서드를 찾으려 한다고 가정해 보겠습니다. {2}(필요한 단어의 접두사)을(를) 입력하여 파일 구조를 필터링하세요.
file.structure.toolwindow=<ide/>은(는) 파일 구조를 도구 창으로서 표시할 수도 있습니다. {0}(으)로 여세요.
find.in.files.confirm.replace=마지막으로 대화상자에서 {0}을(를) 클릭하여 확인하세요.
find.in.files.go.to.file=메인 에디터에서 선택한 파일을 열 수도 있습니다. {0}을(를) 누르거나 강조 표시된 항목을 두 번 클릭하여 해당 파일로 이동하세요.
find.in.files.help.link=프로젝트 파일에서 텍스트 찾아 바꾸기
find.in.files.lesson.name=파일에서 찾기 및 바꾸기
find.in.files.popup.closed.warning.message={0}을(를) 눌러 {1} 창을 다시 여세요.
find.in.files.press.replace.all={0}을(를) 눌러 대체를 시작합니다.
find.in.files.select.directory=검색 및 교체 범위를 정의할 수 있습니다. 대체 대상을 현재 디렉터리로만 좁히려면 {0} 버튼을 클릭하거나 {1}을(를) 클릭하세요.
find.in.files.select.row=발견된 문자열의 컨텍스트가 임베디드 에디터에 표시됩니다. 강조 표시된 행을 클릭하거나 {0} 및 {1} 버튼을 사용해 그곳으로 이동하세요.
find.in.files.show.find.popup=프로젝트 내에서 어떤 문자열의 찾은 항목을 모두 찾으려 한다고 가정해봅시다. {0}을(를) 눌러 {1} 창을 여세요.
find.in.files.show.replace.popup=검색한 모든 찾은 항목을 다른 문자열로 바꾸려 한다고 가정해봅시다. 각 파일을 순차적으로 바꾸는 일은 매우 지루할 것입니다. <ide/>이(가) 이 작업을 돕습니다. {0}을(를) 눌러 {1} 창을 여세요.
find.in.files.type.to.find={0}을(를) 입력하여 학습 프로젝트에서 텍스트의 모든 찾은 항목을 검색하세요.
find.in.files.type.to.replace=모든 {0}의 찾은 항목을 {1}(으)로 바꿔봅시다. 강조 표시된 필드에 {1}을(를) 입력하세요.
find.in.files.whole.words={0} 문자열을 찾으려 했으나 {1} 항목 또한 검색되었습니다. 검색 범위를 단어 단위로 좁혀봅시다. {2}을(를) 클릭하거나 {3}을(를) 누르세요.
goto.action.first.lines.toggle=줄 번호 표시를 {0, choice, 0#끄기|1#켜기}로 전환하세요.
goto.action.invoke.about.action=예를 들어, <ide/>에 관해 알고 싶다면 {0}을(를) 입력한 후 {1}을(를) 누르세요.
goto.action.invoke.again={0}을(를) 사용하거나 {1}을(를) 두 번 눌러 IDE 및 프로젝트 설정을 변경할 수 있습니다. 이 중 하나의 단축키를 다시 눌러 보세요.
goto.action.lesson.name=액션 검색
goto.action.mac.workaround={0} 대신 <strong>터미널</strong> 검색이 열리는 경우, <a href="{1}">이 글</a>을 참조하세요.
goto.action.popup.closed.warning.message={0}을(를) 누르거나 {1}을(를) 두 번 눌러 검색 창을 다시 여세요.
goto.action.propose.to.go.next.new.ui=잘하셨습니다! {0}을(를) 누르거나 아래 버튼을 클릭하여 다음 강의를 시작하세요.
goto.action.second.lines.toggle=이제 줄 번호 표시를 {0, choice, 0 #켜기|1 #끄기}로 다시 전환하세요.
goto.action.show.line.numbers.request={1} 선택자를 보려면 {0}을(를) 입력하세요.
goto.action.to.return.to.the.editor={0}을(를) 눌러 에디터로 돌아가세요.
goto.action.use.find.action.1={0}은(는) 매우 유용한 단축키입니다. 이 단축키를 이용하면 사용 가능한 모든 액션을 검색할 수 있기 때문에 각 액션의 단축키를 외울 필요가 없습니다. {1}(으)로 이용해보세요.
goto.action.use.find.action.2=또는 {1}을(를) 두 번 눌러 {0}을(를) 호출할 수 있습니다. 프로젝트 코드 엔티티<strong>뿐만 아니라</strong> IDE 항목도 찾을 수 있습니다. 취향대로 선택할 수 있습니다.
help.code.comment=코드 주석 추가 및 제거
help.code.completion=코드 완성
help.code.duplicate=중복 줄 또는 선택 범위
help.find.actions=액션 및 설정 찾기
help.lines.of.code=코드 줄
help.search.everywhere=전체 검색
local.history.close.window=대화상자를 닫고 변경된 코드로 돌아갑니다. {0}을(를) 누릅니다.
local.history.congratulations=좋습니다! 코드 조각을 복원했습니다!
local.history.dialog.message=IDE는 파일 편집 프로세스를 시뮬레이션합니다. 완료될 때까지 기다려주세요.
local.history.editor.hint=현재 단계에 대한 파일 수정이 비활성화되었습니다.
local.history.file.modification.progress=파일 수정 중
local.history.help.link=로컬 기록
local.history.imagine.restore=이전에 삭제한 코드를 복원해야 하는 경우를 생각해 보세요. 해당 코드가 삭제된 후에 수차례 변경되어 {0}은(는) 동작하지 않는 상태이며 이러한 변경 사항을 보존하려고 합니다.
local.history.invoke.context.menu={0}을(를) 사용하면 삭제한 코드를 몇 번만 클릭하여 복원할 수 있습니다. 에디터의 아무 곳이나 마우스 오른쪽 버튼으로 클릭하여 컨텍스트 메뉴를 열어 보세요.
local.history.lesson.name=제거된 코드 복원
local.history.remove.code=이 수업에서는 {0}을(를) 사용하여 코드를 복원하는 방법을 배웁니다. {1}을(를) 눌러 선택한 코드 조각을 삭제하세요.
local.history.restore.code=오른쪽 패널에는 파일의 현재 리비전과 선택된 리비전 간의 차이점이 표시됩니다. 이 경우에는 선택된 리비전에 삭제된 코드가 있습니다. 삭제된 코드 조각을 복원하려면 펼침 버튼 {0}을(를) 클릭하세요.
local.history.restore.code.balloon=클릭하여 코드 조각 복원
local.history.select.revision={0} 대화상자의 왼쪽 패널에 현재 파일의 저장된 리비전 목록이 표시됩니다. 프로젝트 상태는 코드 편집, 테스트 실행 및 기타 액션을 수행할 때마다 {1}에 자동으로 저장됩니다. 강조 표시된 리비전을 선택해 봅시다.
local.history.show.history={0} → {1}을(를) 선택합니다.
move.lesson.name=코드 조각 이동
move.pull.down=줄 재배치는 보통 잘라내기와 붙여넣기의 두 가지 액션을 포함합니다. <ide/>을(를) 사용하면 하나의 액션만으로 실행할 수 있습니다. {0}을(를) 눌러 현재 줄을 아래로 이동하세요.
move.pull.up=마찬가지로 줄을 위로 이동하려면 {0}을(를) 누르세요.
move.whole.method.down=이제 {0}(으)로 아래로 이동하세요.
move.whole.method.up={0}(으)로 전체 메서드를 위로 이동해보세요. 단, 캐럿이 메서드의 헤더에 있어야 합니다.
multiple.selections.deselect.symbol={0}을(를) 눌러 마지막 찾은 항목을 선택 해제하세요.
multiple.selections.escape={0}을(를) 눌러 다중 선택을 초기화하고 단일 캐럿 모드로 돌아갑니다.
multiple.selections.help.multiple.carets=다중 캐럿 및 선택 범위
multiple.selections.lesson.name=여러 선택 범위
multiple.selections.replace={0}을(를) 입력하여 {1}의 모든 찾은 항목을 {0}(으)로 바꾸세요.
multiple.selections.select.all={0}을(를) 눌러 이 파일의 모든 찾은 항목을 선택하세요.
multiple.selections.select.next.symbol={0}을(를) 눌러 이 심볼의 다음 찾은 항목을 선택하세요.
multiple.selections.select.symbol={0}을(를) 눌러 캐럿의 위치에 있는 심볼을 선택하세요.
navigation.module.description=소스로 이동하여 선언, 구현 및 파일 구조로 이동하세요.
navigation.module.name=탐색
new.selection.add.quotes={0}을(를) 세 번 눌러 따옴표를 선택 범위에 포함하세요.
new.selection.select.call={0}을(를) {1, choice, 1#1|2#2| 3#1| 4#4}번 더 눌러 전체 호출을 선택하세요.
new.selection.select.if=캐럿의 위치를 {0} 문의 시작 부분으로 이동했습니다. {1}을(를) 두 번 눌러 선택하세요. 키워드를 사용하면 키를 몇 번만 눌러 해당 구문을 선택할 수 있습니다.
new.selection.select.string=전체 문자열을 선택하려면 {0}을(를) 다시 누르세요.
new.selection.select.word={0}을(를) 눌러 캐럿 아래에 있는 단어를 선택하세요.
new.selection.unselect=전체 호출이 아니라 인수를 선택하고 싶다고 가정해 보겠습니다. {0}을(를) 눌러 선택 범위를 인수로 다시 축소하세요.
onboarding.return.to.welcome.remark=\ 및 시작 화면으로 돌아가기
parameter.info.add.parameters={0}의 width 및 {1}의 height를 사용하세요.
parameter.info.help.link=매개변수 정보
parameter.info.lesson.name=매개변수 정보
parameter.info.use.action={0}을(를) 눌러 메서드 시그니처를 확인하세요.
postfix.completion.help.link=접미사 코드 완성
postfix.completion.intro=접미사 완성은 코드를 작성할 때 후방 캐럿 이동을 줄이는 데 도움이 됩니다. 추가한 접미사, 표현식 타입 및 해당 컨텍스트를 기반으로 이미 입력된 표현식을 다른 표현식으로 변환할 수 있습니다.
postfix.completion.lesson.name=접미사 완성
proceed.to.the.next.step=<callback id="{0}">클릭하여 진행</callback>
quick.popups.help.link=빠른 팝업
quick.popups.lesson.name=빠른 팝업
quick.popups.press.escape={0}을(를) 눌러 팝업을 닫으세요.
quick.popups.show.documentation={0}을(를) 눌러 캐럿의 위치에 있는 심볼에 대한 문서를 확인하세요.
quick.popups.show.implementation={0}을(를) 눌러 캐럿의 위치에 있는 심볼의 정의를 확인하세요.
readme.bug.tracker.remark=다른 문제가 발생한 경우 강의를 다시 시작하거나 [버그 트래커]({0} )에서 버그를 신고하세요.
readme.conclusion.header=프로젝트로 돌아가기
readme.exit.options=시작 화면으로 돌아가려면 프로젝트 창을 닫으세요. 아니면 메인 메뉴에서 ''{0} | {1}''을(를) 선택하세요. 또한 ''{0}'' 메뉴를 사용하여 새 프로젝트를 열거나 생성할 수도 있습니다. 기본적으로 ''{2}'' 도구 창은 숨겨져 있습니다. 이 창은 메인 메뉴에서 ''{3} | {4}''을(를) 선택하여 열 수 있습니다.
readme.experienced.users.remark=강의가 아는 내용처럼 보여도 한 번 들어보세요. 자주 사용하는 기능의 유용한 예시와 몰랐던 단축키를 발견할 수도 있습니다!
readme.feedback.request=이 학습 과정에 관한의견을 남겨주시면 감사하겠습니다!
readme.ift.description=이 대화형 교육과정에서는 수많은 IDE 워크플로와 사용 사례를 안내합니다. 여기에서 유용한 액션 단축키가 다양하게 제공되지만 모두 외울 필요는 없습니다. 대신, 액션을 사용해 보고 가장 유용한 것을 자신의 서비스에 적용하세요. 그리고 일상 작업 중에 새로운 문제에 당면할 수 있으므로 이 교육과정을 다시 방문하여 다른 기능도 다시 사용해보세요. {0}을(를) 사용해 생산성을 높일 수 있도록 도와주는 새로운 강의 소식을 기대해주세요.
readme.indexing.description=학습 프로젝트를 초기화하는 동안 이 'README.md'를 읽고 계실 수도 있겠습니다. 일반적으로 '색인 생성'은 프로젝트 초기화 중에 시간이 가장 많이 소요되는 작업입니다. IDE는 사용자의 환경, 프로젝트{0, choice,1#, 라이브러리|2#}에 대한 정보를 수집한 후 내부 재현을 구성해야 합니다. 이 작업은 빠른 탐색 및 검색을 위해 필요합니다.
readme.navigation.hint=이 교육과정의 ''{0}'' 모듈에서는 사용 방법을 보여줍니다.
readme.shortcuts.header=단축키 관리
readme.shortcuts.problem.description=이 교육과정에서 일부 단축키는 시스템 또는 다른 애플리케이션의 단축키와 충돌할 수 있습니다. 이 경우 강의 텍스트에서 문제가 있는 단축키를 클릭할 수 있습니다. 열린 팝업에는 액션 이름과 대체 단축키가 표시됩니다. 여기에서 액션을 적용하거나 새 단축키를 지정할 수 있습니다.
readme.start.header=시작하기
readme.toolwindow.description=''{0}'' 도구 창에는 순서에 관계없이 수강할 수 있는 해당 학습 세트가 담긴 몇가지 모듈이 있습니다. 강의 학습을 마치면 강의가 ''완료''로 표시됩니다. 완료한 강의는 참조용으로 사용할 수도 있고 지식을 상기시키고 싶을 때 다시 시작할 수도 있습니다.
readme.usage.header=교육과정 이용 방법
readme.welcome.header=대화형 기능 트레이너 만나보기
recent.files.close.popup=이제 최근 파일 기록이 더 깔끔해졌습니다. 팝업 바깥 어딘가를 클릭하여 팝업을 닫거나 {0}을(를) 사용하세요.
recent.files.delete=이 목록에는 더 이상 방문하지 않는 다수의 소스 파일이 포함되어 있습니다. {1}을(를) 사용해 최근 파일 기록에서 {0}개 파일을 삭제해봅시다.
recent.files.dialog.message=기본 워크플로인 파일 간 빠른 이동을 시뮬레이션해보겠습니다. 완료될 때까지 기다려 주세요.
recent.files.dialog.title=워크플로 시뮬레이션
recent.files.first.transition={0} 메서드의 구현 방식이 궁금하신가요? {1}을(를) 사용해 메서드 선언으로 이동해봅시다.
recent.files.lesson.name=최근 파일 및 위치
recent.files.locations.help.link=최근 파일 찾기
recent.files.locations.search.jump=이제 강조 표시된 조각을 선택한 다음 {0}을(를) 눌러 포함 파일을 여세요.
recent.files.locations.search.typing=여기에서는 기억나는 코드 조각으로 검색할 수 있습니다. {0}을(를) 입력하세요.
recent.files.progress.title=파일 여는 중
recent.files.search.jump=단 하나의 파일만 남았습니다. 이제 {0}을(를) 눌러 선택한 파일로 이동하세요.
recent.files.search.typing=이름으로 파일을 검색할 수 있습니다. {0}(필요한 단어의 접두사)을(를) 입력하세요.
recent.files.show.recent.files=라이브러리 파일에 대해 자세히 알아보았습니다. 파일로 되돌아가려면 어떻게 해야 할까요? <ide/>에는 최근 열었던 파일을 표시해주는 기능이 있습니다. {0}을(를) 누르세요.
recent.files.show.recent.locations=다른 유용한 액션을 사용하여 최근 방문한 파일에서 코드를 발견할 수 있습니다. {0}을(를) 누르세요
recent.files.use.recent.files.again=파일로 돌아왔습니다. {0}을(를) 사용해 최근 파일을 다시 확인해봅시다.
refactoring.menu.finish.refactoring=리팩터링을 완료하려면 새 매개변수의 이름을 선택하거나 디폴트 이름을 유지한 상태로 {0}을(를) 누르세요.
refactoring.menu.help.link=리팩터링 호출
refactoring.menu.introduce.parameter=선택된 표현식을 호출 위치로 옮기고, 포함하는 메서드의 매개변수로서 전달해야 한다고 가정해 봅시다. 목록에서 {0}을(를) 선택하고 {1}을(를) 누르세요.
refactoring.menu.introduce.parameter.eng=선택된 표현식을 호출 위치로 옮기고, 포함하는 메서드의 매개변수로서 전달해야 한다고 가정해 봅시다. 이 작업은 {0}(으)로 수행할 수 있습니다. <strong>pa</strong>(introduce <strong>pa</strong>rameter) 또는 <strong>ip</strong>(<strong>i</strong>ntroduce <strong>p</strong>arameter)를 입력하여 제안 목록을 줄이세요.
refactoring.menu.lesson.name=리팩터링 메뉴
refactoring.menu.show.refactoring.list=<ide/>에서는 다양한 리팩터링을 활용할 수 있습니다. 각 리팩터링에는 단축키가 있습니다. 그러나 언제든 {0}을(를) 눌러 현재 컨텍스트에서 사용할 수 있는 모든 리팩터링의 목록을 표시할 수 있습니다.
refactoring.menu.start.refactoring={0}을(를) 눌러 {1} 리팩터링을 시작하세요. <strong>참고</strong>: 리팩터링 메뉴에서 리팩터링 단축키를 학습할 수 있습니다.
refactorings.change.settings.warning.message=이 수업을 완료하려면 에디터 설정에서 리팩터링 옵션을 변경하세요. {0}을(를) 누르고 {1} <strong>→</strong> {2}(으)로 이동하여 {4} 아래 {3}을(를) 선택하세요. 아니면 <callback id="{5}">클릭</callback>하여 설정을 변경하세요.
refactorings.module.description=이름 변경, 추출 및 기타 타입의 리팩터링을 사용하여 코드를 정리하세요.
refactorings.module.name=리팩터링
rename.help.link=이름 변경 리팩터링
rename.lesson.name=이름 변경
restore.settings.informer=이 수업에서 일부 IDE 설정을 변경했습니다. 수정된 옵션을 복원하려면 <callback id="{0}">클릭</callback>합니다.
run.configuration.close.settings=이제 대화상자를 닫고 이 수업을 완료하세요.
run.configuration.edit.configuration=실행 구성을 편집하거나 새로 추가하려는 경우 {0}을(를) 누른 상태로 드롭다운을 클릭하거나 드롭다운을 열고 {1}을(를) 클릭하세요.
run.configuration.help.link=실행/디버그 구성
run.configuration.hover.generated.configuration=이번 수업을 위해 매개변수가 있는 구성을 하나 더 추가했습니다. 마우스로 이 구성을 가리킨 다음 해당하는 실행 또는 디버그 버튼을 표시합니다.
run.configuration.lesson.name=실행 구성
run.configuration.no.run.configuration=보시다시피 실행 중인 {0}은(는) 실행 구성을 생성하지 않습니다.
run.configuration.open.additional.menu.balloon=액션 더보기
run.configuration.open.run.configurations.popup=이제 실행 구성 팝업을 살펴보겠습니다. 드롭다운을 클릭하세요.
run.configuration.run.current=툴바에서 {0}을(를) 클릭하여 이 데모 프로그램을 실행합니다.
run.configuration.run.current.balloon=이 샘플을 실행합니다
run.configuration.run.generated.configuration=실행해 보세요.
run.configuration.select.save.configuration={0}을(를) 선택하세요.
run.configuration.settings.description=여기는 모든 실행 구성을 관리하기 위한 곳입니다. 이곳에서 프로그램 매개변수, JVM 인수, 환경 변수 등을 설정할 수 있습니다.
run.configuration.temporary.to.permanent=이제 <ide/>은(는) 임시 실행 구성을 생성합니다. 임시 구성은 디폴트 제한인 5개를 초과하면 자동으로 삭제됩니다. 임시 구성을 영구 구성으로 변환해봅시다. 실행 및 디버그 버튼 옆에 있는 {0}을(를) 클릭하세요.
run.configuration.tip.about.save.configuration.into.file=팁: 모든 동료가 실행 구성에 액세스할 수 있도록 하려면 실행 구성을 별도의 파일로 저장한 다음 버전 관리 시스템을 통해 공유하세요.
run.debug.module.description=코드를 실행하고 IDE 비주얼 디버거로 오류를 수정하세요.
run.debug.module.name=실행 및 디버그
search.everywhere.class.popup.closed.warning.message={0}을(를) 눌러 검색 창을 다시 여세요.
search.everywhere.close.documentation.popup={0}을(를) 눌러 팝업을 닫으세요.
search.everywhere.finish=<strong>끝났습니다!</strong> 비슷한 방식으로 {0}을(를) 눌러 메서드 또는 전역 변수를 검색하고 {1}을(를) 눌러 파일을 검색할 수 있습니다.
search.everywhere.goto.class=좋습니다! 하지만 클래스만 또는 특정 디렉터리에서만 검색해야 할 경우가 있습니다. {0}(으)로 클래스를 검색하세요.
search.everywhere.invoke.search.everywhere={0}을(를) 열려면 {1}을(를) 두 번 누르세요.
search.everywhere.lesson.name=전체 검색
search.everywhere.navigate.to.class=키보드 방향키로 {0}을(를) 선택한 다음, {1}을(를) 눌러 이 클래스의 정의로 이동하세요.
search.everywhere.navigation.promotion={0} 모듈에서는 다른 탐색 액션 및 워크플로 사용 사례를 찾을 수 있습니다.
search.everywhere.quick.documentation=선택된 클래스의 문서를 미리 보려면 {0}을(를) 누르세요.
search.everywhere.type.class.name=입력 스트림에서 버퍼링된 읽기를 담당하는 라이브러리 클래스가 필요하다고 가정해봅시다. {0}(검색할 단어의 첫 몇 글자)을(를) 입력하되 아직 해당 클래스로 이동하지는 마세요.
search.everywhere.type.prefixes=이름에 {0} 및 {1}(이)라는 단어가 포함된 클래스를 찾고 있다고 가정해봅시다. 검색창에 {2}(해당 단어의 첫 몇 글자)을(를) 입력하세요.
search.everywhere.use.all.places=이제 데모 프로젝트 내 일치하는 클래스를 볼 수 있습니다. 하지만 라이브러리에서 클래스를 찾아야 합니다. {0} 필터를 {1}(으)로 전환하여 사용 가능한 라이브러리에서 일치하는 클래스를 불러오겠습니다.
selection.extend.selection={0}을(를) 눌러 선택 범위를 다음 코드 블록으로 확장하세요.
selection.extend.until.whole.file=파일 전체가 선택될 때까지 {0}(으)로 선택 범위를 늘려보세요.
selection.help.select.code.constructs=코드 구문 선택
selection.lesson.name=코드 선택 범위 확장 및 축소
selection.select.word=캐럿을 임의의 단어 앞에 배치하세요. {0}을(를) 눌러 캐럿을 다음 단어로 이동하고 그 사이의 모든 것을 선택하세요.
selection.shrink.selection={0}은(는) 선택 범위를 축소합니다. 사용해보세요.
smart.completion.lesson.name=타입 일치 완성
surround.and.unwrap.choose.surround.item={0} 항목을 선택하세요.
surround.and.unwrap.choose.unwrap.item={0} 항목을 선택하세요.
surround.and.unwrap.help.surround.code.fragments=코드 조각 둘러싸기
surround.and.unwrap.help.unwrapping.and.removing.statements=구문 래핑 해제 및 제거
surround.and.unwrap.invoke.surround={0}을(를) 눌러 선택한 코드 조각을 일부 템플릿 코드로 둘러싸세요.
surround.and.unwrap.invoke.unwrap={0}(으)로 래핑 해제 액션을 사용하여 이전 상태로 되돌아가봅시다.
surround.and.unwrap.lesson.name=둘러싸기 및 줄 바꿈 해제