cmake.auotreload.task.name=CMake 다시 로드
cmake.hints.view.action.name=패키지를 CMakeLists.txt에 추가
cmake.hints.view.window.hint=이 코드를 CMakeLists.txt로 복사하고 필요한 경우 대상을 변경하세요
cmake.hints.view.window.name=패키지를 CMakeLists.txt에 추가
cmake.hints.view.window.ok.button.name=클립보드에 복사
full.error.output.view.action.name=출력 표시
full.error.output.view.window.name=출력
json.file.modificator.error.read.json=파일 {0} 읽기 실패
json.file.modificator.read={0} 읽기
json.file.modificator.update={0} 업데이트
json.file.modificator.write={0} 쓰기
label.checking.correctness.package.manager=패키지 관리자 상태를 확인하는 중
label.error.when.checking.package.manager.make.sure.path.correct.cloned.repository.lies.there.that.it.was.bootstrap=패키지 관리자를 확인하는 중 오류가 발생했습니다.\n경로가 올바르고 저장소가 성공적으로 부트스트랩되었는지 확인하세요.
manifest.manager.insert.to.vcpkg.configuration.json.action.name={0}에 패키지 추가
manifest.manager.insert.to.vcpkg.json.action.name={0}에 패키지 추가
manifest.manager.progress.title.modification.baseline.file={0} 업데이트 중
manifest.manager.progress.title.modification.baseline.json={0} 업데이트 중
manifest.manager.progress.title.vcpkg.json.modification={0} 업데이트 중
manifest.manager.remove.from.vcpkg.configuration.json.action.name={0} 내의 패키지 사용 위치 삭제
manifest.manager.remove.from.vcpkg.json.action.name={0} 내의 패키지 사용 위치 삭제
manifest.manager.unable.to.create.file=파일 ${0} 생성 실패
manifest.manager.update.vcpkg.json=vcpkg.json 업데이트
progress.title.checking.for.install=vcpkg 검색 중
remove.package.manager.window.checkbox.delete.files=디스크에서 모든 파일 제거
remove.package.manager.window.name={0} 삭제
remove.package.manager.window.task.remove.from.disk=파일 제거 중
remove.package.manager.window.want.to.remove={0}을(를) 삭제하시겠어요?
switch.to.manifest.mode.window.check.all=모두 확인
switch.to.manifest.mode.window.description='vcpkg.json'에 추가할 설치된 패키지를 선택하세요. 클래식 모드에서 설치된 패키지는 명시적으로 'vcpkg.json'에 추가되지 않는 한 클래식 모드에서 사용할 수 없습니다
switch.to.manifest.mode.window.name=매니페스트 모드로 전환
switch.to.manifest.mode.window.table.package.name=이름
switch.to.manifest.mode.window.table.switch.name=추가
switch.to.manifest.mode.window.table.version.name=버전
switch.to.manifest.mode.window.uncheck.all=모두 체크 해제
toolwindow.button.edit.package.manager.description={0} 편집
toolwindow.button.edit.package.manager.name={0} 편집
toolwindow.button.new.package.manager.button.name=새 패키지 관리자 추가
toolwindow.button.new.package.manager.description=새 패키지 관리자 추가
toolwindow.button.new.package.manager.name={0} 추가
toolwindow.console.placeholder=[{0}줄]
toolwindow.install.multiple.window.label.choose.one=설치할 패키지 선택
toolwindow.install.multiply.window.name=패키지 설치
toolwindow.install.multiply.window.notification.broken.package.manager=설치 중 오류가 발생했습니다\n{0}을(를) 사용할 수 없습니다
toolwindow.install.multiply.window.notification.can't.find.package.manager=Vcpkg를 찾을 수 없습니다. Vcpkg 도구 창에서 구성되었는지 확인하세요
toolwindow.install.multiply.window.task.find.packages=패키지 검색 중
toolwindow.left.panel.linked.to={1} 중 {0}에 연결됨
toolwindow.left.panel.linked.to.single="{0}"에 연결됨
toolwindow.left.panel.tooltip=다음에 연결됨: {0}
toolwindow.name.console=콘솔: {0}
toolwindow.name.vcpkg=패키지
toolwindow.not.selected.package.manager=패키지 관리자가 선택되지 않았습니다. \n패키지 관리자를 선택하세요
toolwindow.notification.key=패키지 관리자 알림
toolwindow.problem.cmake.description=패키지 {0}을(를) 찾을 수 없습니다
toolwindow.problem.cpp.description=파일 {0}을(를) 찾을 수 없습니다
toolwindow.problem.do.not.show.this.button.name=다시 제안 안 함
toolwindow.problem.do.not.show.this.button.notification=제안이 비활성화되었습니다. 활성화하려면 Vcpkg 도구 창의 설정 메뉴에서 해당 옵션을 선택하세요
toolwindow.problem.notification.profile.cant.find.package.manager=툴체인 매개변수 경로에 패키지 관리자가 없습니다
toolwindow.problem.notification.profile.cant.found.toolchain=툴체인 매개변수 경로가 지정되지 않았습니다
toolwindow.problem.problem.name=수정...
toolwindow.problem.solve.by.installing.another.package.manager.install.new.description={0}\n대신 vcpkg ''{1}''을(를) 사용하세요
toolwindow.problem.solve.by.installing.another.package.manager.install.new.name=새 ''{0}'' 설치
toolwindow.problem.solve.by.installing.many.packages.description={0}\n다음 중 하나를 설치하세요. {1}
toolwindow.problem.solve.by.installing.many.packages.name=후보 표시
toolwindow.problem.solve.by.installing.one.package.description={0}\n''{1}''을(를) 설치하세요
toolwindow.problem.solve.by.installing.one.package.name=''{0}'' 설치
toolwindow.problem.solve.by.use.another.package.manager.description={0}\n대신 vcpkg ''{1}''을(를) 사용하세요
toolwindow.problem.solve.by.use.another.package.manager.name=vcpkg ''{0}'' 사용
vcpkg.add.new.package.manager.field.local.path=디렉터리:
vcpkg.add.new.package.manager.field.local.path.name.window=설치 디렉터리 선택
vcpkg.add.new.package.manager.field.name=이름:
vcpkg.add.new.package.manager.field.url=URL:
vcpkg.add.new.package.manager.name.must.be.not.blank=이름은 공백일 수 없습니다
vcpkg.add.new.package.manager.name.must.be.unique=이름은 고유해야 합니다
vcpkg.add.new.package.manager.name.of.triselect=vcpkg 통합을 기존 CMake 프로필에 추가
vcpkg.add.new.package.manager.path.already.exists=디렉터리 {0}이(가) 이미 있습니다. 해당 콘텐츠는 패키지 관리자로서 취급됩니다.
vcpkg.add.new.package.manager.path.must.be.correct=경로가 정확해야 합니다
vcpkg.add.new.package.manager.path.must.be.not.blank=설치 디렉터리는 공백일 수 없습니다
vcpkg.add.new.package.manager.path.show.dialog=패키지 관리자가 {0}에 생성됩니다
vcpkg.add.new.package.manager.rename.package.manager=이름이 ''{0}''인 vcpkg가 ''{1}''(으)로 이름이 변경되었습니다
vcpkg.add.new.package.manager.table.profile.already.enabled=(''{0}'' 사용)
vcpkg.add.new.package.manager.url.must.be.valid=URL은 유효해야 합니다
vcpkg.add.new.package.manager.window.name=Vcpkg 추가
vcpkg.edit.package.manager.advanced.settings=고급 설정
vcpkg.edit.package.manager.force.cmake.ninja.sources.description=VCPKG_FORCE_SYSTEM_BINARIES 변수를 설정하고 CMake 및 Ninja를 PATH에 추가합니다
vcpkg.edit.package.manager.force.cmake.ninja.sources.name=시스템 바이너리 사용
vcpkg.edit.package.manager.window.name=Vcpkg 편집
vcpkg.indicator.task.label.install.package=''{0}'' 설치 중
vcpkg.indicator.task.label.installed.find=설치된 패키지 검색 중
vcpkg.indicator.task.label.remove.package=''{0}'' 제거 중
vcpkg.indicator.task.label.search.package=패키지 검색 중
vcpkg.name=vcpkg
vcpkg.name.plural=vcpkg 저장소
vcpkg.registry.add.new.package.manager.field.local.path=디렉터리:
vcpkg.registry.add.new.package.manager.field.name=이름:
vcpkg.registry.add.new.package.manager.window.name=새 Vcpkg 레지스트리
vcpkg.registry.adding.package.wizard.create.files.background.task=패키지의 파일 생성
vcpkg.registry.adding.package.wizard.window.name=vcpkg 레지스트리의 새 패키지
vcpkg.registry.adding.packages.create.new.package.loading.packages=패키지 로드 중
vcpkg.registry.adding.packages.step.dependencies.actions.add.package.description=이 패키지를 종속성에 추가합니다
vcpkg.registry.adding.packages.step.dependencies.actions.add.package.name=종속성에 추가
vcpkg.registry.adding.packages.step.dependencies.actions.remove.package.description=이 패키지를 종속성에서 제거합니다
vcpkg.registry.adding.packages.step.dependencies.actions.remove.package.name=종속성에서 제거
vcpkg.registry.adding.packages.step.main.package.already.exists=이름이 {0}이고 버전이 {1}인 패키지가 있습니다
vcpkg.registry.adding.packages.step.main.package.name=이름:
vcpkg.registry.adding.packages.step.main.package.name.comment=이 이름은 패키지를 검색, 설치 및 제거할 때 사용됩니다
vcpkg.registry.adding.packages.step.main.package.name.must.be.not.empty=이름은 공백일 수 없습니다
vcpkg.registry.adding.packages.step.main.package.version=버전:
vcpkg.registry.adding.packages.step.portfile.creating.bitbucket.data.name=BitBucket
vcpkg.registry.adding.packages.step.portfile.creating.bitbucket.data.ref.description=콘텐츠를 변경하지 않는 안정적인 git commit-ish(태그가 이상적)입니다. 브랜치이면 안 됩니다. 공식 릴리스가 없는 저장소의 경우, 현재를 기준으로 최신 마스터의 전체 커밋 ID로 설정할 수 있습니다. REF가 지정된 경우 SHA512도 지정해야 합니다.
vcpkg.registry.adding.packages.step.portfile.creating.bitbucket.data.ref.name=Ref
vcpkg.registry.adding.packages.step.portfile.creating.bitbucket.data.rep.description=Bitbucket상의 조직 또는 사용자 및 저장소. 예: Microsoft/cpprestsdk
vcpkg.registry.adding.packages.step.portfile.creating.bitbucket.data.rep.name=저장소
vcpkg.registry.adding.packages.step.portfile.creating.cmakelists.must.exists=CMakeLists.txt가 있어야 합니다
vcpkg.registry.adding.packages.step.portfile.creating.directory.must.exists=디렉터리가 있어야 합니다
vcpkg.registry.adding.packages.step.portfile.creating.git.data.ref.description=다운로드할 커밋의 git sha
vcpkg.registry.adding.packages.step.portfile.creating.git.data.ref.name=Ref
vcpkg.registry.adding.packages.step.portfile.creating.git.data.url.description=git 저장소의 URL
vcpkg.registry.adding.packages.step.portfile.creating.github.data.name=Github
vcpkg.registry.adding.packages.step.portfile.creating.github.data.repo.description=GitHub상의 조직 또는 사용자 및 저장소. 예: Microsoft/cpprestsdk
vcpkg.registry.adding.packages.step.portfile.creating.github.data.repo.name=저장소
vcpkg.registry.adding.packages.step.portfile.creating.gitlab.data.name=Gitlab
vcpkg.registry.adding.packages.step.portfile.creating.gitlab.data.repo.description=GitLab 인스턴스상의 조직 또는 사용자 + 저장소 이름. 예: gitlab-org/gitlab-ce
vcpkg.registry.adding.packages.step.portfile.creating.gitlab.data.repo.name=저장소
vcpkg.registry.adding.packages.step.portfile.creating.gitlab.data.url.description=사용할 Gitlab 인스턴스의 URL
vcpkg.registry.adding.packages.step.portfile.creating.sha512.description=데이터의 아카이브와 일치해야 하는 SHA512 해시입니다. 먼저 0으로 설정한 다음 포트 빌드를 시도하면 가장 쉽게 판단할 수 있습니다. 오류 메시지에 전체 해시가 포함되며 이는 포트파일로 다시 복사될 수 있습니다.
vcpkg.registry.adding.packages.step.portfile.creating.sha512.validation=필드가 0이거나(바로 잡기 위해) 올바른 SHA-512여야 합니다
vcpkg.registry.adding.packages.step.portfile.creating.source.data.name=소스
vcpkg.registry.adding.packages.step.portfile.creating.source.data.source.path.description=설치 과정에서 디렉터리의 콘텐츠가 복사됩니다. 프로젝트의 루트에 CMakeLists.txt 파일이 있는 것이 중요합니다. 또한, 해당 디렉터리를 사용할 수 없는 경우 설치도 불가능하다는 점에도 유의해야 합니다
vcpkg.registry.adding.packages.step.portfile.creating.source.data.source.path.name=소스 디렉터리
vcpkg.registry.adding.packages.step.portfile.creating.sourceforge.data.filename.description=파일의 로컬 이름. 파일은 포트 간에 공유됩니다. 따라서 파일이 이 포트로 속성이 명확히 지정되어 충돌을 피할 수 있도록 파일 이름을 변경해야 할 수 있습니다
vcpkg.registry.adding.packages.step.portfile.creating.sourceforge.data.filename.name=파일 이름
vcpkg.registry.adding.packages.step.portfile.creating.sourceforge.data.name=SourceForge
vcpkg.registry.adding.packages.step.portfile.creating.sourceforge.data.repo.description=SourceForge상의 조직 또는 사용자와 저장소. 예: cunit/CUnit
vcpkg.registry.adding.packages.step.portfile.creating.sourceforge.data.repo.name=저장소
vcpkg.registry.adding.packages.step.portfile.creating.url.data.url.description=올바른 URL
vcpkg.registry.adding.packages.step.portfile.creating.url.data.url.name=URL
vcpkg.registry.adding.packages.step.portfile.creating.url.data.url.validation=올바른 URL을 입력해야 합니다
vcpkg.registry.configurator.task.name=''{0}'' 업데이트 중
vcpkg.registry.edit.package.manager.failed.not.installed.package.manager.notification=레지스터를 찾을 수 없습니다
vcpkg.registry.edit.package.manager.loading.text=형 변환 로드 중...
vcpkg.registry.edit.package.manager.no.packages.to.add.more=더보기...
vcpkg.registry.edit.package.manager.no.packages.to.add.text=추가할 패키지가 없습니다
vcpkg.registry.edit.package.manager.old.registry.get=이전 버전
vcpkg.registry.edit.package.manager.old.registry.is.add=현재 프로젝트에 추가
vcpkg.registry.edit.package.manager.old.registry.name=이전 레지스트리 버전
vcpkg.registry.edit.package.manager.row.name=패키지 이름
vcpkg.registry.edit.package.manager.row.version.name=버전
vcpkg.registry.edit.package.manager.table.add.to.registry=레지스트리에 추가
vcpkg.registry.edit.package.manager.table.name=패키지 이름
vcpkg.registry.edit.package.manager.table.version=버전
vcpkg.registry.edit.package.manager.version.name.already.exists=이름이 ''{0}''인 베이스라인이 이미 있습니다
vcpkg.registry.edit.package.manager.window.name=Vcpkg 레지스트리 편집
vcpkg.registry.registry.info.create.file={0} 생성
vcpkg.registry.registry.info.create.file.progress.bar={0} 생성
vcpkg.registry.registry.info.delete=레지스트리 삭제
vcpkg.registry.registry.info.edit.add.version=새 버전 추가
vcpkg.registry.registry.info.edit.name=레지스트리 이름 편집
vcpkg.registry.registry.info.edit.select.old.version=기존 버전 선택
vcpkg.registry.registry.info.loading.file.progress.bar=파일 로드 중
vcpkg.registry.registry.info.loading.file.status=로드 중...
vcpkg.registry.registry.info.open.file={0} 열기
vcpkg.registry.registry.info.registry.not.initialized=레지스트리 초기화 중...
vcpkg.registry.task.check.for.install.failed=레지스트리를 설치할 수 없습니다
vcpkg.registry.task.check.for.install.package.manager.failed.ioexception=디렉터리를 생성하거나 액세스할 수 없습니다
vcpkg.registry.task.check.for.install.package.manager.failed.securityexception=파일을 액세스할 수 없습니다
vcpkg.registry.task.get.baseline.failed.get.ports=포트를 가져오는 중 오류 발생
vcpkg.registry.task.get.baseline.failed.get.registry=레지스트리를 가져오는 중 오류 발생
vcpkg.registry.task.get.baseline.name=베이스라인 가져오기
vcpkg.registry.task.install.package.manager=Vcpkg 레지스터 설치 중
vcpkg.registry.task.install.package.manager.failed=레지스터 생성 실패
vcpkg.registry.task.install.package.manager.failed.ioexception=디렉터리를 생성하거나 액세스할 수 없습니다
vcpkg.registry.task.install.package.manager.failed.streamwrite=JSON 파일을 생성하거나 액세스할 수 없습니다
vcpkg.registry.task.install.package.manager.successful=레지스터가 성공적으로 생성되었습니다
vcpkg.regsitry.adding.packages.step.portfile.creating.git.data.name=Git
vcpkg.return.status.exit.code.is=Vcpkg가 다음 종료 코드로 실패했습니다. {0}
vcpkg.return.status.failed.on.execution=vcpkg 파일을 실행할 수 없습니다. 실행할 권한이 충분하지 않을 수 있습니다
vcpkg.return.status.failed.parse.result=vcpkg 명령어를 분석할 수 없습니다
vcpkg.return.status.process.failed=vcpkg 파일을 실행할 수 없습니다. 실행 파일 vcpkg를 찾을 수 없습니다
vcpkg.scheme.name=스키마: Vcpkg
vcpkg.table.column.name=이름
vcpkg.table.column.version=버전
vcpkg.toolwindow.button.add.registry.description=새 개인 저장소를 추가합니다
vcpkg.toolwindow.button.add.registry.name=레지스트리 추가
vcpkg.toolwindow.button.auto.reload.cmake.after.install.description=패키지가 설치된 후 CMake를 자동으로 로드합니다
vcpkg.toolwindow.button.auto.reload.cmake.after.install.name=패키지 설치 후 CMake 다시 로드
vcpkg.toolwindow.button.check.for.update.description=Git 저장소 업데이트를 확인합니다
vcpkg.toolwindow.button.check.for.update.name=업데이트 확인
vcpkg.toolwindow.button.console.check.error.description=콘솔 출력에 빠른 수정을 제공합니다
vcpkg.toolwindow.button.console.check.error.name=출력 뷰에 빠른 수정 표시
vcpkg.toolwindow.button.install.package.name=설치
vcpkg.toolwindow.button.pull.and.update.description=Git 저장소 및 vcpkg 업데이트
vcpkg.toolwindow.button.pull.and.update.name=모두 업데이트
vcpkg.toolwindow.button.remove.package.name=패키지 삭제
vcpkg.toolwindow.button.remove.repository.description=저장소를 삭제합니다
vcpkg.toolwindow.button.remove.repository.name=저장소 삭제
vcpkg.toolwindow.button.repository.on.start.update.description=IDE 시작 시 패키지 관리자가 자동으로 업데이트됩니다
vcpkg.toolwindow.button.repository.on.start.update.name=IDE 시작 시 저장소를 자동 업데이트
vcpkg.toolwindow.button.settings.description=패키지 관리자 설정
vcpkg.toolwindow.button.settings.name=설정
vcpkg.toolwindow.button.show.console.description=vcpkg 출력과 함께 콘솔을 표시합니다
vcpkg.toolwindow.button.show.console.name=콘솔 표시
vcpkg.toolwindow.button.switch.to.manifest.mode.description=프로젝트를 매니페스트 모드로 전환합니다
vcpkg.toolwindow.button.switch.to.manifest.mode.name=매니페스트 모드로 전환
vcpkg.toolwindow.button.update.git.repository.description=Git 저장소를 최신 버전으로 업데이트합니다
vcpkg.toolwindow.button.update.git.repository.name=Vcpkg 저장소 업데이트
vcpkg.toolwindow.button.update.repository.description=현재 버전의 vcpkg가 현재 버전의 Git 저장소로부터 설치된 패키지를 업데이트할 수 있는지 확인합니다. \n참고: 이러한 확인으로 반드시 최신 버전의 패키지가 설치되지는 않으며, 전체 업데이트를 위해서는 Git 저장소도 업데이트해야 합니다
vcpkg.toolwindow.button.update.repository.name=저장소 업데이트
vcpkg.toolwindow.button.upgrade.all.description=Git 저장소 업데이트 및 vcpkg 업그레이드
vcpkg.toolwindow.button.upgrade.all.name=모두 업그레이드
vcpkg.toolwindow.button.upgrade.repository.description=오래된 패키지를 모두 다시 빌드합니다
vcpkg.toolwindow.button.upgrade.repository.name=저장소 업데이트
vcpkg.toolwindow.button.vcpkg.json.auto.update.description=패키지 설치, 업데이트 또는 제거 시 자동으로 vcpkg.json을 업데이트합니다.
vcpkg.toolwindow.button.vcpkg.json.auto.update.name=vcpkg.json 자동 변경
vcpkg.toolwindow.mode.classic=클래식
vcpkg.toolwindow.mode.manifest=매니페스트
vcpkg.toolwindow.package.info.nothing.has.done=아무것도 수행되지 않았습니다
vcpkg.toolwindow.package.info.too.much.packages=패키지 설치를 중단하면 저장소가 사용 불가능해질 수 있습니다. 선택한 패키지의 양이 많아 설치를 완료하는 데 오래 걸릴 수 있습니다.
vcpkg.toolwindow.package.info.vcpkg.json.install=vcpkg.json에 추가
vcpkg.toolwindow.package.info.vcpkg.json.loading=로드 중...
vcpkg.toolwindow.package.info.vcpkg.json.loading.task.name=vcpkg.json 로드
vcpkg.toolwindow.package.info.vcpkg.json.remove=vcpkg.json에서 제거
vcpkg.toolwindow.package.info.vcpkg.json.switch.to.manifest.mode=매니페스트 모드로 전환
vcpkg.toolwindow.package.info.vcpkg.json.switch.to.manifest.mode.learn.more=자세히 보기
vcpkg.toolwindow.package.info.vcpkg.json.switch.to.manifest.mode.text=프로젝트가 매니페스트 모드로 전환됩니다. 패키지 이름을 전송할 옵션이 제공됩니다.
vcpkg.toolwindow.package.not.selected=정보를 표시할 패키지를 선택하세요.
vcpkg.toolwindow.package.triplet.action.remove.tooltip=패키지 삭제
vcpkg.toolwindow.package.triplet.action.upgrade.tooltip=패키지 업그레이드
vcpkg.toolwindow.package.triplet.installed.triplets=설치된 트리플릿:
vcpkg.toolwindow.package.triplet.lets.cmake.decide=vcpkg가 결정하게 하기
vcpkg.toolwindow.package.triplet.manifest.mode=매니페스트 사용
vcpkg.toolwindow.package.triplet.name=트리플릿:
vcpkg.toolwindow.package.triplet.name.and.version={0} ({1})
vcpkg.toolwindow.package.triplet.no.triplets.found=패키지가 설치되어 있지 않습니다
vcpkg.toolwindow.table.model.name.with.count=({0}개 발견)
vcpkg.toolwindow.table.splitter.all=모두
vcpkg.toolwindow.table.splitter.installed.classic=설치됨 | 클래식 모드
vcpkg.toolwindow.table.splitter.installed.manifest=추가됨 | 매니페스트 모드
vcpkg.toolwindow.table.warning.not.updated=패키지를 업데이트할 수 있습니다({0} -> {1})
vcpkg.toolwindow.table.warning.not.updated.no.version=<버전 없음>
vcpkg.toolwindow.task.bootstrap.failed=부트스트랩에 실패했습니다. 이유:\n{0}
vcpkg.toolwindow.task.bootstrap.vcpkg=vcpkg 부트스트랩 처리 중
vcpkg.toolwindow.task.check.for.update.failed=업데이트 확인에 실패했습니다. 이유:\n{0}
vcpkg.toolwindow.task.check.for.update.label=업데이트 확인 중
vcpkg.toolwindow.task.check.for.update.successful.can.be.updated=저장소를 업데이트할 수 있습니다
vcpkg.toolwindow.task.check.for.update.successful.updated=저장소가 업데이트되었습니다
vcpkg.toolwindow.task.clone.and.bootstrap.successful=복제 및 부트스트랩 성공
vcpkg.toolwindow.task.git.clone.failed=Git 복제에 실패했습니다. 이유:\n{0}
vcpkg.toolwindow.task.git.update.and.vcpkg.update=Git 및 vcpkg 업데이트 중
vcpkg.toolwindow.task.git.update.and.vcpkg.update.failed.git=Git 풀에 실패했습니다. 이유: {0}
vcpkg.toolwindow.task.git.update.and.vcpkg.update.failed.vcpkg=vcpkg 업데이트에 실패했습니다. 이유: {0}
vcpkg.toolwindow.task.git.update.and.vcpkg.update.successful=Git 풀 및 vcpkg 업데이트에 성공했습니다. 오래된 패키지:\n{0}
vcpkg.toolwindow.task.git.update.and.vcpkg.upgrade=Git 풀 및 vcpkg 업그레이드
vcpkg.toolwindow.task.git.update.and.vcpkg.upgrade.failed.git=Git 풀에 실패했습니다. 이유: {0}
vcpkg.toolwindow.task.git.update.and.vcpkg.upgrade.failed.vcpkg=vcpkg 업그레이드에 실패했습니다. 이유: {0}
vcpkg.toolwindow.task.git.update.and.vcpkg.upgrade.successful=Git 풀 및 vcpkg 업그레이드에 성공했습니다. 업그레이드된 패키지:\n{0}
vcpkg.toolwindow.task.git.update.and.vcpkg.upgrade.successful.no.packages=Git 풀 및 vcpkg 업그레이드에 성공했습니다. 업데이트할 패키지가 없습니다
vcpkg.toolwindow.task.install.failed=설치에 실패했습니다. 이유:\n{0}
vcpkg.toolwindow.task.install.manifest.failed=vcpkg.json에 추가할 수 없습니다. {0}
vcpkg.toolwindow.task.install.manifest.successful=vcpkg.json에 성공적으로 추가했습니다
vcpkg.toolwindow.task.install.successful.top=설치에 성공했습니다. 설치된 패키지:\n{0}
vcpkg.toolwindow.task.install.vcpkg=vcpkg 설치
vcpkg.toolwindow.task.installed.failed=설치된 항목 검색에 실패했습니다. 이유:\n{0}
vcpkg.toolwindow.task.installed.successful=설치된 패키지 목록이 로드되었습니다
vcpkg.toolwindow.task.query.failed=검색에 실패했습니다. 이유:\n{0}
vcpkg.toolwindow.task.remove.failed=제거에 실패했습니다. 이유:\n{0}
vcpkg.toolwindow.task.remove.manifest.failed=vcpkg.json에서 제거할 수 없습니다. {0}
vcpkg.toolwindow.task.remove.manifest.successful=vcpkg.json에서 성공적으로 제거했습니다
vcpkg.toolwindow.task.remove.successful.no.packages=제거할 항목이 없습니다
vcpkg.toolwindow.task.remove.successful.top=제거에 성공했습니다. 제거된 패키지:\n{0}
vcpkg.toolwindow.task.start.package.manager=패키지 관리자 시작 중
vcpkg.toolwindow.task.start.package.manager.failed=패키지 관리자를 시작하지 못했습니다
vcpkg.toolwindow.task.successful.more=및 그 외 {0}개의 패키지
vcpkg.toolwindow.task.update.failed=업데이트에 실패했습니다. 이유:\n{0}
vcpkg.toolwindow.task.update.git.repository=Git 저장소 업데이트 중
vcpkg.toolwindow.task.update.git.repository.failed=Git 저장소 업데이트에 실패했습니다. 이유:\n{0}
vcpkg.toolwindow.task.update.git.repository.successful=Git 저장소 업데이트 성공
vcpkg.toolwindow.task.update.manifest.failed=vcpkg.json을 업데이트 수 없습니다. {0}
vcpkg.toolwindow.task.update.manifest.successful=vcpkg.json을 성공적으로 업데이트했습니다
vcpkg.toolwindow.task.update.packages=패키지 업데이트 중
vcpkg.toolwindow.task.update.successful=업데이트에 성공했습니다. 패키지를 업데이트할 수 있습니다.\n{0}
vcpkg.toolwindow.task.update.successful.no.packages=업데이트할 항목이 없습니다
vcpkg.toolwindow.task.upgrade.failed=업그레이드에 실패했습니다. 이유:\n{0}
vcpkg.toolwindow.task.upgrade.packages=패키지 업그레이드 중
vcpkg.toolwindow.task.upgrade.successful=업그레이드에 성공했습니다. 업그레이드된 패키지:\n{0}
vcpkg.toolwindow.task.upgrade.successful.no.packages=업그레이드할 항목이 없습니다
wait.until.install.package.manager=패키지 관리자 설치 중...