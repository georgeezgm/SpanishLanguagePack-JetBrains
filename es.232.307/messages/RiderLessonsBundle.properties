comment.lesson.name=Comentar líneas y bloques de código.
comment.line.uncomment.that.line=Descomentar la línea comentada con el mismo atajo\: coloque el cursor en cualquier lugar de la línea y presione {0}.
comment.line.uncomment.several.lines=Para descomentar varias líneas, seleccione todas las líneas comentadas y presione {0}.
comment.block.comment=Para anotar un comentario de bloque con {0}, seleccione el bloque de código y presione {1}.
comment.block.uncomment=Para descomentar un bloque, coloque el cursor en cualquier lugar del bloque de comentarios y presione {0}.
file.structure.lesson.name=Miembros y estructura del archivo
file.structure.open.popup=Los archivos grandes pueden resultar difíciles de navegar. Una buena manera de comenzar es consultar a nuestros miembros. Presione {0} para enumerar todos los miembros del archivo.
file.structure.request.prefixes=Supongamos que desea buscar métodos cuyos nombres contengan las palabras {0} y {1}. Filtre la lista de miembros ingresando {2} (el prefijo de la palabra que necesita).
file.structure.toolwindow=También puede hacer referencia a la estructura del archivo en una ventana de herramientas dedicada. Presione {0} para abrir.
file.structure.help.link=Estructura de archivos y otros comandos de navegación contextual
basic.completion.lesson.name=Finalización de código
basic.completion.start.typing=De forma predeterminada, <ide/> sugiere inmediatamente la finalización del código. Si comienza a escribir {0} justo en la posición del cursor, aparecerán sugerencias de coincidencias.
basic.completion.choose.first=La mejor coincidencia está resaltada en azul en la lista de finalización. Presione {0} para seleccionar.
basic.completion.activate=Si no se sugiere completar el código automáticamente, invoquelo manualmente presionando {0}.
basic.completion.choose.item=Seleccione {0} en la lista de finalización de código y luego presione {1}.
basic.completion.complete=Inserta automáticamente todos los elementos de sintaxis necesarios (paréntesis, llaves, punto y coma, etc.) y lo lleva a una posición donde puede comenzar a escribir la siguiente sintaxis. Pulsa {0} para completar esta frase.
rename.press.rename=La refactorización <strong>Rename</strong> actualiza automáticamente todas las referencias al símbolo renombrado. Puede comenzar a refactorizar en la declaración del símbolo o en cualquier ubicación de uso. Presione {0} para cambiar el nombre de la propiedad {1} de la clase <code>Car</code>.
rename.type.new.name=Introduzca un nuevo nombre para esta propiedad, como {0}, y luego presione {1}.
rename.dialog.title=rebautizar
rename.epilogue=Observe que la refactorización no tocó la propiedad <code>Name</code> de <strong>Person</strong>. Esto significa que es seguro utilizar la refactorización incluso si tiene símbolos con nombres similares en el mismo contexto.
extract.variable.replace.all=Este código de muestra tiene tres apariciones encontradas de la expresión seleccionada. Seleccione los elementos relevantes para reemplazarlos todos.
help.refactor.this=Menú 'Refactorizar siguiente'
extract.variable.choose.type=Seleccione si desea utilizar ''var'' o un tipo explícito para la nueva variable y presione {0}.
extract.variable.choose.name=Especifique el nombre de la variable o déjelo como se sugiere. Para completar la refactorización, presione {0} nuevamente.
refactoring.menu.extract.interface=Elijamos la refactorización {0}, que nos ayuda a crear rápidamente una nueva interfaz basada en los miembros de la clase actual.
refactoring.menu.extract.interface.dialog=Asigne un nombre a la nueva interfaz, marque la casilla junto a los métodos que deben declararse allí y luego haga clic en <strong>Siguiente</strong> para completar el refactorizador.
refactoring.menu.finish=Para ver las refactorizaciones disponibles en otros contextos, presione {0} cuando el cursor esté en un miembro, variable o literal de cadena.
