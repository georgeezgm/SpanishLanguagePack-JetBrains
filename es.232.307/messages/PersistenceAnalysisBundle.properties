inspection.jvm.languages.group.name=JVM 언어
jvm.inspections.sql.source.to.sink.flow.display.name=안전하지 않은 문자열이 SQL로 사용되었습니다
jvm.inspections.sql.source.to.sink.flow.too.complex=SQL에서 사용된 해당 문자열은 안전한지 확인하기에 너무 복잡합니다
jvm.inspections.sql.source.to.sink.flow.unsafe=SQL에서 사용된 문자열이 안전하지 않을 수도 있습니다
jvm.inspections.sql.source.unsafe.to.sink.flow.check.private.final.field = 같은 클래스 내의 private 혹은 final 필드를 안전한 것으로 간주
jvm.inspections.sql.source.unsafe.to.sink.flow.check.private.final.field.comment = 활성화된 경우 private 혹은 final 필드는 안전한 것으로 간주되며, 그렇지 않은 경우 규칙에 따라 처리됩니다
jvm.inspections.sql.source.unsafe.to.sink.flow.check.private.methods=private 메서드의 매개변수를 안전한 것으로 간주
jvm.inspections.sql.source.unsafe.to.sink.flow.check.private.methods.comment = If disabled, parameters of private methods will be considered as unknown
jvm.inspections.sql.source.unsafe.to.sink.flow.check.warn.if.complex=Report strings that are too complex to verify
jvm.inspections.sql.source.unsafe.to.sink.flow.check.warn.if.complex.comment = It can be useful to check such strings manually
jvm.inspections.sql.source.unsafe.to.sink.flow.safe.class=안전한 클래스:
jvm.inspections.sql.source.unsafe.to.sink.flow.safe.class.comment=These classes are considered to contain only safe data
jvm.inspections.sql.source.unsafe.to.sink.flow.untainted.annotations=Untainted 어노테이션:
jvm.inspections.sql.source.unsafe.to.sink.flow.untainted.annotations.comment=These annotations will be used as '@Untainted' annotations during the analysis
jvm.inspections.sql.source.unsafe.to.sink.flow.untainted.methods=Untainted 메서드:
jvm.inspections.sql.source.unsafe.to.sink.flow.untainted.methods.comment=These methods are considered to return only safe objects