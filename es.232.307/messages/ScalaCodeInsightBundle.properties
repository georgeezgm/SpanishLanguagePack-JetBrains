no.tailrec.annotation.title=꼬리 재귀 어노테이션 없음
group.general=일반
intention.category.scala=Scala
intention.category.scala.argument.conversion=Scala/인수 변환
intention.category.scala.boolean=Scala/부울
intention.category.scala.control.flow=Scala/제어 흐름
intention.category.scala.strings=Scala/문자열
intention.category.scala.strings.formatted.strings=Scala/문자열/서식 지정 문자열
intention.category.scala.strings.interpolated.strings=Scala/문자열/보간된 문자열
intention.category.scala.string.string.concatenations=Scala/문자열/문자열 연결
intention.category.scala.recursion=Scala/재귀
generate.companion.object.action.text=컴패니언 객체
generate.companion.object.action.description=컴패니언 객체 생성
generate.equals.and.hashcode.methods.action.text=equals() 및 hashCode()
generate.equals.and.hashcode.methods.action.description=equals() 및 hashCode() 메서드 생성
no.fields.to.include.in.equals.hashcode.have.been.found=equals/hashCode에 포함할 필드를 찾을 수 없습니다
generate.proprty.action.text=프로퍼티(getter 및 setter)
generate.proprty.action.description=프로퍼티 생성
generate.tostring.method.action.text=toString()
generate.tostring.method.action.description=toString() 메서드를 생성합니다.
generate.ui.toString.title=toString 생성
generate.ui.toString.properties=toString을 생성하는 프로퍼티
generate.ui.toString.withNames=프로퍼티 이름 포함(&P)
inlay.hints.respect.vertical.alignment=수직 정렬 준수
inlay.hints.limit.hint.length.to=힌트 길이 제한
inlay.hints.characters=문자
show.types.even.if.they.are.obvious=분명한 경우에도 유형 표시
general.settings=Global {0} settings
general.settings.description=Scala 힌트 설정
inlay.hints.show.parameter.hints=매개변수 힌트 표시
inlay.hints.even.for.code.apply.code.and.code.update.code.methods=<code>{0}</code> 및 <code>{1}</code> 메서드인 경우도 포함
inlay.hints.even.for.non.literal.expressions=리터럴이 아닌 표현식인 경우도 포함
method.chain.hints.action.text=메서드 체인 힌트
method.chain.hints.action.description=메서드 체인 힌트 전환
type.hints.action.text=유형 힌트
type.hints.action.description=유형 힌트 전환
configure.type.hints.text=Configurar...
configure.type.hints.description=유형 힌트 구성
show.range.hints.for.to.and.until=''to''와 ''until''의 범위 힌트 표시
range.hints.for.to.and.until=''to''와 ''until''의 범위 힌트
member.variables=멤버 변수
method.results=메서드 결과
local.variables=지역 변수
show.type.hints.for=다음에 대한 유형 힌트 표시\:
type.hints=유형 힌트\n
link.label.more.info=정보 더보기
show.type.mismatch.hints=유형 불일치 힌트 표시
type.mismatch.hints=유형 불일치 힌트
method.chain.hints=메서드 체인 힌트
method.chain.hints.description=호출 체인 내 메서드 반환 타입
in.a.separate.column=별도 열 안에서
inlay.hints.only.when.there.are.at.least=최소 다음을 포함하는 경우에만
show.exclusive.range.hint=배타적 범위 힌트 표시
range.exclusive.hint=Range.exclusive 힌트
expand.implicit.hints.action.text=묵시적 항목 힌트 펼치기
expand.implicit.hints.action.description=에디터에서 묵시적 변환/인수의 인레이 힌트 펼치기
implicit.is.diverged=implicit이 분기되었습니다
can.t.infer.proper.types.for.type.parameters=유형 매개변수에 적절한 유형을 추론할 수 없음
no.implicits.found.for.parameter=매개변수 {0} 에 대한 implicit 없음
no.implicits.found.for.parameters=매개변수 {0} 에 대한 implicit 없음
ambiguous.implicits.for.parameter=매개변수 {0} 에 대한 모호한 implicit
show.implicit.hints.action.text=implicit 힌트 표시
show.implicit.hints.action.description=에디터 내 인레이 힌트로 묵시적 변환/인수 표시
implicit.arguments.popup.action.text=묵시적 인수 팝업
implicit.arguments.popup.action.description=묵시적 인수 팝업
make.conversion.explicit.action.text=변환을 명시적으로 만듭니다.
make.conversion.explicit.action.description=변환을 명시적으로 만듭니다.
remove.explicit.arguments.action.text=명시적 인수 제거
remove.explicit.arguments.action.description=명시적 인수 제거
family.name.use.named.arguments=명명된 인수 사용
use.named.arguments.for.current.and.subsequent.arguments=현재 및 후속 인수로 명명된 인수 사용
family.name.convert.to.block.expression=블록 표현식으로 변환
family.name.convert.to.argument.in.parentheses=소괄호 안 인수로 변환
family.name.permute.arguments=순열 인수
permute.arguments.to.match.the.parameter.declaration.order=매개변수 선언 순서와 일치하도록 인수 나열
family.name.demorgan.law=드모르간 법칙
replace.refname.with.replacement=''{0}'' 을(를) ''{1}'' (으)로 바꾸기
expand.boolean.use.to.ifelse=부울 사용을 ''if-else'' 문으로 확장
family.name.expand.boolean=부울 확장
family.name.flip.comparison.in.infix.expression=infix 표현식 내 반전 비교
flip.operation=Invertir ''{0}''
flip.operation.to.inverse=Invertir ''{0}'' a ''{1}''
family.name.flip.comparison.in.method.call.expression=메서드 호출 표현식 내 반전 비교
family.name.negate.comparison=Negar comparación
negate.operation.to.inverse=''{0}'' 을(를) ''{1}'' (으)로 부정
family.name.replace.equals.or.equality.in.infix.expression=infix 표현식 내 equals 또는 상등 바꾸기
family.name.replace.equals.or.equality.in.method.call.expression=메서드 호출 표현식 내 equals 또는 상등 대체
replace.operator.with.replacement=''{0}''을(를) ''{1}''(으)로 바꾸기
family.name.simplify.boolean.expression.with.a.literal=부울 표현식을 리터럴로 단순화
simplify.boolean.expression=부울 표현식 단순화
family.name.invert.if.condition=If 조건 반전
family.name.merge.else.if=else if 문 병합
merge.elseif=''else if'' 문 병합
family.name.merge.nested.ifs.to.anded.condition=중첩 If 문을 AND 조건에 병합
merge.nested.ifs=중첩된 ''if'' 문 병합
family.name.merge.equivalent.ifs.to.ored.condition=동등한 if 문을 OR 조건에 병합
merge.sequential.ifs=순차적 ''if'' 문 병합
family.name.remove.redundant.else=불필요한 else 제거
remove.redundant.else=중복 ''else''를 제거합니다.
family.name.replace.do.while.with.while=do while을 while로 바꾸기
this.action.will.cause.name.conflict=이 액션을 실행하면 이름이 충돌합니다.
family.name.replace.while.with.do.while=while을 dowhile로 바꾸기
family.name.split.else.if=else if 문 분할
split.elseif=''else if'' 문 분할
family.name.split.if=if 문 분할
split.into.2.if.s=if 문 2개로 분할
change.access.modifier.intention=Cambiar el controlador de acceso
change.access.modifier.intention.family=Cambiar el controlador de acceso
change.access.modifier.preview=''{0}''의 제어자를 {1}(으)로 변경합니다
make.0.1=Hacer de ''{0}'' un {1}
detecting.possible.conflicts=가능한 충돌 탐지 중
0.with.1.visibility.is.not.accessible.from.2={1} 표시가 있는 {0} 은(는) {2}에서 액세스할 수 없습니다
title.change.modifier=제어자 변경
no.tailrec.annotation.fix=@tailrec 어노테이션 추가
family.name.recursion=재귀
family.name.add.replace.call=.replace("\\r","") 추가
add.replace.call=''replace("\\r", "")'' 추가
family.name.add.stripmargin=.stripMargin 추가
add.stripmargin=''stripMargin'' 추가
convert.to.string.concatenation=문자열 연결로 변환
convert.to.interpolated.string=보간된 문자열로 변환
convert.to.formatted.string=서식 지정된 문자열로 변환
family.name.insert.gap=공간 삽입
insert.gap.with.concatenation=문장열 연결을 사용해 공간 삽입\: (" +  + ")
family.name.regular.multi.line.string.conversion=정규식/다중 줄 문자열 변환
convert.to.normal.string="string"로 변환
convert.to.multiline.string="""string"""으로 변환
element.context.type.blank.line=빈 줄
element.context.type.code=코드
element.context.type.comment=Comentario
element.context.type.implicit.value.class=묵시적 값 클래스
element.context.type.string=문자열
element.context.type.xml=XML
macro.annotated=annotated("annotation qname")
macro.implicit.value.class.name=implicitValueClassName(TYPE_TEXT)
macro.primaryConstructor.param.names=primaryConstructorParamNames
macro.primaryConstructor.param.types=primaryConstructorParamTypes
macro.primaryConstructor.param.instances=primaryConstructorParams
macro.subtypes=subtypes(TYPE)
macro.suggest.variable.name.by.type=suggestVariableNameByTypeText(TYPE_TEXT)
marco.typeParameters=typeParams(CLASS)
marco.typeParameters.without.bounds=typeParamsWithoutBounds(CLASS)
intention.category.scala.type=Scala/타입
intention.category.scala.pattern.matching=Scala/패턴 일치
intention.category.scala.expressions=Scala/표현식
intention.category.scala.for.comprehension=Scala/for 컴프리헨션
intention.category.scala.import=Scala/가져오기
intention.category.scala.collections=Scala/컬렉션
