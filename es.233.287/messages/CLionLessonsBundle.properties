clion.basic.editing.module.description=Esta acción le ayuda a editar el código.
clion.basic.editing.module.name=Editar código
clion.change.signature.click.refactor=Haga clic en el botón 'Refactorización' para realizar la refactorización.
clion.change.signature.conclusion=Tenga en cuenta que <ide/> pasa el literal de cadena {0} como segundo parámetro a {1}, ajustando todas las posiciones de llamada en consecuencia.
clion.change.signature.extract.parameter=Ahora presione {0} para habilitar la refactorización de parámetros.
clion.change.signature.help.link=Cambios de refactorización de firmas
clion.change.signature.lesson.intro=Los cambios de refactorización de firmas combinan varias modificaciones diferentes que se pueden aplicar a la firma de una función. Esta refactorización le permite cambiar el nombre de la función, el tipo de retorno y eliminar, eliminar o reordenar los parámetros.\nCuando cambia la firma de una función, CLion busca todos los usos de la función y los almacena de forma segura para reflejar los cambios. implementaciones y anulaciones alternativas de funciones que pueden modificarse.
clion.change.signature.lesson.name=Cambio de firma
clion.change.signature.move.parameter.down=Haga clic en el botón siguiente o presione {2} para mover el parámetro {0} debajo del parámetro {1}.
clion.change.signature.open.dialog=En este ejemplo, la función {0} requiere un destino como primer parámetro y una fuente como segundo parámetro. Puede que esto no sea intuitivo para algunos usuarios, así que cambiemos el orden.
clion.change.signature.open.dialog.press=Haga clic en {0} para abrir el cuadro de diálogo Cambiar firma.
clion.change.signature.refactor.button=Refactorización
clion.change.signature.select.parameter.1=Cambiar firma le permite realizar múltiples cambios en un cuadro de diálogo, pero también tiene acciones dedicadas para algunas refactorizaciones específicas que cambian la firma de la función.
clion.change.signature.select.parameter.2=La refactorización de <strong>parámetros</strong> le permite convertir variables o expresiones locales en parámetros de función. En este ejemplo, la función {0} muestra los elementos dentro del rango, separados por comas. Convirtamos la cadena delimitadora en un nuevo parámetro.
clion.change.signature.select.parameter.3=Presione {0} para seleccionar una cadena delimitadora.
clion.change.signature.type.new.parameter.name=<ide/> convirtió un literal de cadena en un nuevo parámetro de función. Ahora todo lo que tienes que hacer es darle un nombre significativo. Por favor ingrese {0}.
clion.change.signature.type.new.parameter.refactor=Haga clic en {0} para realizar la refactorización.
clion.collapse.all.collapse=Presione {0} para contraer todas las áreas del archivo.
clion.collapse.all.expand=Asimismo, presione {0} para expandir todas las áreas disponibles.
clion.collapse.help.link=Expandir o contraer elementos de código
clion.collapse.hit.expand=Presione {0} para expandir el área de código.
clion.collapse.lesson.name=doblar
clion.collapse.region.collapse=Puede hacer que un fragmento de código seleccionado sea "plegable" doblándolo y creando el área de plegado deseada. Seleccione las tres variables miembro en las líneas 6 a 8 y contraiga la selección con {0}.
clion.collapse.try.collapse=A veces es necesario doblar partes de su código para mejorar la legibilidad. Contraiga el fragmento de código con {0}.
clion.comments.comment.block=Puedes comentar bloques de código. Por ejemplo, para comentar el bloque seleccionado, presione {0}.
clion.comments.comment.one.line=Comente cualquier línea con {0}.
clion.comments.help.link=edición avanzada
clion.comments.lesson.name=Agregar y eliminar comentarios
clion.comments.uncomment.line=Eliminar comentarios de líneas comentadas con el mismo acceso directo {0}
clion.completion.complete.statement=Complete esta declaración presionando {0}.
clion.completion.module.description=El IDE completa el código. Pruebe la finalización de código básica, inteligente y de otro tipo.
clion.completion.module.name=Finalización de código
clion.debug.workflow.lesson.name=Flujo de trabajo de depuración
clion.extract.constant=Presione {0} para extraer el valor literal de pi utilizado aquí, calcular el área dentro del círculo y generarlo como una constante.
clion.extract.constant.expression.literal=Seleccione un literal numérico como expresión a extraer.
clion.extract.constant.help.link=extracción constante
clion.extract.constant.intro=<ide/> tiene muchas refactorizaciones útiles para su código C++. Por ejemplo, la refactorización <strong>Extracción constante</strong> elimina constantes codificadas para que el código sea más fácil de leer y mantener.
clion.extract.constant.replace.occurrences=Debido a que el mismo literal numérico se usa varias veces, <ide/> le brinda la opción de reemplazar todas las posiciones o cambiar solo esta. Seleccione {0}.
clion.extract.constant.replace.occurrences.item=Reemplace los 2 elementos encontrados
clion.extract.extend.selection=Presione {1} tres veces para seleccionar {0}.
clion.extract.function=Ahora presione {0} para extraer el código seleccionado en una función.
clion.extract.function.button.name=extracción
clion.extract.function.click.extract=Ahora presione <strong>Extraer</strong> para ejecutar la refactorización.
clion.extract.function.click.inline=Haga clic en el botón <strong>En línea</strong> para confirmar.
clion.extract.function.conclusion=Puede utilizar la refactorización en línea para incorporar constantes y macros de preprocesador.
clion.extract.function.dialog=El cuadro de diálogo Extraer función le permite especificar la ubicación de la declaración, el tipo de retorno y el nombre de la nueva función.
clion.extract.function.inline.button.name=En línea
clion.extract.function.intro=El código ahora ha mejorado mucho. Sin embargo, todavía quedan muchas refactorizaciones que se pueden aplicar. Usando <strong>Extraer función</strong> en <ide/>, puede extraer cualquier expresión o fragmento de código en una función separada. Extraigamos la expresión de la siguiente línea en una función separada en lugar de una variable local.
clion.extract.function.new.function.name=Establezca el nombre en {0}.
clion.extract.inline=Haga clic en {0} y luego presione {1}.
clion.extract.inline.done=<ide/> insertó {0} nuevamente, revirtiendo cualquier refactorización de extracción de función anterior.
clion.extract.inline.intro=<ide/> refactorizó el cálculo del perímetro en una nueva función. Sin embargo, al contrario de esto, es posible que desees eliminar la función e insertar su cuerpo en la ubicación de la llamada. <ide/> tiene una refactorización <strong>inline</strong> para este propósito, que hace lo opuesto a la refactorización de llamadas a funciones.
clion.extract.lesson.name=Extraer y en línea
clion.extract.new.constant.name=Ingrese {0} como nombre de la nueva constante y presione {1}.
clion.extract.new.variable.name=Ingrese {0} como nombre de la nueva variable local y presione {1}.
clion.extract.variable=Presione {0} para extraer la expresión como una variable.
clion.extract.variable.declare.const=declaración constante
clion.extract.variable.expression=Luego seleccione {0}.
clion.extract.variable.expression.option=Ahora hay opciones adicionales disponibles al declarar nuevas variables locales. Seleccione "Declarar constante".
clion.extract.variable.help.link=Extraer/insertar variables
clion.extract.variable.intro=Ahora no es necesario codificar valores. Aún así, la expresión es demasiado larga. Extraigamos el área dentro del círculo como una variable local refactorizando la <strong>Extracción de variables</strong>.
clion.inline.help.link=En línea
clion.intn.name.replace.if=Cambie 'si más' a '?:'
clion.multiple.selections.deselect.symbol=Presione {0} para anular la selección del último elemento encontrado.
clion.multiple.selections.escape=Presione {0} para restablecer la selección múltiple y volver al modo de cursor único.
clion.multiple.selections.help.multiple.carets=Múltiples quilates y rango de selección.
clion.multiple.selections.lesson.name=Múltiples rangos de selección
clion.multiple.selections.replace=Ingrese {0} para reemplazar todas las apariciones encontradas de {1} con {0}.
clion.multiple.selections.select.all=Haga clic en {0} para seleccionar todos los elementos encontrados en este archivo.
clion.multiple.selections.select.next.symbol=Presione {0} nuevamente para seleccionar la siguiente aparición encontrada de este símbolo.
clion.multiple.selections.select.symbol=Presione {0} para seleccionar el símbolo en la posición del cursor.
clion.onboarding.apply.action=Seleccione la acción {0} y presione {1}.
clion.onboarding.apply.intention=Seleccione una acción para convertir el parámetro en una referencia constante y luego presione {0}.
clion.onboarding.balloon.about.debug.panel=La ventana de herramientas {0} proporciona una barra de herramientas con varias acciones de depuración. Pruebe esta acción más tarde tomando la clase {1}.
clion.onboarding.balloon.click.here=Haga clic aquí para establecer un punto de interrupción
clion.onboarding.balloon.open.file=Haga doble clic para abrir {0}
clion.onboarding.balloon.open.learn.toolbar=Cambie a la ventana de herramientas {0} para continuar con esta lección
clion.onboarding.balloon.project.directory=Puede ver los archivos del proyecto haciendo doble clic en el directorio del proyecto para expandirlo.
clion.onboarding.balloon.project.view=Haga clic para abrir la vista <strong>Proyecto</strong>
clion.onboarding.balloon.start.debugging=Haga clic en el icono para iniciar la depuración o presione {0}.
clion.onboarding.balloon.stop.debugging=Haga clic en el icono para comenzar a depurar
clion.onboarding.case.changed=El caso ha sido cambiado.
clion.onboarding.change.ui.settings=Para esta lección, <ide/> cambiará algunas configuraciones de la interfaz de usuario a su estado predeterminado. Sus preferencias se restaurarán cuando complete o salga de esta clase.
clion.onboarding.epilog=Felicidades. Ha completado el recorrido de incorporación. Ahora puede continuar con lo siguiente:\n"{0}">Cerrar</callback>{1}\n"{2}">Ver</callback>
clion.onboarding.feedback.system.found.toolchain=Cadena de herramientas encontrada:
clion.onboarding.feedback.system.no.toolchain=no existe
clion.onboarding.feedback.system.used.toolchain=Cadena de herramientas utilizada:
clion.onboarding.finish.exit=Cerrar proyecto de demostración
clion.onboarding.finish.modules=Ver más clases
clion.onboarding.finish.text=<ide/> Ha completado el recorrido de incorporación.\nAhora puede cerrar el proyecto de aprendizaje {0}.\nPuede continuar aprendiendo y continuar con otras clases.
clion.onboarding.finish.title=Felicidades
clion.onboarding.indexing.description=Cuando abres un proyecto por primera vez, <ide/> examina la biblioteca de plantillas estándar y el proyecto en sí para recopilar los detalles necesarios para ayudar con la codificación. Espere hasta que se complete la indexación para continuar.
clion.onboarding.invoke.completion=Ahora escriba {0} para mostrar todas las opciones de finalización de código disponibles.
clion.onboarding.invoke.completion.tip=<strong>Consejo</strong>: Puedes mostrar entradas de autocompletar en cualquier parte de tu código presionando {0}.
clion.onboarding.invoke.intention.for.code=Al utilizar intenciones, puede ahorrar tiempo, facilitar la codificación y escribir código seguro y eficiente. Aquí {0} se pasa a {1} por valor, lo que significa que {1} se copiará cada vez que se llame. Esto no es eficiente. Utilicemos la intención para eliminar copias innecesarias. Presione {2}.
clion.onboarding.invoke.intention.for.warning.1=Acabamos de corregir un error, pero podemos hacer que este código sea aún más limpio. <ide/> resalta líneas de código que podrían mejorarse y agrega una bombilla de luz amarilla.
clion.onboarding.invoke.intention.for.warning.2=Presione {0} para obtener una vista previa de las advertencias y aplicar soluciones rápidas.
clion.onboarding.invoke.search.everywhere.1=Cuando trabaje en <ide/>, es posible que desee buscar archivos dentro de un proyecto, símbolo, clase o acción IDE. En esta lección, busquemos la acción {0} y pongamos en minúscula la cadena {1}.
clion.onboarding.invoke.search.everywhere.2=Haga clic en {0} dos veces para abrir el cuadro de diálogo {1}.
clion.onboarding.lesson.name={0} Aprender
clion.onboarding.module.description=Esta es una breve descripción general de las características principales de {0}
clion.onboarding.module.name=Tour de incorporación
clion.onboarding.no.toolchain=Para compilar y ejecutar código, primero debe <callback id="{0}">configurar</callback> el compilador C/C++.
clion.onboarding.project.view.description=La vista <strong>Proyecto</strong> es una de las ventanas de herramientas principales. Esta vista incluye directorios de proyectos, bibliotecas externas y archivos borrador. Haga clic en el botón rayado para abrirlo y verá una vista previa del contenido de un proyecto de demostración simple. También puedes abrirlo haciendo clic en {0}.
clion.onboarding.return.to.welcome=\ y volver a la pantalla de inicio
clion.onboarding.run.options=Abrí un proyecto de demostración. ¡Ahora hagámoslo! En el área resaltada de la barra de herramientas, puede ver las acciones de ejecución utilizadas con frecuencia para el objetivo seleccionado. Por ejemplo, puede compilar su código{0}, depurarlo{1}, ejecutarlo con cobertura{3}, perfilarlo{4} o ejecutarlo con memcheck{5}.
clion.onboarding.run.sample=Ahora ejecutemos el archivo actual. Haga clic en {0} o presione {1}.
clion.onboarding.run.sample.balloon=Intente ejecutar el archivo actual. Haga clic en {0} o presione {1}.
clion.onboarding.search.everywhere.description=Como puede ver, el texto seleccionado, {0}, se ha copiado automáticamente a la cadena de entrada. Intentemos ingresar {1} en lugar de {0}.
clion.onboarding.select.fix=Aplicar el primer elemento. {0}. La aplicación de esta solución hará que su código sea más limpio.
clion.onboarding.select.item=Las opciones de finalización de código aparecen automáticamente en <ide/> a medida que escribe. Utilice las teclas de dirección del teclado para seleccionar el elemento {0} y luego presione {1}.
clion.onboarding.start.debugging=Haga clic en el icono {0} para iniciar el proceso de depuración.
clion.onboarding.start.typing=Ahora puedes escribir {0} para acortar la lista de finalización de código, o también puedes seleccionarlo y presionar {1}.
clion.onboarding.stop.debugging=Comencemos a depurar. Haga clic en el icono {0}.
clion.onboarding.toggle.breakpoint.1=Quizás hayas notado que la función {1} devuelve {2} en lugar de {0}, que es el valor esperado. Vayamos a la declaración de devolución y depuremos el código problemático.
clion.onboarding.toggle.breakpoint.2=Haga clic en el margen del área resaltada para establecer un punto de interrupción.
clion.onboarding.toggle.case.part=mensaje
clion.onboarding.toolchain.description=<ide/> ya ha configurado una cadena de herramientas C/C++ predeterminada para este curso. Puedes modificarlos o incluso crearlos para tus proyectos. Vaya a Configuración -> Compilación, ejecución, implementación -> Cadena de herramientas.
clion.onboarding.toolchain.tip=<strong>Consejo:</strong> Puede configurar su cadena de herramientas C/C++ en las preferencias <ide/> en Construir, Ejecutar, Implementar -> Cadena de herramientas.
clion.onboarding.type.division=Encontré un problema en el código, solucionémoslo. Divida la suma resultante por la longitud de los valores. El guión de entrenamiento ya ingresa {0}.
clion.postfix.completion.complete=Seleccione {0} de la lista y presione {1} para completar la frase.
clion.postfix.completion.type=Para C++, la finalización de postfix es muy útil al empaquetar conversiones de estilo C++, `make_shared`/`make_unique`, varios bucles y modismos `begin`/`end`. Si escribe {0} después del nombre de la clase, verá opciones para completar el sufijo.
clion.qfix.name.remove.parameter=Eliminar la declaración del parámetro 'redundante'
clion.quick.fix.use.range.based.loop=Utilice bucles basados en rangos en su lugar
clion.refactorings.module.description=Limpie su código mediante cambio de nombre, extracción y otros tipos de refactorización.
clion.refactorings.module.name=Refactorización
clion.rename.again=Puede ver que la refactorización de cambio de nombre ha cambiado automáticamente el nombre de {0} en este comentario. Esta es una de las opciones adicionales en la refactorización de cambio de nombre. Intente cambiar el nombre de {0} a {1}. Haga clic aleatoriamente en una de las apariciones encontradas del tipo nombre {0} dentro de su código y presione {2}.
clion.rename.applied=<ide/> cambió el nombre de una plantilla de clase en su declaración/definición y ubicaciones de uso. Esto se aplica a todo el proyecto.
clion.rename.conclusion=<ide/> cambió el nombre de la plantilla de clase. Sin embargo, a diferencia de antes, los comentarios no se verán afectados esta vez.
clion.rename.description={0} La refactorización le permite cambiar globalmente el nombre de símbolos, archivos y directorios y corregir automáticamente sus ubicaciones de referencia en su código.
clion.rename.help.link=Refactorizar cambiar el nombre
clion.rename.lesson.name=rebautizar
clion.rename.press.rename=Haga clic en {0} para cambiar el nombre de la plantilla de clase {1}.
clion.rename.show.option.popup=Puede acceder a opciones adicionales haciendo clic en el icono junto al elemento cuyo nombre está cambiando o presionando {0}.
clion.rename.type.new.name=Introduzca un nuevo nombre para esta plantilla de clase, como {0}, y luego presione {1}.
clion.rename.undo=Al igual que con cualquier refactorización, puede revertirla fácilmente cambiando el nombre de un tipo y usando deshacer. Presione {0}.
clion.rename.update.option=Deshabilitar 'Cambiar nombres en comentarios y cadenas también'
clion.selection.select.string=Presione {0} nuevamente para seleccionar la cadena completa.
clion.smart.completion.finish.completion=Seleccione {0} y presione {1}.
clion.smart.completion.help.link=Coincidencia de tipos completada
clion.smart.completion.introduction=La finalización de tipo inteligente filtra la lista de sugerencias para incluir solo los tipos aplicables al contexto actual.
clion.smart.completion.use.smart.completion=En este caso lo correcto es pasar el valor de la enumeración {0} a la función {1}. Presione {2} para mostrar una lista de sugerencias coincidentes. Sin embargo, aquí solo se muestran los diferentes valores de enumeración {0}.
clion.statement.completion.complete.condition=Después de agregar la condición entre paréntesis {0}, presione {1} para pasar a la declaración {2}.
clion.statement.completion.complete.finish.body=Ingrese {0} en una línea, luego presione {1} para completar la sintaxis y aplicar el formato.
clion.statement.completion.complete.for=Presione {0} para completar la declaración {1}.
clion.statement.completion.complete.if=Ingrese {0}, luego presione {1} para generar la frase.
clion.statement.completion.help.link=Finalización de sintaxis
clion.statement.completion.lesson.intro1=Puede utilizar la finalización de sintaxis para generar una sintaxis de código gramaticalmente correcta. Inserte los elementos de sintaxis requeridos (paréntesis, llaves y punto y coma) y muévase a una posición donde pueda escribir la siguiente sintaxis.
clion.statement.completion.lesson.intro2=La finalización de la sintaxis se puede realizar mediante declaraciones (clases, espacios de nombres, enumeraciones, etc.) o declaraciones (<code>if/else</code>, <code> while</code>, <code>do</code>, < code>para </code>, <code>switch/case</code>, <code>try/catch</code>).
clion.statement.completion.lesson.name=Finalización de sintaxis
clion.tab.completion.lesson.intro=Completar el código con Tabulador (en lugar de Retorno) no solo inserta la sugerencia seleccionada, sino que también reemplaza completamente la palabra en el cursor. Esto es útil para modificar código rápidamente porque no es necesario seleccionar y eliminar palabras manualmente.
clion.tab.completion.lesson.name=Finalización del código de tabulación
clion.tab.completion.select.item=Utilice las flechas de su teclado para seleccionar el elemento {0} o ingresar un elemento.
clion.tab.completion.start.completion=Aquí, digamos que desea reemplazar {0} con el miembro de la clase {1}. Presione {2} para mostrar sugerencias de finalización.
clion.tab.completion.use.tab.completion=Cuando presiona {0}, {1} se inserta antes de {2}. En su lugar, presione {3} para reemplazar {2} con {1}.
toolbar.settings.button=IDE y configuración del proyecto
unwrap.try=Desenvolver 'si...'
