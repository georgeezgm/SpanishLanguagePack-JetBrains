action.AnActionButton.extract.style.text.select.all=모두 선택 해제
action.AnActionButton.extract.style.text.unselect.all=모두 선택 해제
action.AnActionButton.text.select.all=모두 선택
action.AnActionButton.text.unselect.all=모두 선택 해제
action.AnActionButton.update.sites.text.deselect.all=모두 선택 해제
action.AnActionButton.update.sites.text.select.all=모두 선택
action.Android.AddRTLSupport.description=가능한 경우 오른쪽에서 왼쪽 방향(RTL) 지원을 추가합니다
action.Android.AddRTLSupport.text=오른쪽에서 왼쪽 방향(RTL) 지원 추가…
action.Android.AnalyzeApk.description=분석할 APK 선택
action.Android.AnalyzeApk.text=APK 분석...
action.Android.DeviceExplorer.GotoDatabaseFolder.text=데이터베이스 폴더로 이동
action.Android.DeviceExplorer.GotoSdcardFolder.text=SD 카드 폴더로 이동
action.Android.DeviceExplorer.GotoSharedPrefsFolder.text=공유 환경 설정 폴더로 이동
action.Android.DeviceExplorer.Help.text=기기 탐색기 도움말 열기
action.Android.DumpResourceTraceAction.text=리소스 추적 덤프
action.Android.ExportProjectZip.text=프로젝트를 Zip 파일로 내보내기…
action.Android.FixAndroidRunConfigurations.description=Android 실행 구성에 'Gradle-aware Make' 시작 작업이 없는 경우 이 작업을 추가합니다
action.Android.FixAndroidRunConfigurations.text=Android 실행 구성 수정
action.Android.OpenBuildAnalyzerAction.description=빌드 분석기 열기(보고서를 표시하려면 성공한 빌드가 필요합니다).
action.Android.OpenBuildAnalyzerAction.text=빌드 성능 분석
action.Android.OpenBuildAnalyzerResultsAction.description=과거의 빌드 결과를 빌드 분석기로 열기
action.Android.OpenBuildAnalyzerResultsAction.text=이전 빌드의 결과 분석 표시
action.Android.RefreshLinkedCppProjects.text=연결된 C++ 프로젝트 새로 고침
action.Android.RunAndroidAvdManager.description=에뮬레이터 이미지와 스냅샷을 관리하는 Android 가상 기기(AVD) 관리자를 엽니다
action.Android.RunAndroidAvdManager.popup.text=AVD 매니저 열기
action.Android.RunAndroidAvdManager.text=AVD 관리자
action.Android.RunAndroidAvdManager.toolbar.text=기기 정의 추가…
action.Android.RunAndroidSdkManager.text=Android SDK 관리자
action.Android.SyncProject.text=Gradle 파일과 프로젝트 동기화(_G)
action.Android.ToggleResourceTraceAction.text=리소스 업데이트 추적
action.AndroidConnectDebuggerAction.description=Android 프로세스에 디버거 연결
action.AndroidConnectDebuggerAction.text=Android 프로세스에 디버거 연결
action.AndroidEnableInstantAppsSupport.description=모듈에 대한 인스턴트 앱 지원을 활성화합니다
action.AndroidEnableInstantAppsSupport.text=인스턴트 앱 지원 활성화...
action.AndroidExtractAsIncludeAction.description=하나 이상의 뷰를 별도 레이아웃으로 추출합니다
action.AndroidExtractAsIncludeAction.text=레이아웃(_L)...
action.AndroidExtractStyleAction.description=레이아웃에서 스타일 관련 속성을 끌어내 새 스타일로 추출합니다
action.AndroidExtractStyleAction.text=스타일(_Y)...
action.AndroidFindStyleApplicationsAction.description=가능한 경우 속성을 Android 스타일 참조로 바꿉니다
action.AndroidFindStyleApplicationsAction.text=가능한 경우 스타일 사용(_W)…
action.AndroidInlineIncludeAction.description=포함된 Android 레이아웃을 인라인화합니다
action.AndroidInlineIncludeAction.text=레이아웃 인라인화(_L)…
action.AndroidInlineStyleReferenceAction.description=Android 스타일을 인라인화합니다
action.AndroidInlineStyleReferenceAction.text=스타일 인라인화(_S)...
action.AndroidMigrateToAndroidxAction.description=AndroidX 패키지 이름으로 마이그레이션합니다
action.AndroidMigrateToAndroidxAction.text=AndroidX로 마이그레이션…
action.AndroidMigrateToAppCompatAction.description=AppCompat으로 앱을 마이그레이션합니다
action.AndroidMigrateToAppCompatAction.text=AppCompat으로 마이그레이션…
action.AndroidMigrateToResourceNamespacesAction.description=리소스 네임스페이스로 마이그레이션합니다
action.AndroidMigrateToResourceNamespacesAction.text=리소스 네임스페이스로 마이그레이션…
action.AndroidModularizeAction.description=다른 모듈로 클래스 및 관련 리소스를 이동합니다
action.AndroidModularizeAction.text=모듈화…
action.AndroidUnusedResourceAction.description=사용되지 않는 리소스를 제거합니다
action.AndroidUnusedResourceAction.text=사용되지 않는 리소스를 제거…
action.ConvertFromWebp.text=PNG로 변환…
action.ConvertToWebp.text=WebP로 변환…
action.DeviceAndSnapshotComboBox.text=기기 선택
action.DumbAware.AbstractDependenciesPanel.text.add.dependency=종속성 추가
action.DumbAware.ToolWindowHeader.text.hide=숨기기
action.IdeaNewProject.text=IDEA 새 프로젝트…
action.InferAnnotations.text=지원 어노테이션 추론...
action.LayoutEditor.AddSampleData.description=새 데이터 샘플 파일을 추가합니다
action.LayoutEditor.AddSampleData.text=샘플 데이터 파일 추가
action.Project.CallGraph.text=컨텍스트 의존 호출 경로
action.Project.InterproceduralThreadAnnotations.text=프로시저 내부 스레드 어노테이션 검사기
action.ResourceExplorer.open.description=리소스 관리자를 엽니다
action.StatisticsViewer.text=통계 뷰어 표시
action.label.code.style.notification.disable=알림 비활성화
action.label.code.style.notification.open.settings=코드 스타일 설정 열기
action.label.open.project.structure=프로젝트 구조 열기
activity.class.not.specified.error=액티비티 클래스가 지정되지 않았습니다.
activity.not.declared.in.manifest=액티비티 ''{0}''이(가) AndroidManifest.xml에서 선언되지 않았습니다.
add.dependency.intention.text=라이브러리 종속성 추가
add.string.resource.intention.text=문자열 리소스 추출
android.9patch.creator.error=9-Patch 파일을 생성하는 동안 예기치 않은 오류가 발생했습니다. {0}
android.9patch.creator.error.title=9-Patch 파일 생성
android.9patch.creator.save.title=.9.png로 저장
android.9patch.creator.title=9-Patch 파일 생성…
android.9patch.file.type.description=Android 9-Patch
android.aapt.use.custom.package.name=매니페스트 패키지 이름 변경(&K):
android.apk.settings.title=리소스 패키징
android.apk.sign.gradle.invalid.destination=대상 폴더가 없거나 쓰기 가능하지 않습니다.
android.apk.sign.gradle.missing.destination=서명된 {0}에 대한 대상 폴더를 지정하세요.
android.apk.sign.gradle.missing.variants=빌드 및 서명할 variant를 선택하세요.
android.apk.sign.gradle.no.model=Gradle 프로젝트 정보가 누락되어 있습니다. IDE 상태가 Gradle 프로젝트 모델과 성공적으로 동기화되었는지 확인하세요.
android.apk.sign.gradle.no.variants=정의된 빌드 variant가 없습니다.
android.application.title=Android 애플리케이션
android.apt.settings.title=R.java 및 Manifest.java 파일
android.as.wizard.welcome.dialog.title=Android Studio 설치 마법사
android.autogeneration.notification.group=Android 자동 생성
android.browse.instrumentation.class.dialog.title=계측 클래스 선택
android.browse.test.class.dialog.title=테스트 클래스 선택
android.cannot.create.dir.error=디렉터리 {0}을(를) 생성할 수 없습니다
android.cannot.create.file.error=파일 {0}을(를) 생성할 수 없습니다.
android.cannot.create.new.key.error=새 키 또는 Keystore를 생성할 수 없습니다.
android.cannot.debug.noDebugPermissions=기기 {1}에서 모듈 {0}의 애플리케이션을 디버그할 수 없습니다.\n\
이 애플리케이션에는 해당 매니페스트에서 활성화된 ''debuggable'' 속성이 없습니다.\n\
이 속성을 수동으로 설정했다면 제거하고 IDE에서 속성이 자동 지정되도록 하세요.\n\
Gradle을 사용하는 경우, 현재 variant가 디버그 가능한지 확인하세요.
android.cannot.find.file.error=파일 {0}을(를) 찾을 수 없습니다
android.cannot.run.library.project.error=모듈은 Android 라이브러리일 수 없습니다.
android.compilation.error.apt.gen.not.specified=모듈 {0}에 대한 AAPT 대상 디렉터리가 지정되지 않았습니다.
android.compilation.error.manifest.not.found=[{0}] AndroidManifest.xml 파일을 찾을 수 없습니다. Android 패싯 설정을 확인하세요.
android.compilation.error.specify.platform=[{0}] Android SDK가 지정되지 않았거나 분석할 수 없습니다.
android.compile.messages.generating.r.java.content.name=소스 생성 중
android.complication.configuration.type.name=Wear OS 문제
android.component.entry.point=Android 구성 요소
android.confirm.password.label=확인(&C):
android.create.new.key.error.prefix=키가 오류와 함께 생성되었습니다.
android.ddms.actions.layoutinspector.description.disabled=디버그 중 비활성화된 레이아웃을 검사합니다.
android.ddms.actions.layoutinspector.dumpdisplay.notification.failure=예외로 인해 표시 목록 정보를 찾지 못했습니다. {0}
android.ddms.actions.layoutinspector.dumpdisplay.notification.nonode=타깃 노드를 찾을 수 없어 표시 목록 정보를 찾지 못했습니다.
android.ddms.actions.layoutinspector.dumpdisplay.notification.success=Logcat에 적힌 표시 목록 정보
android.ddms.actions.layoutinspector.menu.dump.display=표시 목록 덤프
android.ddms.actions.layoutinspector.menu.show.bound=레이아웃 경계 표시
android.ddms.actions.layoutinspector.notification.group=Layout Inspector
android.ddms.actions.layoutinspector.notification.title=Layout Inspector
android.ddms.actions.layoutinspector.title.legacy=기존 Layout Inspector
android.ddms.actions.layoutinspector.update.notification.failure=기기의 이미지를 업데이트하지 못했습니다.
android.ddms.actions.layoutinspector.windowpicker=창 선택
android.ddms.actions.screenrecord=화면 녹화
android.ddms.actions.screenrecord.description=기기 화면을 동영상으로 녹화합니다.
android.ddms.actions.screenshot=화면 캡처
android.ddms.actions.screenshot.copied.to.clipboard=클립보드에 복사된 이미지
android.ddms.actions.screenshot.description=기기에서 스크린샷을 가져옵니다.
android.ddms.actions.screenshot.title=화면 캡처
android.ddms.actions.terminate.vm=애플리케이션 종료
android.ddms.actions.terminate.vm.description=선택된 Android 애플리케이션을 종료합니다.
android.ddms.nodevices=[없음]
android.ddms.notification.layoutinspector.reboot.live.inspector=실시간 검사 서비스를 탐지할 수 없습니다. 실시간 검사를 활성화하려면 기기를 다시 시작하세요.
android.ddms.screenrecord.options.ok.button.text=녹화 시작
android.ddms.screenrecorder.options.bit.rate=비트 전송률(Mbps):
android.ddms.screenrecorder.options.bit.rate.invalid=비트 전송률은 정수여야 합니다.
android.ddms.screenrecorder.options.info=<html>Screen Recorder는 기기의 디스플레이를 최대 3분 동안 기록할 수 있습니다.</html>
android.ddms.screenrecorder.options.resolution=해상도(기본 백분율):
android.ddms.screenrecorder.options.show.taps=태그 표시
android.ddms.screenrecorder.options.show.taps.tooltip=탭에 대한 시각적 피드백 표시
android.ddms.screenrecorder.options.use.emulator.recording=에뮬레이터 기록 사용(webm)
android.ddms.screenrecorder.options.use.emulator.recording.tooltip=에뮬레이터 기록 API를 사용하여 기록합니다. 선택하지 않으면 대신 adb 기록을 사용합니다.
android.ddms.screenshot.generic.error=스크린샷을 가져오는 동안 예기치 않은 오류가 발생했습니다. {0}
android.ddms.screenshot.image.processor.task.title=이미지 업데이트 중
android.ddms.screenshot.save.error=스크린샷을 저장하는 동안 예기치 않은 오류가 발생했습니다. {0}
android.ddms.screenshot.save.ok.button.text=저장
android.ddms.screenshot.save.title=PNG로 저장
android.ddms.screenshot.task.error.invalid.bpp=지원되지 않는 이미지(픽셀당 비트 = {0})를 기기로부터 받았습니다.
android.ddms.screenshot.task.error1=기기에서 스크린샷을 가져오는 동안 예기치 않은 오류가 발생했습니다. {0}
android.ddms.screenshot.task.step.load=메모리로 스크린샷 로드 중…
android.ddms.screenshot.task.step.obtain=기기에서 스크린샷 가져오는 중…
android.dest.directory.title=생성된 파일의 디렉터리(&Y):
android.dex.compiler.vm.options.title=Android DX 컴파일러 VM 옵션
android.dictionary.name=Android 사전
android.editor.settings.appearance.enable.flags.for.languages=언어 플래그 활성화
android.editor.settings.appearance.title=Android 에디터
android.editor.settings.general.code.folding.string.references=문자열 참조
android.emulator=에뮬레이터
android.emulator.settings.clipboard.sharing=클립보드 공유 활성화
android.emulator.settings.incompatible.snapshot.policy=현재 구성과 호환되지 않는 스냅샷을 발견했을 경우:
android.emulator.settings.incompatible.snapshot.policy.ask=삭제하기 전에 묻기
android.emulator.settings.incompatible.snapshot.policy.delete=자동으로 삭제
android.emulator.settings.incompatible.snapshot.policy.ignore=삭제 안 함
android.emulator.settings.launch.tool.window=도구 창에서 열기
android.emulator.settings.launch.tool.window.tooltip=이 설정을 활성화하면 Android 에뮬레이터가 도구 창에서 열립니다. 비활성화 시 Android 에뮬레이터가 독립적인 애플리케이션으로 실행됩니다.
android.export.package.bundle.description=<html>앱 스토어에 업로드할 때 서명된 앱 번들을 생성하면 다음과 같은 이점을 누릴 수 있습니다. <ul><li>다운로드 크기 감소</li><li>온디맨드 앱 기능</li><li>애셋 전용 모듈</li></ul></html>
android.export.package.bundle.gradle.error=서명된 번들을 생성하려면 Android Gradle 플러그인을 3.2.0 이후 버전으로 업데이트해야 합니다.
android.export.package.bundle.key.export=게시된 앱을 등록하기 위해 암호화된 키 내보내기
android.export.package.bundle.key.export.error.description=암호화 키를 내보낼 수 없습니다. 문제를 해결하고 다시 시도하세요.\n\
\n\
세부 정보: {0}.
android.export.package.bundle.key.export.error.title=비밀번호화 키 내보내기 실패
android.export.package.city.label=구/군/시(&L):
android.export.package.country.code.label=국가 코드(XX)(&X):
android.export.package.destination.akp.label=대상 APK 경로(&D):
android.export.package.incorrect.password.length=비밀번호는 6자 이상이어야 합니다.
android.export.package.key.certificate.name.label=이름(&F):
android.export.package.key.validity.label=유효 기간(년)(&V):
android.export.package.keystore.error.title=Keystore 로드 오류
android.export.package.new.key.alias.label=별칭(&A):
android.export.package.organization.label=조직(&R):
android.export.package.organization.unit.label=조직 단위(&O):
android.export.package.passwords.cannot.contain.quote.character=비밀번호에 따옴표 문자를 포함하면 안 됩니다
android.export.package.passwords.not.match.error=비밀번호가 일치하지 않습니다
android.export.package.run.proguard.label=ProGuard 실행(&P)
android.export.package.specify.certificate.field.error=1개 이상의 인증서 발행자 필드를 입력해야 합니다.
android.export.package.specify.key.alias.error=키 별칭을 지정하세요.
android.export.package.specify.key.password.error=키 비밀번호를 지정하세요.
android.export.package.specify.key.store.password.error=Keystore 비밀번호를 지정하세요.
android.export.package.specify.keystore.location.error=Keystore 위치를 지정하세요.
android.export.package.specify.password.error=비밀번호를 지정하세요.
android.export.package.state.label=도(&T):
android.export.package.success.message=파일 {0}이(가) 성공적으로 생성되었습니다.
android.export.package.wizard.bundle.title=서명된 번들 또는 APK 생성
android.export.package.wizard.title=서명된 APK 생성
android.extended.device.chooser.avd.label=Android 가상 기기 선택(&A):
android.extract.package.cannot.find.key.error=키 {0}을(를) 찾을 수 없습니다.
android.extract.package.choose.dest.apk=대상 APK 파일 선택
android.extract.package.choose.keystore.title=Keystore 파일 선택
android.extract.package.error.0.message=오류: {0}
android.extract.package.specify.apk.path.error=대상 APK 경로를 지정하세요.
android.extract.package.specify.proguard.cfg.path.error=ProGuard 구성 파일 경로를 지정하세요.
android.extract.package.task.title=APK 파일 생성 중
android.extract.style.title=Android 스타일 추출
android.facet.editor.is.library.checkbox=라이브러리 모듈(&B)
android.facet.importing.notification.group=가져오기 오류
android.facet.importing.title=모듈 ''{0}'' 가져오기 중 오류 발생
android.facet.not.editable.text=이 패싯은 자동으로 생성되었기 때문에 편집할 수 없습니다. 수동으로 생성된 Android 패싯만 편집할 수 있습니다.
android.facet.settings.apk.path.label=APK 경로(&P):
android.facet.settings.compile.resources.by.ide=IDE로 생성(&G)
android.facet.settings.custom.debug.keystore.label=사용자 지정 디버그 Keystore(&U):
android.facet.settings.pack.test.sources=테스트 코드 및 리소스를 APK에 포함
android.facet.settings.run.proguard=디버그 APK 빌드 시 ProGuard 실행
android.file.not.exist.error=파일 {0}이(가) 없습니다
android.final.package.element.type.name=Android 최종 패키지
android.find.style.applications.title=가능하면 스타일 사용
android.font.file.type.description=글꼴
android.generate.r.java.by.res.dir="구조" 섹션에서 지정된 리소스 디렉터리 사용(&O)
android.generate.signed.apk.action.bundle.text=서명된 번들/APK 생성…
android.generate.signed.apk.action.text=서명된 APK 생성…
android.gradle.link.appengine.outdated='appengine' 플러그인 버전을 업데이트하세요.
android.ij.wizard.welcome.dialog.title=Android Support 플러그인 설정 마법사
android.import.dependencies.add.module.dependency.task.title=종속성 추가 {0} --> {1}
android.import.dependencies.dialog.title=프로퍼티 파일에서 Android 종속성 가져오기
android.import.dependencies.error.message.header=가져오기가 오류와 함께 완료되었습니다.
android.import.dependencies.import.module.task.title={1}에서 라이브러리 모듈 {0} 가져오기
android.import.dependencies.new.module.task.title={1} 내 라이브러리 모듈 {0} 생성
android.import.dependencies.source.roots.dialog.label=프로젝트에 추가할 소스 루트 선택
android.import.dependencies.source.roots.dialog.title=소스 루트 가져오기
android.inline.file.inline.all.text=전체 참조 인라인화 및 파일 제거(&A)
android.inline.file.inline.this.text=이 사용 위치만 인라인화하고 파일 유지(&T)
android.inline.layout.command.name=레이아웃 파일 ''{0}''인라인화
android.inline.layout.title=Android 레이아웃 인라인화
android.inline.style.command.name=스타일 ''{0}''인라인화
android.inline.style.inline.all.text=전체 참조 인라인화 및 스타일 제거(&A)
android.inline.style.inline.this.text=이 사용 위치만 인라인화하고 스타일 유지(&T)
android.inline.style.title=Android 스타일 인라인화
android.inspections.dom.name=Android 리소스 유효성 검사
android.inspections.element.not.allowed.name=Android XML 요소는 허용되지 않습니다
android.inspections.group.name=Android
android.inspections.nav.file=탐색 파일
android.inspections.nav.name.not.valid=''{0}''은(는) 태그 ''{1}''의 유효한 목적지가 아닙니다
android.inspections.non.constant.res.ids.in.switch.message=Android 라이브러리 모듈에서는 switch 문에서 리소스 ID를 사용할 수 없습니다.
android.inspections.non.constant.res.ids.in.switch.name=switch 문 내 상수가 아닌 리소스 ID
android.inspections.on.click.missing.incorrect.signature=''{1}''에서 메서드 ''{0}''의 시그니처가 잘못되었습니다
android.inspections.on.click.missing.name=onClick 핸들러가 관련 액티비티에서 누락됨
android.inspections.on.click.missing.problem=메서드 ''{0}''이(가) ''{1}''에서 누락되었거나 해당 시그니처가 잘못되었습니다
android.inspections.root.tag.name=Android XML 루트 태그 유효성 검사
android.inspections.unknown.attribute.message=알 수 없는 속성 {0}
android.inspections.unknown.attribute.name=알 수 없는 Android XML 속성
android.inspections.unresolvable.tag=해결할 수 없는 태그
android.invalid.sdk.message=Android SDK 경로가 잘못되었습니다. <a href="#">설정</a>에서 업데이트하세요.
android.key.password.label=비밀번호(&S):
android.launch.task.clear.app.data.description=앱 스토리지 비우기
android.launch.task.clear.app.data.error=기기 {1}에서 {0}의 앱 스토리지를 비우지 못했습니다
android.launch.task.show.logcat={0}의 logcat 패널 열기\n\

android.launch.task.show.logcat.emulator=에뮬레이터 {0}
android.launch.task.show.logcat.unknown.avd=알 수 없는 AVD 이름
android.launch.task.show.logcat.unknown.manufacturer=알 수 없는 제조사
android.launch.task.show.logcat.unknown.model=알 수 없는 모델
android.launch.task.show.logcat.unknown.version=알 수 없는 버전
android.launch.task.succeeded={0} 성공
android.launch.task.succeeded.with.warnings={0}이(가) {1}개 경고와 함께 성공했습니다
android.layout.preview.default.error.message=렌더링을 수행할 수 없습니다.
android.layout.preview.edit.configuration.available.qualifiers.label=이용 가능한 한정자(&V):
android.layout.preview.edit.configuration.choosen.qualifiers.label=선택된 한정자(&H):
android.layout.screenview.action.description={0} Surface를 표시합니다
android.manifest.merger.not.supported.error=매니페스트 병합이 지원되지 않습니다. 매니페스트 파일을 다시 구성하세요.
android.new.component.action.command.name=새 Android 구성 요소
android.new.component.action.description=다른 카테고리로부터 새로운 Android 객체를 생성합니다
android.new.component.action.title.non.gradle=안드로이드 구성 요소
android.new.component.dialog.activity.item=액티비티
android.new.component.dialog.application.item=응용프로그램
android.new.component.dialog.broadcast.receiver.item=브로드캐스트 리시버
android.new.component.dialog.broadcast.remote.interface=원격 인터페이스
android.new.component.dialog.fragment.item=조각
android.new.component.dialog.service.item=서비스
android.progress.title.setting.up.run.configurations=실행 구성을 설정하는 중...
android.proguard.vm.options.title=Android ProGuard VM 옵션
android.proxy.settings.dialog.message=<html>{0}이(가) HTTP 프록시를 사용하도록 구성되어 있습니다. Gradle은 인터넷에 액세스하려면(예: 종속성 다운로드를 위해) HTTP 프록시 설정이 필요할 수 있습니다.<br/><br/>다음 HTTP 설정을 전역 gradle.properties 파일로 저장하시겠어요?<br/><br/><b>참고:</b> gradle.properties 파일에서 본인의 책임하에 비밀번호를 수동으로 설정할 수 있습니다.<br/><br/>자세한 내용은 <a href=''https://developer.android.com/studio/intro/studio-config.html#proxy''>Android Studio 문서</a>를 참조하세요.<br/><br/>
android.proxy.settings.dialog.title=프록시 설정
android.psd.file.type.description=Adobe Photoshop 이미지
android.refactoring.gradle.warning.rename.source.root=새로운 소스 루트 이름이 <br/>Gradle 구성으로 자동 전달되지 않습니다.<br/>해당 변경 내용을 *.gradle 파일에서 <br/>수동으로 적용해야 합니다.
android.refactoring.migrateto.androidx=AndroidX로 마이그레이션
android.refactoring.migrateto.namespaces.progress.analyze.code=코드 파일 분석 중…
android.refactoring.migrateto.namespaces.progress.analyze.manifest=매니페스트 파일 분석 중…
android.refactoring.migrateto.namespaces.progress.analyze.xml=XML 리소스 파일 분석 중
android.refactoring.migrateto.namespaces.progress.inferring=네임스페이스를 추론 중…
android.refactoring.migrateto.namespaces.title=리소스 네임스페이스로 마이그레이션…
android.refactoring.migrateto.nontransitiverclass.error.old.agp.message=비 이행적 R 클래스는 Android Gradle 플러그인 버전 4.2.0 미만을 사용하는 프로젝트에서는 사용할 수 없음
android.refactoring.migrateto.nontransitiverclass.error.old.agp.title=리팩터링을 수행할 수 없음
android.refactoring.migrateto.nontransitiverclass.progress.findusages=R 클래스 사용 위치 찾는 중…
android.refactoring.migrateto.nontransitiverclass.progress.inferring=패키지 이름 추론 중…
android.refactoring.migrateto.nontransitiverclass.progress.rewriting=리소스 참조 다시 쓰는 중…
android.refactoring.migrateto.nontransitiverclass.title=비 이행적 R 클래스로 마이그레이션…
android.refactoring.migrateto.nontransitiverclass.warning.recommend.upgrade=이 기능은 AGP 버전 4.2에서는 실험적 기능이므로 최적의 결과를 위해 7.0.0 이상으로 업그레이드하세요.
android.refactoring.migrateto.nontransitiverclass.warning.uncommitted.changes=프로젝트에 커밋되지 않은 변경사항이 있을 수 있습니다. 진행하기 전에 커밋하거나 되돌려야 합니다.
android.refactoring.migrateto.resourceview.header=마이그레이션할 리소스 참조
android.refactoring.migratetoappcompat=AppCompat으로 마이그레이션
android.refactoring.rtl.addsupport.dialog.apply.button.text=검색 창 하단에서 'RTL 리팩터링 실행' 버튼을 눌러 오른쪽에서 왼쪽 방향(RTL) 리팩터링을 수행합니다
android.refactoring.rtl.addsupport.dialog.label.text=이 리팩터링은 RTL 지원을 Android 앱에 추가합니다.\n\
\n\
다음 옵션을 확인하세요.\n\

android.refactoring.rtl.addsupport.dialog.ok.button.text=실행
android.refactoring.rtl.addsupport.dialog.option.label.layouts.options.generate.v17.txt=-v17 버전 생성
android.refactoring.rtl.addsupport.dialog.option.label.layouts.options.replace.leftright.txt=Left/Right 프로퍼티를 Start/End 속성으로 바꾸기
android.refactoring.rtl.addsupport.dialog.option.label.layouts.options.txt=레이아웃 옵션
android.refactoring.rtl.addsupport.dialog.option.label.update.layouts.text=레이아웃 파일 업데이트
android.refactoring.rtl.addsupport.dialog.option.label.update.manifest.text=AndroidManifest.xml 업데이트
android.refactoring.rtl.addsupport.title=오른쪽에서 왼쪽 방향(RTL) 지원 추가
android.run.configuration.all.in.module.radio=모듈 내 전체(&A)
android.run.configuration.all.in.package.radio=패키지 내 전체(&I)
android.run.configuration.class.label=클래스(&L)
android.run.configuration.class.radio=클래스(&S)
android.run.configuration.complication=컴플리케이션 데이터 소스
android.run.configuration.component.not.chosen={0} 이(가) 선택되지 않았습니다.
android.run.configuration.component.not.found={0}을(를) 찾을 수 없습니다
android.run.configuration.debug.surface.warn=주의: 선택된 Wear 장치는 응답에 너무 오랜 시간이 걸리는 경우 백그라운드 서비스를 종료합니다. 이는 디버깅에 영향을 줄 수 있습니다.  이를 방지하기 위해 장치의 Wear OS 컴패니언 앱을 최신 버전으로 업데이트하세요.
android.run.configuration.general.tab.title=일반
android.run.configuration.install.flags.label=플래그 설치:
android.run.configuration.loading=로드 중…
android.run.configuration.logcat.skip.content.label=실행 전 대상 로그 삭제(&C)
android.run.configuration.method.label=메서드(&T)
android.run.configuration.method.radio=메서드(&E)
android.run.configuration.misc.tab.title=기타
android.run.configuration.module.label=모듈:
android.run.configuration.module.not.chosen=모듈이 선택되지 않았습니다
android.run.configuration.not.supported=실행 구성 {0}은(는) 현재 프로젝트에서 지원되지 않습니다. APK 파일 위치를 가져올 수 없습니다.
android.run.configuration.not.supported.applicationid=실행 구성 {0}은(는) 현재 프로젝트에서 지원되지 않습니다. 애플리케이션 ID를 가져올 수 없습니다.
android.run.configuration.not.supported.package=실행 구성 {0}은(는) 현재 프로젝트에서 지원되지 않습니다. 패키지를 가져올 수 없습니다.
android.run.configuration.package.label=패키지(&K)
android.run.configuration.run={0} 실행
android.run.configuration.tile=타일
android.run.configuration.type.description=Android 실행/디버그 구성
android.run.configuration.type.name=Android 앱
android.run.configuration.watchface=Watch Face
android.run.configuration.wear.version.affects.debugging = 경고: API 수준 26 이하를 구동하는 Wear 기기는 백그라운드 서비스의 응답이 너무 오래 걸리는 경우 해당 서비스를 종료하므로, 디버그에 영향을 미칠 수 있습니다. 이를 방지하려면 API 수준 28 이상을 실행하는 기기를 사용하세요.
android.run.configuration.wear.while.project.is.synchronizing.warning=프로젝트가 동기화되는 중에는 구성을 편집할 수 없습니다
android.run.sdk.manager.action.text=SDK 관리자
android.safeargs.fix.import=가져오기
android.sdk.configure.jdk.error=내부 JDK를 구성하세요.
android.sdk.manager.installer.install.error=요청한 액션이 완료되지 않았습니다. 자세한 내용은 IDE 로그를 참조하세요.
android.sdk.manager.installer.install.finished=요청한 액션이 완료될 때까지 기다려 주세요.
android.sdk.manager.installer.panel.description=요청된 액션 완료
android.sdk.manager.installer.panel.title=SDK Component Installer
android.sdk.missing.msg=Android SDK가 누락되었거나 최신이 아니거나 손상되었습니다.
android.sdk.missing.title=SDK 문제
android.sdk.not.configured.notification=Android SDK가 모듈 ''{0}''에 맞춰 구성되지 않았거나 손상되었습니다
android.sdk.open.manager=SDK 매니저 열기
android.sdk.presentable.name=Android SDK
android.streaming.notification.title=동작 중인 기기 메시지
android.suggested.dependency.action.family.name=라이브러리 종속성 추가
android.suggested.dependency.action.name.prefix={0}의 종속성 추가
android.suggested.import.action.family.name=라이브러리 종속성을 추가하고 가져오기
android.suggested.import.action.name.prefix={0}의 종속성 추가하고 가져오기
android.suggested.imports.title=제안되는 가져오기
android.test.run.configuration.instrumentation.label=계측 클래스:
android.test.run.configuration.type.description=Android 계측 테스트 구성
android.test.run.configuration.type.name=Android 계측 테스트
android.tile.configuration.type.name=Wear OS 타일
android.update.project.properties.dialog.text=다음 Android 모듈의 구조가 변경되었습니다.<br>{0}<br>관련 project.properties 파일을 업데이트하시겠어요?<br><a href="once">한 번만</a><br><a href = "always">이러한 모듈에 대해 항상</a><br><a href="never">이러한 모듈에 대해 절대 금지</a>
android.update.project.properties.dialog.title=프로퍼티 파일 업데이트
android.usageGroup.properties.new.flag=추가될 프로퍼티 플래그: {0}
android.usageGroup.resource.references.from.package=리소스에 대한 참조가 {0}에 정의됨
android.usageType.gradle.build.script=Gradle 빌드 스크립트에서
android.usageType.gradle.properties.file=Gradle 프로퍼티 파일
android.usageType.manifest=Android 매니페스트에서
android.usageType.permission.reference.code=코드 내 권한 참조
android.usageType.resource.declaration.xml=Android 리소스 XML 내의 리소스 선언
android.usageType.resource.file=Android 리소스 파일
android.usageType.resource.reference.code=코드 내 리소스 참조
android.usageType.resource.reference.xml=리소스 참조 Android 리소스 XML
android.use.custom.r.java.source.dir=사용자 지정 리소스 디렉터리 사용(&M):
android.watchface.configuration.type.name=Wear OS Watch Face
android.wizard.action.new.component=새 {0} 생성
android.wizard.action.requires.aidlEnabled={0}(빌드 파일에서 buildFeatures.aidl을 true로 설정해야 합니다)
android.wizard.action.requires.androidx={0}(AndroidX 지원 필요)
android.wizard.action.requires.minsdk={0}(minSdk >= {1} 필요)
android.wizard.action.requires.new.agp={0}(Android Gradle 플러그인 {1} 이상 필요)
android.wizard.activity.add={0}에 액티비티 추가
android.wizard.activity.add.cpp.docslinktext=문서 확인
android.wizard.activity.invalid.androidx=선택된 액티비티 템플릿에는 androidx.* 종속성이 있는 프로젝트가 필요합니다.
android.wizard.activity.invalid.min.sdk=선택된 액티비티 템플릿의 SDK 수준은 {0} 이상이어야 합니다.
android.wizard.activity.invalid.needs.kotlin=선택된 액티비티 템플릿을 사용하려면 Kotlin이 필요합니다.
android.wizard.activity.not.found=선택된 액티비티 템플릿이 없습니다.
android.wizard.buildConfigurationLanguage.combo.tooltip=빌드 스크립트에 사용된 빌드 구성 언어
android.wizard.config.activity.title=액티비티 구성
android.wizard.config.component.title=구성 요소 구성
android.wizard.config.fragment.title=조각 구성
android.wizard.cppStandard.combo.tooltip=네이티브 모듈에 사용되는 C++ 표준
android.wizard.fragment.add={0}에 조각 추가
android.wizard.fragment.invalid.androidx=선택된 조각 템플릿에는 androidx.* 종속성이 있는 프로젝트가 필요합니다.
android.wizard.fragment.invalid.min.sdk=선택된 조각 템플릿의 SDK 수준은 {0} 이상이어야 합니다.
android.wizard.fragment.invalid.needs.kotlin=선택된 조각 템플릿을 사용하려면 Kotlin이 필요합니다.
android.wizard.fragment.not.found=선택된 조각 템플릿이 없습니다.
android.wizard.language.combo.empty=(언어 선택)
android.wizard.language.combo.header=소스 언어
android.wizard.language.combo.tooltip=코드 생성에 사용되는 프로그래밍 언어
android.wizard.module.config.new.base.missing=<기본 모듈을 찾을 수 없음>
android.wizard.module.config.title=모듈 구성
android.wizard.module.description=Android 모듈은 <b>Android</b> 운영체제에서 실행할 앱을 개발하는 데 사용됩니다.<br><b>Android</b> 모듈은 1개 이상의 <b>액티비티</b>로 구성되며<br><b>휴대폰 및 태블릿</b>, <b>Wear</b>, <b>Android Auto</b> 등 다양한 폼팩터를 지원할 수 있습니다.
android.wizard.module.enable.instant=인스턴트 앱 지원 활성화
android.wizard.module.help.baselineprofiles.target.module.description=베이스라인 프로파일을 생성할 애플리케이션을 선택하세요
android.wizard.module.help.baselineprofiles.usegmd.description=Gradle로 관리되는 장치는 에뮬레이터를 자동으로 생성, 시작 및 중단할 수 있습니다. 체크를 해제하면 제너레이터를 사용하기 전에 에뮬레이터나 장치를 수동으로 시작해야 할 수 있습니다.
android.wizard.module.help.benchmark.module.type=실행할 벤치마크 유형입니다. 자세한 내용은 https://d.android.com/benchmark를 참조하세요.\n\
\n\
Microbenchmarks - 최적화할 작은 코드 섹션에 대한 CPU 성능 및 할당을 측정합니다.\n\
\n\
Macrobenchmarks - 앱의 시작 및 스크롤 성능을 측정하고 검사합니다.
android.wizard.module.help.benchmark.target.module=벤치마크할 애플리케이션 선택
android.wizard.module.help.buildconfigurationlanguage.description=모듈을 빌드하기 위해 빌드 스크립트를 구성합니다
android.wizard.module.help.choose=선택 도움말
android.wizard.module.help.loading=로드 중
android.wizard.module.help.name=하위 폴더에 모듈을 배치하려면 다음과 같은 구문을 사용하세요. :subfolder:module_name(예: :libraries:lib1)
android.wizard.module.help.refreshing=통계 로드 중…
android.wizard.module.import.eclipse.title=Eclipse ADT 프로젝트 가져오기
android.wizard.module.import.gradle.description=기존 Gradle 프로젝트를 모듈로 가져오기
android.wizard.module.import.gradle.title=Gradle 프로젝트 가져오기
android.wizard.module.import.source.browse.bad.modules.1=하위 프로젝트 %1$s의 소스를 찾을 수 없습니다.\n\
이로 인해 종속성이 누락될 수 있습니다.
android.wizard.module.import.source.browse.bad.modules.2=하위 프로젝트 %1$s 및 %2$s의 소스를 찾을 수 없습니다.\n\
이로 인해 종속성이 누락될 수 있습니다.
android.wizard.module.import.source.browse.bad.modules.more=%1$s 및 %2$d개 하위 프로젝트의 소스를 찾을 수 없습니다.\n\
이로 인해 종속성이 누락될 수 있습니다.
android.wizard.module.import.source.browse.cant.import=Gradle 또는 Android Eclipse 프로젝트의 위치 지정
android.wizard.module.import.source.browse.description=새 하위 프로젝트로서 가져올 기존 ADT 또는 Gradle 프로젝트를 선택합니다.
android.wizard.module.import.source.browse.error=내부 오류가 발생했습니다. IDE 로그를 확인하세요.
android.wizard.module.import.source.browse.invalid.location=경로가 없습니다.
android.wizard.module.import.source.browse.taken.location=이 위치는 이미 가져왔습니다
android.wizard.module.import.source.browse.title=소스 위치 선택
android.wizard.module.import.source.title=소스에서 모듈 가져오기
android.wizard.module.new.automotive=Automotive
android.wizard.module.new.automotive.description=새 Android Automotive 모듈을 생성합니다.
android.wizard.module.new.baselineprofiles.module.app=베이스라인 프로파일
android.wizard.module.new.baselineprofiles.module.description=베이스라인 프로파일을 생성하기 위한 모듈을 생성합니다.
android.wizard.module.new.benchmark.module.app=벤치마크
android.wizard.module.new.benchmark.module.description=새 벤치마크 모듈을 생성합니다.
android.wizard.module.new.dynamic.download.options=모듈 다운로드 옵션
android.wizard.module.new.dynamic.module=동적 기능
android.wizard.module.new.dynamic.module.description=동적으로 전달될 수 있는 새 Android App Bundle 모듈을 생성합니다.
android.wizard.module.new.dynamic.module.instant=인스턴트 동적 기능
android.wizard.module.new.dynamic.module.instant.description=인스턴트 앱으로서 전달될 새 Android 모듈을 생성합니다.
android.wizard.module.new.dynamic.select.base=프로젝트 기본 모듈을 선택하세요
android.wizard.module.new.google.cloud=Google Cloud
android.wizard.module.new.java.or.kotlin.library=Java 또는 Kotlin 라이브러리
android.wizard.module.new.java.or.kotlin.library.description=새 Java 또는 Kotlin 라이브러리를 생성합니다.
android.wizard.module.new.library=Android 라이브러리
android.wizard.module.new.library.description=새 Android 라이브러리를 생성합니다.
android.wizard.module.new.mobile=전화 및 태블릿
android.wizard.module.new.mobile.description=새 Android 휴대폰 및 태블릿 모듈을 생성합니다.
android.wizard.module.new.module.header=모듈 타입 선택
android.wizard.module.new.module.menu=새 모듈…
android.wizard.module.new.module.menu.description=프로젝트에 새 모듈을 추가합니다.
android.wizard.module.new.module.title=새 모듈 생성
android.wizard.module.new.native.library=Android 네이티브 라이브러리
android.wizard.module.new.native.library.description=새 Android 네이티브 라이브러리를 생성합니다.
android.wizard.module.new.tv=텔레비전
android.wizard.module.new.tv.description=새 Android TV 모듈을 생성합니다.
android.wizard.module.new.wear=Wear OS
android.wizard.module.new.wear.description=새 Wear OS 모듈을 생성합니다.
android.wizard.module.package.too.long=패키지 이름이 너무 깁니다.
android.wizard.module.presentable.name=Android
android.wizard.module.will.not.use.version.catalog=새 모듈이 버전 카탈로그 정보를 사용하지 않습니다
android.wizard.new.activity.title=새 Android 액티비티
android.wizard.new.component.title=새 Android 구성 요소
android.wizard.new.fragment.title=새 Android 조각
android.wizard.project.create.error=새 프로젝트 마법사에서 오류가 발생했습니다.
android.wizard.project.help.buildconfigurationlanguage.description=모듈을 빌드하는 빌드 스크립트와 Gradle 버전 카탈로그를 사용하여 구성할지를 결정합니다
android.wizard.project.loading.sdks=다운로드 가능한 SDK 검색 중…
android.wizard.project.loading.stats.fail=통계를 로드하지 못했습니다. 최신 값이 아닐 수 있습니다.
android.wizard.project.new.choose=프로젝트 템플릿 선택
android.wizard.project.new.configure=프로젝트 구성
android.wizard.target.source.set.header=대상 소스 세트
android.wizard.validate.empty.application.name=애플리케이션 이름(런처에 표시됨) 또는 라이브러리를 설명하는 이름을 입력하세요.
android.wizard.validate.empty.module.name=올바른 모듈 이름을 입력하세요.
android.wizard.validate.invalid.class.name=올바른 클래스 이름을 입력하세요.
android.wizard.validate.lowercase.application.name=대부분 앱의 애플리케이션 이름은 대문자로 시작합니다
android.wizard.validate.module.already.exists=모듈 "{0}"이(가) 이미 있습니다.
android.wizard.validate.module.illegal.character=모듈 이름 ''{1}''에 올바르지 않은 문자 ''{0}''이(가) 있습니다.
android.wizard.validate.module.needs.androidx=프로젝트를 androidx.* 종속성으로 변환해야 합니다.
android.wizard.validate.module.needs.new.agp=Compose를 사용하려면 Android Gradle 플러그인 {0} 이후 버전이 필요합니다
android.wizard.validate.module.needs.new.agp.baseline.profiles=베이스라인 프로파일을 사용하려면 Android Gradle 플러그인 {0} 이후 버전이 필요합니다
android.wizard.validate.module.needs.new.agp.kts=Kts를 사용하려면 Android Gradle 플러그인 {0} 이후 버전이 필요합니다
android.wizard.validate.module.needs.new.agp.macro.benchmark=Macrobenchmark를 사용하려면 Android Gradle 플러그인 {0} 이후 버전이 필요합니다
android.wizard.validate.project.illegal.character=프로젝트 이름 ''{1}''에 올바르지 않은 문자 ''{0}''이(가) 있습니다.
android.wizard.validate.select.compose.sdk=Compose를 위해서는 Android SDK 31 이상이 설치되어 있어야 합니다.
android.wizard.validate.select.language=언어를 선택하세요.
android.xml.code.style.notification=XML 리소스의 서식을 '표준' Android 방식으로 지정할 수 있습니다. XML 코드 스타일 설정에서 '다음에서 설정... | Android'를 선택하세요.
androidx.migrate.dialog.cancel=취소
androidx.migrate.dialog.checkbox.backup.project.zip=프로젝트를 Zip 파일로 백업
androidx.migrate.dialog.migrate=마이그레이션
androidx.migrate.dialog.warning.before.migration=\n\
진행하기 전에 프로젝트를 백업하는 것을 권장합니다.\n\
\n\
프로젝트의 종속 요소에 따라 프로젝트를 성공적으로 컴파일하려면 리팩터링 후에 수동으로 일부 오류를 수정해야 할 수 있습니다.\n\
\n\
마이그레이션을 진행할까요?\n\

assert.level.title=어설션
avd.manager.arm.images=ARM 이미지
avd.manager.x86.images=x86 이미지
cannot.find.testcase.error=junit.framework.TestCase 클래스를 찾을 수 없습니다.
cannot.parse.sdk.error=Android SDK를 분석할 수 없습니다.
cannot.resolve.color.literal.error=색 ''{0}''을(를) 해결할 수 없습니다
cannot.resolve.flag.error=플래그를 해결할 수 없습니다.
cannot.resolve.float.literal.error=float ''{0}''을(를) 해결할 수 없습니다
cannot.resolve.format.error=형식을 해결할 수 없습니다.
cant.find.activity.class.error=android.app.Activity 클래스를 찾을 수 없습니다
cant.find.class.error={0} 클래스를 찾을 수 없습니다.
check.resource.dir.error=모듈 {0}에 대한 리소스 디렉터리를 찾을 수 없습니다.
checkbox.disable.sdk.diff.patching=SDK diff 패치 비활성화
checkbox.force.https.sources=https://... 소스를 http://...를 사용하여 가져오도록 강제
checkbox.group.tags.with.the.same.name=같은 이름의 태그를 그룹화
checkbox.hide.obsolete.packages=곧 사용할 수 없게 될 패키지 숨기기
checkbox.include.namespace.declarations=네임스페이스 선언 포함
checkbox.insert.blank.line.before.tag=태그 전에 빈 행 삽입
checkbox.insert.line.break.after.last.attribute=마지막 속성 뒤에 줄 바꿈 삽입
checkbox.insert.line.break.before.first.attribute=첫 속성 전에 줄 바꿈 삽입
checkbox.insert.line.breaks.around.style.declaration=스타일 선언 주위에서 줄 바꿈
checkbox.show.package.details=패키지 세부 정보 표시
checkbox.use.custom.formatting.settings.for.android.xml.files=Android XML 파일에 사용자 지정 서식 설정 사용
checkbox.use.same.device.for.future.launches=향후 시작 시 동일한 기기 사용
choose.device.dialog.title=배포 타깃 선택
compose.feature.in.non-canary.message=<html>Jetpack Compose는 테스트 버전 기능으로 Compose 지원은 Android Studio Canary 버전에만 포함되어 있습니다. 앱 프로젝트에서 Compose를 사용하려면, 최신 IDE의 <a href="https://developer.android.com/studio/preview">Canary 버전</a>을 다운로드하고 설치하세요.</html>
compose.feature.in.non-canary.title=Jetpack Compose 기능이 지원되지 않음
configurable.AndroidFacetEditorTab.display.name=Android SDK 설정
configurable.AndroidProjectStructureConfigurableForIdea.display.name=Android 프로젝트 구조
configurable.AndroidProjectStructureConfigurableForIdea.redirect.text=<a>Android 프로젝트 구조</a> 구성 페이지를 사용하세요.
configurable.AndroidTestingConfigurable.displayName=테스트
configurable.DeploymentConfigurable.display.name=배포
configurable.ExperimentalSettingsConfigurable.cancel=취소
configurable.ExperimentalSettingsConfigurable.checkbox.configure.tasks.during.sync=Gradle 동기화 시 모든 Gradle 작업 구성(Gradle 동기화가 느려질 수 있습니다)(&C)
configurable.ExperimentalSettingsConfigurable.checkbox.jetpack.compose=Jetpack Compose
configurable.ExperimentalSettingsConfigurable.checkbox.new.dependency.mechanism.sync=Gradle 동기화 시 새로운 종속성 메커니즘 사용(&U)
configurable.ExperimentalSettingsConfigurable.checkbox.preview.picker=@Preview 선택기 활성화(&E)
configurable.ExperimentalSettingsConfigurable.checkbox.trace.import.with.profile=Gradle 임포트를 프로파일로 추적(&T):
configurable.ExperimentalSettingsConfigurable.combobox.trace.default=디폴트 프로파일
configurable.ExperimentalSettingsConfigurable.combobox.trace.specified=지정된 위치
configurable.ExperimentalSettingsConfigurable.description.preview.picker=에디터 여백에서 @Preview 어노테이션 편집 도구 팝업
configurable.ExperimentalSettingsConfigurable.dialog.title.trace=프로파일 추적
configurable.ExperimentalSettingsConfigurable.dialog.trace.restart.required=추적과 관련된 변경 사항을 적용하려면 {0}을(를) 재시작해야 합니다.\n\
\n\
계속할까요?
configurable.ExperimentalSettingsConfigurable.display.name.plugin=Android(실험)
configurable.ExperimentalSettingsConfigurable.display.name.studio=실험적
configurable.ExperimentalSettingsConfigurable.error.invalid.profile.location=유효하지 않은 프로파일 위치
configurable.ExperimentalSettingsConfigurable.exit=종료
configurable.ExperimentalSettingsConfigurable.label.select.trace.profile=추적 프로파일을 선택하세요
configurable.ExperimentalSettingsConfigurable.note=<html><b>주의:</b> <b>실험적</b>인 기능의 설정입니다.</html>
configurable.ExperimentalSettingsConfigurable.optimize.build.for.target.device.api.level.only=대상 기기의 API 수준으로만 빌드를 최적화(&O)
configurable.ExperimentalSettingsConfigurable.restart=다시 시작
configurable.ExperimentalSettingsConfigurable.slider.quality.setting=품질 설정
configurable.ExperimentalSettingsConfigurable.slider.quality.setting.fastest=가장 빠르게
configurable.ExperimentalSettingsConfigurable.slider.quality.setting.slowest=가장 느리게
configurable.ExperimentalSettingsConfigurable.title.gradle=Gradle
configurable.ExperimentalSettingsConfigurable.title.layout.editor=레이아웃 에디터
configurable.GradleFacetEditorTab.display.name=Android Gradle 모듈 설정
configurable.IdeSdksConfigurable.display.name=SDK 위치
configurable.MemorySettingsConfigurable.display.name=메모리 설정
configurable.ProfilingConfigurable.display.name=CPU 녹화 구성
configurable.SdkUpdaterConfigurable.display.name=Android SDK
configurable.group.android.settings.display.name=Android
configurable.group.build.android.settings.description=<html><body>Android 빌드 도구로 프로젝트 통합 기능을 구성하세요.
configurable.group.tools.android.settings.description=<html><body>Android 도구 설정을 구성하세요.
connection.assistant.adb.devices=Android 기기가 1개 이상 탐지되었습니다.
connection.assistant.adb.failure=ADB를 찾을 수 없습니다.
connection.assistant.adb.no_devices.body=
connection.assistant.adb.no_devices.title=Android 기기가 탐지되지 않음
connection.assistant.adb.unexpected=예기치 않은 오류가 발생했습니다. 버그를 보고해주세요.
connection.assistant.loading=로드 중…
connection.assistant.usb.no_devices.body=
connection.assistant.usb.no_devices.title=USB 기기가 탐지되지 않음
copy.resources.from.artifacts.setting=Make 전에 "process-resources" Maven 작업 실행(&U)
create.file.resource.intention.name={0} 리소스 파일 ''{1}'' 생성
create.file.resource.quickfix.name=''{1}''에서 리소스 파일 ''{0}'' 생성
create.on.click.handler.intention.text=onClick 이벤트 핸들러 생성
create.value.resource.intention.name={0} 값 리소스 ''{1}'' 생성
create.value.resource.quickfix.name=''{1}''에서 값 리소스 ''{0}'' 생성
ddms.corrupted.error=경고: 디버그 정보는 이용 가능해야 합니다. ADB를 사용하는 다른 애플리케이션(Monitor, DDMS, Eclipse)을 닫으세요.
debug.level.title=디버그
default.activity.not.found.error=디폴트 액티비티를 찾을 수 없습니다.
deployment.configurable.checkbox.apply.changes.fail=변경 사항 적용에 실패하면 자동으로 "실행" 수행(&A)
deployment.configurable.checkbox.apply.code.changes.fail=코드 변경 사항 적용에 실패하면 자동으로 "실행" 수행(&P)
deployment.configurable.text.automatic.rerun.condition=<html>이러한 옵션을 활성화하면 변경 사항 적용을 사용할 때 호환되지 않는 변경 사항이 있을 때만 자동으로 앱을 재실행합니다.<br/>일부 경우 변경 사항 적용 혹은 코드 변경 사항 적용에 성공할 때 변경 사항을 확인하려면 수동으로 재시작해야 할 수 있습니다.<br/>예를 들어 활동의 onCreate() 메서드에 적용한 변경사항을 보려고 할 때가 해당합니다.</html>
deployment.failed.no.certificates.explanation=APK가 서명되지 않았거나 올바르지 않게 서명되어 설치가 실패했습니다.\n\
Gradle 기반 프로젝트인 경우 서명 구성이 Gradle 빌드 스크립트에 지정되어 있는지 확인하세요.
deployment.failed.reason.devicedisconnected=기기 "{0}"이(가) 연결되어 있지 않아 설치가 실패했습니다.
deployment.failed.reason.dexopt=기기에 현재 버전과 일치하지 않는 오래된 dex jar가 있을 수 있습니다(dexopt 오류).
deployment.failed.reason.different.signature=서명이 다르지만 동일한 패키지를 가진 애플리케이션이 기기에 이미 있습니다.
deployment.failed.reason.oldersdk=앱의 minSdkVersion이 기기의 API 수준({0})보다 최신이어서 설치가 실패했습니다.\n\
앱의 minSdkVersion을 업데이트하세요.
deployment.failed.reason.version.downgrade=기기에 이 애플리케이션의 최신 버전이 이미 있습니다
deployment.failed.splitapk.nomatch=현재 선택한 종류인 "{0}"은(는) 분할된 APK를 사용하지만 {1}개의 분할된 apk 중 어느 것도 현재의 ABI "{2}" 지원 기기와 호환되지 않습니다.
deployment.failed.title=애플리케이션 설치 실패
deployment.failed.uninstall.prompt.androidthings.errortext=다음 패키지를 설치 제거하지 못했습니다.\n\
{0}
deployment.failed.uninstall.prompt.androidthings.text=apk 및 기타 설치된 패키지에 인텐트 IOT_LAUNCHER가 있습니다. 이 인텐트를 가진 apk는 한 번에 하나만 설치할 수 있습니다. 해당 패키지를 설치 제거한 후 apk를 설치해보세요.\n\
\n\
경고: 설치 제거 시 애플리케이션 데이터가 삭제됩니다!\n\
\n\
다음 애플리케이션을 설치 제거하시겠어요?\n\
{0}
deployment.failed.uninstall.prompt.generic.text=메시지 {0}와(과) 함께 설치가 실패했습니다.\n\
이 문제를 해결하려면 기존 apk 버전이 있는 경우 이 버전을 설치 제거한 다음, 재설치해야 합니다.\n\
\n\
경고: 설치 제거 시 애플리케이션 데이터가 삭제됩니다!\n\
\n\
기존 애플리케이션을 설치 제거하시겠어요?
deployment.failed.uninstall.prompt.text={0}부터 설치가 실패했습니다.\n\
계속 진행하려면 기존 애플리케이션을 설치 제거해야 합니다.\n\
\n\
경고: 설치 제거 시 애플리케이션 데이터가 삭제됩니다!\n\
\n\
기존 애플리케이션을 설치 제거하시겠어요?
deployment.target.not.found=타깃 기기를 찾을 수 없습니다.
directory.not.specified.error=디렉터리가 지정되지 않았습니다.
do.not.ask.for.this.session=이 세션에서는 다시 묻지 않기
element.cannot.resolve=클래스 {0}을(를) 해결할 수 없습니다
error.file.download.failed=''{0}'' 다운로드에 실패했습니다.\n\
{1}
error.level.title=오류
error.report.at.b.android=<html>의견 제출 오류: {0}<br><a href="https://code.google.com/p/android/issues/list">Android 이슈 트래커</a>에서 문제를 생성해 보세요.</html>
error.report.to.google.action=Google에 보고(&R)
exportable.AndroidFoldingSettings.presentable.name=Android 코드 접기
extract.dimension.intention.text=크기 리소스 추출
feedback.notifications.title=의견을 보내주셔서 감사합니다.
file.must.be.under.module.error={0}에 대한 상대 경로를 계산할 수 없습니다.
file.name.not.specified.error=파일 이름이 지정되지 않았습니다.
group.Android.CreateResourcesActionGroup.text=Android 리소스 파일
group.Android.InstantRunActions.text=즉시 실행
group.Android.MainToolbarRight.text=Android 메인 툴바 오른쪽
group.AndroidToolsGroup.text=Android
group.Internal.Android.text=Android
group.layout.files.title=레이아웃 파일
group.other.xml.resource.files.title=다른 XML 리소스 파일
group.value.resource.files.selectors.title=값 리소스 파일 및 선택자
heap.dump.analysis.exception=힙 덤프를 분석하는 동안 오류가 발생했습니다. 자세한 내용은 idea.log를 참조하세요.
heap.dump.analysis.notification.action.title=보고서 검토
heap.dump.analysis.notification.ready.content=분석이 완료되었습니다.
heap.dump.analysis.notification.submit.error.content=보고서를 제출하는 동안 오류가 발생했습니다. 자세한 내용은 idea.log를 참조하세요.
heap.dump.analysis.notification.submitted.content=보고서를 제출해주셔서 감사합니다.
heap.dump.analysis.notification.title=메모리 사용 보고서
heap.dump.analysis.report.dialog.action.dont.send=보내지 않음
heap.dump.analysis.report.dialog.action.send=보내기
heap.dump.analysis.report.dialog.footer=이 보고서를 제출하면 Google이 <a href="http://www.google.com/policies/privacy/">당사 개인정보보호정책</a>에 따라 해당 데이터를 수집하고 처리하도록 허용하게 됩니다.
heap.dump.analysis.report.dialog.header=<html>{0}이(가) 비정상적으로 높은 메모리 사용을 탐지했습니다.<br>다음 메모리 사용 보고서를 Google로 전송하면 팀이 문제의 원인을 조사하는 데 도움이 됩니다.
heap.dump.analysis.report.dialog.title=메모리 사용 보고서
heap.dump.analysis.task.title=메모리 보고서 준비
heap.dump.snapshot.already.pending=메모리 보고서가 이미 보류 중입니다. {0}을(를) 다시 시작하여 분석을 시작하세요.
heap.dump.snapshot.created=힙 덤프가 {0}에 생성되었습니다. 이 힙 덤프는 다음에 {1}을(를) 시작할 때 분석됩니다.
heap.dump.snapshot.created.no.analysis=힙 덤프가 {0}에 생성되었습니다.
heap.dump.snapshot.error.check.log=힙 덤프를 생성하는 동안 오류가 발생했습니다. 자세한 내용은 idea.log를 확인하세요.
heap.dump.snapshot.exception=힙 덤프를 생성하는 동안 오류가 발생했습니다. 자세한 내용은 idea.log를 참조하세요.
heap.dump.snapshot.indicator.low.memory.text=메모리 부족이 탐지되었습니다. {0} 힙 덤프 캡처
heap.dump.snapshot.indicator.text={0} 힙 덤프 캡처
heap.dump.snapshot.no.space={0}에 힙 덤프를 만들 공간이 부족합니다. 힙 덤프에 필요한 예상 크기는 {1}MB이지만 가용 공간이 {2}MB뿐입니다.
heap.dump.snapshot.restart.dialog.message=힙 덤프 분석을 하려면 {0}을(를) 다시 시작해야 합니다. 지금 다시 시작하시겠어요?
heap.dump.snapshot.restart.dialog.restart.later=나중에 다시 시작
heap.dump.snapshot.restart.dialog.restart.now=지금 다시 시작
heap.dump.snapshot.restart.dialog.title=다시 시작 확인
heap.dump.snapshot.task.title=힙 덤프 캡처
heap.dump.snapshot.title=힙 덤프 캡처
implement.parcelable.intention.text=Parcelable 구현 추가
info.level.title=정보
label.android.sdk.location=Android SDK 위치:
label.below.are.the.available.sdk=<html>사용 가능한 SDK 개발자 도구는 아래와 같습니다. IDE는 설치된 후 자동으로 업데이트를 확인합니다. 사용 가능한 SDK 도구 버전을 표시하려면 '패키지 세부 정보 표시'를 선택하세요.</html>
label.download.location=다운로드 위치
label.each.android.sdk.platform.package=<html>각 Android SDK 플랫폼 패키지에는 API 수준과 관련된 Android 플랫폼 및 소스가 기본적으로 포함되어 있습니다. IDE는 설치된 후 자동으로 업데이트를 확인합니다. 개별 SDK 구성 요소를 표시하려면 '패키지 세부 정보 표시'를 선택하세요.</html>
label.loading.sources=소스 로드 중...
label.looking.for.updates=업데이트 검색 중…
label.manager.for.the.android.sdk=IDE에서 사용되는 Android SDK 및 도구용 관리자
label.sdk.location.must.be.set=SDK 위치를 설정해야 합니다.
label.these.are.the.sites=<html>Android SDK 업데이트 및 도구를 확인하기 위해 선택된 사이트입니다. 선택 해제하면 SDK 관리자가 사이트에서 업데이트를 확인하지 않습니다. 부가 기능 업데이트용 사이트를 추가하면 새로운 부가 기능 또는 추가 SDK 패키지를 추가할 수 있습니다.</html>
live.edit=Live Edit
live.edit.action.disable.title=Live Edit 비활성화
live.edit.action.enable.title=Live Edit 활성화
live.edit.advanced.settings.configurable.display.name=Live Edit 고급 구성
live.edit.configurable.action.name=설정 구성
live.edit.configurable.display.name=Live Edit
live.edit.configurable.display.name.comment=컴포저블 함수의 코드 변경 사항을 에뮬레이터나 물리적 장치에서 실행되고 있는 Android 앱에 즉시 적용하는 기능입니다. 장치/에뮬레이터의 설정을 변경하면 애플리케이션을 재실행해야 합니다. <a href="https://developer.android.com/studio/run#live-edit">자세히 알아보기</a>.
live.edit.configurable.enable.debug.mode=디버그 모드 활성화
live.edit.configurable.enable.debug.mode.comment=Live Edit 인터프리터 추적을 활성화하고 Houdini 예외 정리를 비활성화합니다
live.edit.configurable.enable.embedded.compiler=내장된 컴파일러 사용
live.edit.configurable.enable.embedded.compiler.comment=내장된 Jetpack Compose 컴파일러를 사용합니다. 비활성화된 경우 @Composable을 Live Edit으로 컴파일할 수 없습니다.
live.edit.configurable.enable.inline.analysis=소스 인라인 분석 활성화
live.edit.configurable.enable.inline.analysis.comment=다른 소스 파일의 인라인 함수를 참조하는 소스 파일에서 Live Edit을 활성화합니다.
live.edit.configurable.enable.partial.recompose=부분 재구성 활성화
live.edit.configurable.enable.partial.recompose.comment=@Composable 함수의 Live Edit 부분 재구성을 활성화합니다
live.edit.configurable.refresh.rate=새로고침 빈도(밀리초)
live.edit.configurable.refresh.rate.comment=GUI 코드의 변경을 탐지하는 간격을 조정합니다
live.edit.disable.all=없음
live.edit.disable.all.description=두 기능을 모두 끕니다.
live.edit.mode.automatic=수정 사항을 자동으로 푸시
live.edit.mode.manual=수정 사항을 수동으로 푸시({0})
live.edit.tooltip.description=<html>코드 내 Composable의 변경 사항을 연결된 에뮬레이터나 물리적 기기에 즉시 적용합니다.
live.edit.tooltip.url.label=Live Edit 문서
live.literals=Compose 리터럴의 Live Edit
live.literals.action.disable.title=리터럴의 Live Edit 비활성화
live.literals.action.enable.title=리터럴의 Live Edit 활성화
live.literals.action.show.problems.title=문제 표시…
live.literals.breadcrumbs.highlights=리터럴 데코레이션
live.literals.configurable.display.name=Compose 리터럴의 Live Edit
live.literals.configurable.select.live.literals=(사용 중단됨) 리터럴의 Live Edit
live.literals.configurable.select.live.literals.comment=Composable에서 사용된 리터럴을 에뮬레이터나 물리적 기기에서 실시간으로 업데이트합니다. 이 기능이 제대로 동작하려면 리터럴의 Live Edit을 활성화한 후 빌드해야 합니다.<a href="https://developer.android.com/jetpack/compose/tooling#live-edit-literals">자세히 알아보기</a>.
live.literals.customize.appearance.title=리터럴 데코레이션 사용자화…
live.literals.highlight.toggle.description=에디터에서 리터럴 데코레이션 전환
live.literals.highlight.toggle.hide.title=리터럴 데코레이션 비활성화
live.literals.highlight.toggle.show.title=리터럴 데코레이션 활성화
live.literals.highlight.toggle.title=리터럴 데코레이션 전환
live.literals.is.disabled=리터럴의 Live Edit: 끔
live.literals.is.enabled=리터럴의 Live Edit: 켬
live.literals.problems.dialog.title=문제
live.literals.tooltip.description=<html>코드 내의 특정 리터럴이 변경되는 경우 즉시 에뮬레이터에 반영됩니다.<br/>이 아이콘을 사용하면 이 기능을 활성화/비활성화하거나, 에디터 마커를 켜거나, 리터럴의 Live Edit 상태를 볼 수 있습니다.
live.literals.tooltip.url.label=리터럴의 Live Edit 문서
low.memory.notification.content=IDE가 메모리 부족 상태에서 실행되어 성능에 영향을 줄 수 있습니다. 힙 크기를 늘려 보세요.
low.memory.notification.title=Low memory
memory.settings.has.user.properties=<i>{0}</i>에 지정된 사용자 Gradle 속성은 프로젝트와 공유되며 프로젝트 수준 속성보다 우선합니다. 데몬의 프로젝트 수준 최대 힙 크기를 지정하려면 사용자 수준 속성에서 <i>org.gradle.jvmargs</i> 설정을 제거하고 이 패널을 다시 여세요.
memory.settings.ide.bottom.message=이는 {0}을(를) 사용하여 여는 모든 프로젝트에 적용되는 전역 설정입니다. 힙 크기 변경을 적용하려면 IDE를 다시 시작해야 합니다.
memory.settings.panel.daemon.info=이 설정은 현재 프로젝트에만 적용되며 변경 내용은 프로젝트를 다시 빌드한 후에만 적용됩니다(메뉴 표시줄에서 빌드 > 프로젝트 다시 빌드 선택). 힙 크기를 변경하고 프로젝트를 다시 빌드한 후 이전 설정을 가진 데몬을 찾아 수동으로 중지할 수도 있습니다.
memory.settings.panel.ide.info=가용 메모리와 현재 프로젝트를 기반으로 {0}의 IDE 힙 크기가 권장됩니다.
memory.settings.panel.show.daemons.info=기존 Gradle 데몬 찾기
memory.settings.panel.top.message=OS에서 core IDE 또는 Gradle 데몬 등의 {0} 프로세스에 할당할 최대 RAM 크기를 구성하세요. 너무 적은 메모리를 할당할 때도 그렇지만 너무 많은 메모리를 할당하면 성능이 저하될 수 있습니다.
memory.settings.panel.use.recommended.values=권장 값 사용
memory.settings.postsync.configure=구성…
memory.settings.postsync.do.not.ask.for.project=이 프로젝트에 대해 다시 묻지 않음
memory.settings.postsync.do.not.show.again=다시 표시 안 함
memory.settings.postsync.message=최대 힙 크기를 {0}MB에서 {1}MB로 늘리면 가용 메모리와 프로젝트 크기에 따라 IDE의 성능이 향상될 수 있습니다.
memory.settings.postsync.save=권장 값 사용 및 다시 시작
memory.settings.postsync.title={0}의 성능 향상 가능
memory.settings.restart.needed=메모리 설정이 저장되었습니다. 새 설정을 적용하려면 IDE를 다시 시작해야 합니다. 지금 다시 시작하시겠어요?
new.file.dialog.text=새 파일 이름 입력
new.resource.action.description=새 리소스 파일을 생성합니다
new.resource.action.name=리소스 파일 "{0}" 생성 중
new.resource.action.title=Android 리소스 파일
new.resource.command.name=새 리소스 파일
new.resource.dialog.title=새 리소스 파일
new.resource.dir.action.name=리소스 디렉터리 "{0}" 생성 중
new.resource.dir.action.title=Android 리소스 디렉터리
new.resource.dir.command.name=새 리소스 디렉터리
new.resource.dir.dialog.title=새 리소스 디렉터리
new.sampledata.dir.action.description=새 샘플 데이터 디렉터리를 생성합니다.
new.sampledata.dir.action.title=샘플 데이터 디렉터리
new.typed.resource.action.description=새 {0} 리소스 파일을 생성합니다.
new.typed.resource.action.title={0} 리소스 파일
new.typed.resource.command.name=새 {0} 리소스 파일
new.typed.resource.dialog.title=새 {0} 리소스 파일
no.android.targets.error=이 SDK에서 Android 타깃을 찾을 수 없습니다.
no.facet.error={0}에 대한 Android 패싯을 찾을 수 없습니다
no.jdk.for.android.found.error=적절한 버전의 Java SDK를 찾을 수 없습니다. Android SDK와 더불어 동일한 JDK 1.5, 1.6 또는 1.7을 정의해야 합니다.
no.provider.type.error=컴플리케이션 데이터 소스에 메니페스트에서 지원되는 타입 선언이 없습니다.
not.activity.subclass.error={0}은(는) 액티비티 하위 클래스 또는 별칭이 아닙니다.
not.resource.file.error=파일 ''{0}''은(는) 리소스 파일이 아닙니다.
not.valid.activity.name.error="{0}"은(는) 올바른 액티비티 이름이 아닙니다.
not.valid.package.name.error="{0}"은(는) 올바른 패키지 이름이 아닙니다.
package.name.must.contain.2.ids.error=패키지 이름에는 2개의 세그먼트가 있어야 합니다(예: com.example).
package.not.found.error=패키지가 매니페스트 파일에 지정되어 있지 않습니다.
progress.connecting.to.download.file.text=''{0}'' 연결 중...
progress.download.file.text=''{1}''에서 ''{0}'' 다운로드 중...
progress.downloading.0.files.text={0} {0,choice,1#파일|2#파일} 다운로드 중...
project.sync.warning.multiple.gradle.daemons.message=<html>Gradle JDK와 JAVA_HOME 위치가 다르기 때문에 다수의 Gradle 데몬이 생성되었습니다.<br>''{0}'' 프로젝트는 Gradle을 구동하면서 다음의 JDK 위치를 사용하고 있습니다.<br>''{1}''<br>JAVA_HOME 시스템 환경 변수는 다음과 같습니다.<br>''{2}''<br>다른 경로를 사용할 필요가 없는 경우(혹은 JAVA_HOME이 정의되지 않은 경우) JAVA_HOME과 JDK를 같은 경로로 설정하면 다수의 데몬이 생성되는 것을 막을 수 있습니다.
project.sync.warning.multiple.gradle.daemons.url=https://docs.gradle.org/current/userguide/gradle_daemon.html#sec:why_is_there_more_than_one_daemon_process_on_my_machine
project.upgrade.addBuildTypeFirebaseCrashlyticsUsageInfo.tooltipText=릴리스 buildType에 대해 네이티브 심볼 업로드 활성화
project.upgrade.addFirebaseCrashlyticsClasspathDependencyUsageInfo.tooltipText=Firebase Crashlytics Gradle 플러그인에 종속성 추가
project.upgrade.addFirebaseCrashlyticsNdkUsageInfo.tooltipText=Firebase Crashlytics NDK 종속성 추가
project.upgrade.addFirebaseCrashlyticsSdkUsageInfo.tooltipText=Firebase Crashlytics SDK에 종속성 추가
project.upgrade.addGoogleAnalyticsSdkUsageInfo.tooltipText=Google Analytics SDK에 종속성 추가
project.upgrade.addGoogleMavenRepositoryUsageInfo.tooltipText=Google Maven 저장소 추가
project.upgrade.addGoogleServicesClasspathDependencyUsageInfo.tooltipText=Google Services Gradle 플러그인에 종속성 추가
project.upgrade.agpUpgradeRefactoringProcessor.commandName=AGP 버전을 {0}에서 {1}(으)로 업그레이드
project.upgrade.agpUpgradeRefactoringProcessor.usageView.header=AGP 업그레이드 지원
project.upgrade.agpVersionRefactoringProcessor.commandName=AGP 종속성을 {0}에서 {1}(으)로 업그레이드
project.upgrade.agpVersionRefactoringProcessor.target.presentableText=AGP 구성 업그레이드 중
project.upgrade.agpVersionRefactoringProcessor.usageType=버전 문자열 업데이트
project.upgrade.agpVersionRefactoringProcessor.usageView.header=AGP 버전을 {0}에서 {1}(으)로 업그레이드
project.upgrade.agpVersionUsageInfo.tooltipText=AGP 버전을 {0}에서 {1}(으)로 업데이트
project.upgrade.aidlBuildFeature.enable.tooltipText=이 모듈 내에서 aidl 활성화
project.upgrade.aidlDefaultRefactoringProcessor.commandName=필요한 곳에서 aidl을 명시적으로 활성화
project.upgrade.aidlDefaultRefactoringProcessor.enable.usageType=aidl 지시문 삽입
project.upgrade.aidlDefaultRefactoringProcessor.usageView.header=aidl 빌드 기능을 명시적으로 활성화
project.upgrade.androidManifestExtractNativeLibsToUseLegacyPackagingRefactoringProcessor.addUseLegacyPackaging.tooltipText=useLegacyPackaging 선언 추가
project.upgrade.androidManifestExtractNativeLibsToUseLegacyPackagingRefactoringProcessor.addUseLegacyPackaging.usageType=useLegacyPackaging 선언 사용
project.upgrade.androidManifestExtractNativeLibsToUseLegacyPackagingRefactoringProcessor.commandName=Android 매니페스트에서 빌드 파일로 extractNativeLibs를 이동
project.upgrade.androidManifestExtractNativeLibsToUseLegacyPackagingRefactoringProcessor.removeExtractNativeLibs.tooltipText=extractNativeLibs 선언 제거
project.upgrade.androidManifestExtractNativeLibsToUseLegacyPackagingRefactoringProcessor.removeExtractNativeLibs.usageType=extractNativeLibs 선언 제거
project.upgrade.androidManifestExtractNativeLibsToUseLegacyPackagingRefactoringProcessor.usageView.header=Android 매니페스트에서 빌드 파일로 extractNativeLibs를 이동
project.upgrade.androidManifestPackageToNamespaceRefactoringProcessor.addNamespace.tooltipText=네임스페이스 선언 추가
project.upgrade.androidManifestPackageToNamespaceRefactoringProcessor.addNamespace.usageType=네임스페이스 선언 추가
project.upgrade.androidManifestPackageToNamespaceRefactoringProcessor.addTestNamespace.tooltipText=testNamespace 선언 추가
project.upgrade.androidManifestPackageToNamespaceRefactoringProcessor.addTestNamespace.usageType=testNamespace 선언 추가
project.upgrade.androidManifestPackageToNamespaceRefactoringProcessor.commandName=Android 매니페스트에서 빌드 파일로 패키지 이동
project.upgrade.androidManifestPackageToNamespaceRefactoringProcessor.removePackage.tooltipText=패키지 선언 제거
project.upgrade.androidManifestPackageToNamespaceRefactoringProcessor.removePackage.usageType=패키지 선언 제거
project.upgrade.androidManifestPackageToNamespaceRefactoringProcessor.usageView.header=Android 매니페스트에서 빌드 파일로 패키지 이동
project.upgrade.androidManifestUseEmbeddedDexToUseLegacyPackagingRefactoringProcessor.addUseLegacyPackaging.tooltipText=useLegacyPackaging 선언 추가
project.upgrade.androidManifestUseEmbeddedDexToUseLegacyPackagingRefactoringProcessor.addUseLegacyPackaging.usageType=useLegacyPackaging 선언 추가
project.upgrade.androidManifestUseEmbeddedDexToUseLegacyPackagingRefactoringProcessor.commandName=Android 매니페스트의 useEmbeddedDex를 빌드 파일에 포함
project.upgrade.androidManifestUseEmbeddedDexToUseLegacyPackagingRefactoringProcessor.usageView.header=Android 매니페스트의 useEmbeddedDex를 빌드 파일에 포함
project.upgrade.androidResourcesUsageInfo.move.tooltipText=aaptOptions에서 androidResources로 사용 위치 이동
project.upgrade.androidResourcesUsageInfo.remove.tooltipText=aaptOptions 삭제
project.upgrade.applyGoogleServicesPluginUsageInfo.tooltipText=Google Services 플러그인 적용
project.upgrade.buildConfigBuildFeature.enable.tooltipText=기존의 buildConfig 동작 보존
project.upgrade.buildConfigDefaultRefactoringProcessor.commandName=buildConfig 빌드 기능 활성화
project.upgrade.buildConfigDefaultRefactoringProcessor.enable.usageType=기존의 buildConfig 동작 유지
project.upgrade.buildConfigDefaultRefactoringProcessor.usageView.header=buildConfig 빌드 기능 활성화
project.upgrade.compileRuntimeConfigurationRefactoringProcessor.changeDependencyConfigurationUsageType=종속성 구성 변경
project.upgrade.compileRuntimeConfigurationRefactoringProcessor.commandName=지원 중단된 구성 바꾸기
project.upgrade.compileRuntimeConfigurationRefactoringProcessor.renameConfigurationUsageType=구성 이름 변경
project.upgrade.compileRuntimeConfigurationRefactoringProcessor.usageView.header=지원 중단된 구성 바꾸기
project.upgrade.dataBindingEnabledUsageInfo.tooltipText=활성화된 dataBinding을 buildFeatures로 마이그레이션
project.upgrade.deprecated.notification.body=Android Gradle 플러그인 버전 {0}은(는) Android Studio의 추후 버전에서 지원되지 않습니다. AGP 업그레이드 지원을 시작하고 이 프로젝트의 AGP 버전을 최소 {1}(으)로 업데이트하세요.
project.upgrade.deprecated.notification.title=프로젝트 업데이트가 강력하게 권고됨
project.upgrade.deprecatedOperatorUsageInfo.rewrite.tooltipText=사용 위치 다시 쓰기
project.upgrade.emulatorSnapshotsUsageInfo.move.tooltipText=failureRetention에서 emulatorSnapshots로 사용 위치 이동
project.upgrade.emulatorSnapshotsUsageInfo.remove.tooltipText=failureRetention 제거
project.upgrade.fabricCrashlyticsRefactoringProcessor.addFirebaseCrashlyticsClasspathUsageType=Firebase Crashlytics Gradle 플러그인에 종속성 추가
project.upgrade.fabricCrashlyticsRefactoringProcessor.addFirebaseCrashlyticsNativeSymbolUploadUsageType=릴리스 buildType에 대해 네이티브 심볼 업로드 활성화
project.upgrade.fabricCrashlyticsRefactoringProcessor.addFirebaseCrashlyticsNdkUsageType=Firebase Crashlytics NDK 종속성 추가
project.upgrade.fabricCrashlyticsRefactoringProcessor.addFirebaseCrashlyticsSdkUsageType=Firebase Crashlytics SDK에 종속성 추가
project.upgrade.fabricCrashlyticsRefactoringProcessor.addGmavenRepositoryUsageType=Google Maven 저장소 추가
project.upgrade.fabricCrashlyticsRefactoringProcessor.addGoogleAnalyticsSdkUsageType=Google Analytics SDK에 종속성 추가
project.upgrade.fabricCrashlyticsRefactoringProcessor.addGoogleServicesClasspathUsageType=Google Services Gradle 플러그인에 종속성 추가
project.upgrade.fabricCrashlyticsRefactoringProcessor.applyGoogleServicesPluginUsageType=Google Services 플러그인 적용
project.upgrade.fabricCrashlyticsRefactoringProcessor.commandName=Crashlytics를 Fabric에서 Firebase로 마이그레이션
project.upgrade.fabricCrashlyticsRefactoringProcessor.removeCrashlyticsEnableNdkUsageType=enableNdk Crashlytics 플래그 제거
project.upgrade.fabricCrashlyticsRefactoringProcessor.removeFabricClasspathUsageType=Fabric Gradle 플러그인의 종속성 제거
project.upgrade.fabricCrashlyticsRefactoringProcessor.removeFabricCrashlyticsSdkUsageType=Fabric SDK의 종속성 제거
project.upgrade.fabricCrashlyticsRefactoringProcessor.removeFabricNdkUsageType=Fabric NDK 종속성 제거
project.upgrade.fabricCrashlyticsRefactoringProcessor.removeFabricRepositoryUsageType=Fabric Maven 저장소 제거
project.upgrade.fabricCrashlyticsRefactoringProcessor.replaceFabricPluginUsageType=Fabric 플러그인을 Firebase Crashlytics 플러그인으로 바꾸기
project.upgrade.fabricCrashlyticsRefactoringProcessor.usageView.header=Crashlytics를 Fabric에서 Firebase로 마이그레이션
project.upgrade.gMavenRepositoryRefactoringProcessor.commandName=google() GMaven을 buildscript 저장소에 추가
project.upgrade.gMavenRepositoryRefactoringProcessor.usageType=GMaven 선언 추가
project.upgrade.gMavenRepositoryRefactoringProcessor.usageView.header=google() GMaven을 buildscript 저장소에 추가
project.upgrade.gradlePluginsRefactoringProcessor.commandName=Gradle 플러그인 업그레이드
project.upgrade.gradlePluginsRefactoringProcessor.usageView.header=Gradle 플러그인 업그레이드
project.upgrade.gradlePluginsRefactoringProcessor.wellKnownGradlePluginUsageType=Gradle 플러그인 버전 업데이트
project.upgrade.gradleVersionRefactoringProcessor.commandName=Gradle 버전을 {0}(으)로 업그레이드
project.upgrade.gradleVersionRefactoringProcessor.gradleUrlUsageType=Gradle 배포 URL 업데이트
project.upgrade.gradleVersionRefactoringProcessor.usageView.header=Gradle 버전을 {0}(으)로 업그레이드
project.upgrade.gradleVersionUsageInfo.tooltipText=Gradle 버전을 {0}(으)로 업그레이드
project.upgrade.installationUsageInfo.move.tooltipText=사용 위치를 adbOptions에서 설치로 이동
project.upgrade.installationUsageInfo.remove.tooltipText=adbOptions 제거
project.upgrade.java8DefaultRefactoringProcessor.acceptNewUsageType=새 디폴트 값 수용(그대로 두기)
project.upgrade.java8DefaultRefactoringProcessor.commandName=디폴트 Java 언어 수준 업데이트
project.upgrade.java8DefaultRefactoringProcessor.existingDirectiveUsageType=기존 언어 수준 지시문(그대로 두기)
project.upgrade.java8DefaultRefactoringProcessor.groupingName=Java 7을 계속 사용하도록 지시문 추가
project.upgrade.java8DefaultRefactoringProcessor.insertOldUsageType=Java 7 계속 사용(언어 수준 지시문 삽입)
project.upgrade.java8DefaultRefactoringProcessor.usageView.header=디폴트 Java 언어 수준 업데이트
project.upgrade.javaLanguageLevelUsageInfo.tooltipText.acceptNewDefault=새 디폴트 값 수용
project.upgrade.javaLanguageLevelUsageInfo.tooltipText.existing=기존의 명시적 {0} 보존
project.upgrade.javaLanguageLevelUsageInfo.tooltipText.insertOldDefault=기존의 동작을 보존하도록 명시적 {0} 삽입
project.upgrade.kotlinLanguageLevelUsageInfo.tooltipText.acceptNewDefault=새 디폴트 값 수용
project.upgrade.kotlinLanguageLevelUsageInfo.tooltipText.existing=기존의 명시적 {0} 보존
project.upgrade.kotlinLanguageLevelUsageInfo.tooltipText.insertOldDefault=기존의 동작을 보존하도록 명시적 {0} 삽입
project.upgrade.lintOptionsUsageInfo.move.tooltipText=lintOptions에서 린트로 사용 위치 이동
project.upgrade.lintOptionsUsageInfo.remove.tooltipText=lintOptions 제거
project.upgrade.migratePackagingOptionsRefactoringProcessor.commandName=packagingOptions DSL 프로퍼티를 하위 블록으로 마이그레이션
project.upgrade.migratePackagingOptionsRefactoringProcessor.move.tooltipText=프로퍼티 이동
project.upgrade.migratePackagingOptionsRefactoringProcessor.move.usageType=프로퍼티 이동
project.upgrade.migratePackagingOptionsRefactoringProcessor.remove.tooltipText=프로퍼티 제거(분할 후)
project.upgrade.migratePackagingOptionsRefactoringProcessor.remove.usageType=프로퍼티 제거(분할 후)
project.upgrade.migratePackagingOptionsRefactoringProcessor.split.tooltipText=jniLibs와 리소스 간에 프로퍼티 분할
project.upgrade.migratePackagingOptionsRefactoringProcessor.split.usageType=jniLibs와 리소스 간에 프로퍼티 분할
project.upgrade.migratePackagingOptionsRefactoringProcessor.usageView.header=packagingOptions를 하위 블록으로 마이그레이션
project.upgrade.migrateToAndroidResourcesRefactoringProcessor.commandName=DSL 프로퍼티를 aaptOptions에서 androidResources로 마이그레이션
project.upgrade.migrateToAndroidResourcesRefactoringProcessor.move.usageType=프로퍼티를 androidResources로 마이그레이션
project.upgrade.migrateToAndroidResourcesRefactoringProcessor.remove.usageType=aaptOptions 제거
project.upgrade.migrateToAndroidResourcesRefactoringProcessor.usageView.header=aaptOptions에서 androidResources로 마이그레이션
project.upgrade.migrateToBuildFeaturesRefactoringProcessor.commandName=활성화된 부울을 buildFeatures로 마이그레이션
project.upgrade.migrateToBuildFeaturesRefactoringProcessor.dataBindingEnabledUsageType=활성화된 dataBinding을 buildFeatures로 마이그레이션
project.upgrade.migrateToBuildFeaturesRefactoringProcessor.usageView.header=활성화된 부울을 buildFeatures로 마이그레이션
project.upgrade.migrateToBuildFeaturesRefactoringProcessor.viewBindingEnabledUsageType=활성화된 viewBinding을 buildFeatures로 마이그레이션
project.upgrade.migrateToEmulatorSnapshotsRefactoringProcessor.commandName=DSL 프로퍼티를 failureRetention에서 emulatorSnapshots로 마이그레이션
project.upgrade.migrateToEmulatorSnapshotsRefactoringProcessor.move.usageType=프로퍼티를 emulatorSnapshots로 마이그레이션
project.upgrade.migrateToEmulatorSnapshotsRefactoringProcessor.remove.usageType=failureRetention 제거
project.upgrade.migrateToEmulatorSnapshotsRefactoringProcessor.usageView.header=failureRetention에서 emulatorSnapshots로 마이그레이션
project.upgrade.migrateToInstallationRefactoringProcessor.commandName=DSL 프로퍼티를 adbOptions에서 설치 위치로 마이그레이션
project.upgrade.migrateToInstallationRefactoringProcessor.move.usageType=프로퍼티를 설치로 마이그레이션
project.upgrade.migrateToInstallationRefactoringProcessor.remove.usageType=adbOptions 제거
project.upgrade.migrateToInstallationRefactoringProcessor.usageView.header=adbOptions에서 설치로 마이그레이션
project.upgrade.migrateToLintRefactoringProcessor.commandName=DSL 프로퍼티를 lintOptions에서 lint로 마이그레이션
project.upgrade.migrateToLintRefactoringProcessor.move.usageType=프로퍼티에서 린트로 마이그레이션
project.upgrade.migrateToLintRefactoringProcessor.remove.usageType=lintOptions 제거
project.upgrade.migrateToLintRefactoringProcessor.usageView.header=lintOptions에서 린트로 마이그레이션
project.upgrade.migrateToTestCoverageRefactoringProcessor.commandName=DSL 프로퍼티를 jacoco에서 testCoverage로 마이그레이션
project.upgrade.migrateToTestCoverageRefactoringProcessor.move.usageType=프로퍼티에서 testCoverage로 마이그레이션
project.upgrade.migrateToTestCoverageRefactoringProcessor.remove.usageType=jacoco 제거
project.upgrade.migrateToTestCoverageRefactoringProcessor.usageView.header=jacoco에서 testCoverage로 마이그레이션
project.upgrade.noLanguageLevelAction.acceptNewDefault=Java 8의 새 디폴트 값 수용
project.upgrade.noLanguageLevelAction.insertOldDefault=Java 7을 계속 사용하도록 지시문 삽입
project.upgrade.noPropertyPresentAction.acceptNewDefault=전체 모드의 새 R8 디폴트 값 수락
project.upgrade.noPropertyPresentAction.insertOldDefault=프로퍼티를 삽입하여 R8을 호환 모드에서 계속 사용
project.upgrade.nonConstantRClassDefaultRefactoringProcessor.commandName=상수 R 클래스 값 유지
project.upgrade.nonConstantRClassDefaultRefactoringProcessor.usageType=android.nonFinalRClass 프로퍼티를 삽입하여 기존의 동작 유지
project.upgrade.nonConstantRClassDefaultRefactoringProcessor.usageView.header=상수 R 클래스 값 유지
project.upgrade.nonConstantRClassUsageInfo.tooltipText=android.nonFinalRClass 프로퍼티를 삽입하여 기존의 동작 유지
project.upgrade.nonTransitiveRClassDefaultRefactoringProcessor.commandName=이행적 R 클래스 유지
project.upgrade.nonTransitiveRClassDefaultRefactoringProcessor.usageType=android.nonTransitiveRClass 프로퍼티를 삽입하여 기존의 동작 유지
project.upgrade.nonTransitiveRClassDefaultRefactoringProcessor.usageView.header=이행적 R 클래스 유지
project.upgrade.nonTransitiveRClassUsageInfo.tooltipText=android.nonTransitiveRClass 프로퍼티를 삽입하여 기존의 동작 유지
project.upgrade.notification.body=Android Gradle 플러그인 버전 {0}을(를) 업그레이드할 수 있습니다. AGP 업그레이드 지원을 사용하여 프로젝트의 AGP 버전을 업데이트하세요.
project.upgrade.notification.title=프로젝트 업데이트 권고됨
project.upgrade.notifyCancelledUpgrade.body=AGP 업그레이드 지원을 시작하고 업그레이드를 재개하세요.
project.upgrade.notifyCancelledUpgrade.title=Android Gradle Plugin 업그레이드가 취소됨
project.upgrade.obsoleteConfigurationConfigurationUsageInfo.tooltipText=구성 이름을 {0}에서 {1}(으)로 변경
project.upgrade.obsoleteConfigurationDependencyUsageInfo.tooltipText=구성을 {0}에서 {1}(으)로 업데이트
project.upgrade.projectJdkRefactoringProcessor.commandName=Gradle을 실행할 프로젝트 JDK 업그레이드
project.upgrade.projectJdkRefactoringProcessor.enable.usageType=프로젝트 JDK 업그레이드
project.upgrade.projectJdkRefactoringProcessor.usageView.header=Gradle을 실행할 프로젝트 JDK 업그레이드
project.upgrade.projectJdkUsageInfo.tooltipText=프로젝트 JDK 설정
project.upgrade.r8FullModeDefaultRefactoringProcessor.acceptNewUsageType=새 디폴트 R8 모드 수락(그대로 두기)
project.upgrade.r8FullModeDefaultRefactoringProcessor.commandName=디폴트 R8 처리 모드 업데이트
project.upgrade.r8FullModeDefaultRefactoringProcessor.existingDirectiveUsageType=기존의 fullMode 프로퍼티(그대로 두기)
project.upgrade.r8FullModeDefaultRefactoringProcessor.groupingName=프로퍼티를 추가하여 R8을 호환 모드에서 계속 사용
project.upgrade.r8FullModeDefaultRefactoringProcessor.insertOldUsageType=R8을 호환 모드에서 계속 사용(프로퍼티 삽입)
project.upgrade.r8FullModeDefaultRefactoringProcessor.usageView.header=디폴트 R8 처리 모드 업데이트
project.upgrade.r8FullModeDefaultUsageInfo.tooltipText.acceptNewDefault=새 디폴트 값 수용
project.upgrade.r8FullModeDefaultUsageInfo.tooltipText.existing=기존의 명시적인 프로퍼티 보존
project.upgrade.r8FullModeDefaultUsageInfo.tooltipText.insertOldDefault=프로퍼티를 삽입하여 기존의 동작을 보존
project.upgrade.redundantProperties.tooltipText=프로퍼티 제거
project.upgrade.redundantProperties.usageType=프로퍼티 제거
project.upgrade.redundantPropertiesRefactoringProcessor.commandName=불필요한 프로퍼티 제거
project.upgrade.redundantPropertiesRefactoringProcessor.usageView.header=불필요한 프로퍼티 제거
project.upgrade.references.text=참조 고려됨
project.upgrade.removeBuildTypeUseProguard.tooltipText=useProguard 설정 제거
project.upgrade.removeBuildTypeUseProguard.usageType=useProguard 설정 제거
project.upgrade.removeBuildTypeUseProguardRefactoringProcessor.commandName=buildType useProguard 설정 제거
project.upgrade.removeBuildTypeUseProguardRefactoringProcessor.usageView.header=buildType useProguard 설정 제거
project.upgrade.removeCrashlyticsEnableNdkUsageInfo.tooltipText=enableNdk Crashlytics 플래그 제거
project.upgrade.removeFabricClasspathDependencyUsageInfo.tooltipText=Fabric Gradle 플러그인의 종속성 제거
project.upgrade.removeFabricCrashlyticsSdkUsageInfo.tooltipText=Fabric SDK의 종속성을 제거합니다
project.upgrade.removeFabricMavenRepositoryUsageInfo.tooltipText=Fabric Maven 저장소 제거
project.upgrade.removeFabricNdkUsageInfo.tooltipText=Fabric NDK 종속성 제거
project.upgrade.removeImplementationPropertiesRefactoringProcessor.commandName=무시된 구성 프로퍼티 제거
project.upgrade.removeImplementationPropertiesRefactoringProcessor.usageView.header=무시된 구성 프로퍼티 제거
project.upgrade.removeImplementationProperty.tooltipText=프로퍼티 제거
project.upgrade.removeImplementationProperty.usageType=프로퍼티 제거
project.upgrade.removeSourceSetJniRefactoringProcessor.commandName=jni 소스 디렉터리를 sourceSets에서 제거
project.upgrade.removeSourceSetJniRefactoringProcessor.usageView.header=jni 소스 디렉터리를 sourceSets에서 제거
project.upgrade.renderScriptBuildFeature.enable.tooltipText=이 모듈에서 renderScript 활성화
project.upgrade.renderScriptDefaultRefactoringProcessor.commandName=필요한 곳에서 renderScript를 명시적으로 활성화
project.upgrade.renderScriptDefaultRefactoringProcessor.enable.usageType=renderScript 지시문 삽입
project.upgrade.renderScriptDefaultRefactoringProcessor.usageView.header=renderScript 빌드 기능을 명시적으로 활성화
project.upgrade.replaceFabricPluginUsageInfo.tooltipText=Fabric 플러그인을 Firebase Crashlytics 플러그인으로 바꾸기
project.upgrade.repositoriesNoGMavenUsageInfo.tooltipText=google()을 buildscript 저장소에 추가
project.upgrade.rewriteDeprecatedOperatorsRefactoringProcessor.commandName=사용되지 않는 연산자 다시 쓰기
project.upgrade.rewriteDeprecatedOperatorsRefactoringProcessor.rewrite.usageType=사용 위치 다시 쓰기
project.upgrade.rewriteDeprecatedOperatorsRefactoringProcessor.usageView.header=사용되지 않는 연산자 다시 쓰기
project.upgrade.sourceSetJniUsageInfo.tooltipText=\ jni를 sourceSet에서 제거
project.upgrade.sourceSetJniUsageInfo.usageType=jni를 sourceSets에서 제거
project.upgrade.testCoverageUsageInfo.move.tooltipText=jacoco에서 testCoverage로 사용 위치 이동
project.upgrade.testCoverageUsageInfo.remove.tooltipText=jacoco 제거
project.upgrade.usageView.doAction=업그레이드 완료(&U)
project.upgrade.usageView.need.reRun=업그레이드를 수행할 수 없습니다. \n\
사용 위치가 발견된 후 코드가 변경되었습니다. \n\
사용 위치를 다시 검색하세요.
project.upgrade.usageView.tabText=사용 위치 업그레이드
project.upgrade.viewBindingEnabledUsageInfo.tooltipText=활성화된 viewBinding을 buildFeatures로 마이그레이션
provider.module.not.chosen=모듈이 선택되지 않았습니다.
provider.slots.empty.error=컴플리케이션 슬롯이 추가되지 않았습니다.
provider.type.empty=슬롯 ''{0}''의 타입이 지정되지 않았습니다.
provider.type.invalid.error=컴플리케이션 데이터 소스의 타입 ''{0}''이(가) 없습니다.
provider.type.manifest.not.available=현재 매니페스트 정보를 이용할 수 없습니다.
provider.type.mismatch.error=컴플리케이션 데이터 소스는 {0} 타입을 제공할 수 없습니다.
quick.fixes.family=Android 빠른 수정
redo.parcelable.intention.text=Parcelable 구현 바꾸기
remove.parcelable.intention.text=Parcelable 구현 제거
resource.explorer.copy.value.description=리소스 값을 클립보드에 복사
resource.explorer.copy.value.title=값 복사
resource.manager.collapse.section=접기
resource.manager.expand.section=펼치기
root.element.not.specified.error=루트 요소가 지정되지 않았습니다.
run.error.apk.not.signed=현재 선택한 variant의 apk에 서명할 수 없습니다. 이 variant ({0})에 대한 서명 구성을 지정하세요.
run.error.apk.not.valid=현재 프로젝트는 실행할 수 없습니다.
select.platform.error=Android SDK를 선택하세요.
select.target.dialog.text=Android 타깃을 선택하세요.
specific.activity.not.launchable.error=액티비티를 내보내거나 액티비티에 intent-filter가 있어야 합니다.
specify.package.name.error=패키지 이름을 지정해야 합니다.
sys.health.send.feedback=피드백 보내기
sys.health.too.many.exceptions=내부 예외가 매우 많이 탐지되었습니다. 이는 IDE에 심각한 문제가 있음을 나타냅니다. Android Studio를 새로 설치하세요. 문제가 계속되면 아래 링크를 따라 버그를 보고해 주세요.
tab.name.sdk.platforms=SDK 플랫폼
tab.name.sdk.tools=SDK 도구
tab.name.sdk.update.sites=SDK 업데이트 사이트
text.loading=로드 중…
title.cannot.open.file=파일 {0}을(를) 열 수 없음
tooltip.disabling.sdk.diff.patching=SDK diff 패치를 비활성화하면 SDK 패키지 다운로드 크기가 증가하지만 다운로드 후 패키지 설치 속도는 빨라집니다. 이는 트래픽 제한이 없는 빠른 인터넷 연결이 있지만 시스템에서 로컬 패치 설치 시 상당한 시간이 걸리는 경우 유용할 수 있습니다. SDK diff 패치는 디폴트로 활성화되어 있으며 고급 하드웨어의 기본 설치 방법입니다.
unsupported.jvm.dragndrop.message=드래그앤드롭 문제(1.8.0_60~1.8.0_76)에 영향을 받는 JDK8 버전에서 실행되고 있습니다. 자세한 내용은 <a href="https://youtrack.jetbrains.com/issue/IDEA-146691">IDEA-146691</a>을 참조하고 문제가 적용되지 않는 JDK 사용을 고려해 보세요.
unsupported.jvm.openjdk.message=OpenJDK에서는 간헐적 성능 및 UI 문제가 발생합니다. Oracle JRE/JDK를 사용하는 것이 좋습니다.
unsupported.mac.intelonarm.message=Android Studio가 Rosetta 2에서 실행 중이며 성능에 영향을 줄 수 있습니다. 공식 Apple 실리콘(arm64) 버전을 사용하는 것이 좋습니다.
updates.settings.channel.locked=
verbose.level.title=상세
virus.scanning.dont.show.again=다시 보지 않기
virus.scanning.dont.show.again.this.project=이 프로젝트에 대해 다시 표시 안 함
virus.scanning.warn.message=사용 중인 백신 프로그램이 빌드 성능에 영향을 미칠 수 있습니다. {0}이(가) 다음 디렉터리를 검사했습니다. {1}
warning.level.title=경고
wearos.complication.no.type.supported=이 슬롯이 지원하는 타입이 없습니다
wearos.complication.progress.title.updating.slots=슬롯을 업데이트하는 중
wearos.complication.slot.background=백그라운드
wearos.complication.slot.bottom=맨 아래
wearos.complication.slot.launch.options=슬롯 실행 옵션
wearos.complication.slot.left=왼쪽
wearos.complication.slot.right=오른쪽
wearos.complication.slot.top=맨 위
whatsnew.action.custom.description=최신 버전 {0}의 새로운 기능 및 개선 사항에 대해 알아봅니다.
windows.ucrt.warn.message=Windows용 Universal C Runtime이 설치되지 않았습니다. 이로 인해 ADB와 같은 플랫폼 도구가 작동하지 않을 수 있습니다.