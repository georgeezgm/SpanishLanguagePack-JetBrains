internal.string.should.be.in.bundle=Las cadenas deben extraerse como paquetes.
internal.only.pass.hardcoded.strings.as.property.keys=Sólo se pasan cadenas codificadas como claves de propiedad.
internal.expression.without.nls.passed.to.nls=Expresión sin @Nls pasada como @Nls
intention.category.scala.internal=Escala/interno
fileName.does.not.match=La clase no coincide con el nombre del archivo
method.signature.accessor.empty.parenthesis=El método denominado descriptor de acceso tiene paréntesis vacíos
method.signature.accessor.unit.return.type=El tipo de resultado del método con el nombre de acceso dado es Unidad.
method.signature.unit.parameterless=Los métodos con tipo de resultado Unidad no tienen parámetros.
method.signature.procedure.declaration=Sintaxis de procedimiento dentro de declaraciones de método
method.signature.procedure.definition=Sintaxis de procedimiento dentro de las definiciones de métodos
method.signature.result.type.refinement=Claridad mejorada de los tipos de resultados; ¿Faltan admisiones universitarias?
method.signature.parameterless.override.empty.paren=Paréntesis vacío Método Scala redefinido sin parámetros
method.signature.parameterless.override.java.mutator=Método de establecimiento de Java anulado sin parámetros
method.signature.parameterless.override.mutator.like=No hay parámetros para el método con el nombre set-child
method.signature.override.abstract.member=Marcar métodos que anulan miembros abstractos con la palabra clave override
method.signature.empty.paren.override.java.accessor=Métodos de acceso de Java anulados con paréntesis vacíos
method.signature.empty.paren.override.parameterless=Miembro de Scala sin parámetros redefinido con paréntesis vacíos
method.signature.parameterless.access.java.mutator=Métodos de configuración de Java accesibles sin parámetros
method.signature.parameterless.access.empty.paren=Se accede al método de paréntesis vacío sin parámetros
method.signature.java.accessor.empty.paren=Método de acceso de Java llamado con paréntesis vacíos
typed.parameter.without.parenthesis.in.function.literal=Parámetros escritos sin paréntesis dentro de literales de función
unused.expression.name=Expresión no utilizada
unreachable.code.name=Código no disponible
internal.getText.contains.shouldBe.textContains=.getText.contains debe ser .textContains
internal.getText.equals.shouldBe.textMatches=.getText.equals es .getText.equals. Debe ser coincidencias de texto
internal.api.status.of.symbols=Estado API del símbolo
internal.instanceOf.shouldBe.is=InstanciaDe debe ser:
displayname.scala=Scala
displayname.loop.variable.not.updated.inside.loop=Variable de bucle no actualizada dentro del bucle
displayname.package.name.inspection=Declaración de paquete no válida
displayname.scala.deprecation=Depreciación de Scala
displayname.deprecated.identifier=El identificador ya no se utiliza
displayname.deprecated.kind.projector.syntax=Sintaxis de tipo proyector obsoleta
displayname.case.class.parameter=Parámetros de clase de caso
displayname.var.could.be.a.val=Var'' puede ser ''val
displayname.unused.declaration=Declaración obsoleta
displayname.access.can.be.weaker=El acceso a la declaración puede restringirse
displayname.in.kind.projector.use.correct.lambda.keyword=Kind Proyector\: Uso de la palabra clave Lambda correcta
displayname.in.kind.projector.simplify.type=Proyector amable\: Simplificación de tipos
displayname.use.of.postfix.method.call=Usar llamadas a métodos de prefijo
displayname.advanced.language.features=Características del lenguaje de alto nivel
displayname.reference.must.be.prefixed=Las referencias requieren prefijo
displayname.floating.point.literal.ending.with.dot=Literal de coma flotante que termina en ''.''
displayname.chained.package.clause.inspection=Declaración de paquete predeterminado
displayname.relative.import=Obtener relativo
displayname.suspicious.shadowing.by.a.variable.pattern=Enmascaramiento sospechoso por patrones variables
displayname.suspicious.shadowing.by.a.type.parameter=Enmascaramiento sospechoso por parámetro de tipo
displayname.abstract.value.in.trait=Valor abstracto dentro del atributo
displayname.unmatched.tag=Etiquetas que no coinciden
displayname.unnecessary.braces.in.import.inspection=Llaves innecesarias en la inspección de importaciones
displayname.name.boolean.parameters=Especificación de nombres de parámetros booleanos
displayname.redundant.cast.inspection=Comprobación de conversión de tipos innecesaria
displayname.redundant.conversion.inspection=Comprobaciones de conversión innecesarias
displayname.missing.type.annotation=Anotación de tipo faltante
displayname.malformed.format.string=Cadena con formato incorrecto
displayname.legacy.string.formatting=Formatear una cadena existente
displayname.not.implemented.code=Sin implementación de código
displayname.redundant.block=Bloques innecesarios
displayname.suspicious.forward.reference=Referencia directa sospechosa
displayname.type.annotation.required=Se requiere anotación de tipo
displayname.double.negation=Doble negativa
displayname.simplify.boolean.expression=Simplificar expresiones booleanas
displayname.trivial.match.can.be.simplified=Podemos simplificar la coincidencia que se explica por sí misma.
displayname.unnecessary.parentheses=Paréntesis innecesarios
displayname.type.check.can.be.pattern.matching=La verificación de tipos puede ser coincidencia de patrones
displayname.comparing.unrelated.types=Comparar tipos no relacionados
displayname.isinstanceof=IsInstanceOf
displayname.match.statement.convertible.to.pattern.matching.anonymous.function=La declaración de coincidencia se puede convertir en una función anónima de coincidencia de patrones.
displayname.view.bounds.are.deprecated=Los límites de vista están en desuso
displayname.convert.expression.to.single.abstract.method=Convertir una expresión a un método abstracto único (SAM)
displayname.nested.stateful.monads=Mónada de estado anidada
displayname.field.from.delayedinit=Campos de DelayedInit
displayname.non.value.field.is.accessed.in.hashcode=Se accedió a un campo sin valor en ''hashCode()''
displayname.unnecessary.partial.function=Función parcial innecesaria
displayname.wrong.platform.method.usage=Uso de método de plataforma no válido
displayname.syntactic.sugar=Azúcar gramatical
displayname.scala.unnecessary.semicolon.inspection=Comprobación de punto y coma innecesaria de Scala
displayname.redundant.return=Devoluciones innecesarias
displayname.nonlocal.return=Declaración de devolución no local
displayname.postfix.unary.operation=Postfix unary operation
displayname.anonymous.function.convertible.to.a.method.value=Funciones anónimas que se pueden convertir en valores de método.
displayname.applied.type.lambda.can.be.simplified=Podemos simplificar el tipo lambda aplicado.
displayname.redundant.new.on.case.class=Nuevo innecesario en clase de caso.
displayname.argument.duplicates.corresponding.parameter.default.value=El argumento duplica el valor predeterminado del parámetro correspondiente.
displayname.auto.tupling=Tupleización automática
displayname.null.initializer.can.be.replaced.by.underscore=Puede reemplazar el inicializador nulo con _
displayname.scala.style.inspection=Comprobación de estilo Scala
displayname.simplifiable.empty.check=Comprobación de espacios en blanco simplificada
displayname.size.to.length.on.arrays.and.strings=Establezca el tamaño de las matrices y cadenas en longitud.
displayname.equals.on.arrays.and.iterators=Signos iguales en matrices e iteradores.
displayname.sameelements.oncollections.of.a.same.kind=SameElements onColecciones del mismo tipo
displayname.corresponds.sameelements.on.unsorted.collection=Corresponde/sameElements en una colección desordenada
displayname.equals.oncollections.of.different.kinds=Diferentes tipos de Iguales en Colecciones
displayname.comparing.length.to.lengthcompare=Comparar longitud con longitudComparar
displayname.manually.zipping.with.indices=Comprimir manualmente con índice
displayname.access.to.first.element.by.index=Acceder al primer elemento por índice
displayname.access.to.last.element.by.index=Acceder al último elemento por índice
displayname.constructing.range.for.seq.indices=Crear rango de índice de secuencia
displayname.filter.and.headoption.to.find=Filtrar y headOption para encontrar
displayname.find.and.emptiness.check.to.exists=Buscar y verificar espacios en blanco con existe
displayname.filter.and.emptiness.check.to.exists.forall=Verificación de filtro y espacios en blanco con existe/forall
displayname.filter.and.size.to.count=Filtrar y dimensionar como recuento
displayname.find.and.map.to.get=Buscar y mapear para llegar
displayname.exists.simplifiable.to.contains=Existe, que se puede simplificar para que contenga
displayname.map.and.contains.true.false.to.exists.or.forall=Mapea y contiene (verdadero/falso) tal como existe o \!forall
displayname.filter.and.contains.to.intersect.or.diff=Filtrar y contiene como intersección o diferencia
displayname.redundant.contains.in.filter=Filtrar mis contenidos innecesarios
displayname.double.negation.in.forall.and.exists=Doble negación dentro de forall y existe.
displayname.simplifiable.fold.or.reduce.method=Métodos simplificables de plegar o reducir.
displayname.fold.simplifiable.to.forall=Pliegue que se puede simplificar con forall
displayname.reverse.and.iterator.to.reverseiterator=Revertir e iterador para revertirIterador
displayname.reverse.find.to.findLast=Invertir y buscar para encontrarLast
displayname.conversion.to.set.and.back.to.distinct=Convertir a conjunto y restaurar a distinto
displayname.drop.and.take.to.slice=Reemplazar soltar y tomar con rebanada
displayname.reverse.take.and.reverse.to.takeright=Invertir, tomar y revertir como tomarDerecha
displayname.map.and.flatten.to.flatmap=Mapear y aplanar en flatMap
displayname.emulated.headoption.or.lastoption=HeadOption emulado o lastOption
displayname.replace.to.with.until=Cambiar a a hasta
displayname.replace.with.flatten=Cambiar para aplanar
displayname.sorted.and.head.last.to.max.min=Ordenado y encabezado/último al máximo/mínimo
displayname.collect.and.headoption.to.collectfirst=Recopilar y headOption como recopilarPrimero
displayname.index.bounds.check=Verificación vinculada al índice
displayname.make.array.to.string=Convertir matriz a cadena
displayname.get.and.getorelse.to.getorelse=Obtener y getOrElse como getOrElse
displayname.extracting.keys.manually=Extraer claves manualmente
displayname.extracting.values.manually=Extraer valores manualmente
displayname.redundant.get.when.getting.a.value.from.map=Obtención innecesaria al obtener valor del mapa
displayname.lift.to.get=Levante para llegar
displayname.emptiness.check.on.get.to.contains=Obtener verificación de espacios en blanco para Contiene
displayname.redundant.headoption.or.lastoption=HeadOption o lastOption innecesarias
displayname.equals.some.x.to.contains.x=Signo igual Algunos(x) a contiene(x)
displayname.map.and.getorelse.to.fold=Mapear y getOrElse como plegar
displayname.map.and.getorelse.false.to.exists=Map y getOrElse(false) existen
displayname.getorelse.null.to.ornull=GetOrElse(nulo) a orNull
displayname.emulated.option.x=Opción imitada(x)
displayname.change.to.filter=Cambiar para filtrar
displayname.some.to.option=Algunos a la opción
displayname.filter.after.sort=Filtrar después de ordenar
displayname.redundant.collection.conversion=Conversión de colección innecesaria
displayname.side.effects.in.a.monadic.transformation=Efectos secundarios durante la conversión monádica
displayname.unit.return.type.in.the.argument.of.map=Tipo de retorno de unidad dentro del argumento del mapa
displayname.multiple.arg.lists.in.annotation.constructor=Lista de argumentos múltiples en el constructor de anotaciones
displayname.unzip.for.extracting.a.single.element=Descompresión para extracción de un solo elemento.
displayname.tag.unclosed=La etiqueta no está cerrada
displayname.inlined.tag=Etiquetas en línea
displayname.header.tags.unbalanced=Etiquetas de encabezado no coincidentes
displayname.unknown.tag=Etiqueta desconocida
displayname.unknown.parameter=Parámetro desconocido
displayname.missing.tag.parameter.description=Falta descripción del parámetro de etiqueta
displayname.wrong.scaladoc.element=Elemento Scaladoc no válido
displayname.specs2.matchers=Comparador de Specs2
displayname.source3.scala2.syntax=Sintaxis de Scala 2 con -X fuente:3
displayname.dataflow.analysis.constant.conditions=Condición constante
final.modifier.is.redundant.for.toplevel.objects=El controlador ''final'' es redundante con el objeto de nivel superior
mark.inner.case.objects.as.final=Marca el objeto del caso interno como final, haciendo que la clase compilada también sea final.
group.general=Común
group.internal=Internal
group.syntactic.simplification=Simplificar la sintaxis
group.syntactic.clarification=Aclaración de sintaxis
group.method.signature=Firma del método
group.code.style=Estilo de código
group.dataflow.analysis=¿Cuál es el nombre de la fuente?
group.size=Tamaño
group.comparing=Comparación
group.indices=Índice
group.simplifications.filter.and.exists=Simplificar\: filtrar y existe
group.simplifications.find.and.map.to.apply=Simplificar\: mapa para buscar y aplicar
group.simplifications.forall.and.exists=Simplificar\: para todos y existe
group.simplifications.other=Simplificar\: Otro
group.maps=Mapa
group.options=Opción
group.other=Otros
group.collections=Recopilación
group.scaladoc=Scaladoc
group.resource.leaks=Fuga de recursos
group.specs2=Specs2
displayname.deprecated.package.object=Objeto de paquete obsoleto
displayname.empty.targetname=Nombre externo @targetName vacío
displayname.multiple.targetname.annotations=Múltiples anotaciones @targetName
displayname.multiple.targets.targetname=Múltiples destinos @targetName
displayname.no.targetname.annotation.for.operator.like.definition=La definición con nombre de operador no tiene la anotación @targetName
displayname.member.has.targetname.when.overridden.does.not=El miembro tiene la anotación @targetName, pero el miembro que se anula no la tiene.
displayname.definition.misses.targetname.annotation=La definición no tiene la anotación @targetName
displayname.definition.and.overridden.member.have.different.targetname.annotations=Los miembros definidos y redefinidos tienen diferentes anotaciones @targetName
displayname.alphanumeric.definition.used.as.infix.operator.is.not.declared.infix=La definición alfanumérica utilizada con el operador infijo no se declara como "infijo"
display.name.absolute.import=Importación absoluta
grouppath.scala.collections=Escala, colección
introduce.implicit.incorrect.order=No se permite la inserción implícita de parámetros debido a un orden de parámetros incorrecto
introduce.implicit.incorrect.count=No se permite la inserción implícita de parámetros debido a un número incorrecto de posiciones de uso de parámetros
introduce.implicit.not.allowed.here=No se permite la inserción de parámetros implícitos en esta expresión.
replace.with.some=Cambiar a algunos
replace.option.with.some=Cambiar opción a alguna
remove.unnecessary.parentheses=Elimine los paréntesis innecesarios.
convert.expression.to.sam=Convertir una expresión en un único método abstracto
fileName.rename.text={0} {1} a {2}
fileName.rename.class=Cambiar nombre de definición de tipo
fileName.rename.file=Cambiar nombre de archivo
implementation.limitation.multiple.argument.lists=Limitación de implementación\: actualmente no se admiten listas de argumentos múltiples en las anotaciones
remove.double.negation=Elimina dobles negativos.
simplify.with.text={0} Simplificación
simplify.match.to.if.statement=Simplifique la coincidencia en una declaración if
remove.unnecessary.val=Eliminar ''val'' innecesario
remove.val.from.definition=Eliminar ''val'' de la definición
remove.redundant.cast=Eliminar yesos innecesarios
casting.left.to.right.is.redundant=La transmisión de ''{0}'' a ''{1}'' es redundante
remove.redundant.conversion=Elimina conversiones innecesarias
casting.a.to.b.is.redundant=La transmisión de ''{0}'' a ''{1}'' es redundante
catch.all=Especificar tipo de excepción
replace.collect.headOption.with.collectFirst=Reemplazo de .collect y .headOption con .collectFirst
hint.comparing.different.collection.kinds=Comparar diferentes tipos de colecciones
hint.convert.left.hand.side.to.collection=Convertir izquierda a {0}
hint.convert.right.hand.side.to.collection=Convertir a la derecha a {0}
replace.with.lengthCompare=Reemplazar con .lengthCompare
replace.with.sizeIs=Reemplazar con .sizeIs
sameElements.unsorted=`sameElements` en una colección desordenada, resultado impredecible
corresponds.unsorted=''corresponde'' con una colección desordenada, el resultado es impredecible
replace.drop.take.with.slice=Reemplace .drop y .take con .slice
replace.take.drop.with.slice=Reemplace .take y .drop con .slice
replace.with.isEmpty=Reemplazar con .isEmpty
replace.with.isDefined=Reemplazar con .isDefined
replace.with.nonEmpty=Reemplazar con .nonEmpty
replace.with.flatten=Reemplazar con .aplanar
replace.equals.with.sameElements=Reemplazar signos iguales con igualesElements
config.description.for.arrays=Acuerdo
config.description.for.iterators=Iterador
exists.equals.hint=El cambio existe para contener
forall.notEquals.hint=Cambiar forall a no contiene
replace.with.forall=Reemplazar con .forall
replace.with.exists=Reemplazar con .existe
filter.nonempty.check.hint=Reemplazo de controles de filtro y sin espacios en blanco con existe
filter.empty.check.hint=Reemplace el filtro y la verificación de espacios en blanco con \!(...).exists
filterNot.empty.check.hint=Reemplazo de filterNot y verificación de espacios en blanco con forall
filterNot.nonempty.check.hint=Reemplace la verificación filterNot y sin espacios en blanco con \!(...).forall
filter.headOption.hint=Reemplace el filtro y la opción de cabezal con buscar
replace.filter.with.intersect=Reemplazar filtro y contiene con intersección
replace.filter.with.diff=Reemplazar filtro y no contiene con diferencial.
remove.redundant.contains=Eliminar .contains innecesarios
filter.size.hint=Cambiar filtro y tamaño para contar
replace.find.and.map.with.apply=Reemplazar buscar y mapear con aplicar
find.isDefined.hint=Reemplace la verificación de búsqueda y sin espacios en blanco con existe
find.isEmpty.hint=Reemplace la búsqueda y la verificación de espacios en blanco con \!(...).exists
fold.true.and.hint=Cambiar pliegue a forall
get.getOrElse.hint=Reemplazar con getOrElse (clave, valor predeterminado)
getOrElse.null.hint=Cambiando getOrElse(nulo) a orNull
replace.with.headOption=Reemplazar con .headOption
replace.with.lastOption=Reemplazar con .lastOption
ifstmt.to.headOption=Si no como opción principal
ifstmt.to.lastOption=Si no es la última opción
lift.to.headOption=.lift como opción de cabeza
lift.to.lastOption=.levantar como última opción
ifstmt.to.filteredOption=Reemplazar si con opciones de filtro
hint.replace.with.option.expr=Cambiar a la opción (x)
hint.replace.with.option.expr.with.preview=Reemplazar con Opción({0})
ifstmt.to.lift=Si no para levantar
replace.with.last=Reemplazar con .last
format.with.mkstring=Formatee con .mkString("Array(", ", ", ")")
replace.map.flatten.with.flatMap=Reemplace .map y .flatten con .flatMap
replace.get.nonEmpty.with.contains=Reemplazar con .contiene (clave)
replace.get.isEmpty.with.not.contains=Reemplazar con \!.contiene(clave)
get.get.hint=Cambiar a .(tecla)
map.getOrElse.false.hint=Reemplazar mapa y getOrElse(false) con existe
map.getOrElse.true.hint=Reemplazo de map y getOrElse(true) con forall
map.getOrElse.hint=Reemplazo de map y getOrElse con fold
replace.with.keys=Reemplazar con .keys
replace.with.keySet=Reemplazar con .keySet
replace.with.keysIterator=Reemplazar con .keysIterator
replace.with.get=Reemplazar con .get
replace.map.contains.true.with.exists=Reemplace .map(...).contains(true) con .exists(...)
replace.map.contains.false.with.not.forall=Reemplace .map(...).contains(false) con \! Reemplazar con .forall(...)
replace.with.values=Convertir a .values
replace.with.valuesIterator=Reemplazar con .valuesIterator
operation.on.collection.id=OperationsOnCollection
operation.on.collection.name=Operaciones simplificadas sobre cobros
operation.on.collection.like.option.input.message=En inspección, estas clases se tratan como Scala.Option
operation.on.collection.like.option.input.title=Agregar clase de opción similar
operation.on.collection.like.option.panel.title=Clase de opción similar
operation.on.collection.like.collection.input.message=En la inspección, estas clases se tratan como colecciones.
operation.on.collection.like.collection.input.title=Agregar clase de colección similar
operation.on.collection.like.collection.panel.title=Clase de colección similar
replace.with.contains=Reemplazar con .contiene
replace.with.not.contains=Reemplazar con \!.contiene
hint.replace.with.indices=Reemplazar con .indices
hint.replace.with.indices.with.preview=Reemplazar con {0}.indices
redundant.collection.conversion=Elimine las conversiones de colecciones innecesarias
remove.redundant.headOption=Eliminar .headOption innecesario
remove.redundant.lastOption=Innecesario . eliminar la última opción
replace.to.with.until=Cambie `a` por `hasta`
replace.with.findlast=Reemplazar con `buscarÚltimo`
replace.reverse.iterator=Convertir .reverse.iterator a .reverseIterator
replace.reverse.take.reverse.with.takeRight=Reemplace .reverse.take(...).reverse con .takeRight(...)
replace.sameElements.with.equals=Cambiar elementos iguales a iguales
replace.corresponds.with.equals=Reemplazar corresponde con un signo igual
fold.sum.hint=Cambiar pliegue a suma
fold.product.hint=Cambiar pliegue al producto
fold.sum.short=Doblar para sumar
fold.product.short=Doblar al producto
reduce.sum.hint=Cambiar reducir a suma
reduce.product.hint=Cambiar reducir a producto
reduce.min.hint=Reemplazar reducir con min
reduce.max.hint=Cambiar reducir al máximo
reduce.sum.short=Reducir a suma
reduce.product.short=Reducir al producto
reduce.min.short=Reducir al mínimo
reduce.max.short=Reducir al máximo
size.to.length=Convierta .size a .length en matrices y cadenas
replace.with.option=Cambiar a opción
sort.filter.hint=Cambiar el orden de clasificación y filtro
replace.sorted.head.with.min=Reemplazar con .min
replace.sorted.last.with.max=Reemplazar con .max
replace.sortBy.head.with.minBy=Reemplazar con .minBy
replace.sortBy.last.with.maxBy=Reemplazar con .maxBy
replace.toSet.and.back.with.distinct=Convertir a Set y restaurar a .distinct
expression.unit.return.in.map=Una expresión con un tipo de retorno Unidad dentro del argumento del mapa
use.foreach.instead.of.map=Utilice foreach en lugar de mapa
replace.with.map=Convertir a .map
replace.with.head=Reemplazar con .head
replace.with.zipWithIndex=Reemplazar con zipWithIndex
nonlocal.return.statement=Se utilizó una declaración de devolución para salir anticipadamente de la función anónima.
nonlocal.return.check.compiler.option=<html><code>-Xlint\:nonlocal-return</code> Usar solo la opción del compilador</html>
fix.nonlocal.return.check.compiler.option=Sólo con -Xlint:nonlocal-return
remove.unreachable.code=Eliminar código inalcanzable
unwrap.do.statement=Hacer - desenvolver declaración
unused.expression.throws=Expresiones no utilizadas, los únicos efectos secundarios posibles son excepciones.
unused.expression.no.side.effects=Expresiones sin efectos secundarios no utilizados.
add.return.keyword=Agregar palabra clave de retorno
annotate.declaration.with.unused=Anotar declaraciones con @unused
remove.unused.element=Eliminar elementos no utilizados
remove.whole.definition=Eliminar toda la definición
remove.only.name.binding=Eliminar solo el enlace {0}
make.private=Hazlo 'privado'
access.can.be.private=El acceso puede ser privado.
change.modifier=Cambiar controlador
mark.import.as.always.used.in.this.project=Marcar la importación como siempre utilizada en este proyecto
fix.unused.declaration.report.public.declarations=Desactivar informes de declaraciones públicas no utilizadas
name.unused.declaration.report.public.declarations=Reportar declaración pública
name.unused.declaration.report.local.declarations=Informe de declaración local
declaration.is.never.used=La declaración nunca se utiliza
enable.in.scala.3=Habilitado en Scala 3
unused.import.statement=Declaración import obsoleta
field.defined.in.delayedinit.is.likely.to.be.null=Los campos definidos en DelayedInit pueden ser nulos
scala3.alphanumeric.definition.is.not.declared.infix=La definición alfanumérica {0} no está declarada como ''infija''. No debe utilizarse como operador infijo.
package.objects.are.deprecated=Los objetos del paquete están en desuso en Scala 3. Intente utilizar la definición de nivel superior en su lugar.
unwrap.package.object.fix=Mover un miembro al nivel superior
usage.of.deprecatedname.as.identifier.is.deprecated={0} ya no se utiliza como identificador. Puede usarse como palabra clave en futuras versiones de Scala.
parameter.name.is.deprecated=Nombre del parámetro\: {0} está en desuso.
symbol.name.is.deprecated.with.message=El símbolo {0} ya no está disponible. {Uno}
super.method.name.is.deprecated.with.message=El método principal {0} está en desuso. {Uno}
overriding.is.deprecated=La anulación de {0} está obsoleta. {Uno}
inheriting.form.name.is.deprecated.message=La herencia {0} está obsoleta. {Uno}
advanced.language.feature=Funciones de lenguaje de alto nivel\: {0}
import.feature.flag.for.language.feature=\ Obtener indicadores de características para %s
language.feature.postfix.operator.notation=Notación del operador postfijo
language.feature.reflective.call=Llamada reflexiva
language.feature.dynamic.member.selection=Selección dinámica de miembros
language.feature.implicit.conversion=Conversión implícita
language.feature.higher.kinded.type=Tipo de padre
language.feature.existential.type=Tipo de existencia
language.feature.macro.definition=Definición de macro
legacy.string.formatting.use.interpolated.string=Al formatear una cadena existente, se puede reemplazar con una cadena interpolada
convert.to.interpolated.string=Convertir a cadena interpolada
format.specifier.cannot.be.used.for.an.argument=El especificador de formato {0} no puede utilizar el argumento {1}({2})
argument.cannot.be.used.for.a.format.specifier=El argumento {0}({1}) no se puede utilizar con el especificador de formato {2}
malformed.format.specifier=Especificador de formato no válido
no.argument.for.a.format.specifier=Especificador de formato {0} sin argumentos
no.argument.at.position=No hay argumentos en la posición {0}
no.format.specifier.for.an.argument=El argumento {0} no tiene especificador de formato
convert.match.statement.to.pattern.matching.function=Convierta la declaración de coincidencia en una función anónima de coincidencia de patrones
convert.to.anonymous.function=Convertir a función anónima
replace.with.implicit.parameters=Convertir a parámetro implícito
single.import=Elimine las llaves de las declaraciones de importación que contienen solo una importación
super.method.name.is.marked.as.status=El método principal {0} está marcado como {1}
symbol.name.is.marked.as.status=El símbolo {0} está marcado como {1}
replace.with.is=Reemplazar con .is
internal.replace.with.textContains=Reemplazar con .textContiene
internal.replace.with.textMatches=Reemplazar con .textMatches
convert.to.floating.point=Convertir a {0}.
insert.missing.assignment=Insertar tarea faltante
remove.call.parentheses=Quitar paréntesis de llamada
add.override.modifier.quickfix=Agregar controlador de anulación
add.call.parentheses=Agregar paréntesis de llamada
convert.to.function.syntax=Conversión de sintaxis de funciones
empty.parentheses=Agregar paréntesis vacíos
redundant.parentheses=Eliminar paréntesis duplicados
add.modifier=Agregar controlador ''{0}''
remove.modifier=Eliminar el controlador ''{0}''
not.implemented=No se ha implementado
implement.quickfix.name=Avatar
package.declaration.could.use.chained.package.clauses=El paquete base ''{0}'' debe ser una cláusula de paquete independiente
use.chained.package.clauses.like=Extracción de cláusula de paquete
use.chained.package.clauses=Utilice una cláusula de paquete base separada
fimaly.name.move.file.to.package=Ir a Paquetes
move.file.to.default.package=Ir al paquete predeterminado
move.file.to.package.with.packagename=Ir al paquete {0}
move.file.to.package.package.prefix.error=No se puede crear el paquete ''{0}'' con el prefijo de paquete ''{2}'' en la carpeta de origen ''{1}''
package.names.does.not.correspond.to.directory.structure=El nombre del paquete ''{0}'' no corresponde a la ruta del archivo ''{1}''
package.names.does.not.correspond.to.directory.structure.package.prefix=La carpeta de origen ''{0}'' tiene el prefijo de paquete ''{1}''
rename.package.quickfix.command.name=Cambiar nombre del paquete
family.name.rename.package=Cambiar nombre del paquete
remove.package.statement=Eliminar la sintaxis del paquete
rename.package.to=Establezca el nombre del paquete en ''{0}''.
name.boolean.ignore.single.parameter.methods=Ignorar métodos con un parámetro
delete.redundant.default.argument=Eliminar argumentos predeterminados innecesarios
surround.with.parenthesis=Rodear entre paréntesis
clarifying.parentheses=Paréntesis para separar claramente
around.function.type=Alrededor de los tipos de funciones
around.function.type.parameter=Alrededor de los parámetros del tipo de función.
around.function.expr.parameter=Alrededor de parámetros en expresiones de funciones
unnecessary.parentheses.ignore=Ignorar
remove.unnecessary.parentheses.with.text=Eliminar paréntesis innecesarios {0}
add.dot.to.method.call=Agregar punto a la llamada al método
add.prefix.to.reference=Agregar prefijo a las referencias
convert.from.infix.expression=Conversión de expresión infija
convert.from.infix.pattern=Convertir a patrón infijo
convert.from.infix.type=Convertir a tipo infijo
remove.expression=Eliminar expresión
wrap.in.backticks=Envolver con comillas invertidas
remove.redundant.braces=Quitar brackets innecesarios
unwrap.the.expression=Desenvolver expresiones
the.enclosing.block.is.redundant=Ese bloque es innecesario
redundant.braces.in.case.clause=Llaves innecesarias en la cláusula del caso
absolute.import.detected=Las declaraciones de importación pueden basarse en el paquete base.
relative.import.detected=Importación relativa detectada
family.name.enable.full.qualified.imports=Activar declaraciones de importación totalmente calificadas
source.not.closed=La fuente no se cierra.
display.name.inlined.tag=Etiquetas en línea
display.name.missing.parameter.description=Falta descripción del parámetro
all.text.from.header.closing.tag.to.end.of.line.will.be.lost=Se pierde todo el texto desde la etiqueta de cierre del encabezado hasta el final de la línea.
display.name.unclosed.tag=Etiqueta abierta
inspection.scaladoc.problem.duplicate.param=Etiqueta @param duplicada para el parámetro ''{0}''
inspection.scaladoc.problem.duplicate.tparam=Duplicate @tparam tag for type parameter ''{0}''
inspection.scaladoc.problem.param.not.allowed=@param tag isn't allowed here
inspection.scaladoc.problem.tparam.not.allowed=@tparam tag isn't allowed here
inspection.scaladoc.problem.tparam.not.supported.by.scaladoc.in.type.alias=Scaladoc ya no puede manejar tparams en alias de tipo
missing.tag.parameter=Parámetro de etiqueta faltante
unknown.scaladoc.tag=Etiqueta Scaladoc desconocida
family.name.scala.scaladoc=Scala\: Scaladoc
private.shadow.description=Parámetros de clase sombras superclase var
private.shadow.rename.identifier=Rebautizar
private.shadow.compiler.option.label=<html>Utilice sólo la opción del compilador -Xlint\:private-shadow</code></html>
private.shadow.fatal.warnings.label=<html><code>-Xfatal-warnings</code> (<code>-Werror</code>) Error de opción del compilador</html>
fix.private.shadow.compiler.option.label=Mostrar solo como -Xlint:private-shadow
fix.private.shadow.fatal.warnings.label=-Xlint: marca advertencias fatales como posibles errores
rename.variable.pattern=Cambiar el nombre del patrón variable
convert.to.stable.identifier.pattern=Se convierte al patrón de identificador `{0}`
replace.with.questionmark=Reemplazar con ?
add.case=Añadir 'caso'
replace.with.star=Reemplazar con *
replace.with.as=Cambiar a 'como'
replace.with.name.followed.by.star=Reemplazar con ''{0}*''
replace.with.and.char=Reemplazar con \\&
suggest.converting.wildcards=<html>Sugiero convertir comodines (<code>Seq[_]</code> &rarr <code>Seq[?]</code>)</html>
suggest.adding.case.in.for.comprehensions=<html>Sugiero agregar <code>case</code> al <code>for</code>-comprehension</html>
suggest.using.star.instead.of.underscore=<html>Sugiero usar <code>*</code> en lugar de <code>_</code> dentro de la declaración de importación</html>
suggest.using.as.instead.of.arrow=<html>Sugiero usar <code>as</code> en lugar de <code>=&gt;</code> dentro de la declaración de importación</html>
suggest.converting.vararg.splices=<html>Sugiero convertir el empalme vararg (<code>seq: _*</code> &rarr <code>seq*</code>)</html>
suggest.converting.named.wildcard.patterns=<html>Sugerir convertir patrones de comodines con nombre a (<code>seq@_*</code> &rarr <code>seq*</code>)</html>
suggest.using.and.instead.of.with=<html>Sugerir usar <code>&</code> en lugar de <code>with</code> en tipos complejos</html>
specs2.builtin.matcher.alternative.exists=Hay coincidencias disponibles
specs2.use.builtin.matcher=Reemplazar con comparador incorporado
suppress.inspection.function=Supresión de funciones
suppress.inspection.typeAlias=Suprimir alias de tipo
suppress.inspection.variable=Suprimir la definición de variable
scala.compiler.will.replace.this.argument.list.with.tuple=El compilador de Scala convierte esta lista de argumentos en una tupla.
make.tuple.explicit=Crear tuplas explícitamente
use.option.type=Usando el tipo de opción
use.underscore.initializer=_Usar inicializador
variable.with.null.initializer=Variables con inicializadores nulos
convertible.to.method.value.anonymous.hint=Convertir al valor del método
convertible.to.method.value.eta.hint=Eliminar marcadores de posición innecesarios
syntactic.sugar.could.be.used=Puedes usar azúcar gramatical.
unary.operation.can.use.prefix.notation=Use prefix notation for unary operators
return.keyword.is.redundant=No es necesario devolver palabras clave
remove.unnecessary.semicolon=Eliminar puntos y comas innecesarios
unnecessary.semicolon=Punto y coma innecesario
targetname.cannot.be.empty=El nombre externo de @targetName no debe estar vacío
all.but.last.targetname.annotation.ignored=Sólo se ignora la última anotación @targetName. Considere usar solo una anotación @targetName por definición
targetname.multiple.targets=La anotación @targetName tiene múltiples objetivos
definition.with.operator.name.should.have.targetname.annotation=Dado que la definición tiene un nombre de operador, también debe tener la anotación @targetName
override.definition.should.not.have.targetname.annotation=Dado que la anotación @targetName no está en el miembro que se anula, tampoco debería estar en la definición.
override.definition.misses.targetname.annotation=La definición no tiene anotación de nombre de destino @targetName(''{0}'')
override.definition.has.different.target.name=@targetName{''{0}'') es necesario porque hay otra anotación de nombre de destino en la definición.
fix.targetname.annotation=Modificar la anotación @targetName
add.targetname.annotation=Agregar la anotación @targetName
add.type.annotation=Agregar anotación de tipo
quickfix.modify.code.style=Editar estilo de código...
type.annotation.required.for={0} requiere anotación de tipo
comparing.unrelated.types.hint=Comparando tipos no relacionados\: {0} y {1}
missing.explicit.type.in.isinstanceof.call=Se llamó a isInstanceOf sin un tipo explícito. El comportamiento depende de la versión específica del compilador porque depende de que el compilador inserte cualquier tipo que satisfaga los límites de tipo.
type.check.can.be.replaced.by.pattern.matching=Puede reemplazar la verificación de tipos con la coincidencia de patrones
inspection.option.enabled=Usar
inspection.option.check.compiler=Utilizado por {0}
inspection.option.check.compiler.unnamed=Usado en opciones del compilador.
inspection.option.disabled=Desactivado
abstract.value.used.in.trait=Valores abstractos utilizados en propiedades.
abstract.variable.used.in.trait=Variables abstractas utilizadas en características.
convert.val.to.var=Convertir ''val'' a ''var''
var.could.be.a.val=Var puede ser val
convert.var.to.val=Convertir ''var'' a ''val''
family.name.scala.general=Escala\: general
applied.type.lambda.can.be.simplified=El tipo lambda aplicado se puede simplificar
simplify.type=Simplificación de tipos
replace.with.star.syntax=Reemplazar con `*`-sintaxis
kind.projector.deprecated.tip=El marcador de posición ''?'' está en desuso. Utilice ''*'' en su lugar.
kind.projector.deprecated.tip.with.update=El marcador de posición ''?'' está en desuso. En su lugar, utilice ''*'' después de actualizar el complemento kind-projector.
kind.projector.replace.lambda.with.lambda.char=Proyector tipo\: Convertir lambda a λ
kind.projector.replace.lambda.char.with.lambda=Proyector tipo\: Convertir λ a lambda
kind.projector.code.style.setting.use.lambda.char=Kind Proyector\: Cambiar configuración de estilo de código\: Usar λ en lugar de lambda
kind.projector.code.style.setting.use.lambda.word=Kind Proyector\: Cambiar configuración de estilo de código\: Usar lambda en lugar de λ
invocation.index.out.of.bounds=La llamada produce una excepción IndexOutOfBoundsException. ¿Color? ¿Qué? Fuera de rango.
invocation.no.such.element=La llamada produce una NoSuchElementException. ¿Colección? ¿Siempre? Esta vacio.
condition.always.true=¿Condiciones? Es cierto
condition.always.false=¿Condiciones? Es falso
expression.always.zero=¿Expresión? va a 0
expression.always.null=La expresión siempre se evalúa como nula
