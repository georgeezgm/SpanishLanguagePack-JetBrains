# Sample: Boolean b = "true"; -> Boolean b = Boolean.valueOf("true");
access.static.via.class.reference.family=클래스 참조를 통해 static에 액세스
access.static.via.class.reference.text=클래스 ''{2}'' 참조를 통해 static ''{1}.{0}''에 액세스합니다.
access.static.via.class.reference.title=클래스 참조를 통해 static에 액세스
add.0.to.classpath=''{0}''을(를) 클래스 경로에 추가
add.annotation.attribute.name=''{0}='' 추가
add.annotation.attribute.name.family.name=어노테이션 속성 이름 추가
add.catch.clause.family=catch 절에 예외 추가
add.catch.clause.text='catch' 절을 추가합니다.
add.class.to.extends.list=''{0}''이(가) ''{1}''을(를) 확장하도록 설정
add.compiler.option.fix.name=''{0}''을(를) 모듈 컴파일러 옵션에 추가
add.constructor.parameter.name=생성자 매개변수 추가
add.constructor.parameters=생성자 매개변수 추가
add.default.branch.to.variable.initializing.switch.fix.name=''{0}''을(를) 초기화하는 ''switch'' 문에 ''default'' 브랜치 추가
add.default.constructor.family=디폴트 생성자 추가
add.default.constructor.text=인수가 없는 {0} 생성자를 {1}에 추가합니다.
add.docTag.to.custom.tags=사용자 지정 태그에 ''@{0}'' 추가
add.docTag.to.custom.tags.preview=이 태그를 이 검사에서 무시할 사용자 지정 태그 목록에 추가합니다.
add.exception.from.field.initializer.to.constructor.throws.family.text=클래스 생성자 시그니처에 예외를 추가합니다
add.exception.from.field.initializer.to.constructor.throws.text=클래스 {0, choice, 0#디폴트 생성자|1#생성자|2#생성자} 시그니처에 예외를 추가합니다.
add.exception.to.existing.catch.chooser.title=catch 블록 선택
add.exception.to.existing.catch.family=기존 catch 절에 예외 추가
add.exception.to.existing.catch.generic=기존 catch 절에 예외 추가
add.exception.to.existing.catch.no.replacement=''{0}''가 있는 catch에 ''{1}''을(를) 추가
add.exception.to.existing.catch.replacement=''{0}''을(를) 더 일반적인 ''{1}''(으)로 바꾸기
add.exception.to.throws.family=메서드 시그니처에 예외 추가
add.exception.to.throws.inherited.method.warning.text=메서드 ''{0}''이(가) 상속됩니다.\n\
전체 메서드 계층 구조의 메서드 시그니처에 예외를 추가하시겠어요?
add.exception.to.throws.text={0, choice, 0#예외 |2#예외}를 메서드 시그니처에 추가
add.finally.block.family='finally' 블록 추가
add.import=가져오기 추가
add.interface.to.implements.list=''{0}''이(가) ''{1}''을(를) 구현하도록 설정
add.library.copy.files.to.radio.button=''{0}'' 라이브러리 파일을 다음에 복사(&C)
add.library.description.choose.folder=라이브러리를 복사할 디렉터리 선택
add.library.error.cannot.copy=''{0}''을(를) ''{1}''에 복사할 수 없습니다.\n\
({2})
add.library.error.not.found=라이브러리 파일 ''{0}''이(가) 없습니다.
add.library.title.choose.folder=디렉터리 선택
add.library.title.dialog=''{0}'' 라이브러리를 프로젝트에 추가
add.library.use.bundled.library.radio.button={1} 배포의 ''{0}'' 사용(&U)
add.method.body.text=메서드 본문을 추가합니다.
add.method.family=Add method
add.method.qualifier.fix.family=메서드 한정자 추가
add.method.qualifier.fix.text=한정자 ''{0}''을(를) 메서드에 추가합니다
add.method.text=클래스 ''{1}''에 메서드 ''{0}''을(를) 추가합니다.
add.missing.annotation.parameters.fix=누락된 어노테이션 매개변수 {0}을(를) 추가합니다
add.missing.annotation.single.parameter.fix=누락된 어노테이션 매개변수 ''{0}''을(를) 추가합니다
add.missing.nested.patterns.fix.text=누락된 중첩 패턴{0, choice, 1#|2#} 추가
add.modifier.fix=''{0}''을(를) {1}(으)로 만들기
add.modifier.fix.family={0}(으)로 만들기
add.new.array.family=누락된 새 표현식 추가
add.new.array.text=''new {0}[]''을(를) 추가합니다.
add.parameter.from.usage.text=''{0}''을(를) {1,number,ordinal}번째 {2}(으)로 {3} ''{4}''에 추가
add.qualifier=한정자 추가
add.qualifier.original.class.chooser.title=원본 클래스
add.return.statement.text='return' 문을 추가합니다.
add.runtime.exception.to.throws.family=메서드 시그니처에 런타임 예외를 추가
add.runtime.exception.to.throws.text=메서드 시그니처에 ''{0}'' 추가
add.type.arguments.single.argument.text=명시적 타입 인수를 추가합니다.
add.type.arguments.text={0, choice, 1#1번째|2#2번째|3#3번째|4#{0,number}번째} 인수에 명시적 타입 인수를 추가합니다.
add.typecast.cast.text={1}을(를) ''{0}''(으)로 형 변환
add.typecast.convert.text={1}을(를) ''{0}''(으)로 변환
add.typecast.family=형 변환 추가
add.typecast.text=''{0}''(으)로 형 변환합니다.
adjust.method.accepting.functional.expression.fix.family.name=함수 표현식을 수락하는 방법 조정
adjust.method.accepting.functional.expression.fix.text=''{0}()''을(를) ''{1}()''(으)로 바꿉니다.
adjust.package.family=패키지 이름 조정
adjust.package.text=패키지 이름을 ''{0}''(으)로 설정합니다.
annotations.fix=어노테이션
anonymous.class.presentation={0}에서 파생된 익명 클래스
bring.variable.to.scope.family=변수를 범위로 가져오기
bring.variable.to.scope.text=''{0}''을(를) 범위로 가져옵니다.
cannot.change.field.exception=필드 ''{0}'' 타입을 변경할 수 없습니다.\n\
이유: {1}
cannot.create.java.file.error.text={1}에서 {0}.java를 생성할 수 없습니다. {2}
cannot.create.java.file.error.title=파일 생성 실패
cannot.create.java.package.error.text={1}에서 {0}을(를) 생성할 수 없습니다. {2}
cannot.create.java.package.error.title=패키지 생성 실패
change.class.signature.family=클래스 시그니처 변경
change.class.signature.text=''{0}''의 시그니처를 변경하여 ''{1}''와(과) 일치시킵니다.
change.extends.list.family=다음에서 클래스 확장
change.inheritors.visibility.warning.text=상속자의 가시성을 기본 메서드의 가시성으로 변경하시겠어요?
change.inheritors.visibility.warning.title=상속자 변경
change.method.parameters.family=메서드 매개변수 변경
change.method.parameters.text=메서드 매개변수를 ''{0}''(으)로 변경합니다.
change.method.signature.from.usage.family=사용 위치에서 메서드 시그니처 변경
change.method.signature.from.usage.text=''{0}''의 시그니처를 ''{1}({2})''(으)로 변경합니다.
change.new.operator.type.family=새 연산자 타입 변경
change.new.operator.type.text=''{0}''을(를) ''new {1}{2}''(으)로 변경합니다.
change.parameter.class.family=매개변수 클래스 변경
change.parameter.from.usage.text=\ {2} ''{3}''의 {0,number,ordinal} {1}을(를) ''{4}''에서 ''{5}''(으)로 변경
change.to.append.family=StringBuilder 추가 수정
change.to.append.text=''{0}''(으)로 변경합니다.
change.type.family=타입 변경
change.type.text=타입을 ''{0}''(으)로 변경
choose.class.to.move.popup.title=이동할 클래스 선택
choose.constructors.to.add.parameter.to=매개변수를 추가할 생성자 선택
choose.default.value.parameters.popup.title=디폴트 값 매개변수 선택
choose.fields.to.generate.constructor.parameters.for=생성자 매개변수를 생성할 필드 선택
class.initializer.presentation={0} 클래스 이니셜라이저
class.to.import.chooser.title=가져올 클래스
collection.addall.can.be.replaced.with.constructor.fix.description='#ref()' 호출을 매개변수화된 생성자 호출로 바꿀수 있습니다.
collection.addall.can.be.replaced.with.constructor.fix.family.name='addAll()/putAll()' 호출을 매개변수화된 생성자 호출로 바꾸기
collection.addall.can.be.replaced.with.constructor.fix.name=''{0}()'' 호출을 매개변수화된 생성자 호출로 바꾸기
collection.addall.can.be.replaced.with.constructor.fix.options.dialog.title=확인할 클래스 추가
collection.addall.can.be.replaced.with.constructor.fix.options.label=확인할 클래스:
collection.to.array.family.name=변환 '.toArray()' 적용
collection.to.array.text=변환 ''.toArray({0})'' 적용
convert.primitive.to.boxed.type=기본 타입을 박싱된 타입으로 변환
convert.to.string.family=문자 리터럴 수정
convert.to.string.text=문자열 리터럴로 변환합니다.
convert.variable.to.field.in.anonymous.class.fix.name=''{0}''을(를) 익명 객체로 이동
create.accessor.for.unused.field.family=사용하지 않는 필드에 대한 접근자 생성
create.annotation.family=선언에 어노테이션 추가
create.annotation.text=@{0}(으)로 어노테이션 추가
create.block=블록 생성
create.class.from.new.family=새 연산자에서 클래스 생성
create.class.from.usage.family=사용 위치에서 클래스 생성
create.class.from.usage.text={0} ''{1}'' 생성
create.constant.from.usage.family=사용 위치에서 상수 생성
create.constructor.body.command=생성자 본문 생성
create.constructor.family=생성자 생성
create.constructor.from.new.family=새 연산자에서 생성자 생성
create.constructor.from.new.text=생성자를 생성합니다.
create.constructor.from.super.call.family=super() 호출에서 생성자 생성
create.constructor.from.this.call.family=this() 호출에서 생성자 생성
create.constructor.matching.super=super와 일치하는 생성자 생성
create.constructor.text=''{0}''에서 생성자를 생성합니다.
create.element.in.class=''{2}''에서 {0} ''{1}'' 생성
create.field.from.usage.family=사용 위치에서 필드 생성
create.field.text=필드 {0}을(를) 생성합니다.
create.getter=getter 생성
create.getter.and.setter.for.field=''{0}''의 getter 및 setter 생성
create.getter.for.field=''{0}''의 getter 생성
create.inner.class.from.usage.text=내부 {0} ''{1}''을(를) 생성합니다.
create.local.from.instanceof.usage.family=instanceof의 사용 위치에서 지역 변수 생성
create.local.from.instanceof.usage.text=''({0}){1}'' 선언을 삽입합니다.
create.local.from.usage.family=사용 위치에서 로컬 생성
create.member.from.usage.family=사용 위치에서 멤버 생성
create.method.body=메서드 본문 생성
create.method.from.usage.family=사용 위치에서 메서드 생성
create.method.from.usage.text=메서드 ''{0}''을(를) 생성합니다.
create.parameter.from.usage.family=사용 위치에서 매개변수 생성
create.property.from.usage.family=사용 위치에서 프로퍼티 생성
create.property.from.usage.full.text=''{1}''에서 프로퍼티 ''{0}''을(를) 생성합니다.
create.property.from.usage.text=프로퍼티 ''{0}''을(를) 생성합니다.
create.property.text=프로퍼티 {0}을(를) 생성합니다.
create.read.only.property.from.usage.full.text=''{1}''에서 읽기 전용 프로퍼티 ''{0}''을(를) 생성합니다.
create.read.only.property.from.usage.text=읽기 전용 프로퍼티 ''{0}''을(를) 생성합니다.
create.service=서비스 생성
create.service.implementation=서비스 구현 생성
create.service.implementation.fix.family.name=서비스 구현 클래스 생성
create.service.implementation.fix.name=클래스 ''{0}'' 생성
create.service.interface.fix.family.name=서비스 생성
create.service.interface.fix.name=서비스 ''{0}'' 생성
create.setter=setter 생성
create.setter.for.field=''{0}''의 setter 생성
create.type.parameter.from.usage.chooser.title=타입 매개변수를 추가할 위치
create.type.parameter.from.usage.family=사용 위치에서 타입 매개변수 생성
create.type.parameter.from.usage.text=타입 매개변수 ''{0}''을(를) 생성합니다.
create.write.only.property.from.usage.full.text=''{1}''에서 쓰기 전용 프로퍼티 ''{0}''을(를) 생성합니다.
create.write.only.property.from.usage.text=쓰기 전용 프로퍼티 ''{0}''을(를) 생성합니다.
defer.final.assignment.with.temp.family=임시 변수를 사용하여 최종 대입 연기
defer.final.assignment.with.temp.text=temp 변수를 사용하여 ''{0}''(으)로의 대입을 연기합니다.
delete.body.text=메서드 본문을 삭제합니다.
delete.catch.family=catch 삭제
delete.catch.text=''{0}''에 대한 catch를 삭제합니다.
delete.reference.fix.text=참조를 삭제합니다.
delete.return.fix.family=반환 삭제
delete.return.fix.side.effects.text=반환 {0}을(를) 삭제하고 부수 효과를 추출합니다.
delete.return.fix.text=반환 {0}을(를) 삭제합니다.
delete.unreachable.statement.fix.text=도달할 수 없는 구문 삭제
enable.optimize.imports.on.the.fly='설정 | 에디터 | 일반 | 자동 가져오기 | import 문 즉시 최적화' 활성화
exchange.extends.implements.keyword=''{0} {2}''을(를) ''{1} {2}''(으)로 변경
extend.sealed.name=''{0}''이(가) ''{2}''을(를) {1, choice, 1#확장|2#구현}하도록 설정
extend.sealed.title=''{0}''이(가) ''{2}''을(를) {1, choice, 1#확장|2#구현}하도록 만들고
extract.side.effects={0, choice, 1#부수 효과|2#부수 효과} 추출
extract.side.effects.convert.to.if='if' 문으로서 부수 효과 추출
extract.side.effects.family.name=부수 효과를 추출하는 구문 삭제
field.to.import.chooser.title=가져올 필드
fix.add.special.annotation.family=특수 어노테이션에 추가
fix.add.special.annotation.text=''{0}''을(를) 특수 어노테이션 목록에 추가합니다
fix.add.write.annotation.description=묵시적으로 작성된 필드를 표시하는 어노테이션 목록에 ''@{0}''을(를) 추가합니다.<p>이 목록은 추후에 ''진입점 | 어노테이션''의 ''사용되지 않는 선언'' 검사 설정에서 편집할 수 있습니다.
fix.add.write.annotation.text=''@{0}'' 어노테이션이 추가된 필드를 묵시적으로 작성된 것으로 간주
fix.argument.family=인수 수정
fix.expression.role.argument=인수
fix.expression.role.expression=표현식
fix.expression.role.lambda.return=람다 반환
fix.expression.role.literal=리터럴
fix.expression.role.nth.argument={0, choice, 1#1번째|2#2번째|3#3번째|4#{0,number}번째} 인수
fix.expression.role.qualifier=한정자
fix.javadoc.family=Javadoc 수정
fix.modifiers.family=제어자 수정
fix.parameter.type.family=매개변수 타입 수정
fix.parameter.type.text=''{0}''이(가) 타입 ''{1}''의 매개변수를 취하도록 만듭니다.
fix.receiver.parameter.name.family=리시버 매개변수의 이름 고치기
fix.receiver.parameter.type.family=리시버 매개변수 타입 수정
fix.receiver.parameter.type.text=둘러싸는 클래스 타입으로 변경
fix.return.type.family=반환 타입 수정
fix.return.type.or.predecessor.text=''{0}''이(가) ''{1}'' 또는 상위 항목을 반환하도록 만듭니다
fix.return.type.text=''{0}''이(가) ''{1}''을(를) 반환하도록 설정
fix.single.character.string.to.char.literal.family=리터럴 타입 수정
fix.single.character.string.to.char.literal.text={0}을(를) {1}(으)로 변경({2} 리터럴로)합니다.
fix.super.method.return.type.family=상위 메서드 반환 타입 수정
fix.super.method.return.type.text=''{0}''이(가) ''{1}''을(를) 반환하도록 만듭니다.
fix.throws.list.add.exception=''{0}''을(를) ''{1}'' throws 목록에 추가
fix.throws.list.family=throws 목록 수정
fix.throws.list.remove.exception=''{0}''을(를) ''{1}'' throws 목록에서 제거
fix.unused.symbol.injection.family=종속성 삽입 어노테이션에 추가
fix.unused.symbol.injection.text=''{0}''(으)로 어노테이션이 추가된 경우 사용되지 않는 경고 억제
fix.variable.type.family=변수 타입 수정
fix.variable.type.text={0} ''{1}'' 타입을 ''{2}''(으)로 변경합니다.
generate.overloaded.method.or.constructor.with.default.parameter.values=디폴트 매개변숫값을 사용해 오버로드된 {0} 생성 
generate.overloaded.method.with.default.parameter.values=디폴트 매개변숫값을 사용해 오버로드된 메서드 생성 
implement.methods.fix=메서드 구현
implement.or.extend.fix.extend.text=''{0}''이(가) ''{1}''을(를) 확장하도록 만들기
implement.or.extend.fix.family=필수 기본 클래스를 구현/확장
implement.or.extend.fix.implement.text=''{0}''이(가) ''{1}''을(를) 구현하도록 만들기
import.class.fix=클래스 가져오기
initialize.final.field.in.constructor.choose.dialog.title=초기화를 추가할 생성자 선택
initialize.final.field.in.constructor.name=생성자에서 초기화
insert.empty.parenthesis='()' 삽입
insert.new.fix=new 삽입
insert.sam.method.call.fix.family.name=단일 추상 메서드 호출 삽입
insert.sam.method.call.fix.name=''.{0}''을(를) 삽입하여 함수 인터페이스 메서드 호출
insert.super.constructor.call.family=기반 클래스 생성자 호출 삽입
intention.move.parenthesis.name=닫는 괄호 배치 수정
iterate.iterable=반복
java.8.collection.removeif.inspection.description=루프를 'Collection.removeIf'로 변경할 수 있습니다
java.8.collection.removeif.inspection.fix.name=루프를 'Collection.removeIf'로 변경
java.8.list.replaceall.inspection.description=루프는 'List.replaceAll'로 대체될 수 있습니다
java.8.list.replaceall.inspection.fix.name=루프를 'List.replaceAll'로 대체
java.8.list.sort.inspection.description=Collections.sort를 List.sort로 바꿀수 있습니다.
java.8.list.sort.inspection.fix.name=List.sort로 바꾸기
java.8.map.api.inspection.description=단일 ''Map.{0}'' 메서드 호출로 바꿀수 있습니다.
java.8.map.api.inspection.fix.family.name=단일 Map 메서드 호출로 바꾸기
java.8.map.api.inspection.fix.text=''{0}'' 메서드 호출로 바꿉니다.
java.9.merge.module.statements.fix.family.name=다른 ''{0}'' 지시문과 병합
java.9.merge.module.statements.fix.name=다른 ''{0} {1}'' 지시문과 병합
make.annotation.applicable.to.0.fix=어노테이션을 {0}에 적용 가능하도록 만들기
make.class.an.interface.family=클래스를 인터페이스로 만들기
make.class.an.interface.text=''{0}''을(를) 인터페이스로 만듭니다.
make.final.copy.to.temp=''{0}''을(를) {1} 임시 변수로 복사
make.final.family=final 설정
make.interface.an.class.text=''{0}''을(를) 클래스로 만듭니다.
make.receiver.parameter.first.family=리시버 매개변수를 처음으로 설정
make.receiver.parameter.first.text='this'를 목록 맨 앞으로 이동
make.vararg.parameter.last.family=vararg 매개변수를 마지막에 배치
make.vararg.parameter.last.text=''{0}''을(를) 목록 끝으로 이동합니다.
merge.duplicate.attributes.family=중복 속성 병합
method.is.inherited.warning.title=메서드가 상속됨
method.to.import.chooser.title=가져올 메서드
module.info.add.directive.family.name=module-info.java에 지시문 추가
module.info.add.exports.name=module-info.java에 ''exports {0}'' 지시문 추가
module.info.add.opens.name=module-info.java에 ''opens {0}'' 지시문 추가
module.info.add.requires.name=module-info.java에 ''requires {0}'' 지시문 추가
module.info.add.requires.static.name=''requires static {0}'' 지시문을 module-info.java에 추가
module.info.add.uses.name=module-info.java에 ''uses {0}'' 지시문 추가
move.0.from.module.1.to.2=''{1}'' 모듈에서 ''{2}''(으)로 ''{0}'' 이동
move.0.in.1=''{1}''의 ''{0}'' 이동...
move.bound.class.to.front.fix.text=바운드 ''{0}''을(를) 타입 매개변수 ''{1}''의 바운드 목록의 시작 부분으로 이동합니다.
move.catch.up.family='catch'를 위로 이동
move.catch.up.text=''{0}''에 대한 catch를 ''{1}'' 앞으로 이동합니다.
move.class.in.extend.list.family=확장 목록에서 클래스 이동
move.class.to.package.family=클래스를 패키지로 이동
move.class.to.package.text=패키지 ''{0}''(으)로 이동합니다.
move.class.to.separate.file.family=클래스를 개별 파일로 이동
move.class.to.separate.file.text=클래스 ''{0}''을(를) ''{0}.java''로 이동합니다.
move.file.to.source.root.text=파일을 소스 루트로 이동합니다.
move.switch.branch.up.family=switch 브랜치를 위로 이동
move.switch.branch.up.text=switch 브랜치 ''{0}''을(를) ''{1}'' 앞으로 이동
navigate.duplicate.element.text=중복 {0}(으)로 이동
navigate.variable.declaration.family=변수 선언으로 이동
navigate.variable.declaration.text=이전에 선언된 변수 ''{0}''(으)로 이동합니다.
negation.broader.scope.family=넓은 범위 부정
negation.broader.scope.text=''!({0})''(으)로 변경합니다.
new.method.body.template.error.text="새 메서드 본문" 템플릿을 수정하세요
new.method.body.template.error.title=파일 템플릿 오류
optimize.imports.fix=import 문 최적화
orderEntry.fix.add.dependency.on.module=모듈 ''{0}''에 종속성 추가
orderEntry.fix.add.dependency.on.module.choose=모듈에 종속성 추가...
orderEntry.fix.add.library.to.classpath=라이브러리 ''{0}''을(를) 클래스 경로에 추가
orderEntry.fix.choose.module.to.add.dependency.on=종속성을 추가할 모듈 선택
orderEntry.fix.circular.dependency.warning=모듈 ''{0}''에 종속성을 추가하면 모듈 ''{1}'' 및 ''{2}'' 간의 순환 종속성이 삽입됩니다.\n\
종속성을 추가하시겠어요?
orderEntry.fix.family.add.library.to.classpath=라이브러리를 클래스 경로에 추가
orderEntry.fix.family.add.library.to.classpath.options=라이브러리를 클래스 경로에 추가...
orderEntry.fix.family.add.module.dependency=모듈 종속성 추가
orderEntry.fix.title.circular.dependency.warning=순환 종속성 경고
permute.arguments=순열 인수
popup.title.choose.library.to.add.dependency.on=종속성을 추가할 라이브러리 선택
qualify.method.call.family=메서드 호출 정규화
qualify.method.call.fix=''{0}''(으)로 호출 정규화
remove.annotation.fix.family=어노테이션 제거
remove.annotation.fix.text=''@{0}'' 어노테이션 제거
remove.class.from.extends.list=''{0}''이(가) ''{1}''을(를) 확장하지 않도록 설정
remove.interface.from.implements.list=''{0}''이(가) ''{1}''을(를) 구현하지 않도록 설정
remove.modifier.fix=''{0}''을(를) {1}이(가) 아니도록 만들기
remove.modifier.fix.family={0}(으)로 만들지 않음
remove.override.fix.family=재정의 제거
remove.override.fix.text=메서드 선언에서 재정의 어노테이션 제거
remove.parameter.from.usage.text={2} ''{3}''에서 {0,number,ordinal}번째 {1}을(를) 제거
remove.parameter.list=매개변수 목록 제거
remove.qualifier.action.text=한정자를 제거합니다
remove.qualifier.fix=한정자 제거
remove.redundant.arguments.family=중복 인수 제거
remove.redundant.arguments.text=''{0}''을(를) 호출하려면 중복 인수를 제거합니다.
remove.redundant.nested.patterns.fix.text=불필요한 중첩 패턴{0, choice, 1#|2#} 제거
remove.redundant.str.processor=불필요한 'STR' 프로세서 제거
remove.suppression.action.family=억제 제거
remove.suppression.action.name=''{0}'' 억제 제거
remove.unreachable.branches=도달할 수 없는 브랜치 제거
remove.unused.element.family=사용하지 않는 {0} 제거
rename.wrong.reference.family=잘못된 참조 이름 변경
rename.wrong.reference.text=참조 이름을 변경합니다.
replace.for.each.loop.with.iterator.for.loop='for each' 루프를 반복자 'for' 루프로 바꾸기
replace.with.getter=getter로 바꾸기
replace.with.getter.setter=getter/setter로 바꾸기
replace.with.list.access.text=목록 액세스로 바꿉니다.
replace.with.qualifier.text=한정자로 바꾸기
replace.with.qualifier.text.role={0}을(를) 한정자로 바꾸기
replace.with.setter=setter로 바꾸기
replace.with.type.pattern.fix=타입 패턴으로 바꾸기
reuse.variable.declaration.family=이전의 변수 재활용
reuse.variable.declaration.text=이전의 변수 ''{0}'' 재활용
safe.delete.family=안전한 삭제
safe.delete.text=안전한 삭제 ''{0}''
seal.class.from.permits.list.fix=상속자 봉인
searching.for.usages.progress.title=사용 위치 검색 중...
setup.jdk.location.family=JDK 위치 설정
setup.jdk.location.text=JDK를 설정합니다.
side.effect.action.cancel=취소(&C)
side.effect.action.remove=제거(&R)
side.effect.action.transform=변환(&T)
side.effects.warning.dialog.title=부수 효과 발견
simplify.boolean.expression.extracting.side.effects=\ 부수 효과 추출
simplify.boolean.expression.family=부울 표현식 단순화
simplify.boolean.expression.text=''{0}''을(를) {1}(으)로 단순화합니다.
static.import.constant.kind.text=static 상수
static.import.constant.text=static 상수를 가져옵니다.
static.import.method.choose.method.to.import=가져올 메서드 선택
static.import.method.kind.text=정적 메서드
static.import.method.text=static 메서드 가져오기
super.class.constructors.chooser.title=상위 클래스 생성자 선택
surround.annotation.parameter.value.with.quotes=어노테이션 매개변숫값을 따옴표로 둘러싸기
surround.with.array.initialization=배열 이니셜라이저로 둘러싸기
surround.with.try.catch.fix=try/catch로 둘러싸기
target.class.chooser.title=타깃 클래스 선택
target.method.chooser.title=타깃 메서드 선택
uidesigner.change.bound.field.type=바운드 필드 타입 변경
uidesigner.change.gui.component.type=GUI 구성 요소 타입 변경
unwrap.array.initializer.fix=배열 이니셜라이저를 해당 요소로 바꾸기
wrap.expression.using.static.accessor.family=표현식 래핑
wrap.expression.using.static.accessor.text=''{0}()''을(를) 사용하여 줄 바꿈합니다.
wrap.expression.using.static.accessor.text.role={1}을(를) ''{0}()''을(를) 사용하여 래핑
wrap.with.adapter.call.family.name=호출이나 새로운 객체를 사용하여 조정
wrap.with.adapter.parameter.multiple.text=''{1}''을(를) 사용하여 {0, choice, 1#1번째|2#2번째|3#3번째|4#{0,number}번째} 인수 조정
wrap.with.adapter.parameter.single.text=''{0}''을(를) 사용하여 인수 조정
wrap.with.adapter.text=''{0}''을(를) 사용하여 조정
wrap.with.adapter.text.role=''{0}''을(를) 사용하여 {1} 조정
wrap.with.block=블록으로 래핑
wrap.with.optional.parameter.text=''java.util.Optional''을 사용하여 {0, choice, 1#1번째|2#2번째|3#3번째|4#{0,number}번째} 인수 래핑
wrap.with.optional.single.parameter.text='java.util.Optional'을 사용하여 줄 바꿈합니다.