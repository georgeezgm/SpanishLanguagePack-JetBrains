java.basic.completion.activate=Si presiona {0} para activar la finalización básica, verá el menú de consulta nuevamente.
java.basic.completion.choose.first=Puede seleccionar el primer elemento en el menú de consulta presionando {0}.
java.basic.completion.choose.item=Desde el menú de consulta, seleccione {0} y presione {1}.
java.basic.completion.complete=Haga clic en {0} para completar esta declaración.
java.basic.completion.deeper.level=static A veces es necesario consultar la lista de sugerencias para encontrar una constante o un método. Toca dos veces {0} para mostrarlo en la lista de búsqueda.
java.basic.completion.module.promotion=Puede encontrar más detalles sobre la refactorización en el módulo {0}.
java.debug.workflow.confirm.hot.swap=Confirmar el reemplazo del <strong> intercambio en caliente</strong>.
java.debug.workflow.drop.frame=El método ha sido parcheado, pero el {0} obsoleto todavía se está ejecutando y la excepción se ha vuelto a lanzar. Eliminemos el marco y volvamos al estado anterior a la llamada {1}. {2} Haga clic en el panel de depuración o presione {3}.
java.debug.workflow.hotswap.disabled.warning=<strong>핫스왑</strong> 기능이 IDE 설정에서 비활성화 되어있습니다. {0} | {1} | {2} <strong>→</strong> {3}에서 기능을 활성화하거나 <callback id="{4}">클릭하여 기능을 활성화</callback>하세요.
java.debug.workflow.invalid.drop=이런. 이번 학습에서 계획되지 않은 동작을 수행한 것 같습니다. 학습을 재시작해 주세요.
java.debug.workflow.no.confirmation=<strong>핫스왑</strong>이 백그라운드에서 자동 완료되었습니다. 관련 메시지는 왼쪽 하단 모서리에서 확인할 수 있습니다.
java.debug.workflow.rebuild=Los programas grandes pueden tardar mucho en ejecutarse de nuevo. Si encuentra un error en el método puro, simplemente reconstruya el proyecto para aplicar la función de JVM <strong> hot-swap</strong>. Construyamos el proyecto {0} o {1}.
java.editor.coding.assistance.press.to.fix={0}을(를) 눌러 인수를 빈 배열로 바꾸세요.
java.extract.method.edit.method.name=새 메서드 이름을 편집하거나 IDE가 제안한 이름을 유지하세요. 그런 다음 {0}을(를) 누르세요.
java.find.help.link=파일 내에서 타깃 검색
java.find.occurrences.close.search.tool=Puede usar este atajo para navegar entre usos descubiertos recientemente incluso con el panel de búsqueda cerrado. Presione {0} para cerrar el panel de búsqueda.
java.find.occurrences.find.next=<ide /> copia automáticamente el texto seleccionado en el campo de búsqueda. Averigüemos dónde usarlo a continuación. Presione {0} o {1}.
java.find.occurrences.find.next.in.editor=Busque el siguiente uso con {0}.
java.find.occurrences.find.previous=Presione {0} para volver al uso anterior.
java.find.occurrences.find.previous.in.editor=Presione {0} para volver.
java.find.occurrences.invoke.find=Ha seleccionado {0} para esta lección. Presione {1} para iniciar una búsqueda de texto completo del archivo actual.
java.find.occurrences.lesson.name=Buscar anterior/siguiente
java.find.occurrences.note.about.cyclic=<strong> Nota\:</strong> La búsqueda es cíclica, al tocar dos veces {0} en la última aparición se establecerá la última aparición en el rango de selección. {1} también es cíclico.
java.find.occurrences.search.closed.warning=Presione {0} para volver a abrir el campo de búsqueda.
java.inheritance.hierarchy.choose.any.implementation=Elija una implementación y presione o haga clic en {0}.
java.inheritance.hierarchy.goto.implementation=Haga clic en {0} para buscar {1} implementaciones.
java.inheritance.hierarchy.help.link=소스 코드 계층 구조
java.inheritance.hierarchy.hide.find.tool.window=Presione {0} para ocultar la ventana de herramientas {1}.
java.inheritance.hierarchy.hide.method.hierarchy={0} También vamos a escondernos. Presione {1} nuevamente.
java.inheritance.hierarchy.invoke.implementations.again=La declaración del método principal tiene su propio icono de margen {0}. Haga clic o presione {1} nuevamente.
java.inheritance.hierarchy.last.note=<strong> Nota\:</strong> Las acciones {0} y {1} también se aplican a las clases. Las acciones {2} {3} rara vez se utilizan, pero siempre se pueden encontrar como {4} usando el filtro {5}.
java.inheritance.hierarchy.lesson.name=Jerarquía de herencia
java.inheritance.hierarchy.navigate.to.base=Puede pasar de un método derivado a un súper método. Presione {0} o presione el icono {1} en el margen del editor.
java.inheritance.hierarchy.open.class.hierarchy=Presione {0} para obtener una vista previa de la descripción general de la jerarquía de clases.
java.inheritance.hierarchy.open.in.find.tool.window=Para jerarquías grandes, se recomienda buscar implementaciones en la ventana de herramientas {0}. Haga clic en {1}.
java.inheritance.hierarchy.open.method.hierarchy=Es una buena idea revisar toda la jerarquía de este método. Presione {0}.
java.missed.sdk.click.setup=<ide/> 컴퓨터에서 JDK를 찾을 수 없습니다. JDK는 Java 프로그램을 실행하고 코드 지원을 제공하기 위해 JDK가 필요합니다. JDK를 구성하려면 강조 표시된 {0} 링크를 클릭하세요.
java.missed.sdk.configure=제안된 옵션 중 하나를 사용하여 JDK를 구성합니다. 이 파일을 다운로드하거나 컴퓨터의 기존 JDK 홈 디렉터리에 대한 경로를 지정할 수 있습니다.
java.missed.sdk.read.more.tip=<strong>팁</strong>: jdk에 대한 자세한 내용은<a href=''{0}''>설명서</a>를 참조하세요.
java.missed.sdk.show.options=사용 가능한 옵션을 보려면 클릭하세요.
java.missed.sdk.wait.installation=IDE에서 JDK를 설치하는 동안 잠시 기다려 주세요.
java.onboarding.apply.action={0} 액션을 선택하고 {1}을(를) 누르세요.
java.onboarding.apply.intention={0}을(를) 선택한 후 {1}을(를) 누르세요.
java.onboarding.balloon.about.debug.panel={0} 도구 창은 다양한 디버그 액션을 갖춘 {1,choice,0#툴바|1#툴바}를 제공합니다. 나중에 {2} 수업을 수강하여 이 액션을 사용해보세요.
java.onboarding.balloon.click.here=여기를 클릭하여 중단점을 설정하세요
java.onboarding.balloon.open.file=두 번 클릭하여 {0}을(를) 여세요
java.onboarding.balloon.open.learn.toolbar={0} 도구 창으로 전환하여 이 수업을 계속 진행하세요
java.onboarding.balloon.project.view=클릭하여 <strong>프로젝트 뷰</strong>를 여세요
java.onboarding.balloon.source.directory={0} 디렉터리를 확장하여 프로젝트 소스 파일을 보세요
java.onboarding.balloon.start.debugging=아이콘을 클릭하여 디버그를 시작하세요
java.onboarding.balloon.stop.debugging=아이콘을 클릭하여 디버그를 시작하세요
java.onboarding.case.changed=대/소문자가 변경되었습니다.
java.onboarding.change.ui.settings=이 수업에서 IDEA는 일부 UI 설정을 기본 상태로 변경합니다. 이 수업을 완료하거나 종료하면 해당 환경 설정이 복원됩니다.
java.onboarding.choose.values.item=이제 {0}을(를) 입력하여 코드 완성 목록을 줄이거나 이 항목을 선택하고 {1}을(를) 누를 수도 있습니다.
java.onboarding.epilog=축하합니다. 온보딩 투어를 마쳤습니다. 이제 다음을 진행할 수 있습니다.\n\
- 학습 프로젝트 <callback id="{0}">닫기</callback>{1}\n\
- 더 많은 수업 <callback id="{2}">보기</callback>
java.onboarding.feedback.system.current.jdk=현재 JDK:
java.onboarding.feedback.system.found.jdks=발견된 JDK:
java.onboarding.feedback.system.jdk.at.start=시작 시 JDK:
java.onboarding.feedback.system.lang.level=언어 수준:
java.onboarding.finish.exit=데모 프로젝트 닫기
java.onboarding.finish.modules=수업 더보기
java.onboarding.finish.text=IDEA 온보딩 투어를 완료했습니다.\n\
java.onboarding.finish.title=축하합니다
java.onboarding.indexing.description=처음으로 프로젝트를 열면 <ide/>에서 JDK 및 프로젝트 자체를 검사하여 코딩 지원에 필요한 세부 정보를 수집합니다. 계속하려면 색인화가 완료될 때까지 기다리세요.
java.onboarding.invoke.completion=이제 마침표를 입력하여 사용할 수 있는 모든 코드 완성 옵션을 표시합니다.
java.onboarding.invoke.completion.balloon=마침표 {0}를 입력하면 사용할 수 있는 모든 코드 완성 옵션이 표시됩니다
java.onboarding.invoke.completion.tip=<strong>팁</strong>: 입력 시에 <ide/>이(가) 자동으로 완성 옵션을 표시합니다. 또한, {0}을(를) 눌러 코드의 어디에서든 완성 옵션을 표시할 수도 있습니다.
java.onboarding.invoke.intention.for.code=인텐션도 시간을 절약하고 코드 작성을 더욱 쉽게 만듭니다. 인텐션을 활용하여 문자열 연결의 서식을 다시 지정해 보겠습니다. {0}을(를) 눌러 사용할 수 있는 옵션을 표시하세요.
java.onboarding.invoke.intention.for.code.balloon={0}을(를) 누르면 사용할 수 있는 인텐션이 표시됩니다
java.onboarding.invoke.intention.for.warning.1=방금 버그를 수정했지만 이 코드를 더욱 깔끔하게 만들 수 있습니다. IDEA는 향상될 여지가 있는 코드 줄을 강조 표시하고 노란색 전구를 추가합니다.
java.onboarding.invoke.intention.for.warning.2={0}을(를) 눌러 경고를 미리 보고 빠른 수정을 적용하세요.
java.onboarding.invoke.intention.for.warning.balloon={0}을(를) 누르면 사용할 수 있는 빠른 수정이 표시됩니다
java.onboarding.invoke.search.everywhere.1=<ide/>에서 작업할 때 프로젝트, 심볼, 클래스 또는 IDE 액션 내의 파일을 검색하고자 하는 경우가 있습니다. 이번 수업에서는 {0} 액션을 검색하여 {1} 문자열을 소문자로 만들어 봅시다.
java.onboarding.invoke.search.everywhere.2={0}을(를) 두 번 눌러 {1} 대화상자를 여세요.
java.onboarding.lesson.name=IDEA 알아보기
java.onboarding.module.description={0}의 주요 기능에 관한 간략한 개요입니다.
java.onboarding.module.name=온보딩 투어
java.onboarding.project.view.description=<strong>프로젝트 뷰</strong>는 주요 도구 창 중 하나입니다. 이 뷰는 프로젝트 디렉터리, SDK 전용 외부 라이브러리, 스크래치 파일을 포함합니다. 줄무늬 버튼을 클릭해 열면 데모 프로젝트를 미리보기 할 수 있습니다. {0}을(를) 눌러 열 수도 있습니다.
java.onboarding.run.options.community=예를 들어 코드를 실행하고 {0}, 디버그하고 {1}, 커버리지로 실행할 수 있습니다 {2}.
java.onboarding.run.options.ultimate=예를 들어 코드를 실행하고 {0}, 디버그하고 {1}, 프로파일 처리한 다음 {2}, 커버리지로 실행할 수 있습니다 {3}.
java.onboarding.run.sample=이제 현재 파일을 실행해 봅니다. {0}을(를) 클릭하거나 {1}을(를) 누르세요.
java.onboarding.run.sample.balloon=현재 파일을 실행해봅시다. {0}을(를) 클릭하거나 {1}을(를) 누르세요.
java.onboarding.search.everywhere.description=보시다시피 선택한 텍스트, {0}이(가) 자동으로 입력 문자열에 복사되었습니다. {0} 대신 {1}을(를) 입력해봅시다.
java.onboarding.select.fix=첫 번째 항목 적용: {0}. 이 경우 <strong>for-each</strong> 반복문을 사용하면 코드가 더 이해하기 쉬워집니다.
java.onboarding.start.debugging={0} 아이콘을 클릭하여 디버그 프로세스를 시작하세요
java.onboarding.stop.debugging=디버그를 시작해봅시다. {0} 아이콘을 클릭하세요.
java.onboarding.temporary.configuration.description=데모 샘플을 여셨습니다. 이제 실행해 봅시다! 툴바의 강조 표시된 영역에서 선택된 구성에 자주 사용되는 실행 액션을 볼 수 있습니다.
java.onboarding.toggle.breakpoint.1={1} 메서드가 필요한 값인 {0} 대신 {2}을(를) 반환하는 것을 눈치채셨을 것입니다. return 문으로 가서 문제 코드를 디버그해봅시다.
java.onboarding.toggle.breakpoint.2=강조 표시된 영역에서 여백을 클릭하여 중단점을 설정하세요.
java.onboarding.type.division=코드에서 문제를 발견했으니 수정해보겠습니다. 결과 합을 값의 길이로 나눕니다. 학습 스크립트가 이미 {0}을(를) 입력합니다.
java.onboarding.wait.indexing=IDE에서 JDK 파일을 인덱싱하는 동안 잠시 기다려 주세요.
java.postfix.completion.complete=목록에서 {0}을(를) 선택하거나 에디터에 같은 값을 입력하세요. {1}을(를) 눌러 구문을 완성하세요.
java.postfix.completion.type=괄호 뒤에 {0}을(를) 입력하여 접미사 완성 제안 목록을 확인하세요.
java.refactoring.menu.confirm.constant=Este diálogo le permite elegir el nombre, la clase principal y la visibilidad de la nueva constante. Mantenga el valor predeterminado y presione {0} o haga clic en {1}.
java.refactoring.menu.inline.variable=Ahora insertemos la variable {0} para reducir su uso a uno. Puede filtrar el menú de refactorización presionando {1} y <strong> iv</strong> (<strong> i</strong> nline <strong> variable). Seleccione este elemento o presione {2}.
java.refactoring.menu.inline.variable.eng=이제 {0} 변수의 사용 위치 1개를 해당 변수를 정의하는 표현식으로 바꿔봅시다. {1}을(를) 누르고 <strong>iv</strong>(<strong>i</strong>nline <strong>v</strong>ariable)로 리팩터링 메뉴를 필터링할 수 있습니다. 이 항목을 선택하거나 {2}을(를) 누르세요.
java.refactoring.menu.introduce.constant=Finalmente, extraigamos la extensión del nombre del archivo. De manera similar, presione {0} y filtre por <strong> ic</strong> (<strong> i</strong> ntroduzca <strong> c</strong> onstant) o presione {1}.
java.refactoring.menu.introduce.constant.eng=마지막으로 파일 이름에서 확장자를 추출해봅시다. 마찬가지로 {0}을(를) 누르고 <strong>ic</strong>(<strong>i</strong>ntroduce <strong>c</strong>onstant)로 필터링하거나 {1}을(를) 누르세요.
java.rename.confirm.accessors.rename=<ide /> detectará ese getter/setter y sugerirá cambiarle el nombre en consecuencia. Ahora presione {0} o haga clic en {1}.
java.rename.press.rename=Cambie el nombre del campo {1} presionando {0}.
java.rename.type.new.name=Ingrese un nuevo nombre para este campo (por ejemplo: {0}) y presione {1}.
java.run.configuration.lets.run=Puede ejecutar código arbitrario marcado con {0}. Ejecutemos un ejemplo simple usando {1}. Como alternativa, puede hacer clic en {0} para seleccionar {2}.
java.smart.type.completion.apply=La finalización de tipo inteligente filtra la lista de sugerencias para incluir solo aquellos tipos que son aplicables dentro del contexto actual. Presione {0} para ver una lista de sugerencias coincidentes. Presione {1} para seleccionar el primer elemento.
java.smart.type.completion.return=La finalización de tipo inteligente también puede sugerir código para declaraciones de retorno. Presione {0} para ver el menú de consulta de la declaración de devolución. Presione {1} para seleccionar el primer elemento.
java.statement.completion.complete.condition=Agrega la condición entre paréntesis {0} y luego presiona {1} para pasar a la sintaxis {2}.
java.statement.completion.complete.finish.body=Ingrese {0} en una línea y presione {1} para completar la declaración y aplicar el formato.
java.statement.completion.complete.for=Presione {0} para completar la declaración {1}.
java.statement.completion.complete.if=Ingrese {0} y presione {1} para generar la declaración.
java.statement.completion.help.link=구문 완성
java.statement.completion.lesson.name=Declaración completa
toggle.case.part=대/소문자
