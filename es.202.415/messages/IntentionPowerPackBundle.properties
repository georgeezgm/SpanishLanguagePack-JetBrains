replace.fully.qualified.name.with.import.intention.name=Reemplace los nombres completos con declaraciones de 'importación'
replace.fully.qualified.name.with.import.intention.family.name=Reemplace los nombres completos con declaraciones de importación
extract.to.method.reference.intention.name=Extraer por referencia de método
merge.parallel.ifs.intention.name=Fusionar declaraciones 'si'
merge.parallel.ifs.intention.family.name=Fusionar declaraciones if paralelas
merge.else.if.intention.name=Fusionar declaraciones 'si no'
merge.else.if.intention.family.name=Fusionar declaraciones else if
change.to.end.of.line.comment.intention.name=Reemplazar con comentarios end-of-line
change.to.end.of.line.comment.intention.family.name=Reemplazar con comentarios end-of-line
replace.for.each.loop.with.indexed.for.loop.intention.name=Reemplace el bucle 'para cada' con un bucle 'for' indexado
replace.for.each.loop.with.iterator.for.loop.intention.name=Reemplace el bucle for-each con el bucle iterador 'for'
replace.for.each.loop.with.indexed.for.loop.intention.family.name=Reemplazar bucle para cada bucle con bucle for indexado
replace.for.each.loop.with.optimized.indexed.for.loop.intention.name=Reemplace el bucle para cada con un bucle 'for' optimizado e indexado
replace.for.each.loop.with.optimized.indexed.for.loop.intention.family.name=Reemplace los bucles para cada uno con bucles for optimizados e indexados
replace.for.each.loop.with.iterator.for.loop.intention.family.name=Reemplazar bucle para cada con iterador para bucle
replace.while.loop.with.do.while.loop.intention.name=Reemplace el bucle 'mientras' con el bucle 'hacer mientras'
replace.while.loop.with.do.while.loop.intention.family.name=Reemplace el bucle while con el bucle do while
replace.do.while.loop.with.while.loop.intention.name=Reemplace el bucle 'hacer mientras' con el bucle 'mientras'
replace.do.while.loop.with.while.loop.intention.family.name=Reemplace el bucle do while con el bucle while
expand.boolean.declaration.intention.name=Ampliar las declaraciones booleanas a declaraciones 'if else'
expand.boolean.return.intention.name=Ampliar los retornos booleanos a declaraciones 'if else'
expand.boolean.assignment.intention.name=Ampliar las asignaciones booleanas a declaraciones 'if else'
expand.boolean.intention.family.name=expansión booleana
split.else.if.intention.name=Dividir declaraciones 'si no'
split.else.if.intention.family.name=Dividir otra declaración si
convert.to.nested.if.intention.name=Convertir a múltiples declaraciones 'if'
convert.to.nested.if.intention.family.name=Extender un booleano a múltiples declaraciones if
join.concatenated.string.literals.intention.name=Combinando literales de cadena concatenados
join.concatenated.string.literals.intention.family.name=Unir literales de cadena concatenados
replace.switch.with.if.intention.name=Reemplace las declaraciones de 'cambio' con declaraciones 'si'
replace.switch.with.if.intention.family.name=Reemplace la declaración de cambio con la declaración if
constant.expression.intention.family.name=Cálculo de valor constante
create.assert.intention.name=Generar aserciones JUnit
create.assert.intention.family.name=Generar aserciones JUnit
merge.if.or.intention.name=Fusionar declaraciones secuenciales 'if'
merge.if.or.intention.family.name=Fusionar declaraciones if secuenciales
merge.if.and.intention.name=Fusionar declaraciones 'if' anidadas
merge.if.and.intention.family.name=Fusionar declaraciones if anidadas
replace.concatenation.with.string.buffer.intention.name=Reemplace '+' con 'StringBuffer.append()'
replace.concatenation.with.string.builder.intention.name=Reemplace '+' con 'StringBuilder.append()'
replace.concatenation.with.string.buffer.intention.family.name=Reemplazar + con StringBuilder.append()
move.comment.to.separate.line.intention.name=Mover comentarios a líneas separadas
move.comment.to.separate.line.intention.family.name=Mover comentarios a líneas separadas
convert.integer.to.hex.intention.name=Convertir a hexadecimal
convert.integer.to.hex.intention.family.name=Convertir a hexadecimal
convert.integer.to.binary.intention.name=Convertir a binario
convert.integer.to.binary.intention.family.name=Convertir a número binario
convert.to.scientific.notation.intention.name=Convertir a punto flotante
convert.to.scientific.notation.intention.family.name=Convertir a punto flotante
convert.to.plain.intention.name=Convertir a texto sin formato
convert.to.plain.intention.family.name=Convertir a texto sin formato
convert.integer.to.decimal.intention.name=Convertir a decimal
convert.integer.to.decimal.intention.family.name=Convertir a decimal
change.to.c.style.comment.intention.name=Reemplazar con comentario de bloque
change.to.c.style.comment.intention.family.name=Reemplazar con comentario de bloque
convert.integer.to.octal.intention.name=Convertir a octal
convert.integer.to.octal.intention.family.name=Convertir a octal
split.declaration.and.initialization.intention.name=Dividir en declaración e inicializador
split.declaration.and.initialization.intention.family.name=Dividir declaración e inicializador
char.to.string.intention.name=Reemplazo de caracteres literales con cadenas
char.to.string.intention.family.name=reemplazar carácter con cadena
replace.equality.with.equals.intention.name=Reemplace '\=\=' con 'igual()'
replace.equality.with.not.equals.intention.name=Reemplace '\!\=' con 'igual()'
make.call.chain.into.call.sequence.intention.name=Extender una cadena de llamadas a un método a una secuencia de llamadas
make.call.chain.into.call.sequence.intention.family.name=Extender una cadena de llamadas a una secuencia de llamadas
merge.call.sequence.to.chain.intention.name=Fusionar llamadas a métodos secuenciales en una cadena de llamadas
merge.call.sequence.to.chain.intention.family.name=Fusionar llamadas a métodos secuenciales en una cadena de llamadas
detail.exceptions.intention.name=Mostrar detalles de excepción
detail.exceptions.intention.family.name=Mostrar detalles de excepción
flip.conditional.intention.name=Invertir '?\:'
flip.conditional.intention.family.name=inversión condicional
replace.equals.with.equality.intention.name=Reemplace '.equals()' con '\=\='
replace.equals.with.equality.intention.family.name=Reemplazar iguales con igualdad
replace.shift.with.multiply.intention.family.name=Reemplazar Mayús con Multiplicar
demorgans.intention.family.name=ley de demorgan
flip.comparison.intention.family.name=Invertir comparación
flip.conjunction.intention.family.name=Invertir operandos concatenados
negate.comparison.intention.family.name=Negar comparación
flip.commutative.method.call.intention.family.name=Invertir llamada a método conmutativo
constant.subexpression.intention.family.name=Calcular valores constantes de subexpresiones
extract.increment.intention.family.name=Extracción incremental
inline.increment.intention.family.name=Incremento/Decremento en línea
flip.assert.literal.intention.family.name=Inversión literal de afirmación
replace.assert.literal.with.assert.equals.intention.family.name=Reemplace afirmarTrue, afirmarFalse o afirmarNul con afirmarEquals
replace.multiply.with.shift.intention.family.name=Reemplazar multiplicar con turno
replace.with.operator.assignment.intention.family.name=Reemplazo de asignación con asignación de operador
convert.interface.to.class.intention.name=Convertir a declaración de 'clase'
convert.interface.to.class.intention.family.name=Convertir interfaz en clase
replace.on.demand.import.intention.name=Reemplazado con una declaración de importación de una sola clase
replace.on.demand.import.intention.family.name=Reemplace declaraciones de importación de clase única con declaraciones de importación bajo demanda
replace.operator.assignment.with.assignment.intention.family.name=Reemplazo de asignación de operador con asignación
convert.catch.to.throws.intention.name=Reemplace la sección 'capturar' con la declaración 'lanzar'
convert.catch.to.throws.intention.family.name=Reemplace la sección de captura con la declaración de lanzamiento
wrap.vararg.arguments.with.explicit.array.intention.name=Envolviendo argumentos vararg con creación de matriz implícita
wrap.vararg.arguments.with.explicit.array.intention.family.name=Envolviendo argumentos vararg con creación de matriz implícita
extract.while.loop.condition.to.if.statement.intention.name=Extraiga condiciones en declaraciones internas 'si'
extract.while.loop.condition.to.if.statement.intention.family.name=Extraiga la condición del bucle while en la declaración if interna
replace.concatenation.with.format.string.intention.name=Reemplace '+' con 'String.format()'
replace.concatenation.with.format.string.intention.name.formatted=Reemplace '+' con 'formateado()'
replace.concatenation.with.format.string.intention.family.name=Reemplace la concatenación de cadenas con String.format()
replace.format.string.with.concatenation.intention.name=Reemplace 'String.format()' con concatenación
replace.format.string.with.concatenation.intention.family.name=Reemplace String.format() con concatenación
copy.concatenated.string.to.clipboard.intention.name=Copiar texto de concatenación de cadenas al portapapeles
copy.string.literal.to.clipboard.intention.name=Copiar texto literal de cadena al portapapeles
copy.concatenated.string.to.clipboard.intention.family.name=Copiar texto de concatenación de cadenas al portapapeles
flip.expression.intention.family.name=Invertir expresión binaria
flip.setter.call.intention.family.name=Invertir llamada de armador
eliminate.parentheses.intention.name=Quitar paréntesis
reverse.for.loop.direction.intention.family.name=Invertir para bucle
reverse.for.loop.direction.intention.name=Invertir para bucle
replace.operator.assignment.with.postfix.expression.intention.family.name=Reemplazo de asignaciones de operadores con expresiones de sufijo
replace.postfix.expression.with.operator.assignment.intention.family.name=Reemplazo de expresiones postfix con asignaciones de operadores
replace.postfix.expression.with.assignment.intention.family.name=Reemplazo de expresiones de sufijo con asignaciones
replace.assignment.with.postfix.expression.intention.family.name=Reemplazar con expresión de sufijo
annotate.overridden.methods.intention.family.name=Anotar métodos primordiales y parámetros relacionados
annotate.overridden.methods.intention.method.name=Comentar el método primordial con ''{0}''
annotate.overridden.methods.intention.parameters.name=Comente el mismo parámetro en el método de anulación con ''{0}''
replace.arm.with.try.finally.intention.name=\Reemplazar la declaración 'probar con recursos' por la declaración 'intentar finalmente'
replace.arm.with.try.finally.intention.family.name=\ Reemplace la declaración try-with-resources con una declaración try finalmente
merge.nested.try.statements.intention.name=Fusionar declaraciones anidadas de 'prueba'
merge.nested.try.statements.intention.family.name=Fusionar declaraciones de prueba anidadas
obscure.thrown.exceptions.intention.family.name=Reemplace la excepción en la cláusula throws con una excepción única más genérica
change.modifier.intention.name=Cambiar el controlador de acceso
change.variable.type.to.rhs.type.intention.family.name=Cambiar el tipo de variable al tipo de inicializador
unicode.unescape.intention.name=Reemplazar escapes Unicode con caracteres
unicode.unescape.intention.family.name=Reemplazo de escapes Unicode con caracteres sin escape
replace.octal.escape.with.unicode.escape.intention.name=Reemplace los escapes octales con escapes Unicode
replace.octal.escape.with.unicode.escape.intention.family.name=Reemplace los escapes octales con escapes Unicode
negate.conditional.intention.name='?\:' negación
negate.conditional.intention.family.name=Negación condicional
objects.require.non.null.intention.name=Usando la expresión 'java.util.Objects.requireNonNull()'
objects.require.non.null.intention.family.name=Usando la expresión 'java.util.Objects.requireNonNull()'
postfix.prefix.intention.family.name=Invertir expresiones de prefijo/sufijo
replace.conditional.with.boolean.expression.intention.family.name=Reemplazar expresión condicional con expresión booleana
replace.conditional.with.boolean.expression.intention.name=Reemplace '?\:' con una expresión booleana
replace.with.arrays.as.list.intention.family.name=Reemplazar con 'Arrays.asList()'
replace.with.mutable.collection.intention.family.name=Reemplazar con colección mutable
flip.smth.intention.name=Invertir ''{0}''
flip.smth.intention.name1=Invertir ''{0}''(Cambio semántico)
flip.comparison.intention.name=Invertir ''{0}'' a ''{1}''
negate.comparison.intention.name=''{0}'' negativo
negate.comparison.intention.name1=Negar ''{0}'' como ''{1}''
flip.commutative.method.call.intention.name=Invertir ''{0}()''
flip.commutative.method.call.intention.name1=''.{0}()'' inversión (el significado puede cambiar)
constant.expression.intention.name=Calcular el valor constante de ''{0}''
status.bar.escape.highlighting.message=Para eliminar el resaltado, presione ESC.
1.fully.qualified.name.status.bar.escape.highlighting.message=Un nombre completo ha sido reemplazado por una declaración de importación (presione Escape para eliminar el resaltado).
multiple.fully.qualified.names.status.bar.escape.highlighting.message={0} nombres completos reemplazados por declaraciones de importación (presione Escape para eliminar el resaltado).
press.escape.to.remove.highlighting.message=Para eliminar el resaltado, presione ESC.
extract.increment.intention.name=Extraer ''{0}''
inline.increment.intention.name=''{0}'' en línea
replace.assert.literal.with.assert.equals.intention.name=Reemplace ''{0}()'' con ''assertEquals({1},...)''
replace.assert.literal.with.assert.equals.intention.name2=Reemplace ''{0}()'' con ''assertEquals()''
replace.assert.literal.with.assert.equals.intention.name1=Reemplace ''{0}()'' con ''assertEquals(..., {1},...)''
flip.setter.call.intention.name=Invertir llamada de armador
adapter.to.listener.intention.name=Reemplace la extensión ''{0}'' con la implementación ''Listener''
adapter.to.listener.intention.family.name=Reemplazar la extensión del adaptador con la implementación del oyente
change.variable.type.to.rhs.type.intention.name=Declarar ''{0}'' como tipo ''{1}''
intention.category.annotations=Java/Anotaciones
intention.category.numbers=Java/Números
intention.category.boolean=Java/Booleano
intention.category.conditional.operator=Java/operadores condicionales
intention.category.shift.operation=Operaciones Java/Shift
intention.category.junit=Java/JUnit
intention.category.declaration=Java/Declaración
intention.category.imports=Java/Declaración de importación
intention.category.comments=Java/Anotaciones
intention.category.control.flow=Java/Flujo de control
intention.category.strings=Java/Cadenas
intention.category.modifiers=Java/Controlador
intention.category.try.statements=Declaración Java/'intentar'
intention.category.other=Java/Otro
0.is.declared.in.1.but.when.public.should.be.declared.in.a.file.named.2={0} se declara en {1}, pero público debe declararse en el nombre del archivo {2}.
0.will.have.incompatible.access.privileges.with.super.1={0} tiene permisos de acceso que son incompatibles con su padre {1}.
0.will.no.longer.be.visible.from.overriding.1={0} ya no aparece en la anulación de {1}.
0.will.have.incompatible.access.privileges.with.overriding.1={0} tiene un permiso de acceso que es incompatible con la anulación {1}.
0.already.extends.1.and.will.not.compile.after.converting.2.to.a.class=Para {0}, que implementa {2}, ya se extiende a {1}() y no se compilará después de la conversión de clase de {2}.
change.modifier.text=Hacer de ''{0}'' un {1}
convert.datapoints.fix.family.name=Convertir el titular de la anotación @DataPoint
make.method.default.family.name=Crear valor predeterminado del método
create.missing.switch.branches.family.name=Crear rama de 'cambio' faltante
