replace.fully.qualified.name.with.import.intention.name=정규화된 이름을 'import' 문으로 대체
replace.fully.qualified.name.with.import.intention.family.name=정규화된 이름을 import 문으로 대체
extract.to.method.reference.intention.name=메소드 참조로 추출
merge.parallel.ifs.intention.name='if' 문 병합
merge.parallel.ifs.intention.family.name=병렬 if 문 병합
merge.else.if.intention.name='else if' 문 병합
merge.else.if.intention.family.name=else if 문 병합
change.to.end.of.line.comment.intention.name=end-of-line 주석으로 교체
change.to.end.of.line.comment.intention.family.name=end-of-line 주석으로 교체
replace.for.each.loop.with.indexed.for.loop.intention.name='for-each' 루프를 색인 생성된 'for' 루프로 교체
replace.for.each.loop.with.iterator.for.loop.intention.name=for-each 루프를 반복자 'for' 루프로 교체
replace.for.each.loop.with.indexed.for.loop.intention.family.name=for-each 루프를 색인 생성된 for 루프로 교체
replace.for.each.loop.with.optimized.indexed.for.loop.intention.name=for-each 루프를 최적화 및 색인 생성된 'for' 루프로 교체
replace.for.each.loop.with.optimized.indexed.for.loop.intention.family.name=for-each 루프를 최적화 및 색인 생성된 for 루프로 교체
replace.for.each.loop.with.iterator.for.loop.intention.family.name=for-each 루프를 반복자 for 루프로 교체
replace.while.loop.with.do.while.loop.intention.name='while' 루프를 'do while' 루프로 교체
replace.while.loop.with.do.while.loop.intention.family.name=while 루프를 do while 루프로 교체
replace.do.while.loop.with.while.loop.intention.name='do while' 루프를 'while' 루프로 교체
replace.do.while.loop.with.while.loop.intention.family.name=do while 루프를 while 루프로 교체
#expand.boolean.intention.name=Convert to 'if else'
expand.boolean.declaration.intention.name=부울 선언을 'if else' 문으로 확장
expand.boolean.return.intention.name=부울 반환을 'if else' 문으로 확장
expand.boolean.assignment.intention.name=부울 할당을 'if else' 문으로 확장
expand.boolean.intention.family.name=부울 확장
split.else.if.intention.name='else if' 문 분할
split.else.if.intention.family.name=else if 문 분할
convert.to.nested.if.intention.name=여러 'if' 문으로 변환
convert.to.nested.if.intention.family.name=부울을 여러 if 문으로 확장
join.concatenated.string.literals.intention.name=연결된 문자열 리터럴 결합
join.concatenated.string.literals.intention.family.name=연결된 문자열 리터럴 결합
replace.switch.with.if.intention.name='switch' 문을 'if' 문으로 교체
replace.switch.with.if.intention.family.name=switch 문을 if 문으로 교체
constant.expression.intention.family.name=상수값 계산
create.assert.intention.name=JUnit 어설션 생성
create.assert.intention.family.name=JUnit 어설션 생성
merge.if.or.intention.name=순차적 'if' 문 병합
merge.if.or.intention.family.name=순차적 if 문 병합
merge.if.and.intention.name=중첩된 'if' 문 병합
merge.if.and.intention.family.name=중첩된 if 문 병합
replace.concatenation.with.string.buffer.intention.name='+'를 'StringBuffer.append()'로 교체
replace.concatenation.with.string.builder.intention.name='+'를 'StringBuilder.append()'로 교체
replace.concatenation.with.string.buffer.intention.family.name=+를 StringBuilder.append()로 교체
move.comment.to.separate.line.intention.name=주석을 별도의 줄로 이동
move.comment.to.separate.line.intention.family.name=주석을 별도의 줄로 이동
convert.integer.to.hex.intention.name=Convertir a hexadecimal
convert.integer.to.hex.intention.family.name=16진수로 변환
convert.integer.to.binary.intention.name=Convertir a binario
convert.integer.to.binary.intention.family.name=2진수로 변환
convert.to.scientific.notation.intention.name=부동 소수점으로 변환
convert.to.scientific.notation.intention.family.name=부동 소수점으로 변환
convert.to.plain.intention.name=일반 텍스트로 변환
convert.to.plain.intention.family.name=일반 텍스트로 변환
convert.integer.to.decimal.intention.name=Convertir a decimal
convert.integer.to.decimal.intention.family.name=10진수로 변환
change.to.c.style.comment.intention.name=블록 주석으로 교체
change.to.c.style.comment.intention.family.name=블록 주석으로 교체
convert.integer.to.octal.intention.name=Convertir a octal
convert.integer.to.octal.intention.family.name=8진수로 변환
split.declaration.and.initialization.intention.name=Dividir en declaración e inicializador
split.declaration.and.initialization.intention.family.name=Dividir declaración e inicializador
char.to.string.intention.name=문자 리터럴을 문자열로 교체
char.to.string.intention.family.name=문자를 문자열로 교체
replace.equality.with.equals.intention.name='\=\='를 'equals()'로 교체
replace.equality.with.not.equals.intention.name='\!\='를 'equals()'로 교체
make.call.chain.into.call.sequence.intention.name=메소드 호출 체인을 호출 시퀀스로 확장
make.call.chain.into.call.sequence.intention.family.name=호출 체인을 호출 시퀀스로 확장
merge.call.sequence.to.chain.intention.name=순차적 메소드 호출을 호출 체인으로 병합
merge.call.sequence.to.chain.intention.family.name=순차적 메소드 호출을 호출 체인으로 병합
detail.exceptions.intention.name=예외 세부 정보 표시
detail.exceptions.intention.family.name=예외 세부 정보 표시
flip.conditional.intention.name='?\:' 반전
flip.conditional.intention.family.name=조건 반전
replace.equals.with.equality.intention.name='.equals()'를 '\=\='로 교체
replace.equals.with.equality.intention.family.name=equals를 상등식으로 교체
replace.shift.with.multiply.intention.family.name=시프트를 멀티플라이로 교체
demorgans.intention.family.name=드모르간 법칙
flip.comparison.intention.family.name=Invertir comparación
flip.conjunction.intention.family.name=Invertir operandos concatenados
negate.comparison.intention.family.name=Negar comparación
flip.commutative.method.call.intention.family.name=Invertir llamada a método conmutativo
constant.subexpression.intention.family.name=하위 표현식의 상수값 계산
extract.increment.intention.family.name=증분 추출
inline.increment.intention.family.name=증분/감소 인라인화
flip.assert.literal.intention.family.name=어설션 리터럴 반전
replace.assert.literal.with.assert.equals.intention.family.name=assertTrue, assertFalse 또는 assertNul을 assertEquals로 교체
replace.multiply.with.shift.intention.family.name=멀티플라이를 시프트로 교체
replace.with.operator.assignment.intention.family.name=대입을 연산자 대입으로 교체
convert.interface.to.class.intention.name='class' 문으로 변환
convert.interface.to.class.intention.family.name=인터페이스를 클래스로 변환
replace.on.demand.import.intention.name=단일 클래스 import 문으로 교체
replace.on.demand.import.intention.family.name=단일 클래스 import 문으로 온디맨드 import 문으로 교체
replace.operator.assignment.with.assignment.intention.family.name=연산자 대입을 대입으로 교체
convert.catch.to.throws.intention.name='catch' 섹션을 'throw' 선언으로 교체
convert.catch.to.throws.intention.family.name=catch 섹션을 throw 선언으로 교체
wrap.vararg.arguments.with.explicit.array.intention.name=vararg 인수를 묵시적 배열 생성으로 래핑
wrap.vararg.arguments.with.explicit.array.intention.family.name=vararg 인수를 묵시적 배열 생성으로 래핑
extract.while.loop.condition.to.if.statement.intention.name=조건을 내부 'if' 문으로 추출
extract.while.loop.condition.to.if.statement.intention.family.name=while 루프 조건을 내부 if 문으로 추출
replace.concatenation.with.format.string.intention.name='+'를 'String.format()'으로 교체
replace.concatenation.with.format.string.intention.name.formatted='+'를 'formatted()'로 교체
replace.concatenation.with.format.string.intention.family.name=문자열 연결을 String.format()으로 교체
replace.format.string.with.concatenation.intention.name='String.format()'을 연결로 교체
replace.format.string.with.concatenation.intention.family.name=String.format()을 연결로 교체
copy.concatenated.string.to.clipboard.intention.name=문자열 연결 텍스트를 클립보드에 복사
copy.string.literal.to.clipboard.intention.name=문자열 리터럴 텍스트를 클립보드에 복사
copy.concatenated.string.to.clipboard.intention.family.name=문자열 연결 텍스트를 클립보드에 복사
flip.expression.intention.family.name=이진 표현식 반전
flip.setter.call.intention.family.name=setter 호출 반전
eliminate.parentheses.intention.name=소괄호 제거
reverse.for.loop.direction.intention.family.name=for 루프의 역방향
reverse.for.loop.direction.intention.name=for 루프의 역방향
replace.operator.assignment.with.postfix.expression.intention.family.name=연산자 대입을 접미사 표현식으로 교체
replace.postfix.expression.with.operator.assignment.intention.family.name=접미사 표현식을 연산자 대입으로 교체
replace.postfix.expression.with.assignment.intention.family.name=접미사 표현식을 대입으로 교체
replace.assignment.with.postfix.expression.intention.family.name=접미사 표현식으로 교체
annotate.overridden.methods.intention.family.name=재정의 메소드 및 관련 매개변수 주석 처리
annotate.overridden.methods.intention.method.name=재정의 메소드를 ''{0}''(으)로 주석 처리
annotate.overridden.methods.intention.parameters.name=재정의 메소드의 동일한 매개변수를 ''{0}''(으)로 주석 처리
replace.arm.with.try.finally.intention.name=\ 'try-with-resources' 문을 'try finally' 문으로 교체
replace.arm.with.try.finally.intention.family.name=\ try-with-resources 문을 try finally 문으로 교체
merge.nested.try.statements.intention.name=중첩된 'try' 문 병합
merge.nested.try.statements.intention.family.name=중첩된 try 문 병합
obscure.thrown.exceptions.intention.family.name=throws 절의 예외를 더 일반적인 단일 예외로 교체
change.modifier.intention.name=Cambiar el controlador de acceso
change.variable.type.to.rhs.type.intention.family.name=변수 유형을 이니셜라이저 유형으로 변경
unicode.unescape.intention.name=유니코드 이스케이프를 문자로 교체
unicode.unescape.intention.family.name=유니코드 이스케이프를 이스케이프되지 않은 문자로 교체
replace.octal.escape.with.unicode.escape.intention.name=8진 이스케이프를 유니코드 이스케이프로 교체
replace.octal.escape.with.unicode.escape.intention.family.name=8진 이스케이프를 유니코드 이스케이프로 교체
negate.conditional.intention.name='?\:' 부정
negate.conditional.intention.family.name=조건문 부정
objects.require.non.null.intention.name='java.util.Objects.requireNonNull()' 표현식 사용
objects.require.non.null.intention.family.name='java.util.Objects.requireNonNull()' 표현식 사용
postfix.prefix.intention.family.name=접두사/접미사 표현식 반전
replace.conditional.with.boolean.expression.intention.family.name=조건식을 부울 표현식으로 교체
replace.conditional.with.boolean.expression.intention.name='?\:'를 부울 표현식으로 교체
replace.with.arrays.as.list.intention.family.name='Arrays.asList()'로 교체
replace.with.mutable.collection.intention.family.name=변이 가능한 컬렉션으로 교체

#hand made
flip.smth.intention.name=Invertir ''{0}''
flip.smth.intention.name1=Invertir ''{0}''(Cambio semántico)
flip.comparison.intention.name=Invertir ''{0}'' a ''{1}''
negate.comparison.intention.name=''{0}'' 부정
negate.comparison.intention.name1=Negar ''{0}'' como ''{1}''
flip.commutative.method.call.intention.name=''{0}()'' 반전
flip.commutative.method.call.intention.name1=''.{0}()'' 반전(의미가 변경될 수 있음)
constant.expression.intention.name=''{0}''의 상수값 계산
status.bar.escape.highlighting.message=강조 표시를 제거하려면 ESC를 누릅니다.
1.fully.qualified.name.status.bar.escape.highlighting.message=1개의 정규화된 이름이 import 문으로 대체되었습니다(강조 표시를 제거하려면 Escape를 누르기).
multiple.fully.qualified.names.status.bar.escape.highlighting.message={0}개의 정규화된 이름이 import 문으로 대체되었습니다(강조 표시를 제거하려면 이스케이프를 누르세요).
press.escape.to.remove.highlighting.message=강조 표시를 제거하려면 ESC를 누릅니다.
extract.increment.intention.name=''{0}'' 추출
inline.increment.intention.name=''{0}'' 인라인화
replace.assert.literal.with.assert.equals.intention.name=''{0}()''(을)를 ''assertEquals({1},...)''로 교체
replace.assert.literal.with.assert.equals.intention.name2=''{0}()''(을)를 ''assertEquals()''로 교체
replace.assert.literal.with.assert.equals.intention.name1=''{0}()''(을)를 ''assertEquals(..., {1},...)''로 교체
flip.setter.call.intention.name=setter 호출 반전
adapter.to.listener.intention.name=''{0}'' 확장자를 ''Listener'' 구현으로 교체
adapter.to.listener.intention.family.name=어댑터 확장자를 리스너 구현으로 교체
change.variable.type.to.rhs.type.intention.name=''{0}''을(를) ''{1}'' 유형으로 선언


#categories
intention.category.annotations=Java/어노테이션
intention.category.numbers=Java/숫자
intention.category.boolean=Java/부울
intention.category.conditional.operator=Java/조건부 연산자
intention.category.shift.operation=Java/시프트 연산
intention.category.junit=Java/JUnit
intention.category.declaration=Java/선언
intention.category.imports=Java/Import 문
intention.category.comments=Java/주석
intention.category.control.flow=Java/제어 흐름
intention.category.strings=Java/문자열
intention.category.modifiers=Java/제어자
intention.category.try.statements=Java/'try' 문
intention.category.other=Java/기타

#warnings
0.is.declared.in.1.but.when.public.should.be.declared.in.a.file.named.2={0}(이)가 {1}에서 선언되지만 public이 파일 이름 {2}에서 선언되어야 합니다.
0.will.have.incompatible.access.privileges.with.super.1={0}에 상위 {1}와(과) 호환되지 않는 액세스 권한이 있습니다.
0.will.no.longer.be.visible.from.overriding.1={0}이(가) {1} 재정의에서 더 이상 표시되지 않습니다.
0.will.have.incompatible.access.privileges.with.overriding.1={0}에 재정의 {1}와(과) 호환되지 않는 액세스 권한이 있습니다.
0.already.extends.1.and.will.not.compile.after.converting.2.to.a.class={2}(을)를 구현하는 {0}의 경우 이미 {1}()으로 확장되어 {2}의 클래스 변환 이후 컴파일되지 않습니다.
change.modifier.text=Hacer de ''{0}'' un {1}
convert.datapoints.fix.family.name=@DataPoint 어노테이션 holder를 변환
make.method.default.family.name=메소드 디폴트 값 생성
create.missing.switch.branches.family.name=누락된 'switch' 브랜치 생성
