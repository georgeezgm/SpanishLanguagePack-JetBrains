buildsystem.type.gradle.groovy=Gradle Groovy
buildsystem.type.gradle.kotlin=Gradle Kotlin
buildsystem.type.intellij=IntelliJ
buildsystem.type.intellij.full=IntelliJ 빌드 시스템
buildsystem.type.maven=Maven

error.template.not.found=ID가 {0}인 템플릿을 찾을 수 없습니다
error.configurator.not.found=모듈 타입 {0}을(를) 찾을 수 없습니다
error.invalid.module.dependency=모듈 {0}에서 {1}(으)로의 모듈 종속 요소이 잘못되었습니다

module.configuration.group.android.native=Android 네이티브
module.configuration.group.ios=iOS
module.configuration.group.linux=Linux
module.configuration.group.macos=macOS
module.configuration.group.windows.mingw=Windows(MinGW)

module.type=모듈 타입

module.kind.android.module=Android 모듈
module.kind.ios.module=iOS 모듈
module.kind.js.browser.module=JS 브라우저 모듈
module.kind.js.node.module=JS 노드 모듈
module.kind.module=모듈
module.kind.mpp.module=MPP 모듈
module.kind.target=타깃

plugin.buildsystem.setting.type=시스템 빌드
plugin.buildsystem.setting.type.error.wrong.project.kind={1}을(를) 사용해 {0} 프로젝트를 생성할 수 없습니다

plugin.kotlin.downloading.kotlin.versions=Kotlin 버전 목록 다운로드 중
plugin.kotlin.setting.modules=모듈
plugin.kotlin.setting.modules.error.duplicated.modules=이름이 {1}인 모듈이 {0}개 있습니다
plugin.kotlin.setting.modules.error.duplicated.targets=이름이 {1}인 타깃이 {0}개 있습니다

plugin.kotlin.setting.project.kind=프로젝트 종류

project.kind.android=Android
project.kind.kotlin.js=Kotlin/JS
project.kind.multiplatform=멀티플랫폼
project.kind.singleplatform=JVM

project=프로젝트

plugin.structure.setting.location=위치
plugin.structure.setting.location.error.is.not.empty=디렉터리가 비어 있지 않습니다
plugin.structure.setting.name=이름
plugin.structure.setting.group.id=그룹 ID
plugin.structure.setting.artifact.id=아티팩트 ID
plugin.structure.setting.version=버전

plugin.templates.setting.template=프로젝트 템플릿

plugin.android.setting.sdk=Android SDK


validation.should.not.be.blank={0} 지정
validation.identifier={0}은(는) 문자, 숫자{1} 로만 구성되어야 합니다
validation.identifier.additional.symbols=, 그리고 심볼: {0}

version.error.bad.format=설정 {0}의 버전 형식이 올바르지 않습니다
parse.error.no.value.for.key=키 {0}의 값을 찾을 수 없습니다

module.type.jvm=Kotlin/JVM
module.type.js=Kotlin/JS
module.type.common=공통
module.type.android=Android
module.type.native=Kotlin/Native


module.name=모듈 이름

module.configurator.simple.js.browser=브라우저용 JS
module.configurator.simple.js.node=Node.js용 JS

module.configurator.android=Android
module.configurator.android.setting.android.plugin=Android 플러그인
module.configurator.android.setting.android.plugin.application=com.android.application
module.configurator.android.setting.android.plugin.library=com.android.library

module.configurator.common=공통

module.configurator.jvm=JVM
module.configurator.jvm.setting.target.jvm.version=타깃 JVM 버전

module.configurator.mpp=멀티플랫폼
module.configurator.ios=IOS
module.configurator.ios.requires.xcode=Xcode 필요

module.configurator.js.browser=브라우저
module.configurator.js.node=Node.js

module.configurator.js.target.settings.kind=타깃 종류
module.configurator.js.target.settings.compiler=Kotlin/JS 컴파일러
module.configurator.js.target.settings.kind.library=JavaScript 라이브러리
module.configurator.js.target.settings.kind.application=JavaScript 애플리케이션

module.configurator.tests.setting.framework=테스트 프레임워크
module.configurator.tests.setting.framework.junit4=JUnit 4
module.configurator.tests.setting.framework.junit5=JUnit 5
module.configurator.tests.setting.framework.test.ng=TestNG
module.configurator.tests.setting.framework.none=없음
module.configurator.native.for.current.system=내 시스템



project.template.empty.jvm.console.title=콘솔 애플리케이션
project.template.empty.jvm.console.description=Kotlin/JVM을 사용하는 간단한 'Hello World!' 애플리케이션

project.template.mpp.lib.title=라이브러리
project.template.mpp.lib.description=여러 플랫폼에서 공유할 수 있도록 공통 코드를 사용하는 멀티플랫폼 라이브러리

project.template.full.stack.title=풀스택 웹 애플리케이션
project.template.full.stack.description=Kotlin/JS 웹 프런트엔드, Kotlin/JVM 서버 백엔드 및 플랫폼 간에 공유되는 공통 코드를 사용하는 웹 애플리케이션

project.template.native.console.title=네이티브 애플리케이션
project.template.native.console.description=Kotlin/Native를 사용하는 특정 혹은 일부 플랫폼용 네이티브 애플리케이션

project.template.browser.title=브라우저 애플리케이션
project.template.browser.description=Kotlin/JS를 사용하는 웹 프런트엔드 애플리케이션

project.template.react.title=React 애플리케이션
project.template.react.description=Kotlin/JS 및 React UI 프레임워크를 사용하는 웹 프런트엔드 애플리케이션

project.template.nodejs.title=Node.js 애플리케이션
project.template.nodejs.description=Kotlin/JS를 사용하는 Node.js 런타임용 애플리케이션

project.template.mpp.mobile.title=모바일 애플리케이션
project.template.mpp.mobile.description=플랫폼 간 공유되는 공통 코드를 사용하는 iOS 및 Android용 모바일 애플리케이션







module.template.console.jvm.title=콘솔 애플리케이션
module.template.console.jvm.description=콘솔에서 작동하는 단순한 "Hello World!" Kotlin/JVM 애플리케이션입니다

module.template.mpp.mobile.title=모바일 애플리케이션
module.template.mpp.mobile.description=플랫폼 간 공통 코드 공유를 지원하는 Kotlin Multiplatform Mobile을 사용하는 iOS 및 Android용 모바일 애플리케이션입니다.




module.template.ktor.server.title=웹 서버
module.template.ktor.server.description=백엔드 웹 서버

module.template.native.console.title=네이티브 애플리케이션
module.template.native.console.description=사용 중인 운영 체제용인 단순한 Kotlin/Native 애플리케이션입니다

module.template.js.simple.title=브라우저 애플리케이션
module.template.js.simple.description=브라우저를 타깃으로 하는 빈 애플리케이션
module.template.js.simple.run.configuration.dev=연속 모드의 BrowserDevelopmentRun
module.template.js.simple.run.configuration.prod=연속 모드의 BrowserProductionRun
module.template.simple.use.kotlinx.html=kotlinx.html 사용
module.template.simple.use.kotlinx.html.description=HTML 요소 생성 및 DOM 트리 빌드를 위한 타입 안전 Kotlin DSL

module.template.js.react.title=React 애플리케이션
module.template.js.react.description=브라우저를 타깃으로 하는 React 애플리케이션
module.template.react.use.react.router.dom=react-router-dom 사용
module.template.react.use.react.router.dom.description=URL과 UI를 동기화된 상태로 유지하기 위해 탐색 구성 요소를 추가합니다
module.template.react.use.react.redux=react-redux 사용
module.template.react.use.react.redux.description=Redux 기반 상태 컨테이너를 추가합니다

module.template.simple.nodejs.title=Node.js 애플리케이션
module.template.simple.nodejs.description=Node.js를 타깃으로 하는 빈 애플리케이션
module.template.simple.nodejs.use.kotlinx.nodejs=실험적 Node.js API 사용(kotlinx-nodejs)
module.template.simple.nodejs.use.kotlinx.nodejs.description=Node.js 관련 기능에 액세스할 수 있습니다


validation.file.should.exist={0}의 파일이 있어야 합니다
module.configurator.tests.setting.framework.kotlin.test=Kotlin Test
module.configurator.js.target.settings.use.js.ir.description=<html>새 <a href="https://kotlinlang.org/docs/js-ir-compiler.html">Kotlin/JS IR 컴파일러</a>에서 이용 가능한 기능에 관해 자세히 알아보세요</html>
module.configurator.tests.setting.kotlin.test.title=kotlin.test 사용
module.configurator.tests.setting.kotlin.test.desc=<a href="https://kotlinlang.org/api/latest/kotlin.test/">kotlin.test</a> 어노테이션 및 유닛 테스트를 위한 assert 함수를 추가합니다
error.required.settings.are.not.present.0=다음의 필수 설정이 구성되지 않았습니다\n{0}
plugin.structure.setting.group.id.tooltip=조직의 고유한 식별자입니다. IntelliJ 빌드 시스템에는 적용되지 않습니다
plugin.structure.setting.artifact.id.tooltip=프로젝트용 기본 아티팩트의 고유한 이름입니다. IntelliJ 빌드 시스템에는 적용되지 않습니다
plugin.structure.setting.version.tooltip=프로젝트가 생성한 기본 아티팩트의 버전입니다. IntelliJ 빌드 시스템에는 적용되지 않습니다
plugin.templates.setting.template.tooltip=초기 프로젝트 구조를 정의합니다. 목적에 따라 다음 중 하나의 템플릿을 선택하세요.
plugin.android.setting.sdk.tooltip=현재 애플리케이션에 사용되는 Android SDK
module.configurator.android.setting.android.plugin.tooltip=현재 모듈에 사용될 Android Gradle 플러그인
module.configurator.jvm.setting.target.jvm.version.tooltip=이 모듈을 컴파일한 결과로 생성될 JVM 바이트코드의 버전
module.configurator.jvm.setting.target.jvm.test.framework.tooltip=유닛 테스트에 사용되는 프레임워크
module.configurator.js.target.settings.kind.hint=모듈을 컴파일한 결과
module.configurator.js.target.settings.compiler.ir=새 JS IR 컴파일러
module.configurator.js.target.settings.compiler.legacy=디폴트 JS 컴파일러
module.configurator.js.target.settings.compiler.both=모두
error.text.project.importing.error.kotlin.version.0.reason.1=프로젝트 가져오기 오류\nKotlin 버전: {0}\n이유: {1}
error.text.module.0.should.contain.at.least.one.ios.target=모듈 {0}은(는) 하나 이상의 iOS 타깃을 포함해야 합니다
error.text.project.templates.is.not.supported.in.yaml.for.now=프로젝트 템플릿은 현재 yaml에서 지원되지 않습니다
configuration.name.run=실행
error.text.for.setting.0.one.of.1.was.expected.but.2.was.found=''{0}'' 설정에는 [{1}] 중 하나가 필요하지만 ''{2}''이(가) 발견되었습니다
error.text.expected.0.for.1.but.2.was.found=''{1}''에는 {0}이(가) 필요하지만 {2}이(가) 발견되었습니다
module.configurator.js.target.settings.compiler.tooltip='Both'(모두)를 선택하면 디폴트 및 IR 컴파일러 백엔드를 모두 사용해 프로젝트를 컴파일합니다. 이는 두 백엔드와 모두 호환되는 라이브러리를 만들 때 유용합니다.
module.configurator.js.target.settings.use.js.legacy.title=더는 사용되지 않는 JS 레거시 컴파일러 사용