build=빌드
build.something={0} 빌드
generate.xcodeproj=Xcode 프로젝트 생성
run.configuration.name=Kotlin Mobile
run.configuration.description=iOS/Android 애플리케이션
run.configuration.test.name=Kotlin Mobile 테스트
run.configuration.test.description=XCTest/JUnit 테스트
run.configuration.editor.module=모듈:
run.android.started=세션이 프로세스 {0}(으)로 시작되었습니다
run.android.finished=프로세스가 완료되었습니다
run.waiting=기기 대기 중...
run.preparing=애플리케이션 준비 중...
run.installing=애플리케이션 설치 중...
run.installing.tests=테스트 러너 설치 중...
run.starting=애플리케이션 시작 중...
run.starting.tests=테스트 시작 중...
run.configuration.name.common.tests=공통 테스트
run.configuration.name.apple=iOS 앱
run.configuration.name.apple.tests=iOS 라이브러리 테스트
run.configuration.name.apple.tests.xctest=iOS 앱 테스트
run.configuration.name.android=Android 앱
run.configuration.name.android.tests=Android 라이브러리 테스트
run.configuration.device.not.selected=타깃 기기가 선택되지 않았습니다

device.not.selected=선택된 기기가 없음
notification.group.id=모바일
xcodeproj.changed.manually=Xcode 프로젝트가 수동으로 수정되었습니다
xcodeproj.changed.manually.description=Xcode 프로젝트에 대한 변경 내용이 적용되지 않습니다.\nGradle을 사용하여 프로젝트 설정을 구성하세요.
sdk.sync.missing.sdk.title=Android SDK
sdk.sync.missing.sdk.content=Android SDK를 찾을 수 없습니다. SDK를 설치하고 local.properties에 sdk.dir을 설정하세요.
run.configuration.name.android.app.tests=Android 앱 테스트
android.emulator.launch.timeout=에뮬레이터를 시작하지 못했습니다. 시간 초과
android.aapt.empty=AAPT가 ''{0}''에 대해 빈 데이터를 반환했습니다
android.aapt.no.package=AAPT가 패키지 이름을 반환하지 않았습니다
android.aapt.no.main=AAPT가 ''{0}''의 기본 활동 이름을 반환하지 않았습니다
gradle.loading=Gradle Apple 프로젝트 로드 중...
import.build.view.name=가져오기
import.event.start.message=가져오기...
import.event.warning.build.target.not.found.message=타깃 {0}: ({1}, {2}, {3})의 빌드 타깃을 찾을 수 없습니다
import.event.warning.xcframework.slice.not.found.message=타깃 {0}: ({2}, {3})의 {1} 슬라이스를 찾지 못했습니다
import.event.finish.success.message=완료되었습니다
import.event.finish.failure.message=실패
import.event.finish.skipped.message=건너뜀
android.migration.notification.title=Kotlin Android 모듈 마이그레이션
android.migration.notification.suggest=프로젝트에서 Kotlin Android 플러그인을 사용합니다. Kotlin Multiplatform Mobile 개발을 위한 모든 기능을 활용하려면 Kotlin Multiplatform 플러그인으로 마이그레이션하세요.
android.migration.action.name=Kotlin Android에서 Kotlin Multiplatform으로 프로젝트 마이그레이션
android.migration.command.name=Kotlin Android에서 Kotlin Multiplatform으로 마이그레이션
android.migration.not.possible.warning.notification.title=Kotlin Android 플러그인에서 마이그레이션할 수 없습니다.
android.migration.not.possible.warning.notification.message=모듈 ''{0}''에서 이전 스타일의 KMM 프로젝트 구성을 사용하며 자동으로 업데이트할 수 없습니다.\nKotlin Android 플러그인을 수동으로 Kotlin Multiplatform으로 교체하는 것이 좋습니다.
android.migration.action.module.name=Kotlin Android에서 Kotlin Multiplatform으로 모듈 ''{0}'' 마이그레이션
android.migration.force.action.name=Kotlin Android에서 Kotlin Multiplatform으로 프로젝트를 강제 마이그레이션합니다. 이로 인해 Gradle 프로젝트를 다시 로드할 때 오류가 발생할 수 있습니다.
android.migration.force.action.module.name=Kotlin Android에서 Kotlin Multiplatform으로 모듈 ''{0}''을(를) 강제 마이그레이션합니다. 이로 인해 Gradle 프로젝트를 다시 로드할 때 오류가 발생할 수 있습니다.
android.migration.title=Kotlin Android에서 Kotlin Multiplatform으로 모듈 ''{0}'' 마이그레이션
android.migration.dialog.confirm.button.migrate=마이그레이션
android.migration.dialog.confirm.text.intro=다음 ''{0}'' 모듈 종속성은 마이그레이션 후에 이동되지 않습니다.
android.migration.dialog.confirm.text.explanation=이러한 종속성을 사용하는 코드는 빨간색으로 강조 표시될 수 있지만, 프로젝트가 적절하게 컴파일합니다.
android.migration.dialog.confirm.text.question=계속하시겠어요?
android.migration.step.create.sourceset.progress=''{0}'' 소스 세트 생성
android.migration.step.create.kotlin.config.progress=Kotlin 구성 생성
android.migration.step.delete.kotlin.options.progress=Kotlin 옵션 삭제
android.migration.step.remove.unused.dependencies.progress=마이그레이션된 종속성을 기본 범위에서 삭제
android.migration.step.clean.dependencies.progress=최상위 종속성 정리
android.migration.step.replace.plugin.progress=플러그인 바꾸기
android.migration.step.add.kotlin.config.progress=Kotlin 구성 추가
android.migration.intention.action.name=프로젝트 마이그레이션
android.migration.highlighting.pass.description=프로젝트는 Kotlin Android 플러그인을 사용합니다. Kotlin Multiplatform Mobile 개발을 위한 모든 기능을 활용하려면 Kotlin Multiplatform 플러그인으로 마이그레이션하세요.
android.migration.highlighting.pass.tooltip=빌드 파일의 자동 마이그레이션을 실행하고 Android 프로젝트 모듈에서 Kotlin Multiplatform 플러그인 사용을 시작하면 Android 모듈의 모든 AppCode 기능을 사용할 수 있습니다.
android.migration.highlighting.action.name=마이그레이션
android.migration.kotlin.module.0.uses.kotlin.1.message=모듈 ''{0}''은(는) Kotlin 플러그인 버전 {1}을(를) 사용합니다.
android.migration.kotlin.modules.0.uses.kotlin.1.message=모듈 {0}은(는) Kotlin 플러그인 버전 {1}을(를) 사용합니다.
android.migration.kotlin.plugin.suggest.update.to.0.message=마이그레이션된 Gradle 프로젝트를 다시 로드할 때 오류가 발생하지 않도록 플러그인을 버전 {0} 이상으로 수동으로 업그레이드하는 것이 좋습니다.