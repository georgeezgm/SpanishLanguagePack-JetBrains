change.class.parameter.incorrect.type.error.hint=잘못된 타입
change.class.type.parameter.family.name=클래스 타입 매개변수 변경
checkbox.statically.import.matcher.methods=매처 메서드를 정적으로 가져오기
convert.to.atomic.family.name=atomic으로 변환
convert.to.longadder.family.name='LongAdder'로 변환
convert.to.threadlocal.family.name='ThreadLocal'로 변환
guava.functional.primitives.can.be.replaced.by.java.api.problem.description=Guava의 함수 프리미티브 타입을 Java API로 바꿀 수 있습니다
inspection.guava.erase.option=변환된 함수에서 @javax.annotations.Nullable 지우기
inspection.guava.method.chains.option=메서드 체인 보고
inspection.guava.return.types.option=반환 타입 보고
inspection.guava.variables.option=변수 보고
inspection.migrate.assert.to.matcher.description=Assert 표현식 <code>#ref</code>을(를) ''{0}'' 호출로 바꿀 수 있습니다 #loc
migrate.fix.text=<html>''{0}'' 타입을 ''{1}''(으)로 마이그레이션</html>
migrate.guava.to.java.family.name=Guava의 타입을 Java로 마이그레이션
migrate.method.chain.fix.text=메서드 체인 타입을 ''{0}''(으)로 마이그레이션
inspection.guava.name=Guava의 함수 프리미티브 타입을 Java로 바꿀 수 있습니다
inspection.assertion.name=JUnit 어설션은 'assertThat()' 호출일 수 있습니다