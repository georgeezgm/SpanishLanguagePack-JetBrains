
java.basic.completion.choose.first={0}을(를) 눌러 조회 메뉴에서 첫 번째 항목을 선택할 수 있습니다.
java.basic.completion.activate=기본 코드 완성을 활성화하기 위해 {0}을(를) 누르면 조회 메뉴를 다시 확인할 수 있습니다.
java.basic.completion.choose.item=조회 메뉴 내에서 {0}을(를) 선택한 후 {1}을(를) 누릅니다.
java.basic.completion.complete={0}을(를) 눌러 이 구문을 완료하세요.
java.basic.completion.deeper.level=static 상수 또는 메서드의 제안 목록을 확인해야 하는 경우가 있습니다. 이를 조회 목록에 표시하려면 {0}을(를) 두 번 누르세요.
java.basic.completion.module.promotion=리팩터링에 관한 자세한 내용은 {0} 모듈에서 찾을 수 있습니다.

java.run.configuration.lets.run={0}(으)로 표시된 임의의 코드를 실행할 수 있습니다. {1}을(를) 사용하여 간단한 예시를 실행해보겠습니다. 아니면 {0}을(를) 클릭하여 {2} 항목을 선택할 수 있습니다.

java.postfix.completion.type=괄호 뒤에 {0}을(를) 입력하여 접미사 완성 제안 목록을 확인하세요.
java.postfix.completion.complete=목록에서 {0}을(를) 선택하거나 에디터에 같은 값을 입력하세요. {1}을(를) 눌러 구문을 완성하세요.

java.smart.type.completion.apply=스마트 타입 완성은 제안 목록을 필터링하여 현재 컨텍스트 내에서 적용 가능한 타입만을 포함합니다. {0}을(를) 눌러 일치하는 제안 목록을 확인하세요. {1}을(를) 눌러 첫 번째 항목을 선택합니다.
java.smart.type.completion.return=스마트 타입 완성은 return 문의 코드를 제안할 수도 있습니다. {0}을(를) 눌러 return 문을 위한 조회 메뉴를 확인하세요. {1}을(를) 눌러 첫 번째 항목을 선택하세요.

java.statement.completion.lesson.name=구문 완성
java.statement.completion.complete.for={0}을(를) 눌러 {1} 구문을 완성합니다.
java.statement.completion.complete.if={0}을(를) 입력한 후 {1}을(를) 눌러 구문을 생성합니다.
java.statement.completion.complete.condition=괄호 {0} 안에 조건을 추가한 후 {1}을(를) 눌러 {2} 구문 안으로 이동합니다.
java.statement.completion.complete.finish.body=한 줄에 {0}을(를) 입력한 후 {1}을(를) 눌러 구문을 완성하고 서식을 적용합니다.

java.rename.press.rename={0}을(를) 눌러 필드 {1}의 이름을 변경합니다.
java.rename.type.new.name=이 필드의 새 이름(예: {0})을 입력한 후 {1}을(를) 누릅니다.
java.rename.confirm.accessors.rename=<ide/>은(는) 해당 getter/setter를 탐지하고 이에 따라 이름을 변경할 것을 제안합니다. 이제 {0}을(를) 누르거나 {1}을(를) 클릭하세요.

# Next string does not require translation
java.refactoring.menu.inline.variable.eng=이제 {0} 변수의 사용 위치 1개를 해당 변수를 정의하는 표현식으로 바꿔봅시다. {1}을(를) 누르고 <strong>iv</strong>(<strong>i</strong>nline <strong>v</strong>ariable)로 리팩터링 메뉴를 필터링할 수 있습니다. 이 항목을 선택하거나 {2}을(를) 누르세요.
java.refactoring.menu.inline.variable=이제 {0} 변수의 사용 위치 1개를 해당 변수를 정의하는 표현식으로 바꿔봅시다. {1}을(를) 누르고 목록에서 {2}을(를) 선택하거나 {3}을(를) 눌러 이 액션을 직접 호출하세요.
# Next string does not require translation
java.refactoring.menu.introduce.constant.eng=마지막으로 파일 이름에서 확장자를 추출해봅시다. 마찬가지로 {0}을(를) 누르고 <strong>ic</strong>(<strong>i</strong>ntroduce <strong>c</strong>onstant)로 필터링하거나 {1}을(를) 누르세요.
java.refactoring.menu.introduce.constant=마지막으로 파일 이름에서 확장자를 추출해봅시다. 마찬가지로 {0}을(를) 누르고 {1}을(를) 선택하거나 {2}을(를) 누르세요
java.refactoring.menu.confirm.constant=이 대화상자에서는 새 상수의 이름, 상위 클래스 및 가시성을 선택할 수 있습니다. 디폴트 값을 유지하고 {0}을(를) 누르거나 {1}을(를) 클릭하세요.

java.editor.coding.assistance.press.to.fix={0}을(를) 눌러 인수를 빈 배열로 바꾸세요.

java.extract.method.edit.method.name=새 메서드 이름을 편집하거나 IDE가 제안한 이름을 유지하세요. 그런 다음 {0}을(를) 누르세요.

java.inheritance.hierarchy.lesson.name=상속 계층 구조
java.inheritance.hierarchy.goto.implementation={0}을(를) 눌러 {1} 구현을 검색합니다.
java.inheritance.hierarchy.choose.any.implementation=구현을 선택하고 {0}을(를) 누르거나 마우스로 클릭합니다.
java.inheritance.hierarchy.navigate.to.base=파생된 메서드에서 상위 메서드로 이동할 수 있습니다. {0}을(를) 누르거나 에디터 여백에서 {1} 아이콘을 누릅니다.
java.inheritance.hierarchy.invoke.implementations.again=기본 메서드의 선언에는 자체 여백 아이콘 {0}이 있습니다. 아이콘을 클릭하거나 다시 한 번 {1}을(를) 누릅니다.
java.inheritance.hierarchy.open.in.find.tool.window=큰 계층 구조의 경우 {0} 도구 창에서 구현을 검색하는 것이 좋습니다. {1}을(를) 클릭합니다.
java.inheritance.hierarchy.hide.find.tool.window={0}을(를) 눌러 {1} 도구 창을 숨깁니다.
java.inheritance.hierarchy.open.method.hierarchy=이 메서드의 전체 계층 구조를 살펴보는 것이 좋습니다. {0}을(를) 누릅니다.
java.inheritance.hierarchy.hide.method.hierarchy={0}도 숨겨보겠습니다. {1}을(를) 다시 누릅니다.
java.inheritance.hierarchy.open.class.hierarchy=클래스 계층 구조를 보려면 {0}을(를) 누릅니다.
java.inheritance.hierarchy.last.note=<strong>참고:</strong> 액션 {0}와(과) {1}은(는) 클래스에도 적용 가능합니다.액션 {2}와(과) {3}은(는) 거의 사용되지 않으나 {5} 필터를 사용해 {4}(으)로 언제든지 찾을 수 있습니다.

java.find.occurrences.lesson.name=다음/이전 찾은 항목
java.find.occurrences.invoke.find=이 수업에서는 {0}을(를) 선택했습니다. {1}을(를) 눌러 현재 파일의 전체 텍스트 검색을 시작하세요.
java.find.occurrences.find.previous=이전 찾은 항목으로 이동하려면 {0}을(를) 누릅니다.
java.find.occurrences.search.closed.warning={0}을(를) 눌러 검색 필드를 다시 엽니다.
java.find.occurrences.find.next=<ide/>은(는) 선택한 텍스트를 검색 필드에 자동으로 복사합니다. 다음 찾은 항목을 찾아봅시다. {0} 또는 {1}을(를) 누르세요.
java.find.occurrences.close.search.tool=검색 패널을 닫은 상태에서도 이 단축키를 사용하여 최근에 발견한 찾은 항목 사이를 이동할 수 있습니다. {0}을(를) 눌러 검색 패널을 닫습니다.
java.find.occurrences.find.next.in.editor={0}(으)로 다음 찾은 항목을 찾습니다.
java.find.occurrences.find.previous.in.editor={0}을(를) 눌러 뒤로 이동합니다.
java.find.occurrences.note.about.cyclic=<strong>참고:</strong> 검색은 순환적입니다. 마지막 찾은 항목에서 {0}을(를) 두 번 누르면 첫 번째 찾은 항목이 선택됩니다. {1} 역시 순환적입니다.

java.debug.workflow.hotswap.disabled.warning=<strong>핫스왑</strong> 기능이 IDE 설정에서 비활성화 되어있습니다. {0} | {1} | {2} <strong>→</strong> {3}에서 기능을 활성화하거나 <callback id="{4}">클릭하여 기능을 활성화</callback>하세요.
java.debug.workflow.rebuild=큰 프로그램의 경우 다시 실행하는 데 시간이 오래 걸릴 수 있습니다. 순수 메서드에서 실수를 발견했다면 프로젝트를 다시 빌드하여 <strong>핫스왑</strong> JVM 기능을 적용하기만 하면 됩니다. 프로젝트 {0} 또는 {1}을(를) 빌드해봅시다.
java.debug.workflow.confirm.hot.swap=<strong>핫스왑</strong> 교체를 확인하세요.
java.debug.workflow.no.confirmation=<strong>핫스왑</strong>이 백그라운드에서 자동 완료되었습니다. 관련 메시지는 왼쪽 하단 모서리에서 확인할 수 있습니다.
java.debug.workflow.drop.frame=메서드에 패치를 적용했으나 사용 중단된 {0}을(를) 여전히 실행하고 있어 예외가 다시 던져집니다. 프레임을 삭제하고 {1} 호출 전 상태로 돌아가보겠습니다. 스택 프레임에서 상단 메서드 근처에 있는 {2}을(를) 을 클릭하거나 {3}을(를) 누르세요.

java.statement.completion.help.link=구문 완성
java.inheritance.hierarchy.help.link=소스 코드 계층 구조
java.find.help.link=파일 내에서 대상 검색
toggle.case.part=대/소문자
java.onboarding.module.name=온보딩 투어
java.onboarding.module.description={0}의 주요 기능에 관한 간략한 개요입니다.
java.onboarding.lesson.name=IDEA 알아보기
java.onboarding.change.ui.settings=이 수업에서 IDEA는 일부 UI 설정을 기본 상태로 변경합니다. 이 수업을 완료하거나 종료하면 해당 환경 설정이 복원됩니다.
java.onboarding.project.view.description=<strong>프로젝트 뷰</strong>는 주요 도구 창 중 하나입니다. 이 뷰는 프로젝트 디렉터리, SDK 전용 외부 라이브러리, 스크래치 파일을 포함합니다. 줄무늬 버튼을 클릭해 열면 데모 프로젝트를 미리보기 할 수 있습니다. {0}을(를) 눌러 열 수도 있습니다.
java.onboarding.balloon.project.view=클릭하여 <strong>프로젝트 뷰</strong>를 여세요
java.onboarding.balloon.source.directory={0} 디렉터리를 확장하여 프로젝트 소스 파일을 보세요
java.onboarding.balloon.open.file=두 번 클릭하여 {0}을(를) 여세요
java.onboarding.balloon.open.learn.toolbar={0} 도구 창으로 전환하여 이 수업을 계속 진행하세요
java.onboarding.indexing.description=처음으로 프로젝트를 열면 <ide/>에서 JDK 및 프로젝트 자체를 검사하여 코딩 지원에 필요한 세부 정보를 수집합니다. 계속하려면 색인화가 완료될 때까지 기다리세요.
java.onboarding.run.sample=이제 현재 파일을 실행해 봅니다. {0}을(를) 클릭하거나 {1}을(를) 누르세요.
java.onboarding.temporary.configuration.description=데모 샘플을 여셨습니다. 이제 실행해 봅시다! 툴바의 강조 표시된 영역에서 선택된 구성에 쓸 수 있고 자주 사용되는 실행 동작을 볼 수 있습니다.
java.onboarding.balloon.click.here=여기를 클릭하여 중단점을 설정하세요
java.onboarding.toggle.breakpoint.1={1} 메서드가 필요한 값인 {0} 대신 {2}을(를) 반환하는 것을 눈치채셨을 것입니다. return 문으로 가서 문제 코드를 디버그해봅시다.
java.onboarding.toggle.breakpoint.2=강조 표시된 영역에서 여백을 클릭하여 중단점을 설정하세요.
java.onboarding.balloon.start.debugging=아이콘을 클릭하여 디버그를 시작하세요
java.onboarding.start.debugging={0} 아이콘을 클릭하여 디버그 프로세스를 시작하세요
java.onboarding.balloon.about.debug.panel={0} 도구 창은 다양한 디버그 액션을 갖춘 {1,choice,0#툴바|1#툴바}를 제공합니다. 나중에 {2} 수업을 수강하여 이 액션을 사용해보세요.
java.onboarding.balloon.stop.debugging=아이콘을 클릭하여 디버그를 시작하세요
java.onboarding.stop.debugging=디버그를 시작해봅시다. {0} 아이콘을 클릭하세요.
java.onboarding.type.division=코드에서 문제를 발견했으니 수정해보겠습니다. 결과 합을 값의 길이로 나눕니다. 학습 스크립트가 이미 {0}을(를) 입력합니다.
java.onboarding.invoke.completion=이제 마침표를 입력하여 사용할 수 있는 모든 코드 완성 옵션을 표시합니다.
java.onboarding.choose.values.item=이제 {0}을(를) 입력하여 코드 완성 목록을 줄이거나 이 항목을 선택하고 {1}을(를) 누를 수도 있습니다.
java.onboarding.invoke.completion.tip=<strong>팁</strong>: 입력 시에 <ide/>이(가) 자동으로 완성 옵션을 표시합니다. 또한, {0}을(를) 눌러 코드의 어디에서든 완성 옵션을 표시할 수도 있습니다.
java.onboarding.invoke.intention.for.warning.1=방금 버그를 수정했지만 이 코드를 더욱 깔끔하게 만들 수 있습니다. IDEA는 향상될 여지가 있는 코드 줄을 강조 표시하고 노란색 전구를 추가합니다.
java.onboarding.invoke.intention.for.warning.2={0}을(를) 눌러 경고를 미리 보고 빠른 수정을 적용하세요.
java.onboarding.select.fix=첫 번째 항목 적용: {0}. 이 경우 <strong>for-each</strong> 반복문을 사용하면 코드가 더 이해하기 쉬워집니다.
java.onboarding.invoke.intention.for.code=인텐션도 시간을 절약하고 코드 작성을 더욱 쉽게 만듭니다. 인텐션을 활용하여 문자열 연결의 서식을 다시 지정해 보겠습니다. {0}을(를) 눌러 사용할 수 있는 옵션을 표시하세요.
java.onboarding.apply.intention={0}을(를) 선택한 후 {1}을(를) 누르세요.
java.onboarding.invoke.search.everywhere.1=<ide/>에서 작업할 때 프로젝트, 심볼, 클래스 또는 IDE 액션 내의 파일을 검색하고자 하는 경우가 있습니다. 이번 수업에서는 {0} 액션을 검색하여 {1} 문자열을 소문자로 만들어 봅시다.
java.onboarding.invoke.search.everywhere.2={0}을(를) 두 번 눌러 {1} 대화상자를 여세요.
java.onboarding.search.everywhere.description=보시다시피 선택한 텍스트, {0}이(가) 자동으로 입력 문자열에 복사되었습니다. {0} 대신 {1}을(를) 입력해봅시다.
java.onboarding.apply.action={0} 액션을 선택하고 {1}을(를) 누르세요.
java.onboarding.case.changed=대/소문자가 변경되었습니다.
java.onboarding.epilog=축하합니다. 온보딩 투어를 마쳤습니다. 이제 다음을 진행할 수 있습니다.\n\
  -학습 프로젝트{1} <callback id="{0}">닫기</callback>\n\
  -더 많은 수업 <callback id="{2}">보기</callback>
java.onboarding.finish.title=축하합니다
java.onboarding.finish.text=IDEA 온보딩 투어를 완료했습니다.\n\
이제 학습 프로젝트 {0}을(를) 닫으면 됩니다.\n\
학습을 이어 다른 수업을 진행할 수도 있습니다.
java.onboarding.finish.exit=데모 프로젝트 닫기
java.onboarding.finish.modules=수업 더보기
java.onboarding.feedback.system.found.jdks=발견된 JDK:
java.onboarding.feedback.system.current.jdk=현재 JDK:
java.onboarding.feedback.system.lang.level=언어 수준:
java.debug.workflow.invalid.drop=이런. 이번 학습에서 계획되지 않은 동작을 수행한 것 같습니다. 학습을 재시작해 주세요.
java.missed.sdk.click.setup=<ide/> 컴퓨터에서 JDK를 찾을 수 없습니다. JDK는 Java 프로그램을 실행하고 코드 지원을 제공하기 위해 JDK가 필요합니다. JDK를 구성하려면 강조 표시된 {0} 링크를 클릭하세요.
java.missed.sdk.show.options=사용 가능한 옵션을 보려면 클릭하세요.
java.missed.sdk.read.more.tip=<strong>팁</strong>: jdk에 대한 자세한 내용은<a href=''{0}''>설명서</a>를 참조하세요.
java.missed.sdk.configure=제안된 옵션 중 하나를 사용하여 JDK를 구성합니다. 이 파일을 다운로드하거나 컴퓨터의 기존 JDK 홈 디렉터리에 대한 경로를 지정할 수 있습니다.
java.missed.sdk.wait.installation=IDE에서 JDK를 설치하는 동안 잠시 기다려 주세요.
java.onboarding.wait.indexing=IDE에서 JDK 파일을 인덱싱하는 동안 잠시 기다려 주세요.
java.onboarding.feedback.system.jdk.at.start=시작 시 JDK:
java.onboarding.run.options.community=예를 들어 코드 {0}을(를) 실행하고, {1}(으)로 디버그한 다음 {2} 커버리지로 실행할 수 있습니다.
java.onboarding.run.options.ultimate=예를 들어 코드 {0}을(를) 실행하고, {1}(으)로 디버그하고, {2}을(를) 프로파일한 다음 {3} 커버리지로 실행할 수 있습니다.
java.onboarding.run.sample.balloon=현재 파일을 실행해 봅니다. {0}을(를) 클릭하거나 {1}을(를) 누르세요.