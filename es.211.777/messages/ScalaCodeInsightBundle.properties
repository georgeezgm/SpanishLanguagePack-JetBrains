no.tailrec.annotation.title=Sin anotación recursiva de cola
group.general=común
generate.companion.object.action.text=objeto compañero
generate.companion.object.action.description=Crear objeto complementario
generate.equals.and.hashcode.methods.action.text=es igual a() y hashCode()
generate.equals.and.hashcode.methods.action.description=Crear métodos iguales () y hashCode ()
no.fields.to.include.in.equals.hashcode.have.been.found=No puedo encontrar el campo para incluir en igual/hashCode
generate.proprty.action.text=Propiedades (captador y definidor)
generate.proprty.action.description=Crear propiedad
generate.tostring.method.action.text=toString()
generate.tostring.method.action.description=Crea un método toString().
generate.ui.toString.title=crear en cadena
generate.ui.toString.properties=Propiedad que crea toString
generate.ui.toString.withNames=&Incluir nombre de propiedad
inlay.hints.respect.vertical.alignment=Cumple con la alineación vertical
inlay.hints.limit.hint.length.to=Límite de longitud de la pista
inlay.hints.characters=mensaje
show.types.even.if.they.are.obvious=Mostrar tipo incluso cuando sea obvio
general.settings=Global {0} settings
inlay.hints.show.parameter.hints=Mostrar sugerencias de parámetros
inlay.hints.even.for.code.apply.code.and.code.update.code.methods=También incluye los métodos <code>{0}</code> y <code>{1}</code>.
inlay.hints.even.for.non.literal.expressions=Esto también incluye casos en los que se trata de una expresión en lugar de un literal.
method.chain.hints.action.text=Sugerencia de cadena de métodos
method.chain.hints.action.description=Alternar sugerencias de cadena de métodos
type.hints.action.text=escriba sugerencia
type.hints.action.description=Alternar sugerencia de tipo
configure.type.hints.text=Configurar...
configure.type.hints.description=Configurar sugerencias de tipo
member.variables=variable miembro
method.results=resultado del método
local.variables=variable local
show.type.hints.for=Mostrar sugerencias de tipo para \:
type.hints=Escriba sugerencia\n
link.label.more.info=Más información
show.type.mismatch.hints=Mostrar sugerencia de discrepancia de tipo
type.mismatch.hints=Sugerencia de no coincidencia de tipos
instead.of.underlining.the.code=En lugar de subrayar el código
in.a.separate.column=en una columna separada
show.method.chain.hints=Mostrar sugerencias de cadena de métodos
method.chain.hints=Sugerencia de cadena de métodos
inlay.hints.only.when.there.are.at.least=Sólo si contiene al menos:
inlay.hints.unique.types=tipo único
expand.implicit.hints.action.text=Ampliar sugerencias de elementos implícitos
expand.implicit.hints.action.description=Ampliación de sugerencias incrustadas para conversiones/argumentos implícitos en el editor
implicit.is.diverged=implícito se ha ramificado
can.t.infer.proper.types.for.type.parameters=No se puede inferir el tipo apropiado para el parámetro de tipo
no.implicits.found.for.parameter=No implícito para el parámetro {0}
no.implicits.found.for.parameters=No implícito para el parámetro {0}
ambiguous.implicits.for.parameter=Implícito ambiguo para el parámetro {0}
show.implicit.hints.action.text=Mostrar sugerencias implícitas
show.implicit.hints.action.description=Mostrar conversiones/argumentos implícitos con sugerencias incrustadas en el editor
implicit.arguments.popup.action.text=Ventana emergente de argumento implícito
implicit.arguments.popup.action.description=Ventana emergente de argumento implícito
make.conversion.explicit.action.text=Haga explícita la conversión.
make.conversion.explicit.action.description=Haga explícita la conversión.
remove.explicit.arguments.action.text=Eliminar argumentos explícitos
remove.explicit.arguments.action.description=Eliminar argumentos explícitos
family.name.use.named.arguments=Usar argumentos con nombre
use.named.arguments.for.current.and.subsequent.arguments=Utilice argumentos con nombre como argumentos actuales y sucesores
family.name.convert.to.block.expression=Convertir a expresión de bloque
family.name.convert.to.argument.in.parentheses=Convertir a argumentos entre paréntesis
family.name.permute.arguments=factor de permutación
permute.arguments.to.match.the.parameter.declaration.order=Enumerar argumentos para que coincidan con el orden de declaración de parámetros
family.name.demorgan.law=ley de demorgan
replace.refname.with.replacement=Reemplace ''{0}'' con ''{1}''
expand.boolean.use.to.ifelse=Ampliar el uso de valores booleanos con declaraciones ''if-else''
family.name.expand.boolean=expansión booleana
family.name.flip.comparison.in.infix.expression=Comparar inversiones dentro de expresiones infijas
flip.operation=Invertir ''{0}''
flip.operation.to.inverse=Invertir ''{0}'' a ''{1}''
family.name.flip.comparison.in.method.call.expression=Comparar inversiones dentro de expresiones de llamada a métodos
family.name.negate.comparison=Negar comparación
negate.operation.to.inverse=Negar ''{0}'' a ''{1}''
family.name.replace.equals.or.equality.in.infix.expression=Reemplazo de igual o igualdad en expresiones infijas
family.name.replace.equals.or.equality.in.method.call.expression=igualdad o sustitución de igualdad dentro de expresiones de llamada a métodos
replace.operator.with.replacement=Reemplace ''{0}'' con ''{1}''
family.name.simplify.boolean.expression.with.a.literal=Simplifica expresiones booleanas a literales
simplify.boolean.expression=Simplificar expresiones booleanas
family.name.invert.if.condition=Si la condición es inversión
family.name.merge.else.if=Fusionar declaraciones else if
merge.elseif=Fusionar declaraciones ''else if''
family.name.merge.nested.ifs.to.anded.condition=Fusionar declaraciones If anidadas en condiciones AND
merge.nested.ifs=Fusionar declaraciones ''if'' anidadas
family.name.merge.equivalent.ifs.to.ored.condition=Fusionar declaraciones if equivalentes en condiciones OR
merge.sequential.ifs=Fusionar declaraciones secuenciales ''if''
family.name.remove.redundant.else=Eliminar lo innecesario
remove.redundant.else=Elimine el ''else'' redundante.
family.name.replace.do.while.with.while=Cambiar hacer while a while
this.action.will.cause.name.conflict=La ejecución de esta acción genera un conflicto de nombres.
family.name.replace.while.with.do.while=Cambiar mientras para hacer mientras
family.name.split.else.if=Dividir otra declaración si
split.elseif=Dividir declaraciones "si no"
family.name.split.if=dividir si declaración
split.into.2.if.s=Dividir en dos declaraciones if
change.access.modifier.intention=Cambiar el controlador de acceso
change.access.modifier.intention.family=Cambiar el controlador de acceso
make.0.1=Hacer de ''{0}'' un {1}
detecting.possible.conflicts=Detección de posibles colisiones
0.with.1.visibility.is.not.accessible.from.2={0} marcado {1} no es accesible desde {2}
title.change.modifier=cambiar controlador
no.tailrec.annotation.fix=Agregue la anotación @tailrec
family.name.recursion=recursividad
family.name.add.replace.call=Agregar .replace("\\r","")
add.replace.call=Agregue ''reemplazar("\\r", "")''
family.name.add.stripmargin=Agregar .stripMargin
add.stripmargin=Añadir ''stripMargin''
convert.to.string.concatenation=Convertir a concatenación de cadenas
convert.to.interpolated.string=Convertir a cadena interpolada
convert.to.formatted.string=Convertir a cadena formateada
family.name.insert.gap=insertar espacio
insert.gap.with.concatenation=Insertar espacio usando concatenación de cadenas\: (" + + ")
family.name.regular.multi.line.string.conversion=Conversión de expresión regular/cadena multilínea
convert.to.normal.string=Convertir a "cadena"
convert.to.multiline.string=Convertir a """cadena"""
element.context.type.blank.line=linea en blanco
element.context.type.code=código
element.context.type.comment=Comentario
element.context.type.implicit.value.class=clase de valor implícito
element.context.type.string=cadena
element.context.type.xml=XML
macro.annotated=annotated("annotation qname")
macro.companion.class=companionClass
macro.implicit.value.class.name=implicitValueClassName(TYPE_TEXT)
macro.method.returnType=methodReturnType()
macro.primaryConstructor.param.names=primaryConstructorParamNames
macro.primaryConstructor.param.types=primaryConstructorParamTypes
macro.primaryConstructor.param.instances=primaryConstructorParams
macro.subtypes=subtypes(TYPE)
macro.suggest.variable.name.by.type=suggestVariableNameByTypeText(TYPE_TEXT)
macro.type.of.variable=typeOfVariable
marco.typeParameters=typeParams(CLASS)
marco.typeParameters.without.bounds=typeParamsWithoutBounds(CLASS)
