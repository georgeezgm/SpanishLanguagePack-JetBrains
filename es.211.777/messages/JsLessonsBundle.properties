js.readme.description=이 대화형 교육과정에서는 코드 리팩터링 또는 프로젝트 간 이동과 같은 일반적인 작업 수행 방법을 몇가지 배울 수 있습니다.\n\n이 교육과정은 {0}을(를) 처음 접하는 사용자에게 가장 유용합니다. 또한 {0}을(를) 사용해본 적이 있고 모든 기본 단축키에 대한 자신의 지식을 확인하려는 사용자에게도 권장합니다.
js.readme.usage.header=교육과정 진행 방법
js.readme.feedback.header=피드백 공유


js.editor.basics.module.name=에디터 기초
js.editor.basics.module.description=에디터의 필수 기능을 익혀 첫날부터 더 나은 코드를 작성하고 일반 작업에 소요되는 시간을 절약해 보세요.

js.editor.completion.title=코드 완성
js.editor.completion.choose.lookup=<ide/>에는 우수한 코드를 작성하여 생산성을 향상시키는 데 도움이 되는 기능이 풍부합니다. 먼저 코드 완성부터 시작해보겠습니다. 이 기능을 이용하면 언어 API와 프로젝트 종속 요소의 키워드와 심볼이 완성되므로 코드 작성이 빨라집니다. {0}을(를) 입력하고 {1}을(를) 눌러 {2}을(를) 자동 완성해보세요.
js.editor.completion.choose.method=코드 완성을 사용하면 코드 입력 시 컨텍스트 인식 제안이 표시됩니다. 이 제안 중 하나를 추가하려면 앞서 행한 바와 같이 {0}을(를) 사용하거나 {1}을(를) 눌러 기존 항목을 교체할 수 있습니다. 이제 {3} 뒤에 {2}을(를) 추가하고 {4}을(를) 입력하여 {0}(으)로 {5} 메서드를 자동 완성해보세요.
js.editor.completion.parameter.info=캐럿을 {1} 내에 두었을 때 표시된 툴팁({0})을 사용하여 메서드와 함수의 매개변수 이름을 빠르게 검색할 수 있습니다. 상황에 따라 자세한 내용이 나온 문서를 확인하는 것이 좋습니다. {2}을(를) 눌러 상세 문서를 확인해봅시다.
js.editor.completion.add.parameter=이는 JavaScript 문서를 <ide/>에서 직접 검색하는 방법입니다. 이제 {1} 안에 {0}을(를) 추가하여 진행해보세요.
js.editor.completion.console.log.argument=마지막으로 {0} 구문을 완성해봅시다. 캐럿을 8번 줄의 {1} 내부에 두고 코드 완성을 사용하여 {2}을(를) 추가합니다.
js.editor.completion.next=이번 수업은 여기까지입니다. 다음 수업을 시작하려면 아래 버튼을 클릭하거나 {0}을(를) 사용하세요.

js.editor.code.editing.tips.and.tricks.title=코드 편집 팁 및 정보
js.editor.code.editing.reformat.start=코드를 더 빠르게 편집하는 데 도움이 되는 몇가지 팁과 정보를 알아보겠습니다. 입문자에게 설명드리자면, <ide/>에서는 코드의 서식을 수동으로 수정할 필요가 없습니다. {0}(으)로 코드 서식을 다시 지정합니다.
js.editor.code.editing.select.word=이상입니다\! 이제 파일 내 코드를 빠르게 선택하는 방법을 알아보겠습니다. {0}을(를) 여러 번 눌러 두 번째 tr 요소를 모두 선택합니다(14~18번 줄).
js.editor.code.editing.comment.delete.unselect.move.up.1=이제 코드를 선택했으므로 주석 추가(해제)({0}), 삭제({1}) 또는 선택 범위를 축소({2})할 수 있습니다.
js.editor.code.editing.comment.delete.unselect.move.up.2=더불어 이 코드를 파일 위아래로 이동할 수 있습니다. {0}(으)로 코드를 위로 이동해봅시다.
js.editor.code.editing.multi.caret.1=다음은 다중 캐럿 편집입니다. 한 번에 여러 장소에서 코드를 변경할 때 시간을 단축하기 위해 사용합니다. 캐럿을 첫 번째 {0} 태그(10번 줄) 내부에 둡니다. 그다음 동일한 tr 요소(10~12번 줄) 내의 모든 {1} 태그를 선택합니다. 필요한 태그가 모두 선택될 때까지 {2}을(를) 6번 누릅니다.
js.editor.code.editing.multi.caret.2={0}을(를) {1}(으)로 교체하고 {2}을(를) 눌러 다중 캐럿 모드를 종료해봅시다.
js.editor.code.editing.duplicate.delete.comment=마지막으로 줄 복제, 줄 삭제, 주석 해제 등 가장 일반적인 줄 액션을 빠르게 사용해봅시다. {0}을(를) 사용하여 선택한 줄을 복제합니다. 그다음 {1}와(과) {2}을(를) 눌러 다른 줄 액션을 사용해보세요.
js.editor.code.editing.next=이번 수업은 여기까지입니다. 아래 버튼을 클릭하여 다음 수업을 시작하거나 {0}을(를) 사용하세요.

js.editor.code.inspection.title=강력한 코드 검사
js.editor.code.inspection.intro=에디터로 작업하는 동안 <ide/>는 지속적으로 코드를 분석하여 코드 내 다양한 문제를 탐지하고 코드를 개선할 수 있는 방법을 제안합니다. 열린 파일의 4, 5번 줄에 두 개의 문제가 강조 표시되어 있습니다. {0}을(를) 눌러 문제를 확인합니다.
js.editor.code.inspection.show.intentions.1={0}을(를) 사용하여 한 오류에서 다른 오류로 이동할 수도 있습니다. 아니면, 오류에 마우스 커서를 올려 발견한 문제를 살펴볼 수 있습니다.
js.editor.code.inspection.show.intentions.2=이 파일에서 IDE는 해결되지 않은 변수(코드의 어디에도 정의되어 있지 않은 변수)를 발견하여 가능한 수정 중 하나로 새로운 변수, {0}을(를) 생성할 것을 제안하지만, 우리는 매개변수 북을 추가해야 합니다. 캐럿을 {1}에 두고 {2}을(를) 눌러 전체 수정 목록을 표시하세요.
js.editor.code.inspection.run.intention={0}을(를) 선택한 후 {1}을(를) 누릅니다.
js.editor.code.inspection.checkmark=에디터의 오른쪽 상단을 보면 파일에 문제가 없음을 확인하는 녹색 체크 마크({0})가 나타납니다. 단, 코드를 줄이기 위해 최적화할 수 있는 세부 사항은 남아 있습니다. 캐럿을 {1}(3번 줄)에 두고 {2}을(를) 누릅니다.
js.editor.code.inspection.make.shorter=이제 함수 표현식을 짧게 만들어봅시다. {0} 빠른 수정를 선택한 후 {1}을(를) 누르세요.
js.editor.code.inspection.next=이번 수업은 여기까지입니다. 아래 버튼을 클릭하여 다음 수업을 시작하거나 {0}을(를) 사용하세요.

js.editor.navigation.title=효율적 탐색
js.editor.navigation.recent.files=프로젝트 내 이동부터 시작해보겠습니다. {0}을(를) 눌러 {1} 팝업을 호출합니다.
js.editor.navigation.choose.structure=이 팝업을 사용하면 최근 파일과 IDE 도구 창 사이를 빠르게 이동할 수 있습니다. 이러한 도구 창 중 하나는 프로젝트의 작은 부분인 단일 파일 간 이동하는 데 도움이 됩니다. 자세한 내용을 보려면 {0} 탭을 클릭하세요.
js.editor.navigation.activate.structure={0} 도구 창은 파일을 더 빠르게 검사하는 데 도움이 됩니다. 구조의 개요를 제공하며 이름을 입력하기만 하면 특정 항목으로 이동할 수 있습니다. 도구 창에서 임의의 위치에 {1}을(를) 입력하고 {2}을(를) 누른 다음 {3}을(를) 눌러 패널을 닫고 코드로 이동합니다.
js.editor.navigation.find.usages=액션 결과 캐럿이 {0}(줄 9번)(으)로 이동했습니다. 캐럿을 그곳에 둔 채로 {1}을(를) 눌러 항목의 사용 위치를 빠르게 찾을 수 있는 다른 도구 창을 엽니다.
js.editor.navigation.hide.tool.window=좋습니다\! 이제 프로젝트 전체와 라이브러리 전체에서 giveTreat의 사용 위치를 확인할 수 있습니다. {0}(으)로 도구 창을 닫으세요.
js.editor.navigation.search.everywhere=이제 {0}을(를) 두 번 눌러 더 빠르게 검색할 수 있는 또 다른 기능을 확인해보겠습니다.
js.editor.navigation.search.everywhere.tabs=이것은 {0} 팝업입니다. 액션, 파일, 클래스 또는 심볼을 즉시 찾을 수 있으며 모든 일치 항목이 한 곳에 표시됩니다. 더 구체적인 검색을 수행하려면 {1}을(를) 눌러 {2}에서 {3} 또는 {4} 등의 다른 탭으로 전환할 수 있습니다. 또는 단축키를 사용하여 필요한 특정 탭을 열 수 있습니다. {5}(으)로 후자를 시도해봅시다.
js.editor.navigation.search.action={0} 탭이 활성화되어 있으므로 검색 표시줄에 {1}을(를) 입력하여 기타 유융한 탐색 기능의 단축키를 검색해보겠습니다.
js.editor.navigation.go.to.declaration=<strong>선언 또는 사용 위치로 이동</strong> 옆에 있는 {0}을(를) 확인하세요. 이는 정의의 사용 위치 및 그 반대를 나타냅니다. 팝업을 닫고 캐럿을 {1}(16번 줄)에 둔 후 {0}을(를) 눌러 선언을 찾습니다.
js.editor.navigation.keymap.reference=축하합니다\! {0} 끝에 도달했습니다. <a href\="{1}">키맵 참조</a>를 출력하여 <ide/>에서 모든 단축키를 편리하게 이용하세요. 아래 버튼을 선택하여 다음 단원으로 이동하세요.

js.editor.refactorings.title=간편한 리팩터링
js.editor.refactorings.this=<ide/>에는 프로젝트 전체에서 코드의 동작을 변경할 필요 없이 기존 코드를 자동으로 재구축할 수 있는 <a href\=''{0}''>다양한 리팩터링</a>이 있습니다. {1} 매개변수에 사용 가능한 리팩터링 목록을 미리보기로 확인해보겠습니다. {2}을(를) 누르거나 메인 메뉴에서 {3}(을)를 선택하세요.
js.editor.refactorings.rename={0}을(를) 사용하면 모든 리팩터링이나 단축키를 기억할 필요가 없습니다. {1}을(를) 클릭하여 가장 인기 있는 리팩터링 중 하나를 살펴보세요.
js.editor.refactorings.rename.apply={0} 매개변수 이름을 {1}(으)로 변경하고 {2}을(를) 누릅니다. 그러면 프로젝트 내 모든 파일에 변경이 적용됩니다.
js.editor.refactorings.shortcut=잘하셨습니다\! 단축키를 사용하여 코드를 리팩터링해봅시다. 캐럿을 {0} 프로퍼티(4번 줄)에 두고 {1}을(를) 누릅니다.
js.editor.refactoring.replace=이제 두 개의 찾은 항목을 이름이 {1}인 {0} 변수로 모두 바꿉니다.
js.editor.refactoring.select.expression={1}을(를) 포함할 새 변수 {0}을(를) 생성해봅시다. 목록에서 {1} 표현식을 선택하고 {2}을(를) 누르세요.
js.editor.refactorings.next=<ide/>에서 코드를 리팩터링하는 두 가지 방법을 살펴보았습니다. 단축키 사용을 선호한다면 <a href\="{0}">키맵 참조</a>를 출력하고 그렇지 않다면 {1} 메뉴를 계속 사용하세요. 아래 버튼을 클릭하여 다음 수업을 시작하거나 {2}을(를) 사용하세요.

js.getting.started.module.name=테스트 시작하기
js.getting.started.module.description=Jest를 사용한 예시를 살펴보고 {0}에서 유닛 테스트를 간소화하는 방법을 알아봅니다.

js.testing.jest.title={0} 테스트의 기초
js.testing.jest.prepare=<ide/>를 사용하면 모든 테스트 워크플로가 간편해집니다. 그 원리를 알아보겠습니다. 이 단원에서는 <a href\="{0}">Jest</a>와 <a href\="{1}">샘플 프로젝트</a> 중 하나를 예시로 사용할 것이므로 Jest 및 npm/Yarn이 컴퓨터에 설치되어 있는지 확인하세요(자세한 정보는 <a href\="{2}">이</a> 웹페이지 참조). 먼저 Jest에만 적용될 실행/디버그 구성부터 시작하겠습니다. 메인 메뉴에서 {3} > {4}을(를) 선택하세요. 그다음 {5}을(를) 클릭하고 {6} 구성을 디폴트 매개변수로 추가한 후 {7}을(를) 눌러 저장합니다.
js.testing.jest.run=이제 새 {0} 구성이 기본적으로 선택되었습니다. 바로 옆의 {1}({2}) 버튼을 클릭합니다.
js.testing.jest.navigate.1=이제 {0} 도구 창에서 테스트 러너가 실행한 테스트 결과와 실패한 테스트에 대한 스택 추적을 확인할 수 있습니다. 테스트 진행을 추적할 수 있을 뿐 아니라 기타 다양한 작업을 수행할 수 있습니다. 모든 테스트를 다시 실행({1})하거나 실패한 테스트만 다시 실행({2})하고 통과한 테스트를 확인({3})하거나 변경 시 테스트를 자동으로 다시 실행하도록 <a href\="{4}">감시 모드</a>를 활성화할 수 있습니다.
js.testing.jest.navigate.2={0}에서 특정 테스트를 빠르게 찾을 수도 있습니다. 지금 시도해봅시다. 캐럿을 {0} 영역의 아무 곳에 두고 {1}을(를) 입력한 다음 {2}을(를) 눌러 테스트로 이동합니다.
js.testing.jest.double.click=이상입니다\! 많은 테스트를 통해 빠르게 방법을 찾아야 할 때마다 이 기능을 사용하세요. 이제 찾은 {0}을(를) 두 번 클릭합니다.
js.testing.jest.fix.test.1={0}에서 테스트를 두 번 클릭하여 코드 내 해당 위치로 곧바로 이동하였습니다. {1}에 마우스 커서를 올리면 테스트 실패 이유를 설명하는 팝업이 나타납니다. 필요한 경우 이곳에서 테스트를 디버그할 수도 있습니다.
js.testing.jest.fix.test.2=이제 {0}에 사용된 잘못된 값을 교체해봅시다. 6번 줄의 {1}을(를) {2}(으)로 교체합니다.
js.testing.jest.re.run.test.1=이제 필요한 결과를 얻을 수 있는 올바른 값을 넣었으므로 테스트를 다시 실행할 수 있습니다. 이번에는 다른 방법으로 테스트해봅시다. 에디터 내 테스트 왼쪽에 {0} 아이콘이 보이시나요? 이 아이콘은 최근 실행한 테스트의 테스트 상태를 보여줄 뿐만 아니라 특정 테스트를 빠르게 실행하고 디버그하는 데 사용됩니다.
js.testing.jest.re.run.test.2=아이콘을 클릭한 다음 {0}을(를) 선택합니다.
js.testing.jest.success.run.coverage.1=잘하셨습니다\! 테스트가 성공적으로 통과되었습니다.
js.testing.jest.success.run.coverage.2=또 다른 편리한 도구를 살펴봅시다. 실행/디버그 구성 메뉴 옆에 있는 {0} 아이콘을 클릭합니다.
js.testing.jest.coverage.result=이렇게 하면 파일 내 테스트된 줄의 비율을 포함해 테스트된 파일 수를 보여주는 코드 커버리지 보고서를 빠르게 빌드할 수 있습니다. 이제 {0}을(를) 사용해 커버리지 보고서를 닫습니다.
js.testing.jest.end=축하합니다\! 이 단원의 마지막에 도달했습니다. 지금까지 배운 내용은 <ide/>가 지원하는 다른 테스트 러너에도 적용됩니다(코드 커버리지 및 감시 모드 제외). Jest를 사용한 앱 테스트에 관한 자세한 팁과 정보는 <a href\="{0}">이</a> 블로그를 참조하세요. 다른 테스트 러너를 사용하는 경우 <a href\="{1}">웹 도움말</a>을 살펴보세요.
