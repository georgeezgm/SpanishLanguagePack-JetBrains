spring.ws.framework.name=Spring WebService
# Patterns
spring.patterns.web.services.group.name=Servicio Web

spring.patterns.xsd.schema=XSD 스키마
spring.patterns.xsd.schema.collection=XSD 스키마 컬렉션

spring.patterns.wsdl.definition.ref.schema=디폴트 Wsdl 정의(스키마)
spring.patterns.wsdl.definition.ref.schema.collection=디폴트 Wsdl 정의(스키마 컬렉션)
spring.patterns.simple.wsdl.definition=단순 Wsdl 정의

# Gutter annotators
message.dispatcher.servlet.context.choose=애플리케이션 컨텍스트 선택
message.dispatcher.servlet.context=애플리케이션 컨텍스트로 이동

# Inspections and Quick Fixes
spring.ws.model.inspection.group.name=Spring 웹 서비스
spring.ws.configuration.inspection=Spring 웹 서비스 구성

SpringMessageDispatcherWebXmlInspection.cannot.find.app.context=애플리케이션 컨텍스트 {0}을(를) 찾을 수 없습니다
CreateSpringWebServiceApplicationContextFix.display.name=웹 서비스 애플리케이션 컨텍스트 {0} 생성
CreateSpringWebServiceApplicationContextFix.family.name=웹 서비스 애플리케이션 컨텍스트 생성

SpringWebServicesConfigurationsInspection.should.be.configured.with.specific.file.name=Spring Web Service bean은 {0}에 있어야 합니다
SpringWebServicesConfigurationsInspection.should.be.located.in.web.inf=Spring 웹 서비스 애플리케이션 컨텍스트 파일은 WEB-INF에 있어야 합니다
SpringWebServicesConfigurationsInspection.transport.is.not.configured=Spring 웹 서비스 전송 프로토콜이 구성되지 않았습니다
SpringWebServicesConfigurationsInspection.register.message.dispatcher.servlet.fix=web.xml에서 메시지 디스패처 서블릿 등록
SpringWebServicesConfigurationsInspection.register.jms.transport.fix=Jms 전송 Bean 등록
SpringWebServicesConfigurationsInspection.register.email.transport.fix=이메일 전송 Bean 등록
SpringWebServicesConfigurationsInspection.embedded.http.transport.fix=포함된 Http 전송 Bean 등록

spring.ws.patterns.email.transport=Spring WS 이메일 전송
spring.ws.patterns.embedded.http.server.transport=Spring WS 포함된 Http 서버 전송
spring.ws.patterns.jms.transport=Spring WS Jms 전송

spring.ws.patterns.message.factory=메시지 팩토리
spring.ws.patterns.message.listener=메시지 리스너
spring.ws.patterns.connection.factory=연결 팩토리
spring.ws.patterns.soap.message.dispatcher=Soap 메시지 디스패처
spring.ws.patterns.soap.message.listener.container=메시지 리스너 컨테이너
spring.patterns.payload.endpoint=페이로드 엔드포인트

spring.ws.patterns.mail.message.receiver=메일 메시지 리시버
spring.ws.patterns.http.server.factory.bean=Http 서버 팩토리 Bean

jam.name.annotation.must.be.defined.for.endpoints=@{0}은(는) @Endpoint 클래스에서 지원됩니다
jam.name.annotation.must.be.defined.for.payload.methods=@{0}은(는) @PayLoad 메서드에서 지원됩니다

jam.annotation.inconsistency.inspection.name=Spring 웹 서비스 어노테이션
spring.patterns.annotation.endpoint.mapping=어노테이션 액션 엔드포인트 매핑
spring.patterns.map.based.endpoint.mapping=맵 기반 엔드포인트 매핑
spring.patterns.payload.mapping=PayloadRootQNameEndpointMapping
spring.ws.web.xml.inspection=Spring WS web.xml 구성

action.Add.Jms.Transport.text=JMS 전송 추가
action.Add.Email.Transport.text=이메일 전송 추가
action.Add.Embedded.Http.Transport.text=임베디드 HTTP 전송 추가