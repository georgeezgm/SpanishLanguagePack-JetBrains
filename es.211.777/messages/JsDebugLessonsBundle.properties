js.debugger.module.name={0} 디버거 101
js.debugger.module.description=프로그램을 단계별로 실행하고 IDE를 벗어날 필요 없이 문제를 식별하는 방법을 알아봅니다.

js.debugger.before.title=디버그 전\: 실행/디버그 구성
js.debugger.before.intro.1=<ide/>를 사용하면 코드를 작성한 곳에서 모든 종류의 JavaScript 앱을 실행하고 디버그할 수 있습니다.
js.debugger.before.intro.2=이 모듈에서는 디버그하는 코드 종류에 상관없이 도움이 되는 몇가지 단계를 살펴보겠습니다. 여기에서는 두 숫자를 비교해 {1} 또는 {2}을(를) 반환하는 매우 기본적인 <a href\=''{0}''>Node.js</a> 앱을 다뤄보겠습니다. 진행하기 전에 Node.js가 컴퓨터에 <a href\=''{3}''>설치되어 있는지</a> 확인하세요(처음 설치하는 경우 <ide/>를 다시 시작해야 합니다). 진행할 준비가 되면 {4}을(를) 누르세요.
js.debugger.before.describe.tool.window={0}을(를) 누르면서 두 가지가 실행되었습니다. 첫째, Node.js를 사용해 파일을 실행하고, 코드 실행 결과가 표시되는 {1} 도구 창을 열었습니다. 둘째, <ide/>가 임시 실행/디버그 구성을 생성하여 사용자가 그 방식으로 파일을 실행할 수 있도록 했습니다. 이제 {2}(으)로 도구 창을 숨기고 실행/디버그 구성을 더 자세히 알아봅시다.
js.debugger.before.save.1=이러한 구성은 애플리케이션을 실행/디버그하는 데 진입점 역할을 합니다. 임시적이거나 영구적인 구성일 수 있습니다. 이 둘의 주요 차이점은 임시 구성은 디폴트 제한 개수인 5개에 도달하면 자동으로 삭제된다는 점입니다.
js.debugger.before.save.2=임시 구성을 영구 구성으로 전환하는 방법을 알아보겠습니다. 오른쪽 상단 모서리에 있는 {0} 드롭다운 메뉴를 열고 {1}을(를) 선택하세요.
js.debugger.before.edit=그러면 끝입니다\! 이제 이 새 실행/디버그 구성의 설정을 조정하거나 다른 구성을 사용하고 싶다면 어떻게 해야 할까요? {0} 메뉴를 다시 열고 {1}을(를) 클릭하세요.
js.debugger.before.manage.1=여기는 실행/디버그 구성을 관리하는 곳입니다. 새 구성을 추가하려면 {0}을(를) 누르고 원하는 구성 타입을 선택한 후 프로젝트/구성 타입에 따른 설정을 지정하세요. 기존 구성을 미세 조정하려면 구성의 이름을 클릭하고 필요한 항목을 업데이트하세요.
js.debugger.before.manage.2=잠시 여기에 있는 항목을 살펴본 후 다음으로 넘어갈 준비가 되면 창을 닫으세요.
js.debugger.before.next=이번 수업은 여기까지입니다. 다음 수업을 시작하려면 아래 버튼을 클릭하거나 {0}을(를) 사용하세요.

js.debugger.part.1.title=코드 디버그. 1부
js.debugger.part.1.start.1=이제 실행/디버그 구성이 준비되었으므로 기본 제공 디버거를 사용하는 방법을 알아봅시다.
js.debugger.part.1.start.2=우선 코드를 한번 더 실행하여 이전 수업에서 자세히 살펴보지 않았던 반환값을 검사해보겠습니다. 구성이 있는 드롭다운 목록 옆에 위치한 {0} 버튼을 클릭하여 현재 선택한 구성을 실행하세요.
js.debugger.part.1.gutter=비교할 숫자 {0}와(과) {1}은(는) 같지 않으므로 코드 실행 시 {2}을(를) 얻었어야 합니다. 그런데 {3}을(를) 얻은 이유를 알아봅시다. 줄 1에서 \#1과 코드 사이의 여백(빈 공간)을 클릭하여 중단점을 배치하세요.
js.debugger.part.1.set.breakpoint=중단점을 사용하여 애플리케이션 실행을 중지할 수 있습니다. 여백에 보이는 빨간 원은 <ide/>에서 중단점을 표시하는 방식입니다. 중단점을 다시 클릭하면 제거됩니다. 중단점을 마우스 오른쪽 버튼으로 클릭하면 조건을 설정하는 등 중단점 동작을 사용자 지정할 수 있습니다. 오른쪽 상단 모서리에 있는 {0} 버튼을 누르거나 {1}을(를) 눌러 다음으로 이동하세요.
js.debugger.part.1.tool.window.1={0} 도구 창이 나타납니다. 창의 왼쪽에서 구성 중단/다시 실행, 중단점 관리를 위한 아이콘을 찾을 수 있습니다. 상단에서는 코드 사이를 이동할 수 있는 몇가지 탭과 여러 아이콘을 확인할 수 있습니다.
js.debugger.part.1.tool.window.2=활성화되어 있는 {0} 탭은 대부분의 작업이 이루어지는 곳입니다. 오른쪽에서 범위별로 그룹화된 모든 {1}와(과) 값을 확인할 수 있습니다. {2} 뷰에는 호출 스택이 표시됩니다. 이를 살펴보면 실행 경로의 모든 포인트에서 애플리케이션 상태를 확인할 수 있습니다. 이제 {3} 탭으로 전환하세요.
js.debugger.part.1.scripts.tab={0} 탭에는 오류를 포함하여 애플리케이션이 기록한 메시지가 표시됩니다. Node.js 애플리케이션을 디버그하는 경우 <ide/>는 {1} 탭도 표시합니다. 이 탭에서는 JavaScript 코드 조각을 실행하고 콘솔 메시지를 볼 수 있습니다. {2} 탭으로 전환하여 계속 진행하세요.
js.debugger.part.1.next={0} 탭은 현재 실행 중인 프로세스에 로드된 모든 파일 목록을 보여줍니다. 파일을 두 번 클릭하면 파일의 내용을 확인할 수 있습니다. 이 수업의 두 번째 부분으로 이동하려면 아래 버튼을 클릭하거나 {1}을(를) 사용하세요.

js.debugger.part.2.title=코드 디버그. 2부
js.debugger.part.2.step.into.1=<strong>중요</strong>\: 계속 진행하기 전에 줄 1에 중단점이 있으며 디버거가 시작되어({0}) {1} 탭에 열려 있는지 확인하세요.
js.debugger.part.2.step.into.2=코드에서 버그를 찾아보고 <ide/>에서 디버그할 때 유용한 몇가지 사항을 배워보겠습니다. 코드 실행 원리를 더 잘 이해하기 위해 코드 안에 중단점을 더 배치하고 {0} 버튼({1})을 사용해 중단점 사이를 이동할 수 있으나 더 빠른 방법이 있습니다. {2}을(를) 누르고 {3}({4})을(를) 사용하여 다음에 실행된 줄로 이동하세요.
js.debugger.part.2.buttons.1=프로그램 학습에 관해 더 자세히 알아보려면 <a href\="{0}">온라인 도움말</a>을 확인하세요.
js.debugger.part.2.buttons.2=이제 표현식의 값을 확인하려면 어떻게 해야 할까요? <ide/>을(를) 사용하면 {0} 팝업으로 표현식 값을 빠르게 확인할 수 있습니다. {1}을(를) 눌러 팝업을 호출하세요.
js.debugger.part.2.evaluate.1={0}을(를) 표현식으로 추가하고 {1}을(를) 누르세요. 결과가 {2}와(과) 같습니다. 이 부분에 문제가 있습니다. 함수가 다른 숫자를 포착하려면 결과가 {3}와(과) 같아지도록 표현식을 약간 변경해야 합니다.
js.debugger.part.2.evaluate.2=이제 팝업을 닫고 코드에서 찾은 문제를 수정해봅시다. 2번 줄의 {0} 안에서 {1}을(를) {2}(으)로 교체하세요.
js.debugger.part.2.stop=마지막으로 디버거가 더 이상 필요하지 않은 경우 디버거를 중지하는 방법을 알아봅시다. 먼저 추가한 중단점을 클릭하여 제거하세요. 그다음 {0}({1})(으)로 디버거를 중지하고 {2}을(를) 눌러 도구 창을 닫으세요.
js.debugger.part.2.end=축하합니다\! {0}의 마지막 부분까지 오셨습니다. 지금까지 모든 종류의 앱을 디버그하는 기본적인 방법을 익혔습니다. 원하는 경우 코드를 한 번 더 실행하여 모든 것이 잘 작동하는지 확인할 수 있습니다. 특정 타입의 앱을 디버그하는 방법에 관해 자세히 알아보려면 <a href\=''{1}''>웹 도움말</a>과 <a href\=''{2}''>블로그 글</a>을 참고하세요. 아래 버튼을 클릭하여 다음 모듈로 이동하세요.
