js.debugger.module.name={0} Depurador 101
js.debugger.module.description=Aprenda a recorrer su programa e identificar problemas sin salir del IDE.
js.debugger.before.title=Antes de depurar\: Ejecutar/depurar configuración
js.debugger.before.intro.1=<ide/>를 사용하면 코드를 작성한 곳에서 모든 종류의 JavaScript 앱을 실행하고 디버그할 수 있습니다.
js.debugger.before.intro.2=En este módulo, lo guiaremos a través de algunos pasos que lo ayudarán sin importar qué tipo de código esté depurando. Depuraremos una aplicación <a href\=''{0}''> Node.js </a> muy básica que compara dos números y devuelve {1} o {2}. Antes de continuar, asegúrese de que Node.js esté <a href\=''{3}''> instalado </a> en su máquina (deberá reiniciar <ide /> si esta es su primera instalación). Presione {4} cuando esté listo para continuar.
js.debugger.before.describe.tool.window={0}을(를) 누르면서 두 가지가 실행되었습니다. 첫째, Node.js를 사용해 파일을 실행하고, 코드 실행 결과가 표시되는 {1} 도구 창을 열었습니다. 둘째, <ide/>가 임시 실행/디버그 구성을 생성하여 사용자가 그 방식으로 파일을 실행할 수 있도록 했습니다. 이제 {2}(으)로 도구 창을 숨기고 실행/디버그 구성을 더 자세히 알아봅시다.
js.debugger.before.save.1=Estas configuraciones actúan como puntos de entrada para ejecutar/depurar su aplicación. Puede ser una configuración temporal o permanente. La principal diferencia es que las configuraciones temporales se eliminan automáticamente cuando se alcanza el límite predeterminado de 5.
js.debugger.before.save.2=Veamos cómo convertir una configuración temporal en una configuración permanente. Abra el menú desplegable {0} ubicado en la esquina superior derecha y seleccione {1}.
js.debugger.before.edit=¡Esto terminó \! Ahora, ¿qué pasa si quiero ajustar la configuración de esta nueva configuración de ejecución/depuración o usar una diferente? Abra el menú {0} nuevamente y haga clic en {1}.
js.debugger.before.manage.1=Aquí es donde administra su configuración de ejecución/depuración. Para agregar una nueva configuración, presione {0}, seleccione el tipo de configuración deseado y especifique la configuración de acuerdo con su proyecto/tipo de configuración. Para ajustar una configuración existente, haga clic en el nombre de la configuración y actualice las requeridas.
js.debugger.before.manage.2=Tómese un tiempo para examinar lo que pueda encontrar y cierre la ventana cuando esté listo para continuar.
js.debugger.before.next=Esta lección termina aquí. Haga clic en el botón de abajo o use {0} para comenzar la siguiente lección.
js.debugger.part.1.title=Depura tu código. Capítulo 1
js.debugger.part.1.start.1=Ahora que nuestra configuración de ejecución/depuración está lista, veamos cómo usar el depurador integrado.
js.debugger.part.1.start.2=Primero, ejecutemos el código una vez más y examinemos el valor de retorno que no vimos en detalle en la lección anterior. Ejecute la configuración seleccionada actualmente haciendo clic en el botón {0} ubicado junto a la lista desplegable con la configuración.
js.debugger.part.1.gutter=Los números para comparar {0} y {1} no son iguales, por lo que debería obtener {2} cuando ejecute su código. Veamos por qué obtuvimos {3} en su lugar. En la línea 1, coloque un punto de interrupción haciendo clic en el espacio en blanco (espacio en blanco) entre\# 1 y el código.
js.debugger.part.1.set.breakpoint=Puede usar puntos de interrupción para detener la ejecución de su aplicación. El círculo rojo que ve en el margen es cómo <ide /> marca los puntos de interrupción. Hacer clic en el punto de interrupción nuevamente lo elimina. Puede personalizar el comportamiento del punto de interrupción, como hacer clic con el botón derecho en un punto de interrupción para establecer una condición. Presione el botón {0} ubicado en la esquina superior derecha o {1} para pasar al siguiente paso.
js.debugger.part.1.tool.window.1=Aparece la ventana de herramientas {0}. En el lado izquierdo de la ventana encontrará iconos para romper/rehacer la configuración y administrar los puntos de interrupción. En la parte superior, verá varias pestañas y varios iconos que le permiten moverse por el código.
js.debugger.part.1.tool.window.2=La pestaña activa {0} es donde tiene lugar la mayor parte de su trabajo. A la derecha, puede ver todos los {1} y los valores agrupados por rango. La vista {2} muestra la pila de llamadas. Mirándolo, puede ver el estado de su aplicación en cualquier punto de la ruta de ejecución. Ahora cambie a la pestaña {3}.
js.debugger.part.1.scripts.tab={0} 탭에는 오류를 포함하여 애플리케이션이 기록한 메시지가 표시됩니다. Node.js 애플리케이션을 디버그하는 경우 <ide/>는 {1} 탭도 표시합니다. 이 탭에서는 JavaScript 코드 조각을 실행하고 콘솔 메시지를 볼 수 있습니다. {2} 탭으로 전환하여 계속 진행하세요.
js.debugger.part.1.next=La pestaña {0} muestra una lista de todos los archivos cargados en el proceso en ejecución. Puede comprobar el contenido de un archivo haciendo doble clic en él. Haga clic en el botón de abajo o use {1} para ir a la segunda parte de esta lección.
js.debugger.part.2.title=Depura tu código. parte 2
js.debugger.part.2.step.into.1=<strong> importante </strong>\: punto de interrupción en la línea 1 antes de continuar, el depurador se inició ({0}) y se abrió en la pestaña {1} Compruébelo.
js.debugger.part.2.step.into.2=Encuentra errores en tu código y aprende algunos útiles consejos de depuración de <ide />. Para comprender mejor cómo se ejecuta su código, puede colocar más puntos de interrupción dentro de su código y usar el botón {0} ({1}) para saltar entre puntos de interrupción, pero hay una forma más rápida. Presione {2} y use {3} ({4}) para moverse a la siguiente línea ejecutada.
js.debugger.part.2.buttons.1=Para obtener más información sobre cómo aprender a programar, consulte la <a href\="{0}"> Ayuda en línea </a>.
js.debugger.part.2.buttons.2=Ahora, ¿cómo comprobamos el valor de la expresión? <ide /> le permite verificar rápidamente el valor de la expresión con una ventana emergente {0}. Presione {1} para llamarlo.
js.debugger.part.2.evaluate.1={0}을(를) 표현식으로 추가하고 {1}을(를) 누르세요. 결과가 {2}와(과) 같습니다. 이 부분에 문제가 있습니다. 함수가 다른 숫자를 포착하려면 결과가 {3}와(과) 같아지도록 표현식을 약간 변경해야 합니다.
js.debugger.part.2.evaluate.2=Ahora cierre la ventana emergente y solucionemos cualquier problema que encontremos en el código. Reemplazar {1} con {2} en {0} en la línea 2
js.debugger.part.2.stop=Finalmente, veamos cómo detener el depurador cuando ya no sea necesario. Haga clic en el punto de interrupción que agregó primero para eliminarlo. Luego, detenga el depurador con {0} ({1}) y presione {2} para cerrar la ventana de la herramienta.
js.debugger.part.2.end=¡Felicitaciones \! Ha llegado al final de {0} y ha aprendido los conceptos básicos para depurar cualquier tipo de aplicación. Si lo desea, puede ejecutar el código una vez más para ver si todo funciona. Para obtener más información sobre la depuración de ciertos tipos de aplicaciones, consulte <a href\=''{1}''> Ayuda web </a> y <a href\=''{2}''> Entrada de blog <Ver/a >. Haga clic en el botón de abajo para pasar al siguiente módulo.
