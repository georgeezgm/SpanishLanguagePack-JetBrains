#Need to translate in pair with action.EditorToggleCase.text key!
toggle.case.part=문자

python.onboarding.module.name=온보딩 투어
python.onboarding.module.description={0}의 주요 기능에 관한 간략한 개요입니다.

python.onboarding.lesson.name=PyCharm 알아보기
python.onboarding.project.view.description=<strong>프로젝트 뷰</strong>는 주요 도구 창 중 하나입니다. 이 뷰는 프로젝트 디렉터리, SDK 전용 외부 라이브러리, 스크래치 파일을 포함합니다. 줄무늬 버튼을 사용해 열면 간단한 데모 프로젝트가 표시됩니다. {0}을(를) 눌러 뷰를 열 수도 있습니다.
python.onboarding.balloon.project.view=클릭하여 <strong>프로젝트 뷰</strong>를 여세요
python.onboarding.balloon.project.directory=프로젝트 디렉터리를 확장하여 프로젝트 파일을 보세요
python.onboarding.balloon.open.file=두 번 클릭하여 {0}을(를) 여세요
python.onboarding.balloon.open.learn.toolbar={0} 도구 창으로 전환하여 이 수업을 계속 진행하세요
python.onboarding.context.menu=데모를 열었으니 이제 실행하세요. 에디터를 마우스 오른쪽 버튼으로 클릭하여 컨텍스트 메뉴를 호출하세요.
python.onboarding.run.sample={0}을(를) 선택하거나 {1}을(를) 사용해보세요.
python.onboarding.temporary.configuration.description=<ide/>이(가) 임시 실행 구성을 생성했습니다. 이 구성은 실행 툴바에서 찾을 수 있습니다. 이 툴바를 사용하면 {0} 실행, {1} 디버그, {2} 코드 프로파일링, 커버리지 {3}(으)로 코드 실행 등 선택한 구성에 대한 인기 있는 실행 액션을 실행할 수 있습니다.
python.onboarding.balloon.click.here=여기를 클릭하여 중단점을 설정하세요
python.onboarding.toggle.breakpoint.1={1} 메서드가 필요한 값인 {0} 대신 {2}을(를) 반환하는 것을 눈치채셨을 것입니다. return 문으로 가서 문제 코드를 디버그해봅시다.
python.onboarding.toggle.breakpoint.2=강조 표시된 영역에서 여백을 클릭하여 중단점을 설정하세요.
python.onboarding.balloon.start.debugging=아이콘을 클릭하여 디버그를 시작하세요
python.onboarding.start.debugging={0} 아이콘을 클릭하여 디버그 프로세스를 시작하세요
python.onboarding.balloon.about.debug.panel={0} 도구 창은 다양한 디버그 액션을 갖춘 {1,choice,0#툴바|1#툴바}를 제공합니다. 나중에 {2} 수업을 수강하여 이 액션을 사용해보세요.
python.onboarding.balloon.stop.debugging=아이콘을 클릭하여 디버그를 시작하세요
python.onboarding.stop.debugging=디버그를 시작해봅시다. {0} 아이콘을 클릭하세요.
python.onboarding.type.division=코드에서 문제를 발견했으니 수정해보겠습니다. 결과 합을 값의 길이로 나눕니다. 학습 스크립트가 이미 {0}을(를) 입력합니다.
python.onboarding.invoke.completion=이제 괄호 {1} 안에 {0}을(를) 입력하겠습니다. <ide/>은(는) 입력할 때 코드 완성 옵션을 자동으로 표시합니다. 또는 {2}을(를) 누르고 계속 입력하여 목록을 줄일 수도 있습니다.
python.onboarding.choose.values.item={0}을(를) 선택한 후 {1}을(를) 누르세요.
python.onboarding.invoke.intention.for.warning.1=방금 버그를 수정했지만 이 코드를 더 깔끔하게 정리할 수 있습니다. PyCharm은 향상될 여지가 있는 코드 줄을 강조 표시하고 노란색 전구를 추가합니다.
python.onboarding.invoke.intention.for.warning.2={0}을(를) 눌러 경고를 미리 보고 빠른 수정을 적용하세요.
python.onboarding.select.fix=첫 항목을 적용하세요. {0}. 이 수정을 적용하면 코드가 깔끔해집니다.
python.onboarding.invoke.intention.for.code=또한, 인텐션을 사용하면 시간이 절약되고 코드를 더 쉽게 작성할 수 있습니다. 인텐션으로 {0}의 반환 타입을 빠르게 추가해봅시다. {1}을(를) 누르세요.
python.onboarding.apply.intention={0}을(를) 선택한 후 {1}을(를) 누르세요.
python.onboarding.complete.template={0}을(를) 입력한 다음 {1}을(를) 누르세요.
python.onboarding.invoke.search.everywhere.1=<ide/>에서 작업할 때 프로젝트, 심볼, 클래스 또는 IDE 액션 내의 파일을 검색하고자 하는 경우가 있습니다. 이번 수업에서는 {0} 액션을 검색하여 {1} 문자열을 소문자로 만들어 봅시다.
python.onboarding.invoke.search.everywhere.2={0}을(를) 두 번 눌러 {1} 대화상자를 여세요.
python.onboarding.search.everywhere.description=보시다시피 선택한 텍스트, {0}이(가) 자동으로 입력 문자열에 복사되었습니다. {0} 대신 {1}을(를) 입력해봅시다.
python.onboarding.apply.action={0} 액션을 선택하고 {1}을(를) 누르세요.
python.onboarding.case.changed=대/소문자가 변경되었습니다.
python.onboarding.epilog=축하합니다. 온보딩 투어를 마쳤습니다. 이제 다음을 진행할 수 있습니다.\n\
  -학습 프로젝트{1} <callback id="{0}">닫기</callback>\n\
  -더 많은 수업 <callback id="{2}">보기</callback>

python.onboarding.finish.title=축하합니다
python.onboarding.finish.text=PyCharm 온보딩 투어를 막 완료했습니다.\n\
이제 학습 프로젝트{0}를 닫으면 됩니다.\n\
학습을 계속 진행하여 다른 수업에 참여할 수도 있습니다.
python.onboarding.finish.exit=데모 프로젝트 닫기
python.onboarding.finish.modules=수업 더보기

python.3.required.warning.message=본 레슨을 완료하려면 Python 3 기반의 <callback id="{0}">인터프리터를 구성</callback> 하세요.

python.f.string.completion.lesson.name=f-string 코드 완성
python.f.string.completion.type.prefix=<ide/>은(는) 자동 f-string 변환을 지원합니다. {0}을(를) 입력하세요.
python.f.string.completion.invoke.manually={0}을(를) 사용해 코드 완성을 수동으로 호출할 수 있습니다.
python.f.string.completion.complete.it={0}(으)로 구문을 완성하세요. {1}을(를) 누르기만 하면 첫 번째 항목이 적용됩니다.
python.f.string.completion.result.message=코드 완성 후에 단순 Python 문자열이 f-string으로 교체된 것을 확인할 수 있습니다.

python.postfix.completion.type=괄호 뒤에 {0}을(를) 입력하여 제안 목록을 확인하십시오.
python.postfix.completion.complete=목록에서 {0}을(를) 선택하고 {1}을(를) 눌러 구문을 완성하십시오.

python.smart.completion.try.basic.completion={0}을(를) 눌러 기본 코드 완성 기능을 사용해보세요.
python.smart.completion.use.smart.completion=아쉽게도 <ide/>에는 {0} 타입에 대한 직접적인 정보가 없습니다. 그러나 컨텍스트에 따라 코드 완성을 제안할 수 있는 경우도 있습니다. {1}을(를) 사용하여 스마트 완성을 호출하세요.
python.smart.completion.finish.completion=이제 {0} 항목을 선택하여 이 강의를 완료하세요.

python.tab.completion.lesson.name=탭 완성
python.tab.completion.start.completion={0}을(를) {1}(으)로 교체하고자 한다고 가정해봅시다. {2}을(를) 눌러 코드 완성을 호출하세요.
python.tab.completion.select.item=키보드 화살표를 사용하여 항목 {0}을(를) 선택하거나 항목을 입력하세요.
python.tab.completion.use.tab.completion={0}을(를) 누르면 {2} 앞에 {1}이(가) 삽입됩니다. 대신 {3}을(를) 눌러 {2}을(를) {1}(으)로 교체하세요.

python.in.place.refactoring.lesson.name=인플레이스 리팩터링
python.in.place.refactoring.start.type.new.name=리팩터링을 실행하는 다른 방법을 생각해봅시다. 지역 변수 {0}의 이름을 {1}(으)로 변경한다고 가정하겠습니다. 새 이름을 입력하세요.
python.in.place.refactoring.invoke.intentions=<ide/>은(는) 사용자가 변수의 이름을 변경하려고 한다고 추측하고 있습니다. 이는 여백에 있는 {0} 아이콘으로 확인할 수 있습니다. 새 이름 입력이 끝나면 {1}(으)로 인텐션을 호출하세요.
python.in.place.refactoring.finish.rename={0}을(를) 눌러 이름 변경을 완료하세요.
python.in.place.refactoring.add.parameter=이 메서드에 인수를 추가하겠습니다. 첫 번째 매개변수 바로 뒤에 에디터의 캐럿을 둡니다. 이제 쉼표와 매개변수 이름을 다음과 같이 입력하세요. {0}
python.in.place.refactoring.invoke.intention.for.parameter=<ide/>은(는) 사용자가 메서드 시그니처를 변경할 것이라고 예상합니다. 이는 여백에 있는 같은 아이콘 {0}(으)로 알 수 있습니다. 새 매개변수 입력이 끝나면 {1}을(를) 눌러 인텐션을 호출하세요.
python.in.place.refactoring.update.callers={0}을(를) 눌러 호출자를 업데이트하세요.
python.in.place.refactoring.signature.preview=<ide/>에서 짧은 시그니처 미리보기를 표시합니다. {0}을(를) 눌러 계속 진행하세요.
python.in.place.refactoring.set.default.value=이제 각 호출에 인수로 삽입되는 값을 입력해야 합니다. 이 샘플에서는 {0}을(를) 선택할 수 있습니다. 그런 다음 {1}을(를) 눌러 계속 진행하세요.
python.in.place.refactoring.remark.about.application.scope=참고: 인플레이스 리팩터링은 정의 위치에만 적용할 수 있으나 이름 변경이나 시그니처 변경 리팩터링은 정의 및 사용 위치 모두에서 바로 호출할 수 있습니다.

python.quick.fix.refactoring.lesson.name=빠른 수정 리팩터링
python.quick.fix.refactoring.type.new.argument=빠른 수정으로 몇몇 리팩터링을 실행할 수 있습니다. 메서드 {0}에 매개변수를 추가하고 변수 {1}을(를) 메서드에 전달하고자 한다고 가정해봅시다. 첫 번째 인수 뒤에 {2}을(를) 입력해봅시다.
python.quick.fix.refactoring.close.completion.list=현재는 어떠한 코드 완성도 적용하지 않으려 합니다. 목록을 닫으세요({0}).
python.quick.fix.refactoring.invoke.intentions=보이는 바와 같이 <ide/>은(는) 이곳에 경고를 표시합니다. {0}을(를) 눌러 인텐션을 호출하세요.
python.quick.fix.refactoring.choose.change.signature={0} 빠른 수정을 선택하세요.
python.quick.fix.refactoring.select.new.parameter=새 매개변수의 디폴트 값을 설정해봅시다. 새 매개변수 줄을 클릭하세요. 아니면, {0}을(를) 누른 다음 {1}을(를) 눌러 매개변수로 포커스를 전환할 수도 있습니다.
python.quick.fix.refactoring.set.default.value={0}을(를) 사용하여 필드 및 체크박스를 탐색할 수 있습니다. 이 체크박스를 선택하면 <ide/>은(는) 디폴트 값을 다른 호출자로 인라인화하거나 새로운 매개변수의 디폴트 값으로 설정합니다. 시그니처 미리보기는 차이를 이해하는 데 도움이 됩니다. 이제 디폴트 값을 0으로 설정하세요.
python.quick.fix.refactoring.finish.refactoring={0}을(를) 눌러(또는 {1}을(를) 클릭) 리팩터링을 종료합니다.

python.rename.press.rename={0}을(를) 눌러 {1} 필드의 이름을 변경합니다(예: {2}(으)로).
python.rename.expand.dynamic.references=간단한 경우에는 {0}은(는) 확인 없이 이름 변경 리팩터링을 실행합니다. 하지만 이 샘플에서 <ide/>은(는) 타입을 알 수 없는 객체에 대한 {0} 메서드의 두 호출을 탐지합니다. {1} 항목을 펼치세요.
python.rename.find.window.closed.warning={0}을(를) 눌러 찾기 도구 창을 다시 여세요.
python.rename.exclude.item={0}은(는) 이름 변경 리팩터링에서 제외되어야 할 것 같습니다. 선택한 후 {1}을(를) 누르세요.
python.rename.finish.refactoring={0} 버튼으로 이름 변경을 완료하세요.

python.editor.coding.assistance.fix.error=이 오류를 수정해봅시다! {0}을(를) 누른 후 {1} 또는 {2} <strong>→ math</strong>를 선택하세요
python.editor.coding.assistance.press.to.fix={0}을(를) 눌러 예상치 못한 인수를 제거하세요.

python.run.configuration.lets.run={0}을(를) 사용하여 간단한 예시를 실행해봅시다.

python.debug.workflow.rerun=프로그램을 다시 실행하겠습니다. {0}을(를) 다시 클릭하거나 {1}을(를) 사용하세요.

python.onboarding.interpreter.description=PyCharm은 이 과정을 위한 Python 인터프리터를 이미 구성했습니다. 인터프리터를 수정하거나 프로젝트에 다른 인터프리터를 생성할 수 있습니다. 이를 위한 가장 간단한 방법은 상태 표시줄의 Python 인터프리터 선택자를 사용하는 것입니다.
choose.python.sdk.to.start.learning.header=Python 인터프리터가 필요합니다
python.onboarding.change.ui.settings=이 수업을 위해, PyCharm에서는 일부 UI 설정을 기본 상태로 변경합니다. 이 수업을 완료하거나 종료하면 해당 환경 설정이 복원됩니다.
python.onboarding.indexing.description=처음으로 프로젝트를 열면 <ide/>에서 Python SDK 및 프로젝트 자체를 검사하여 코딩 지원에 필요한 세부 정보를 수집합니다. 계속하려면 색인화가 완료될 때까지 기다리세요.
python.f.string.completion.help.link=f 문자열 코드 완성
python.smart.completion.help.link=타입 일치 완성
python.in.place.refactoring.help.rename.link=코드 이름 변경
python.in.place.refactoring.help.signature.link=시그니처 변경
python.quick.fix.refactoring.help.link=시그니처 변경
python.run.configuration.help.link=코드 실행 지원
python.debug.workflow.help.link=파트 1. Python 코드 디버깅