# @interface (annotation) related messages
annotation.not.allowed.here=어노테이션은 여기에서 허용되지 않습니다
annotation.unknown.method=메소드 ''{0}'' 을(를) 해결할 수 없습니다
annotation.missing.method=메소드 ''{0}'' 을(를) 찾을 수 없습니다
annotation.illegal.array.initializer=''{0}'' 에 대한 올바르지 않은 이니셜라이저
annotation.duplicate.annotation=어노테이션 중복
annotation.duplicate.attribute=속성 ''{0}'' 중복
annotation.missing.attribute=필수 {0} 누락
annotation.not.applicable='' @{0}''을(를) {1}에 적용할 수 없습니다
annotation.non.constant.attribute.value=속성 값은 일정해야 합니다
annotation.non.class.literal.attribute.value=속성 값은 클래스 리터럴이어야 합니다
annotation.non.enum.constant.attribute.value=속성 값은 열거형 상수여야 합니다
annotation.invalid.annotation.member.type=유효하지 않은 어노테이션 멤버 유형 ''{0}''
annotation.cyclic.element.type=순환 어노테이션 요소 유형
annotation.annotation.type.expected=어노테이션 유형이 필요합니다
annotation.members.may.not.have.throws.list=@interface 멤버는 throw 목록을 가질 수 없습니다
annotation.may.not.have.extends.list=@interface는 확장 목록을 가질 수 없습니다
annotation.not.allowed.ref=이러한 종류의 참조에 적용할 수 없는 어노테이션
annotation.not.allowed.static=정적 멤버 정규화 유형은 어노테이션을 가질 수 없습니다
annotation.not.allowed.void='void' 유형은 어노테이션을 가질 수 없습니다
annotation.not.allowed.var='var' 유형에는 어노테이션을 추가할 수 없습니다
annotation.not.allowed.class=클래스 리터럴 유형은 어노테이션을 가질 수 없습니다
annotation.container.no.value=유효하지 않은 컨테이너 어노테이션 ''{0}''\: ''value'' 메소드가 선언되지 않았습니다
annotation.container.bad.type=유효하지 않은 컨테이너 어노테이션 ''{0}''\: ''value'' 메소드 유형에 ''{1}'' 이(가) 있어야 합니다
annotation.container.low.retention=컨테이너 어노테이션 ''{0}'' 이(가) 포함된 어노테이션보다 보존 기간이 짧습니다(''{1}'')
annotation.container.wide.target=컨테이너 어노테이션 ''{0}'' 의 대상이 해당 어노테이션 대상의 하위 집합이 아닙니다
annotation.container.abstract=컨테이너 어노테이션 ''{0}'' 에 ''{1}'' 에 대한 디폴트 값이 없습니다
annotation.duplicate.explained=어노테이션이 중복되었습니다. {0}
annotation.non.repeatable=''{0}'' 의 선언에 유효한 java.lang.annotation.Repeatable 어노테이션이 없습니다
annotation.container.wrong.place=컨테이너 어노테이션 ''{0}'' 은(는) 포함된 요소와 동시에 존재할 수 없습니다
annotation.container.not.applicable=컨테이너 어노테이션 ''@{0}'' 을(를) {1} 에 적용할 수 없습니다

receiver.wrong.context=리시버는 메소드 매개변수 목록 외부에서 허용되지 않습니다
receiver.static.context=리시버는 정적 컨텍스트에서 사용할 수 없습니다
receiver.wrong.position=리시버는 첫 번째 매개변수여야 합니다
receiver.type.mismatch=리시버 유형이 둘러싸는 클래스 유형과 일치하지 않습니다
receiver.name.mismatch=리시버 이름이 둘러싸는 클래스 유형과 일치하지 않습니다

# generics related messages
generics.holder.type=유형
generics.holder.method=메소드

generics.inferred.type.for.type.parameter.is.not.within.its.bound.extend=유형 매개변수 ''{0}'' 에 대한 추론 유형 ''{2}'' 이(가) 해당 바운드 내에 없으며, ''{1}'' 을(를) 확장해야 합니다
generics.inferred.type.for.type.parameter.is.not.within.its.bound.implement=유형 매개변수 ''{0}'' 에 대한 추론 유형 ''{2}'' 이(가) 해당 바운드 내에 없으며, ''{1}'' 을(를) 구현해야 합니다
generics.type.parameter.is.not.within.its.bound.extend=유형 매개변수 ''{0}'' 이(가) 해당 바운드 내에 없으며, ''{1}'' 을(를) 확장해야 합니다
generics.type.parameter.is.not.within.its.bound.implement=유형 매개변수 ''{0}'' 이(가) 바운드 밖에 있으며, ''{1}''을(를) 구현해야 합니다

# {0} - Type (class) or Method
generics.type.or.method.does.not.have.type.parameters={0} ''{1}''에 유형 매개변수가 없습니다
generics.wrong.number.of.type.arguments=유형 인수의 개수가 잘못되었습니다\: {0}; 필요\: {1}
generics.cannot.be.inherited.with.different.type.arguments=''{0}''을(를) 다른 유형 인수로 상속할 수 없습니다\: {1}'' 및 ''{2}''
generics.select.static.class.from.parameterized.type=매개변수화된 유형에서 정적 클래스 ''{0}''을(를) 선택할 수 없습니다
generics.methods.have.same.erasure={0}; 두 메소드가 동일한 이레이저를 가집니다
generics.methods.have.same.erasure.override={0}; 두 메소드가 동일한 이레이저를 가지나, 한 메소드가 다른 메소드를 재정의하지 않습니다
generics.methods.have.same.erasure.hide={0}; 두 메소드가 동일한 이레이저를 가지나, 한 메소드가 다른 메소드를 숨기지 않습니다
generics.type.parameter.cannot.be.instantiated=유형 매개변수 ''{0}''을(를) 직접 인스턴스화할 수 없습니다
wildcard.type.cannot.be.instantiated=와일드카드 유형 ''{0}''을(를) 직접 인스턴스화할 수 없습니다
generics.wildcard.not.expected=와일드카드가 기대되지 않습니다
generics.wildcards.may.be.used.only.as.reference.parameters=와일드카드는 참조 매개변수로만 사용할 수 있습니다
generics.type.argument.cannot.be.of.primitive.type=유형 인수는 기본 유형일 수 없습니다
generics.unchecked.assignment=검증되지 않은 할당\: ''{0}''을(를) ''{1}''에
generics.unchecked.cast=검증되지 않은 형 변환\: ''{0}''을(를) ''{1}''(으)로
generics.unchecked.call.to.member.of.raw.type=원시 유형 ''{1}''의 멤버로 ''{0}'' 검증되지 않은 호출  
generics.unchecked.call=검증되지 않은 메소드 ''{0}'' 호출
generics.diamond.not.applicable=다이아몬드 연산자는 매개변수가 아닌 유형에 적용할 수 없습니다
generics.reference.parameters.not.allowed=참조 매개변수는 허용되지 않습니다
foreach.not.applicable=foreach를 ''{0}''에 적용할 수 없습니다
illegal.to.access.static.member.from.enum.constructor.or.instance.initializer=열거형 생성자 또는 인스턴스 이니셜라이저에서 정적 멤버 ''{0}''에 액세스하는 것은 올바르지 않습니다
enum.types.cannot.be.instantiated=열거형 유형은 인스턴스화할 수 없습니다
generic.array.creation=제네릭 배열 생성
array.creation.with.type.arguments=유형 인수를 사용하여 배열을 발들 수 없습니다
generics.enum.may.not.have.type.parameters=열거형은 유형 매개변수를 가질 수 없습니다
generics.annotation.members.may.not.have.type.parameters=@interface 멤버는 유형 매개변수를 가질 수 없습니다
annotation.may.not.have.type.parameters=@interface는 유형 매개변수를 가질 수 없습니다
generics.duplicate.type.parameter=유형 매개변수 중복\: ''{0}''
generics.cannot.catch.type.parameters=유형 매개변수를 catch할 수 없습니다
generics.cannot.instanceof.type.parameters=클래스 또는 배열이 필요합니다
illegal.generic.type.for.instanceof=instanceof에 대한 올바르지 않은 제네릭 유형
unsafe.cast.in.instanceof=''{0}''을(를) ''{1}''(으)로 안전하게 캐스팅할 수 없습니다
cannot.select.dot.class.from.type.variable=유형 변수에서 선택할 수 없습니다
method.does.not.override.super=메소드는 상위 클래스의 매소드를 재정의하지 않습니다
call.to.super.is.not.allowed.in.enum.constructor=super 호출은 열거형 생성자에서 허용되지 않습니다
bad.qualifier.in.super.method.reference=디폴트 super 호출의 잘못된 유형 한정자\: {0}
vararg.not.last.parameter=vararg 매개변수는 목록의 마지막 매개 변수여야 합니다
modifiers.for.enum.constants=열거형 상수에 대한 제어자가 허용되지 않습니다
generics.type.arguments.on.raw.type=원시 유형에 주어진 유형 인수
generics.type.arguments.on.raw.method=원시 메소드에 주어진 유형 인수
classes.extends.prohibited.super=클래스가 ''{0}''을(를) 직접 확장할 수 없습니다
unchecked.overriding.incompatible.return.type=검증되지 않은 재정의\: 반환 유형이 검증되지 않은 변환을 필요로 합니다. ''{0}'' 발견, ''{1}'' 필요

interface.expected=인터페이스 기대
no.interface.expected=인터페이스가 기대되지 않습니다
class.expected=클래스 이름 기대
implements.after.interface=구현 절은 인터페이스에 허용되지 않습니다
extends.after.enum=확장 절은 열거형에 대해 허용되지 않습니다
permits.after.enum=허가 절은 열거형에 허용되지 않습니다
static.declaration.in.inner.class=내부 클래스는 정적 선언을 가질 수 없습니다
class.must.be.abstract=클래스 ''{0}'' 은(는) 추상으로 선언되거나 ''{2}''에서 추상 메소드 ''{1}''을(를) 구현해야 합니다
enum.constant.must.implement.method=열거형 상수 ''{0}'' 이(가) ''{2}'' 내 추상 메소드 ''{1}'' 을(를) 구현해야 합니다
class.must.implement.method=클래스 ''{0}'' 은(는) ''{2}''에서 추상 메소드 ''{1}''을(를) 구현해야 합니다
abstract.cannot.be.instantiated=''{0}'' 은(는) abstract이며, 인스턴스화할 수 없습니다
duplicate.class.in.other.file=파일 ''{0}''에서 클래스 중복이 발견되었습니다
duplicate.class=클래스 중복\: ''{0}''
public.class.should.be.named.after.file=클래스 ''{0}'' 은(는) public이며, 이름이 ''{0}.java''인 파일에 선언되어야 합니다
inheritance.from.final.class={1} ''{0}''으로부터 상속할 수 없습니다
package.name.file.path.mismatch=패키지 이름 ''{0}'' 이(가) 파일 경로 ''{1}''에 해당 하지 않습니다
missing.package.statement=package 문 누락\: ''{0}''
cyclic.inheritance=''{0}'' 관련 순환 상속
class.already.imported=''{0}'' 이(가) 이 컴파일 장치에 이미 정의되어 있습니다
class.cannot.extend.multiple.classes=클래스는 여러 클래스를 확장할 수 없습니다
not.allowed.in.interface=인터페이스에서 허용되지 않습니다
qualified.new.of.static.class=정적 클래스의 정규화된 new
invalid.qualified.new=유효하지 않은 정규화된 new
class.name.expected=클래스 이름이 필요합니다
no.enclosing.instance.in.scope=유형 ''{0}'' 을(를) 둘러싸는 인스턴스가 범위 안에 없습니다
is.not.an.enclosing.class=''{0}'' 이(가) 둘러싸는 클래스가 아닙니다
cannot.be.referenced.from.static.context=''{0}''는 정적 컨텍스트에서 참조할 수 없습니다
no.default.constructor.available=''{0}''에서 사용할 수 있는 디폴트 생성자가 없습니다
missing.return.statement=return 문 누락
unreachable.statement=도달할 수 없는 명령문
variable.not.initialized=변수 ''{0}'' 이(가) 초기화 되지 않았을 수 있습니다
variable.already.assigned=변수 ''{0}'' 이(가) 다음에서 이미 할당되었을 수 있습니다
variable.assigned.in.loop=변수 ''{0}'' 이(가) 루프에 할당되어 있을 수 있습니다
assignment.to.final.variable=final 변수 ''{0}''에 값을 할당할 수 없습니다
variable.must.be.final=변수 ''{0}'' 이(가) 내부 클래스 안에서 액세스되며, final로 선언해야합니다
variable.must.be.final.or.effectively.final=변수 ''{0}'' 이(가) 내부 클래스 안에서 액세스되므로 final 또는 유사 final이어야 합니다
lambda.variable.must.be.final=람다 표현식에 사용되는 변수는 final 또는 유사 final이어야 합니다
resource.variable.must.be.final=try-with-resources 리소스로 사용된 변수는 final 또는 유사 final이어야 합니다
declaration.or.variable.expected=선언, final 또는 유사 final 변수 기대
initializer.must.be.able.to.complete.normally=이니셜라이저는 정상적으로 완료할 수 있어야 합니다
weaker.privileges={0}; 더 약한 액세스 권한 (''{1}'')을(를) 할당하려고 시도합니다; 기존 ''{2}''
incompatible.return.type=호환되지 않는 반환 유형 사용 시도
final.method.override=''{0}'' 이(가) ''{2}''에서 ''{1}''을(를) 재정의 할 수 없으며, 재정의된 메소드가 final입니다
overridden.method.does.not.throw={0}; 재정의된 메소드가 ''{1}''을(를) 던지지 않습니다
exception.is.never.thrown=예외 ''{0}'' 이(가) 메소드에서 한번도 던져지지 않습니다
wrong.method.arguments=''{1}''의 ''{0}''을(를) ''{2}''에 적용할 수 없습니다
method.call.expected=메소드 호출 기대
ambiguous.method.call=모호한 메소드 호출\: ''{0}'' 및 ''{1}'' 모두 일치
ambiguous.reference=''{0}'' 참조가 모호합니다, ''{1}'' 및 ''{2}'' 모두 일치
cannot.resolve.method=메소드 ''{0}''을(를) 해결할 수 없습니다
ambiguous.method.call.no.match=''{0}''의 메소드 ''{0}''을(를) 해결할 수 없습니다
missing.method.body=메소드 본문 누락, 아니면 추상으로 선언하십시오
abstract.method.in.non.abstract.class=비 추상 클래스에 추상 메소드가 있습니다
missing.return.type=유효하지 않은 메소드 선언; 반환 유형 필요
duplicate.method=''{0}'' 이(가) ''{1}''에 이미 정의되었습니다
constructor.call.must.be.first.statement=''{0}''(으)로 호출은 생성자 본문의 첫 번째 명령문이어야 합니다
direct.abstract.method.access=추상 메소드 ''{0}''에 직접 액세스할 수 없습니다
unrelated.overriding.methods.return.types=메소드에 관련 없는 반환 유형이 있습니다
overrides.deprecated.method=''{0}''에서 더 이상 사용되지 않는 메소드를 재정의합니다
overrides.marked.for.removal.method=''{0}''에서 더 이상 사용되지 않는 제거 표시된 메소드를 재정의합니다
deprecated.default.constructor=''{0}''의 디폴트 생성자는 더 이상 사용되지 않습니다
marked.for.removal.default.constructor=''{0}''의 디폴트 생성자가 더 이상 사용되지 않으며 제거용으로 표시되어 있습니다
recursive.constructor.invocation=재귀 생성자 호출
wrong.constructor.arguments=''{0}''을(를) ''{1}''에 적용할 수 없습니다
cannot.resolve.constructor=생성자 ''{0}''을(를) 해결할 수 없습니다
invalid.package.annotation.containing.file=패키지 어노테이션이 파일 package-info.java에 있어야 합니다
repeated.annotation.target=어노테이션 대상 반복

clash.methods.message=''{0}'' 이(가) ''{1}''와(과) 충돌
clash.methods.message.show.classes=''{2}''의 ''{0}'' 이(가) ''{3}''의 ''{1}''와(과) 충돌

package.clashes.with.class=패키지 ''{0}'' 이(가) 동일 이름의 클래스와 충돌
class.clashes.with.package=클래스 ''{0}'' 이(가) 동일 이름의 패키지와 충돌

# {0} - colspan, {1} - method1, {2} - class1, {3} - method2, {4} - class2
ambiguous.method.html.tooltip=<html><body><table border\=0><tr><td colspan\={0}>모호한 메소드 호출입니다. </td></tr><tr><td><b>{2}</b>의 {1}\\&nbsp;및</td></tr><tr><td><b>{4}</b>의 {3}\\&nbsp;모두 일치</td></tr></table></body></html>

# {0} - left raw type, {1} - required type arguments row, {2} - right raw type, {3} - found type arguments row, {4} - reason, {5} - greyed title color
incompatible.types.html.tooltip=<html><body><table><tr><td style\=''padding\: 0px 16px 8px 4px;color\: {5}''>필수 유형\:</td><td style\=''padding\: 0px 4px 8px 0px;''>{0}</td>{1}</tr><tr><td style\=''padding\: 0px 16px 0px 4px;color\: {5}''>제공\:</td><td style\=''padding\: 0px 4px 0px 0px;''>{2}</td>{3}</tr></table>{4}</body></html>

interface.methods.cannot.have.body=인터페이스 추상 메소드는 본문을 가질 수 없습니다
abstract.methods.cannot.have.a.body=추상 메소드는 본문을 가질 수 없습니다
native.methods.cannot.have.a.body=네이티브 메소드는 본문을 가질 수 없습니다
static.methods.in.interfaces.should.have.body=인터페이스의 static 메소드는 본문을 포함해야 합니다.
private.methods.in.interfaces.should.have.body=인터페이스의 private 메소드는 본문을 포함해야 합니다.
extension.method.should.have.a.body=확장 메소드에는 본문이 있어야 합니다
extension.method.in.class=확장 메소드는 인터페이스 안에서만 사용할 수 있습니다

instance.method.cannot.override.static.method=''{1}''의 인스턴스 메소드 ''{0}'' 이(가) ''{3}''의 정적 메소드 ''{2}''을(를) 재정의할 수 없습니다
static.method.cannot.override.instance.method=''{1}''의 정적 메소드 ''{0}'' 에서 ''{3}''의 인스턴스 메소드 ''{2}''를 재정의할 수 없습니다
inconvertible.type.cast=변환할 수 없는 유형; ''{0}''을(를) ''{1}''(으)로 형 변환할 수 없습니다
variable.expected=변수 기대
binary.operator.not.applicable=연산자 ''{0}''을(를) ''{1}'', ''{2}''에 적용할 수 없습니다
unary.operator.not.applicable=연산자 ''{0}''을(를) ''{1}''에 적용할 수 없습니다
return.outside.method=외부 메소드 반환
return.from.void.method=void 결과 유형이 있는 메소드로부터 값을 반환할 수 없습니다
missing.return.value=반환 값 누락
return.outside.switch.expr=return이 switch 식 외부에 있습니다

#{0} - exceptions list (comma separated), {1} - exceptions count in the list, {2} - exception source
unhandled.exceptions=처리되지 않은 {1, choice, 0\#예외|2\#예외}\: {0}
unhandled.close.exceptions=\ {2}에서 처리되지 않은 {1, choice, 0\#예외|2\#예외}\: {0}

variable.already.defined=변수 ''{0}'' 은(는) 범위 안에 이미 정의되어 있습니다
break.outside.switch.or.loop=switch 또는 루프 외부의 break
yield.unexpected=yield가 switch 식 외부에 있습니다
yield.void=표현식 유형이 'void'일 수 없습니다
break.outside.switch.expr=break가 switch 식 외부에 있습니다
continue.outside.loop=루프 외부의 continue
continue.outside.switch.expr=continue가 switch 식 외부에 있습니다
not.loop.label=루프 레이블이 아닙니다\: ''{0}''
incompatible.modifiers=올바르지 않은 제어자 조합\: ''{0}'' 및 ''{1}''
modifier.not.allowed=제어자 ''{0}'' 은(는) 허용되지 않습니다
exception.never.thrown.try=예외 ''{0}'' 은(는) 해당 try 블록에서 한번도 던져지지 않습니다
exception.already.caught.warn=도달할 수 없는 섹션\: {1, choice, 0\#예외|2\#예외} ''{0}'' {1, choice, 0\#이(가)|2\#이(가)} 이미 포착되었습니다
not.a.statement=명령문이 아닙니다
invalid.statement=유효하지 않은 명령문
incompatible.types=호환되지 않는 유형입니다. 발견\: ''{1}'', 필요\: ''{0}''
incompatible.types.reason.ambiguous.method.reference=<br/>이유\: 메소드 참조가 모호합니다.{0}'' 및 ''{1}'' 모두 일치
inaccessible.type=''{0}''에 액세스할 수 없습니다
valid.switch.selector.types=byte, char, short 또는 int
valid.switch.17.selector.types=char, byte, short, int, Character, Byte, Short, Integer, String, 또는an enum
dot.expected.after.super.or.this='.' 예상
unqualified.super.disallowed=정규화되지 않은 super 참조는 확장 메소드에서 허용되지 않습니다
static.interface.method.call.qualifier=정적 메소드는 인터페이스 클래스 포함 시에만 호출할 수 있습니다
non.static.symbol.referenced.from.static.context=비정적 {0} ''{1}''는 정적 컨텍스트에서 참조할 수 없습니다
private.symbol=''{0}'' 이(가) ''{1}''에서 private 액세스를 가집니다
protected.symbol=''{0}''에 ''{1}''에서 protected 액세스를 가집니다
package.local.symbol=''{0}'' 이(가) ''{1}''에서 public이 아닙니다. 외부 패키지에서 액세스할 수 없습니다.
visibility.access.problem=''{1)''의 ''{0}''에 액세스할 수 없습니다
visibility.module.access.problem=''{1}''의 ''{0}''에 대한 액세스를 {2}가 방지합니다
array.type.expected=배열 유형 기대; 발견\: ''{0}''
expression.expected=표현식이 필요합니다
array.initializer.not.allowed=배열 이니셜라이저는 허용되지 않습니다
case.statement.outside.switch=switch 외부의 case 문
qualified.enum.constant.in.switch=열거형 switch case 레이블은 열거형 상수의 정규화되지 않은 이름이어야 합니다
constant.expression.required=상수 표현식 필요
duplicate.default.switch.label=디폴트 레이블 중복
duplicate.switch.label=레이블 ''{0}'' 중복
switch.expr.empty='switch' 식에 case 절이 없습니다
switch.expr.incomplete='switch' 식이 가능한 입력 값을 모두 다루지 않습니다
switch.expr.no.result=switch 식에 결과식이 없습니다.
switch.expr.should.produce.result=switch 식은 모든 실행 경로에서 결과를 생성해야 합니다
switch.expr.rule.should.produce.result=switch 식 규칙은 모든 실행 경로에서 결과를 생성해야 합니다

illegal.forward.reference=올바르지 않은 전방 참조
illegal.self.reference=올바르지 않은 자신 참조

unknown.class=알 수 없는 클래스\: ''{0}''
illegal.type.void=올바르지 않은 유형\: 'void'
member.referenced.before.constructor.called=상위 유형 생성자가 호출되기 전에 ''{0}''을(를) 참조할 수 없습니다
label.without.statement=명령문이 없는 레이블
duplicate.label=레이블 ''{0}''을(를) 이미 사용 중입니다
unclosed.comment=닫히지 않은 주석
exception.already.caught=예외 ''{0}'' 이(가) 이미 포착되었습니다
exception.must.be.disjoint=다중 catch 문에서 유형이 분리되어 있어야 합니다\: ''{0}'' 이(가) ''{1}''의 하위 클래스입니다
statement.must.be.prepended.with.case.label=명령문은 case 레이블 이후 사용해야 합니다
different.case.kinds.in.switch=switch에 사용되는 다양한 case 종류
void.type.is.not.allowed='void' 유형은 허용되지 않습니다
single.import.class.conflict=''{0}'' 이(가) 단일 유형 가져오기에 이미 정의되어 있습니다
numeric.overflow.in.expression=표현식 숫자 오버플로
static.member.accessed.via.instance.reference=정적 멤버 ''{0}.{1}'' 이(가) 인스턴스 참조를 통해 액세스됩니다
unresolved.label=정의되지 않은 레이블\: ''{0}''
deprecated.symbol=''{0}'' 은(는) 더 이상 사용되지 않습니다
marked.for.removal.symbol=''{0}'' 더 이상 사용되지 않으며 제거용으로 표시되어 있습니다
qualifier.must.be.expression=한정자는 표현식이어야 합니다
cannot.resolve.symbol=심볼 ''{0}''을(를) 해결할 수 없습니다
class.is.already.defined.in.single.static.import=클래스 ''{0}''는 이미 단일 정적 가져오기에 정의되어 있습니다
class.is.ambiguous.in.single.static.import=하나의 정적 import문에 모호한 클래스 ‘{0}’ 이(가) 있습니다
field.is.already.defined.in.single.static.import=필드 ''{0}'' 이(가) 이미 단일 정적 가져오기에 정의되어 있습니다
field.is.ambiguous.in.single.static.import=필드 ''{0}'' 이(가) 단일 정적 가져오기에서 모호합니다
annotation.interface.members.may.not.have.parameters=@interface 멤버는 매개변수를 가질 수 없습니다
class.in.default.package=클래스 ''{0}'' 이(가) 디폴트 패키지에 있습니다

local.variable.is.never.used=변수 ''{0}'' 이(가) 사용되지 않습니다
local.variable.is.not.used.for.reading=변수 ''{0}'' 이(가) 할당되지만 한번도 액세스되지 않습니다
local.variable.is.not.assigned=변수 ''{0}'' 이(가) 한번도 할당되지 않습니다
private.field.is.not.used=private 필드 ''{0}'' 이(가) 사용되지 않습니다
field.is.not.used=필드 ''{0}'' 이(가) 사용되지 않습니다
field.is.not.used.for.reading={0} 필드 ''{1}'' 이(가) 할당되지만 한 번도 액세스되지 않습니다.
private.field.is.not.assigned=private 필드 ''{0}'' 이(가) 한번도 할당되지 않습니다
parameter.is.not.used=매개변수 ''{0}'' 이(가) 한번도 사용되지 않습니다
pattern.variable.is.not.used=패턴 변수 ''{0}'' 이(가) 한번도 사용되지 않습니다
private.method.is.not.used=private 메소드 ''{0}'' 이(가) 한번도 사용되지 않습니다
method.is.not.used=메소드 ''{0}'' 이(가) 한번도 사용되지 않습니다
constructor.is.not.used=생성자 ''{0}'' 이(가) 한번도 사용되지 않습니다
private.constructor.is.not.used=private 생성자 ''{0}'' 이(가) 한번도 사용되지 않습니다
private.inner.class.is.not.used=private 내부 클래스 ''{0}'' 이(가) 한번도 사용되지 않습니다
private.inner.interface.is.not.used=private 내부 인터페이스 ''{0}'' 이(가) 한번도 사용되지 않습니다
type.parameter.is.not.used=유형 매개변수 ''{0}'' 이(가) 한번도 사용되지 않습니다
local.class.is.not.used=지역 클래스 ''{0}'' 이(가) 한번도 사용되지 않습니다
class.is.not.used=클래스 ''{0}'' 이(가) 한번도 사용되지 않습니다
interface.is.not.used=인터페이스 ''{0}'' 이(가) 한번도 사용되지 않습니다
enum.is.not.used=열거형 ''{0}'' 이(가) 한번도 사용되지 않습니다

hexadecimal.numbers.must.contain.at.least.one.hexadecimal.digit=16진수는 하나 이상의 16진수 숫자를 포함해야 합니다
binary.numbers.must.contain.at.least.one.hexadecimal.digit=2진수는 하나 이상의 2진 숫자를 포함해야 합니다
integer.number.too.large=integer 숫자가 너무 큽니다
long.number.too.large=long 숫자가 너무 큽니다
malformed.floating.point.literal=잘못된 부동 소수점 리터럴 형식
illegal.escape.character.in.character.literal=문자 리터럴의 올바르지 않은 이스테이프 문자
too.many.characters.in.character.literal=문자 리터럴에 문자가 너무 많습니다
empty.character.literal=빈 문자 리터럴
illegal.line.end.in.string.literal=문자열 리터럴의 올바르지 않은 줄 끝
unclosed.char.literal=닫히지 않은 문자 리터럴
illegal.escape.character.in.string.literal=문자열 리터럴의 올바르지 않은 이스케이프 문자
floating.point.number.too.large=부동 소수점 수가 너무 큽니다
floating.point.number.too.small=부동 소수점 수가 너무 작습니다
illegal.underscore=올바르지 않은 밑줄
text.block.new.line=잘못된 텍스트 블록 시작\: 따옴표를 연 후 새 줄이 누락되었습니다
text.block.unclosed=닫히지 않은 텍스트 블록

# suppress inspection "UnusedProperty"
expected.identifier=식별자 기대
# suppress inspection "UnusedProperty"
unexpected.token=예기치 않은 토큰
expected.identifier.or.type=식별자 또는 유형 기대
# suppress inspection "UnusedProperty"
expected.rbracket=']' 예상
# suppress inspection "UnusedProperty"
expected.expression=표현식 기대
expected.semicolon=';' 예상
# suppress inspection "UnusedProperty"
expected.lparen='(' 예상
# suppress inspection "UnusedProperty"
expected.rparen=')' 예상
# suppress inspection "UnusedProperty"
expected.rbrace='}' 예상
# suppress inspection "UnusedProperty"
expected.lbrace='{' 예상
expected.parameter=매개변수 기대
expected.comma=',' 예상
# suppress inspection "UnusedProperty"
expected.lparen.or.lbracket='(' 또는 ']' 기대
# suppress inspection "UnusedProperty"
else.without.if='if'가 없는 'else'
# suppress inspection "UnusedProperty"
catch.without.try='try'가 없는 'catch'
# suppress inspection "UnusedProperty"
finally.without.try='try'가 없는 'finally'
# suppress inspection "UnusedProperty"
expected.statement=명령문 기대
# suppress inspection "UnusedProperty"
expected.while='while' 기대
# suppress inspection "UnusedProperty"
expected.catch.or.finally='catch' 또는 'finally' 기대
# suppress inspection "UnusedProperty"
expected.boolean.expression=bool 표현식 기대
# suppress inspection "UnusedProperty"
expected.switch.label='case', 'default' 또는 '}' 기대
# suppress inspection "UnusedProperty"
expected.switch.rule=표현식, 블록 또는 throw 문 기대
error.cannot.resolve.class=클래스 ''{0}''을(를) 해결할 수 없습니다
error.cannot.resolve.class.or.package=클래스 또는 패키지 ''{0}''를 해결할 수 없습니다
expected.class.or.package=클래스 또는 패키지 기대
suspicious.name.assignment=''{0}''을(를) ''{1}''에 할당할 수 없습니다
suspicious.name.parameter=''{0}''을(를) 매개변수 ''{1}''(으)로 전달할 수 없습니다
suspicious.name.return=''{0}'' 이(가) 메소드 ''{1}''에서 반환 될 수 없습니다
type.parameter.cannot.be.followed.by.other.bounds=유형 매개변수 다음에 다른 바운드가 올 수 없습니다
generic.extend.exception=제네릭 클래스는 'java.lang.Throwable'을 확장할 수 없습니다
illegal.initializer=''{0}''에 대한 올바르지 않은 이니셜라이저
class.cannot.inherit.from.its.type.parameter=클래스는 자신의 유형 매개변수로부터 상속할 수 없습니다
cannot.resolve.package=패키지 {0} 을(를) 해결할 수 없습니다
override.not.allowed.in.interfaces=@Override는 인터페이스 메소드 구현 시 허용되지 않습니다
declaration.not.allowed=선언은 허용되지 않습니다

underscore.identifier.error=Java 9에서 '_'는 키워드이며 식별자로 사용할 수 없습니다
underscore.lambda.identifier=람다 매개변수 이름으로 '_'를 사용할 수 없습니다

assert.identifier.warn='assert'는 Java 1.4 이후 릴리스에서 식별자로 사용할 수 없습니다
enum.identifier.warn='enum'은 Java 1.5 이후 릴리스에서 식별자로 사용할 수 없습니다
underscore.identifier.warn='_'는 Java 9 이후 릴리스에서 식별자로 사용할 수 없습니다
var.identifier.warn='var'은 Java 10 이후 릴리스에서 클래스 이름으로 사용할 수 없습니다
module.unwanted.modifier.warn='requires java.base'에 대한 제어자는 Java 10 이후 릴리즈에서 사용이 금지됩니다
yield.identifier.warn='yield'는 Java 14 이후 릴리스에서 클래스 이름으로 사용할 수 없습니다
yield.unqualified.method.warn='yield' 메소드에 대한 정규화되지 않은 호출은 Java 14 이후 릴리스에서 지원하지 않을 수 있습니다

module.no.package=모듈 파일에는 'package' 문을 사용할 수 없습니다
module.file.wrong.name=모듈 선언이 'module-info.java'라는 이름의 파일에 있어야 합니다
module.file.duplicate='module-info.java'가 모듈에 이미 존재합니다
module.duplicate.requires=''requires'' 중복\: {0}
module.duplicate.exports=''exports'' 중복\: {0}
module.duplicate.opens=''opens'' 중복\: {0}
module.duplicate.uses=''uses'' 중복\: {0}
module.duplicate.provides=''provides'' 중복\: {0}
module.duplicate.exports.target=''exports'' 대상 중복\: {0}
module.duplicate.opens.target=''opens'' 대상 중복\: {0}
module.duplicate.impl=구현 중복\: {0}
module.file.wrong.location=모듈 선언은 모듈의 소스 루트에 있어야 합니다
module.open.duplicate.text=중복으로 이동
module.not.found=모듈을 찾을 수 없습니다\: {0}
module.ambiguous=모호한 모듈 참조\: {0}
module.not.on.path=모듈이 종속되지 않습니다\: {0}
module.cyclic.dependence=순환 종속성\: {0}
module.opens.in.weak.module='opens'는 열린 모듈에서 허용되지 않습니다
package.not.found=패키지를 찾을 수 없습니다\: {0}
package.is.empty=패키지가 비어 있습니다\: {0}
module.service.enum=서비스 정의가 열거형입니다\: {0}
module.service.alien=서비스 구현은 제공 지시문과 동일한 모듈에서 정의되어야 합니다
module.service.impl=서비스 구현 유형은 서비스 인터페이스 유형의 하위 유형이거나 인수가 없는 공용 정적 'provider' 메소드가 필요합니다
module.service.abstract=서비스 구현이 추상 클래스입니다\: {0}
module.service.inner=서비스 구현이 내부 클래스입니다\: {0}
module.service.no.ctor=서비스 구현에는 공용 디폴트 생성자가 없습니다\: {0}
module.service.provider.type=''provider'' 메소드 반환 유형은 서비스 인터페이스 유형의 하위 유형이어야 합니다\: {0}
module.service.unused=제공되었지만 내보내거나 사용하지 않는 서비스 인터페이스
module.conflicting.reads=모듈 ''{0}'' 이(가) ''{2}'' 및 ''{3}'' 모두에서 패키지 ''{1}''을 읽습니다
module.conflicting.packages=패키지 ''{0}'' 이(가) 다른 모듈에 존재 합니다\: {1}
module.access.to.unnamed=패키지 ''{0}'' 이(가) 명명되지 않은 모듈에 선언되지만 모듈 ''{1}'' 이(가) 읽지 않습니다
module.access.from.named=패키지 ''{0}'' 이(가) 모듈 ''{1}''에서 선언되지만 모듈 ''{2}''로 내보내지 않습니다
module.access.from.unnamed=패키지 ''{0}'' 이(가) 모듈 ''{1}''에서 선언되지만 명명되지 않은 모듈로 내보내지 않습니다
module.access.does.not.read=패키지 ''{0}'' 이(가) 모듈 ''{1}''에서 선언되지만 모듈 ''{2}''(으)로 내보내지 않습니다
module.access.not.in.graph=패키지 ''{0}''는 모듈 ''{1}''에서 선언되지만 모듈 그래프에 없습니다
module.access.bad.name=패키지 ''{0}''가 유효하지 않은 이름 (''{1}'')(으)로 모듈에서 선언됩니다

restricted.identifier=''{0}'' 이(가) 제한된 식별자이며 유형 선언에 사용될 수 없습니다
restricted.identifier.reference=제한된 유형 ''{0}''에 대한 올바르지 않은 참조 ''{0}''

lvti.no.initializer=유형 유추할 수 없습니다\: 이니셜라이저가 없는 변수의 'var'.
lvti.lambda=유형을 추론할 수 없습니다\: 람다 표현식이 명시적 대상 유형을 필요로 합니다
lvti.method.ref=유형을 추론할 수 없습니다\: 메소드 참조가 명시적 대상 유형을 필요로 합니다
lvti.compound='var'은 복합 선언에서 허용되지 않습니다.
lvti.array='var'은 배열의 요소 유형으로 허용되지 않습니다
lvti.null=유형을 추론할 수 없습니다\: 변수 이니셜라이저가 'null'입니다
lvti.void=유형을 추론할 수 없습니다\: 변수 이니셜라이저가 'void'입니다
lvti.selfReferenced=유형을 추론할 수 없음\: 변수 초기화가 자신을 참조합니다

record.no.header=기록에 헤더가 선언되지 않았습니다
record.header.regular.class=비레코드에 대해 선언된 레코드 헤더
record.extends=레코드에 대해 확장 절이 허용되지 않습니다
record.component.vararg.not.last=vararg 레코드 구성 요소는 목록의 마지막 구성 요소여야 합니다.
record.component.cstyle.declaration=C 스타일의 레코드 구성 요소 선언은 허용되지 않습니다
record.component.restricted.name=올바르지 않은 레코드 구성 요소 이름 ''{0}''
record.instance.initializer=인스턴스 이니셜라이저가 레코드에서 허용되지 않습니다
record.instance.field=인스턴스 필드가 레코드에서 허용되지 않습니다
record.accessor.wrong.return.type=잘못된 구성 요소 접근자 반환 유형. 기대\: ''{0}'', 발견\: ''{1}''
record.canonical.constructor.wrong.parameter.type=레코드 구성 요소에 대한 잘못된 매개변수 유형 ''{0}''. 기대\: ''{1}'', 발견\: ''{2}''
record.canonical.constructor.wrong.parameter.name=표준 생성자 매개변수 이름이 레코드 구성 요소 이름과 일치해야 합니다\: 기대\: ''{0}'', 발견\: ''{1}''
record.constructor.call.in.canonical=표준 생성자는 다른 생성자에게 위임할 수 없습니다
record.no.constructor.call.in.non.canonical=비표준 레코드 생성자는 다른 생성자에게 위임해야 합니다
record.special.method.type.parameters={0} 이(가) 매개변수를 가질 수 없습니다
record.special.method.non.public={0} 은(는) ''public''여야 합니다.
record.special.method.stronger.access={0} 액세스 레벨은 기록 액세스 레벨(''{1}'')보다 제한적일 수 없습니다
record.special.method.throws={0} 이(가) 던저진 예외를 선언할 수 없습니다
record.canonical.constructor=표준 생성자
record.compact.constructor=압축 생성자
record.accessor=기록 구성 요소 접근자
record.component.not.initialized=기록 구성 요소 ''{0}'' 이(가) 표준 생성자에서 초기화되지 않을 수 있습니다
compact.constructor.in.regular.class=매개변수 목록 기대
record.compact.constructor.return='return' 문은 압축 생성자에 허용되지 않습니다.
record.permits=허가 절은 레코드에 허용되지 않습니다

insufficient.language.level={0} 은(는) 언어 수준 ''{1}''에서 지원하지 않습니다

cannot.select.from.a.type.parameter=유형 매개변수에서 선택할 수 없음
method.reference.expression.is.not.expected=메소드 참조식은 필요하지 않습니다
not.a.functional.interface={0} 은(는) 함수적 인터페이스가 아닙니다.
cannot.find.class={0} 클래스를 찾을 수 없음
cannot.infer.functional.interface.type=함수적 인터페이스 유형을 추론할 수 없음
lambda.expression.not.expected=람다 식은 적합하지 않음
lambda.parameters.consistency.message=람다 식에서 'var'과 명시적으로 입력된 매개변수를 혼용할 수 없음
target.method.is.generic=대상 메소드는 제네릭 메소드입니다.
multiple.non.overriding.abstract.methods.found.in.0={0}에서 재정의하지 않는 추상 메소드 여러 개가 발견되었습니다.
multiple.non.overriding.abstract.methods.found.in.interface.0={0} 인터페이스에서 재정의하지 않는 추상 메소드 여러 개가 발견되었습니다.
no.target.method.found=대상 메소드를 찾을 수 없음
target.type.of.a.lambda.conversion.must.be.an.interface=람다 변환의 대상 유형은 인터페이스여야 합니다.
incompatible.parameter.types.in.lambda=람다 식에서 호환되지 않는 매개변수 유형\: {0} 예상, {1} 발견
incompatible.parameter.types.in.lambda.wrong.number.of.parameters=람다 식에서 호환되지 않는 매개변수 유형\: 매개변수 개수 오류\: {0} 예상, {1} 발견
an.enclosing.instance.of.type.not.in.scope.method.reference.context=''{0}'' 유형을 둘러싸는 인스턴스가 범위 안에 없습니다.
parameterized.qualifier.on.static.method.reference.context=static 메소드 참조에서 매개변수화된 한정자
static.method.referenced.through.receiver.method.reference.context=리시버를 통해 참조되는 정적 메소드
static.method.referenced.through.non.static.qualifier.method.reference.context=비 static 한정자를 통해 참조되는 static 메소드
non.static.method.cannot.be.referenced.from.a.static.context.method.reference.context=static 컨텍스트에서 비 static 메소드를 참조할 수 없습니다.
abstract.method.0.cannot.be.accessed.directly.method.reference.context=추상 메소드 ''{0}''에 직접 액세스할 수 없습니다
error.interface.member.clashes={1}에서 @interface 멤버가 ''{0}''와(과) 충돌
anonymous.class.implements.interface.cannot.have.type.arguments=익명 클래스는 인터페이스를 구현하며 유형 인수를 가질 수 없습니다.
formal.varargs.element.type.inaccessible.here=형식 varar 요소 유형 {0} 은(는) 액세스할 수 없는 유형입니다.
unexpected.type.class.expected=예기치 않은 유형입니다. 클래스가 필요합니다.
repeated.interface=반복된 인터페이스
class.cannot.be.inherited.with.different.arguments={0}을(를) 다른 유형 인수로 상속할 수 없습니다. {1}
bad.type.in.switch.expression=switch 식 내 유형이 잘못되었습니다. {0} 은(는) {1}(으)로 변환할 수 없습니다.
switch.expression.cannot.be.void=switch 식의 대상 유형은 void일 수 없습니다.
annotation.on.static.member.qualifying.type.family.name=유형 어노테이션 이동
not.inner.class=''{0}'' 은(는) 내부 클래스가 아닙니다
anonymous.class.implements.interface.cannot.have.qualifier=익명 클래스가 인터페이스를 구현함; new 한정자를 가질 수 없음
qualified.class.reference.not.allowed.in.qualified.new=정규화된 클래스 참조는 정규화된 new에서 허용되지 않습니다
actual.type.argument.contradict.inferred.type=실제 유형 인수 및 추론 유형이 서로 모순됩니다
default.method.overrides.object.member=디폴트 메소드 ''{0}'' 이(가) ''java.lang.Object''의 멤버를 재정의합니다
two.methods.are.inherited.with.same.signature={1} 의 메소드 {0} 및 {3} 의 {2} 이(가) 같은 시그니처로 상속되었습니다
cannot.select.from.parameterized.type=매개변수화된 유형에서 선택할 수 없음
safevarargs.not.allowed.non.final.instance.methods=@SafeVarargs은 final이 아닌 인스턴스 메소드에서 허용되지 않습니다
safevarargs.not.suppress.potentially.unsafe.operations=@SafeVarargs가 안전하지 않을 수 있는 연산을 억제합니다
safevarargs.not.applicable.for.reifiable.types=@SafeVarargs를 구체화 유형에 적용할 수 없습니다
type.parameter.has.incompatible.upper.bounds=유형 매개변수 {0} 이(가) 호환되지 않는 상위 바운드를 포함합니다\: {1}
safevarargs.not.allowed.on.methods.with.fixed.arity=@SafeVarargs은 매개변수 개수가 고정된 인스턴스 메소드에서 허용되지 않습니다
functional.interface.must.not.be.sealed.error.description=함수 인터페이스를 ''{0}'' (으)로 선언할 수 없습니다
sealed.type.inheritor.expected.modifiers={0}, {1} 또는 {2} 제어자가 필요합니다
not.allowed.in.sealed.hierarchy={0} 은(는) 봉인된 계층 구조에서 허용되지 않습니다
invalid.permits.clause=유효하지 않은 permits 절\: ''{0}'' 이(가) 봉인되어야 합니다
invalid.permits.clause.direct.implementation=유효하지 않은 permits 절\: ''{0}'' 이(가) ''{2}'' 을(를) 직접 {1, choice, 1\#확장|2\#구현}해야 합니다
sealed.must.have.inheritors=봉인된 클래스는 하위 클래스를 포함해야 합니다
permit.list.must.contain.outside.inheritors=봉인된 클래스의 permits 절은 모든 하위 클래스를 포함해야 합니다
permits.list.generics.are.not.allowed=제네릭은 허가 목록에서 허용되지 않습니다
local.classes.must.not.extend.sealed.classes=지역 클래스는 봉인된 클래스를 확장할 수 없습니다
anonymous.classes.must.not.extend.sealed.classes=익명 클래스는 봉인된 클래스를 확장할 수 없습니다
class.not.allowed.to.extend.sealed.class.from.another.package=클래스는 다른 패키지의 봉인된 클래스를 확장할 수 없습니다
class.not.allowed.to.extend.sealed.class.from.another.module=클래스는 다른 모듈의 봉인된 클래스를 확장할 수 없습니다
annotation.cannot.be.local=지역 어노테이션은 허용되지 않습니다
create.class.action.this.not.valid.java.qualified.name=올바른 Java 정규화된 이름이 아닙니다
text.class.inherits.abstract.and.default={0}이(가) 유형 {2} 및 {3}의 {1}에 대해 추상 및 디폴트를 상속합니다
text.class.inherits.unrelated.defaults={0}이(가) 유형 {2}의 {1}에 대해 관련 없는 디폴트를 상속합니다
text.improper.formed.type=유형의 양식이 부적절합니다. 일부 유형 매개변수가 누락되었습니다
text.class.is.not.accessible={0}은(는) 현재 컨텍스트에서 액세스할 수 없습니다
text.class.cannot.access={0}에 액세스할 수 없습니다
auto.closeable.resource=자동 종료 가능한 리소스
annotation.type.permits=허가 절은 어노테이션 유형에 허용되지 않습니다