js.module.feedback=Have an idea how to make the training experience better? Then complete <a href\="https\://forms.gle/EhBiJmN5R638htFv9">this</a> short survey so we can improve the training for you and other WebStorm users.

js.editor.basics.module.name=에디터 기초
js.editor.basics.module.description=Learning the editor essentials – start writing better code and saving time on common tasks from day one.

js.editor.completion.title=코드 완성
js.editor.completion.choose.lookup=<ide/> is full of features that help you write better code and increase your productivity.Let’s start with code completion. It enables you to code faster by completing keywords and symbols from language APIs and project dependencies. Type {0} and press {1} to autocomplete {2}.
js.editor.completion.choose.method=따라서 코드 완성을 사용하면 코드 입력 시 컨텍스트 인식 제안이 표시됩니다. 이 제안 중 하나를 추가하려면 앞서 행한 바와 같이 {0} 을/를 사용하거나 {1} 을/를 눌러 기존 항목을 교체할 수 있습니다. 이제 {3} 뒤에 {2} 을/를 추가하고 {4} 을/를 입력하여 {0} (으)로 {5} 메소드를 자동 완성하십시오.
js.editor.completion.parameter.info=캐럿을 {1} 내에 두고 취득한 툴팁({0})을 사용하여 메소드와 함수의 매개변수 이름을 빠르게 검색할 수 있습니다. 상황에 따라 더 상세한 문서를 확인하는 것을 권장합니다. {2} 을/를 눌러 상세 문서를 확인해봅시다.
js.editor.completion.add.parameter=이는 JavaScript 문서를 <ide/>에서 직접 검색하는 방법입니다. 이제 {1} 안에 {0} 를 추가하여 진행하십시오.
js.editor.completion.console.log.argument=마지막으로 {0} 구문을 완성해봅시다. 캐럿을 8번째 줄의 {1} 내부에 두고 코드 완성을 사용하여 {2} 을/를 추가하십시오.
js.editor.completion.next=이번 수업은 여기까지입니다. 다음 강의를 시작하려면 아래 버튼을 클릭하거나 {0} 을/를 사용하십시오.

js.editor.code.editing.tips.and.tricks.title=코드 편집 팁 및 정보
js.editor.code.editing.reformat.start=코드를 더 빠르게 편집하는 데 도움이 되는 몇 가지 팁과 정보를 알아보겠습니다. 첫째로, <ide/>를 사용해 코드의 포맷을 수동으로 수정할 필요는 없습니다. {0} (으)로 코드 서식을 다시 지정합니다.
js.editor.code.editing.select.word=이상입니다\! 이제 파일 내 코드를 빠르게 선택하는 방법을 알아보겠습니다. {0} 을/를 여러 번 눌러 두 번째 tr 요소 전체를 선택합니다(14-18줄).
js.editor.code.editing.comment.delete.unselect.move.up.1=Now that you''ve selected the code, you can (un)comment it out ({0}), delete it ({1}), or shrink the selection ({2}).
js.editor.code.editing.comment.delete.unselect.move.up.2=Another thing you can do is move this code up or down the file. Let’s move it up with {0}.
js.editor.code.editing.multi.caret.1=Next up is multi-caret editing. Use it to save time as you modify code in several places at once. Place the caret inside the first {0} tag (line 10). Then select all {1} tags inside the same tr element (lines 10-12)\: press {2} six times until all the necessary tags are selected.
js.editor.code.editing.multi.caret.2=Let''s replace {0} with {1} and press {2} to exit the multi-caret mode.
js.editor.code.editing.duplicate.delete.comment=Finally, let’s quickly try the most popular line actions, such as duplicate line, delete line, or comment it out. Use {0} to duplicate the selected line now. Then press {1} and {2} to try the other line actions.
js.editor.code.editing.next=이번 수업은 여기까지입니다. 아래 버튼을 클릭하여 다음 강의를 시작하거나 {0} 을/를 사용하십시오.

js.editor.code.inspection.title=코드 검사의 위력
js.editor.code.inspection.intro=에디터로 작업하는 동안 <ide/>는 지속적으로 코드를 분석하여 코드 내 다양한 문제를 탐지하고 코드를 개선할 수 있는 방법을 제안합니다. 열린 파일의 4번째, 5번째 줄에 두 개의 문제가 강조 표시되어 있습니다. {0} 을/를 눌러 문제를 확인하십시오.
js.editor.code.inspection.show.intentions.1=You can also use {0} to jump from one error to another. Or, you can explore the found problems by hovering over them.
js.editor.code.inspection.show.intentions.2=In this file, the IDE has located an unresolved variable – one that wasn''t defined anywhere in the code. It suggests creating a new one, {0}, as one of the possible fixes, but we need to add a parameter book instead. Place the caret on {1} and press {2} to see the full list of fixes.
js.editor.code.inspection.run.intention={0} 을/를 선택한 후 {1} 을/를 누르십시오.
js.editor.code.inspection.checkmark=에디터의 오른쪽 상단을 보면 파일에 문제가 없음을 확인하는 녹색 체크 마크({0})가 나타납니다. 단, 코드를 짧게 하기 위해 최적화할 수 있는 세부 사항은 남아있습니다. 캐럿을 {1}(3번째 줄)에 두고 {2} 을/를 누르십시오.
js.editor.code.inspection.make.shorter=Now let’s make our function expression shorter. Select the {0} quick-fix and press {1}.
js.editor.code.inspection.next=이번 수업은 여기까지입니다. 아래 버튼을 클릭하여 다음 강의를 시작하거나 {0} 을/를 사용하십시오.

js.editor.navigation.title=효율적 탐색
js.editor.navigation.recent.files=프로젝트 내 이동부터 시작합시다. {0} 을/를 눌러 {1} 팝업을 호출하십시오.
js.editor.navigation.choose.structure=이 팝업을 사용하면 최근 파일과 IDE 도구 창 사이를 빠르게 이동할 수 있습니다. 이러한 도구 창 중 하나는 프로젝트의 작은 부분인 단일 파일 간 이동하는 데 도움이 됩니다. 자세한 내용을 보려면 {0} 탭을 클릭하십시오.
js.editor.navigation.activate.structure=So, the {0} tool window can help you examine a file faster. It provides an overview of its structure and lets you jump to a specific item simply by typing its name. Start typing {1} anywhere in the tool window area, press {2}, and then press {3} to close the panel and jump to the code.
js.editor.navigation.find.usages=액션 결과 캐럿이 {0}(줄 9)(으)로 이동했습니다. 캐럿을 그곳에 둔 채로 {1} 을/를 눌러 항목의 사용 위치를 빠르게 찾을 수 있게 도와주는 다른 도구 창을 여십시오.
js.editor.navigation.hide.tool.window=좋습니다\! 이제 프로젝트 전체와 라이브러리 전체에서 giveTreat의 사용 위치를 확인할 수 있습니다. {0} (으)로 도구 창을 닫으십시오.
js.editor.navigation.search.everywhere=이제 {0} 을/를 두 번 눌러 더 빠르게 검색할 수 있게 도와주는 다른 기능을 찾습니다.
js.editor.navigation.search.everywhere.tabs=This is the {0} popup. It lets you instantly find any action, file, class or symbol, and shows all the matches in one place. If you want to run a more specific search, you can press {1} to switch from {2} to any other tab, such as {3} or {4}. Or you can use a shortcut to open a specific tab that you need. Let’s try the latter with {5}.
js.editor.navigation.search.action={0} 탭이 활성화되어 있으므로 검색 표시줄에 {1} 을/를 입력하여 기타 유융한 네비게이션 기능의 단축키를 검색하십시오.
js.editor.navigation.go.to.declaration=Notice the {0} next to <strong>Go to Declaration or Usages</strong> – it shows you usages for the definition and vice versa. Let’s close the popup, place the caret on {1} (line 16), and press {0} to look for its declaration.
js.editor.navigation.keymap.reference=축하합니다\! {0} 끝에 도달했습니다. <a href\="{1}">키맵 참조</a>를 출력하여 <ide/>에서 모든 단축키를 편리하게 이용하십시오. 아래 버튼을 선택하여 다음 모듈로 이동하십시오.

js.editor.refactorings.title=간결하게 리팩토링
js.editor.refactorings.this=<ide/> has a <a href\=''{0}''>number of refactorings</a> that can automatically restructure existing code without changing its behavior across the entire project. Let''s preview the list of refactorings available for the {1} parameter. Press {2} or select {3} from the main menu.
js.editor.refactorings.rename=With {0}, you don''t need to memorize all the refactorings or their shortcuts. Click {1} to see one of the most popular refactorings in action.
js.editor.refactorings.rename.apply=Rename the {0} parameter to {1} and press{2}. This action will apply the changes across all files in the project.
js.editor.refactorings.shortcut=Well done\! Let''s try to refactor code by using a shortcut. Place the caret at the {0} property (line 4) and press {1}.
js.editor.refactoring.replace=Now replace all two occurrences with the {0} variable named {1}.
js.editor.refactoring.select.expression=Let''s create a new variable, {0} that will contain {1}. Select the {1} expression from the list and press{2}.
js.editor.refactorings.next=You''ve just explored two ways to refactor code in <ide/>. Print out the <a href\="{0}">keymap reference</a> if you prefer using shortcuts, or simply keep using the {1} menu. Click the button below to start the next lesson or use {2}.

js.getting.started.module.name=테스트 시작하기
js.getting.started.module.description=Jest를 사용한 예시를 살펴보고 {0}에서 유닛 테스트를 간소화하는 방법을 알아봅니다.

js.testing.jest.title={0} 테스트의 기초
js.testing.jest.prepare=With <ide/>, all testing workflows become easier. Let’s see how. For this module, we’ll use <a href\="{0}">Jest</a> and one of <a href\="{1}">its sample projects</a> as an example, so please make sure you have Jest and npm/Yarn installed on your machine (see <a href\="{2}">this</a> webpage for more information). We’ll start by creating a run/debug configuration, which is going to be Jest-specific. On the main menu, select {3} > {4}. Then click {5}, add the {6} configuration with the default parameters, and press {7} to save it.
js.testing.jest.run=이제 새 {0} 구성이 기본값으로 선택되었습니다. 바로 옆의 {1}({2}) 버튼을 클릭하십시오.
js.testing.jest.navigate.1=Now we can see the {0} tool window with the test results and a stack trace for the failed tests coming from a test runner in it. Apart from simply tracking the test progress, you can do a lot of other things here. You can rerun all ({1}) or only failed ({2}) tests, view passed tests ({3}), or enable the <a href\="{4}">watch mode</a> to automatically rerun tests on changes.
js.testing.jest.navigate.2=You can also quickly find a specific test in {0}. Let’s try it now\: place the caret anywhere in the {0} area, type {1}, and press {2} to jump to our test.
js.testing.jest.double.click=이상입니다\! 많은 테스트를 통해 빠르게 방법을 찾아야할 때마다 이 기능을 사용하십시오. 이제 찾은 {0} 을/를 더블 클릭하십시오.
js.testing.jest.fix.test.1=By double-clicking a test in {0}, we’ve jumped straight to its location in the code. If you now hover over {1}, you’ll see a popup explaining why the test failed. From there, you can also debug a test if needed.
js.testing.jest.fix.test.2=Let’s now replace the incorrect value used for {0}\: on line 6, replace {1} with {2}.
js.testing.jest.re.run.test.1=Now that we have the right value for the expected result, we can rerun our test. Let’s do it in a different way this time. See the {0} icon on the left of the test in the editor? This icon not only shows you the test status for the tests you’ve run recently, but also lets you quickly run and debug a specific test.
js.testing.jest.re.run.test.2=Click it and select {0}.
js.testing.jest.success.run.coverage.1=Great job\! Our test has successfully passed.
js.testing.jest.success.run.coverage.2=Let’s take a look at another handy tool. Click the {0} icon located next to the run/debug configurations menu.
js.testing.jest.coverage.result=이를 통해 포함해 얼마나 많은 파일이 테스트되었는지와 파일 내 테스트된 줄의 비율을 보여주는 코드 커버리지 보고서를 빠르게 빌드할 수 있습니다. 이제 {0} (으)로 커버리지 보고서를 닫으십시오.
js.testing.jest.end=축하합니다\! 이번 모듈의 끝에 도달했습니다. 지금까지 배운 내용은 <ide/>가 지원하는 다른 테스트 러너에도 적용됩니다(코드 커버리지 및 감시 모드 제외). Jest를 사용한 앱 테스트에 관한 더 많은 팁과 정보를 원한다면 <a href\="{0}">이</a> 블로그를 확인하시기 바랍니다. 다른 테스트 러너를 사용하는 경우 <a href\="{1}">웹 도움말</a>을 살펴보십시오.
