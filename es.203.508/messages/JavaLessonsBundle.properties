java.surround.and.unwrap.help.unwrapping.and.removing.statements=코드 구문 작업 중

java.basic.completion.choose.first={0} 을(를) 눌러 조회 메뉴에서 첫 번째 항목을 선택할 수 있습니다.
java.basic.completion.activate=기본 완료를 활성화하기 위해 {0} 을(를) 누르면 조회 메뉴를 다시 확인할 수 있습니다.
java.basic.completion.choose.item=조회 메뉴 내에서 {0} 을(를) 선택한 후 {1} 을(를) 누릅니다.
java.basic.completion.complete={0} 을(를) 눌러 이 구문을 완료하십시오.
java.basic.completion.deeper.level=Sometimes, you need to see suggestions for static constants or methods. Press {0} twice to get them in the lookup.
java.basic.completion.module.promotion={0} 모듈에서 리팩토링에 관한 더 자세한 내용을 찾을 수 있습니다.

java.run.configuration.lets.run={0} (으)로 표시된 임의의 코드를 실행할 수 있습니다. {1} 을(를) 사용하여 간단한 예시를 실행해봅시다. 아니면 {0} 을(를) 클릭하여 {2} 항목을 선택할 수 있습니다.

java.postfix.completion.apply=Postfix Completion helps you reduce backward caret jumps as you write code. It lets you transform an already typed expression into another one based on the postfix you add, the type of expression, and its context. Type {0} after the parenthesis to see the list of postfix completion suggestions. Select {1} from the list or type it in the editor and then press {2} to complete the statement.

java.smart.type.completion.lesson.name=스마트 유형 완성
java.smart.type.completion.apply=Smart Type Completion filters the list of suggestions to include only the types applicable within the current context. Press {0} to see the list of matching suggestions. Choose the first one by pressing {1}.
java.smart.type.completion.return=Smart Type Completion can also suggest code for a return statement. Press {0} to see the Lookup menu for a return. Choose the first one by pressing {1}

java.statement.completion.lesson.name=구문 완성
java.statement.completion.complete.for={0} 을(를) 눌러 {1} 구문을 완료하십시오.
java.statement.completion.complete.if={0} 을(를) 입력한 후 {1} 을(를) 눌러 구문을 생성하십시오.
java.statement.completion.complete.condition=Add a condition inside the parentheses {0} and press {1} to jump into the {2} statement.
java.statement.completion.complete.finish.body=Type a line of code\: {0} and then press {1} to complete the statement and apply formatting.

java.rename.press.rename={0} 을/를 눌러 필드 {1} 의 이름을 변경하십시오.
java.rename.type.new.name=Type a new name for this field (for example, {0}) and press {1}.
java.rename.confirm.accessors.rename=<ide/> is detecting the corresponding getters/setters and suggests renaming them accordingly.Now just press {0} or click {1}

java.refactoring.menu.inline.variable=Now let''s inline a variable {0} to reduce it to a single usage. You can press {1} and filter the refactoring menu by <strong>iv</strong> (<strong>i</strong>nline <strong>v</strong>ariable). Choose this item or press {2}.
java.refactoring.menu.introduce.constant=Finally, let''s extract an extension from the file name. Again, you can press {0} and filter by <strong>ic</strong> (<strong>i</strong>ntroduce <strong>c</strong>onstant) or press {1}.
java.refactoring.menu.confirm.constant=In this dialog, you can choose the new constant’s type, name, parent class and visibility. You can leave the defaults and press {0} or click {1}.

java.inheritance.hierarchy.lesson.name=상속 계층 구조
java.inheritance.hierarchy.goto.implementation={0} 을/를 눌러 {1} 구현을 검색하십시오.
java.inheritance.hierarchy.choose.any.implementation=Choose any implementation and press {0} or click it.
java.inheritance.hierarchy.navigate.to.base=You can navigate to a super method from derived. Press {0} or click the {1} icon in the editor gutter.
java.inheritance.hierarchy.invoke.implementations.again=기본 메소드의 선언에는 자체 여백 아이콘 {0} 이/가 있습니다. 클릭하거나 다시한번 {1} 을/를 누르십시오.
java.inheritance.hierarchy.open.in.find.tool.window=For big hierarchies, you might want to look for implementations in the {0} tool window. Click {1}.
java.inheritance.hierarchy.hide.find.tool.window={0} 을/를 눌러 {1} 도구 창을 숨기십시오.
java.inheritance.hierarchy.open.method.hierarchy=You might want to explore the whole hierarchy for this method. Press {0}.
java.inheritance.hierarchy.hide.method.hierarchy=Let''s (also) hide {0} too. Press {1} again.
java.inheritance.hierarchy.open.class.hierarchy=To view the class hierarchy, press {0}.
java.inheritance.hierarchy.last.note=<strong>Note\:</strong> Actions {0} and {1} can be also applied to classes. Actions {2} and {3} are rarely used, but you can always find them with {4} using the {5} filter.

java.find.occurrences.lesson.name=Next/previous occurrence
java.find.occurrences.invoke.find=For this lesson, we selected {0}. Press {1} to start full-text search through the current file.
java.find.occurrences.find.previous=To jump to the previous occurrence, press {0}.
java.find.occurrences.find.next=<ide/>는 선택한 텍스트를 검색 필드에 자동으로 복사합니다. 다음 사용 위치를 찾아봅시다. {0} 또는 {1} 을/를 누르십시오.
java.find.occurrences.close.search.tool=With the search panel closed, you can still use these shortcuts to navigate between the recently found occurrences. Let''s close the search panel by pressing {0}.
java.find.occurrences.find.next.in.editor=Locate the next occurrence with {0}.
java.find.occurrences.find.previous.in.editor=And {0} to go backwards.
java.find.occurrences.note.about.cyclic=<strong>Note\:</strong> The search is cyclic and pressing {0} twice at the last occurrence will set the selection for the last occurrence. {1} is cyclic too.

java.debug.workflow.rebuild=For big programs, rerun can take a long time. When you find a mistake in a pure method, you can just rebuild the project and apply the <strong>Hot Swap</strong> JVM feature. Let''s build the project\: {0} or {1}.
java.debug.workflow.confirm.hot.swap=Confirm the <strong>Hot Swap</strong> replacement.
java.debug.workflow.drop.frame=We patched our method, but right now we are still executing obsolete {0}, and it will throw the exception again. Let''s drop the frame and return to the state before the {1} call. Click {2} the debug panel or press {3}.
