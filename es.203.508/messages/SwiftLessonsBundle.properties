swift.editor.module.name=에디터
swift.editor.module.description=Learn how to select, comment, delete, duplicate, and move lines, format your code, and more.
swift.code.generations.module.name=코드 생성
swift.code.generations.module.description=사용 위치에서 생성하고, 재정의/구현하고, 빠른 수정을 적용합니다.
swift.navigation.module.name=탐색
swift.navigation.module.description=창, 뷰, 코드 탐색 및 소스, 선언/구현, 파일 구조 등으로 이동.
swift.refactorings.module.name=리팩토링
swift.refactorings.module.description=Rename, extract variable/method, and other refactorings.
swift.run.debug.test.module.name=실행, 디버그, 테스트
swift.run.debug.test.module.description=애플리케이션을 실행, 디버그 및 테스트하는 방법을 알아봅니다.

swift.codegeneration.cfu.name=사용 위치에서 생성
swift.codegeneration.cfu.create.local=In <ide/>, you can create various code constructs from their usages just by pressing {0} on the unresolved entity. Press {1}, select <strong>Create local variable ''label''</strong>, and then press {2}.
swift.codegeneration.cfu.repeat=이제 같은 동작을 반복하여 {0} 함수를 생성하십시오.
swift.codegeneration.cfu.nice=좋습니다\! 매개변수가 이름과 함께 생성되는 과정에 유의하십시오.
swift.codegeneration.cfu.create.class=이번에는 같은 방법을 사용하여 클래스 선언을 생성할 수 있습니다. {0} 을/를 누른 후 <strong>유형 ''IDE'' 생성</strong>을 선택하십시오. 현재 클래스 또는 새 파일에 중첩되도록 자동으로 생성할 수 있습니다.
swift.codegeneration.cfu.create.init=Great\! Let''s repeat the same actions to generate an initializer for our {0} class. Press {1}, select <strong>Create initializer</strong>, and then press {2}.
swift.codegeneration.cfu.create.empty.init=마지막으로 같은 동작을 사용해 빈 이니셜라이저를 추가해봅시다.
swift.codegeneration.generate.name=\ 생성
swift.codegeneration.generate.intro=You can generate {0}, {1}, {2}, and {3} properties as well as initializers using the <strong>Generate</strong> action.
swift.codegeneration.generate.init=Press {0} and select <strong>Initializer</strong> in the <strong>Generate</strong> popup. Select properties to include into the initializer signature and press {1}.
swift.codegeneration.generate.hash=Generate {0} and {1} using {2} → <strong>equals and hash</strong>.
swift.codegeneration.generate.description=마지막으로 {1} → <strong>설명</strong> 액션을 사용하여 {0} 을/를 생성하십시오.
swift.codegeneration.overrideimplement.name=Override/Implement
swift.codegeneration.overrideimplement.intro=You can override any method of a parent class or implement any protocols using the <strong>Override/Implement</strong> actions ({0}/{1}).
swift.codegeneration.overrideimplement.implement=Press {0} → {1} and add stubs for all required methods from {2}.
swift.codegeneration.overrideimplement.override=몇 가지 메소드를 동시에 재정의해봅시다. {0} 을/를 누르고 {1} 을/를 입력하십시오. 재정의할 수 있는 메소드 및 프로퍼티 목록이 단 두 가지 메소드로 필터링되어야 합니다. {2} → {3} 을/를 눌러 메소드를 재정의하십시오.
swift.codegeneration.quickfix.name=빠른 수정 및 인텐션
swift.codegeneration.quickfix.intro=<ide/> shows the same {0} for your Swift code as Xcode does.
swift.codegeneration.quickfix.fixit=Press {0} and select <strong>Apply Fix-it</strong> to replace an unused variable with {1}.
swift.codegeneration.quickfix.sourcekit.inspection=AppCode also integrates SourceKit as a separate inspection. This means you can run it for the whole file and fix all the problems at once if several fix-its are available. Press {0}.
swift.codegeneration.quickfix.sourcekit.fixit=As you can see, we have several issues in this piece of code. Let's fix some of them. Select <strong>Swift → SourceKit inspections</strong> and click the <strong>Apply Fix-it</strong> button on the right. This should resolve all the problems in this group.
swift.codegeneration.quickfix.typo.in.var=Now press {0} to return to the editor window, place the caret at the incorrectly spelled variable name, and then press {1}. Select <strong>Typo\: Rename to...</strong>, choose the correct option, and press {2}.
swift.codegeneration.quickfix.typo.in.string=Note that only the needed part was corrected and all variable usages were automatically renamed. Now, repeat the same actions twice to fix the {0} string.
swift.codegeneration.quickfix.go.next.error={0} 을/를 눌러 다음 오류로 이동하십시오.
swift.codegeneration.quickfix.error.handling=오류 처리 인텐션을 사용하여 필요한 곳에 {0} 을/를 추가할 수 있습니다. {1}→{2} 을/를 누르고 빠른 수정 중 하나를 선택하십시오.
swift.codegeneration.quickfix.go.next.warning={0} 을/를 눌러 다음 경고로 이동하십시오.
swift.codegeneration.quickfix.redundant=불필요한 {0} 속성을 제거할 수도 있습니다. <shortcut>⇧⌥⏎</shortcut>을 누르십시오.
swift.codegeneration.quickfix.explicit.type=If you need to add or remove an explicit type for some variable, simply press {0} and select <strong>Add/Remove explicit type</strong>. Try it now with the {1} variable.
swift.editor.format.name=코드 서식 지정
swift.editor.format.reformat=<ide/>를 사용하여 단 하나의 액션만으로 코드 서식을 수정할 수 있습니다. 선택한 코드의 서식을 {0} (으)로 다시 지정하십시오.
swift.editor.format.reformat.whole.file=줄이 선택되지 않은 경우 전체 소스 파일의 서식을 다시 지정하려면, {0} 을/를 누른 다음 {2}.
swift.editor.comment=주석
swift.editor.comment.intro={0} (으)로 어느 줄이든 주석 처리하십시오.
swift.editor.comment.uncomment=같은 단축키 {0} (으)로 주석 처리된 줄의 주석 처리를 해제하십시오.
swift.editor.comment.several.lines={0} (으)로 여러 줄을 선택한 후 {1} (으)로 주석 처리하십시오.
swift.editor.comment.block=Press {0} twice to select {1} and then comment it with a block comment by using {2}.
swift.editor.completion.name=코드 완성
swift.editor.completion.basic=By default, <ide/> completes your code instantly. Start typing {0} right where the caret is and press {1} to select the {2} function.
swift.editor.completion.basic.shortcut=기본 완료를 활성화하려면 {0} 을/를 누르십시오. 조회 메뉴를 다시 표시됩니다.
swift.editor.completion.smart=스마트 유형 완성은 제안 목록을 필터링하여 현재 컨텍스트 내에서 적용 가능한 유형만을 포함합니다. {0} 을/를 눌러 일치하는 제안 목록을 확인하십시오. {1} 을/를 눌러 첫 번째 항목을 선택합니다.
swift.editor.completion.show={0} 을/를 다시 눌러 코드 완성 옵션을 표시하십시오.
swift.editor.completion.tab={0} 항목을 선택한 후 ({2} 대신) {1} 을/를 누르십시오. 이는 단순히 단어를 삽입하는 것이 아니라 캐럿에 위치한 단어를 교체합니다.
swift.editor.completion.tab.method=Now invoke {0} and {1} to easily overwrite {2} with {3}.
swift.editor.completion.go.next=Awesome\! Click the button below to start the next lesson or use {0}.
swift.editor.delete.name=삭제
swift.editor.delete.action={0} (으)로 현재 줄을 삭제하십시오.
swift.editor.delete.undo=삭제된 줄을 복구하려면 {0} 을/를 누르십시오.
swift.editor.duplicate.name=복제
swift.editor.duplicate.line={0} (으)로 어느 줄이든 복제하십시오.
swift.editor.duplicate.several.lines=You can do the same with multiple lines. Simply select two or more lines and duplicate them with {0}.
swift.editor.folding.name=접기
swift.editor.folding.collapse=더 나은 가독성을 위해 코드의 일부를 접어야 하는 경우가 있습니다. {0} (으)로 코드를 접어보십시오.
swift.editor.folding.expand=코드 영역을 확장하려면 {0} 을/를 누르십시오.
swift.editor.folding.collapse.all=파일 내 모든 영역을 접고자 할 경우 {0} 을/를 누르십시오.
swift.editor.folding.expand.all=마찬가지로 {0} 을/를 눌러 사용 가능한 모든 영역을 확장하십시오.
swift.editor.folding.collapse.statement.any=<ide/>에는 구문 또는 선언의 어느 시퀀스든 접을 수 있는 방법이 있습니다. {0} (으)로 선택한 영역을 접어보십시오.
swift.editor.folding.expand.statement={0} 을/를 눌러 다른 방식으로 이동하십시오.
swift.editor.folding.block=마지막으로 {0} 을/를 사용해 제어 흐름 구문을 접으십시오.
swift.editor.move.name=이동
swift.editor.move.line.down=Rearranging lines usually takes two actions\: cut and paste. In <ide/>, you can do it with just one as pressing {0} will pull the current line down. Move the current line to the end of the {1} function.
swift.editor.move.line.up=마찬가지로 줄을 위로 이동하려면 {0} 을/를 사용하십시오. {1} 선언을 이동하여 설정보다 선행하도록 합니다.
swift.editor.selections.name=여러 선택 범위
swift.editor.selections.next={0} 을/를 눌러 캐럿에 위치한 심볼을 선택하십시오.
swift.editor.selections.next.again={0} 을/를 눌러 이 심볼의 다음 사용 위치를 선택하십시오.
swift.editor.selections.unselect={0} 을/를 눌러 마지막 사용 위치를 선택 해제하십시오.
swift.editor.selections.select.all={0} 을/를 눌러 이 파일의 모든 사용 위치를 선택하십시오.
swift.editor.selections.replace={0} 을/를 입력하여 {1} 의 모든 사용 위치를 {2} (으)로 교체한 다음 {3} 을/를 누르십시오.
swift.editor.selections.column={0} 을/를 사용하여 열 선택 범위를 전환한다음 {1} 부터 {2} 까지의 모든 줄을 선택하십시오.
swift.editor.selections.select.sample=Now type {0} and select all case names with {1}.
swift.editor.selections.select.sample.toggle=Press {0} to toggle the case and then exit the Column Selection mode by pressing {1} again.
swift.editor.selections.reformat=Press {0}, reformat the code with {1}, and that''s it\!
swift.editor.popups.name=빠른 팝업
swift.editor.popups.param.info={0} 을/를 눌러 이니셜라이저 시그니처를 확인하십시오.
swift.editor.popups.close.param.info={0} 을/를 눌러 팝업을 닫으십시오.
swift.editor.popups.doc={0} 을/를 눌러 캐럿에 위치한 심볼에 대한 문서를 확인하십시오.
swift.editor.popups.impl={0} 을/를 눌러 캐럿에 위치한 심볼의 정의를 확인하십시오.
swift.editor.selection.name=선택 범위
swift.editor.selection.word=캐럿을 단어 앞에 배치하십시오. {0} 을/를 눌러 캐럿을 다음 단어로 이동하고 그 사이의 모든 것을 선택하십시오.
swift.editor.selection.expand={0} 을/를 눌러 선택 범위를 다음 코드 블록으로 확장하십시오.
swift.editor.selection.expand.more=파일 전체가 선택될 때까지 {0} (으)로 선택 범위를 늘려보십시오.
swift.editor.selection.shrink={0} 은/는 현재 선택 범위를 축소합니다. 눌러보십시오.
swift.editor.selection.all=이제 {0} (으)로 메소드 전체를 즉시 선택하십시오.
swift.navigation.code.name=코드 탐색
swift.navigation.code.intro=프로젝트에서 작업 시 특정 클래스 파일 또는 심볼을 열어 편집해야 할 일이 종종 있습니다. 이를 위한 가장 빠른 방법은 세 가지 주요 탐색 기능\: <strong>클래스/파일/심볼로 이동</strong>을 사용하는 것입니다.
swift.navigation.code.class={0} 클래스로 이동해봅시다. {1} 을/를 누르고 {2} 을/를 입력한 다음 {3} 을/를 누르십시오.
swift.navigation.code.fuzzy=각 <strong>다음으로 이동...</strong> 대화상자에서는 퍼지 일치 사용이 허용되므로 검색하려는 클래스 파일 또는 심볼의 이름을 일부만 입력할 수 있습니다.
swift.navigation.code.file=Nice\! Now let''s open the {0} file\: press {1}, type {2}, and press {3}.
swift.navigation.code.symbol={1} 클래스의 {0} 선언으로 즉시 이동해봅시다. {2} 을/를 누르고 {3} 을/를 입력한 다음 {4} 을/를 누르십시오.
swift.navigation.code.non.project.files=표준 라이브러리와 기타 프로젝트가 아닌 파일, 심볼, 클래스를 포함해야 하는 경우, 단축키를 두 번 누르십시오.
swift.navigation.code.declaration=<strong>다음으로 이동...</strong> 액션군 중 또 다른 중요한 액션은 <strong>선언으로 이동</strong>입니다. 캐럿을 {0} 에 두고 {1} 을/를 눌러 선언으로 이동하십시오.
swift.navigation.code.implementation=메소드 또는 클래스의 구현이 여러 개인 경우, {0} (으)로 첫 번째 구현으로 이동할 수 있습니다. {1} 을/를 사용해 {2} 의 모든 정의를 확인해보십시오.
swift.navigation.code.go.back={1} 을/를 통해 {0} (으)로 다시 이동하십시오.
swift.navigation.code.super=<strong>상위 정의로 이동</strong>을 통해 상위 클래스 선언으로 이동할 수 있습니다. {0} 을/를 눌러 {1} 클래스로 이동하십시오.
swift.navigation.code.super.again=이제 {0} 을/를 다시 눌러 {1} 프로토콜 선언으로 이동하십시오.
swift.navigation.code.recent=Finally, there are two very useful and frequently used navigation actions that can help you quickly switch between recent files and tool windows. First one is the <strong>Recent files</strong> popup. Open it via {0} and select what you need using the arrow keys on the keyboard.
swift.navigation.code.switcher=The second is <strong>Switcher</strong>, which looks the same but immediately disappears after you select something. Hold the <shortcut>⌃</shortcut> key while pressing {0} and press it again to switch to  some file or tool window. Release the <shortcut>⌃</shortcut> key after you''ve selected what you wanted.
swift.navigation.windows.name=중요 창 \\& 뷰
swift.navigation.windows.intro=<ide/>에는 많은 탐색 뷰가 있습니다. 특정 상황에서 무엇을 호출해야 하는지 알면 IDE를 더 효율적으로 사용할 수 있습니다.
swift.navigation.windows.project=The <strong>Project</strong> view is similar to the Project navigator in Xcode. It shows all the projects included in a particular workspace, and all the files and groups inside them. Press {0} to open the <strong>Project</strong> view.
swift.navigation.windows.project2=By default, the <strong>Project</strong> view in <ide/> shows files and folders in the same order as they are stored on the file system.
swift.navigation.windows.project.settings=Click the {0} icon in the project view options menu and then select <strong>Xcode order</strong> to set the same order of files as in Xcode (if you selected the Xcode behavior when setting up <ide/>, this option will be enabled automatically).
swift.navigation.windows.project.settings.more=Other features include <strong>Open Files with Single Click</strong> and <strong>Always Select Opened File</strong>. <strong>Open Files with Single Click</strong> allows you to automatically open the code of a file when selecting it. <strong>Always Select Opened File</strong> automatically sets the focus on the file name in the <strong>Project</strong> view when the editor area is in focus.
swift.navigation.windows.files=<strong>파일</strong> 뷰는 <ide/> <strong>프로젝트</strong> 뷰의 추가 도움 모드입니다. 이 뷰는 {0} 또는 {1} 이 위치한 디렉토리의 모든 파일을 보여줍니다. 이 뷰를 사용하면 프로젝트에 포함되지 않은 파일을 쉽게 열어서 볼 수 있습니다.
swift.navigation.windows.files.activate=Press {0} to activate the <strong>Files</strong> view.
swift.navigation.windows.return.to.editor={0} 을/를 눌러 에디터 창으로 되돌아가십시오.
swift.navigation.windows.structure=The <strong>Structure</strong> view and the <strong>Structure</strong> popup show the structure of a particular file together with all the {0}, {1} and {2} or {3} comments in your code. They work similarly to the <strong>Symbol</strong> navigator in Xcode.
swift.navigation.windows.structure.activate=Press {0} to activate the <strong>Structure</strong> view.
swift.navigation.windows.jump.to.source=Use the ↑ and ↓ keys to select any code construct here and press {0} to jump to some place in your code.
swift.navigation.windows.structure.popup=Now activate the <strong>Structure</strong> popup with {0}.
swift.navigation.windows.dismiss.structure.popup={0} 을/를 사용하여 팝업을 닫거나 ⏎를 눌러 코드의 어느 위치로 이동할 수 있습니다.
swift.navigation.windows.find=The <strong>Find in Files</strong> ({0}) dialog provides the same functionality as the <strong>Find</strong> navigator in Xcode. Try using it to run a full-text search now.
swift.navigation.windows.build=Invoke {0} to build the project.
swift.navigation.windows.build.messages=<strong>빌드 메시지</strong> 도구 창에서는 컴파일러 출력을 확인할 수 있으며 빌드 메시지를 유형별로 필터링할 수 있습니다(왼쪽의 <strong>메시지 필터링({0}) 버튼을 참조하십시오).
swift.navigation.windows.run=이제 시뮬레이터에서 프로젝트를 실행하여 <strong>실행</strong> 도구 창을 확인해봅시다. {0} 을/를 누르십시오.
swift.navigation.windows.run.window=This tool window shows the console where you can view the output of your application or <strong>Tests runner</strong> if you are running the <strong>Test</strong> Run Configuration. You can always activate it via ({0}).
swift.navigation.windows.stop=Press {0} to stop your application.
swift.navigation.windows.go.to.file=Let''s switch back from the emulator window to the IDE and navigate to {0} with {1}.
swift.navigation.windows.toggle.break=Place a breakpoint at line 11 using {0} and then press {1}.
swift.navigation.windows.debug=<strong>디버그</strong> 도구 창({0})은 Xcode의 <strong>디버그</strong> 탐색기와 비슷합니다. 이 도구 창은 오른쪽에 모든 감시, 지역 변수를 표시하며 왼쪽에 스레드 목록을 보여줍니다.
swift.navigation.windows.stop.debug=Press {0} to stop your application.
swift.navigation.windows.breakpoints=The <strong>Breakpoints</strong> dialog provides the same functionality as Xcode''s <strong>Breakpoint</strong> navigator - it shows the list of all breakpoints in your project. Activate it by using {0}.
swift.navigation.windows.init.git=Init the GIT repository via {0}→<strong>Create Git Repository</strong>. Now activate the <strong>VCS</strong> tool window with the {1} shortcut.
swift.navigation.windows.vcs.window=<strong>VCS</strong> 도구 창은 <strong>변경</strong> 뷰, <strong>VCS 로그</strong> 등을 포함하여 버전 관리 시스템을 사용하기 위해 필요한 모든 것을 제공합니다.
swift.navigation.precise.name=정밀 탐색
swift.navigation.precise.intro=코드 파일 내부에서 탐색하기 위한 몇몇 단축키를 사용하면 더욱 효율적으로 개발할 수 있습니다. 이러한 단축키를 빠르게 살펴봅시다.
swift.navigation.precise.next.error=There are several warnings and an error in this file. Press {0} to navigate to the first error.
swift.navigation.precise.next.error.again=Now, jump to the next error by using the same shortcut.
swift.navigation.precise.first.error={0} (으)로 첫 번째 오류로 다시 이동하십시오.
swift.navigation.precise.comment.combo=이제 {0} - {1} - {2} 을/를 눌러 각 줄을 주석 처리하십시오.
swift.navigation.precise.first.warning=Now press {0} again - it should point you to the first warning in the file.
swift.navigation.precise.fix.warning={0} 을/를 누른 후 {1} 을/를 사용하여 첫 번째 경고를 수정하십시오.
swift.navigation.precise.next.method=Press {0} to quickly jump to the next method in the current file.
swift.navigation.precise.prev.method=Jump to the previous method with {0}.
swift.navigation.precise.jump.last.changes=Imagine you have a long file and you cannot quite remember what you''ve changed in it and where. {0} to jump to the most recent change in the file.
swift.navigation.precise.jump.line=Finally, when you need to jump to a specific line or column in your code, press {0}.
swift.navigation.search.name=검색
swift.navigation.search.intro=Searching in AppCode is different. We have special features for searching text and other features that are dedicated to searching code. This is because code is not mere text - it has a specific structure formed by the code constructs.
swift.navigation.search.var=This sample file has lots of code constructs containing the word {0}. The caret is at the variable named {1}. Press {2} to find all the text occurrences of the word {3}.
swift.navigation.search.find.usages.var=매우 유용하지 않은가요? 실제 코드에서는 클래스 이름, 메소드 이름, 또는 기타 코드 구문을 포함하지 않고 {0} 변수를 검색해야 할 수도 있습니다. {1} 을/를 누른 다음 {2} 을/를 시도해보십시오.
swift.navigation.search.find.usages.var.result=Now, AppCode shows only actual usages of the {0} variable.
swift.navigation.search.find.usages.proto=The same workflow applies to any other code construct. Press {0} → {1} to find all the usages of the {2} protocol in the project.
swift.navigation.search.find.usages.method=이제 메소드 {0} 의 모든 사용 위치를 찾아봅시다. {1} → {2} 을/를 다시 누르십시오.
swift.navigation.search.rule=The simple rule is\: identify the symbol you need to find, instead of which piece of text you need to find. <strong>Find Usages</strong> works for any code construct in the project context, so you will find all the usages in the whole codebase.
swift.navigation.search.text.search=물론 무엇을 찾으려는지 정확히 알 수 없어 일부 텍스트를 검색하여 가능한 한 많은 일치 항목을 찾아야 하는 경우도 있습니다. 이 경우에는 {0} 을/를 사용하여 현재 파일을 검색하거나 {1} 을/를 사용하여 전체 프로젝트를 검색하십시오.
swift.navigation.search.everything=심볼, 파일 이름, 심지어 IDE 설정 및 메뉴 항목에서 일부 텍스트를 검색하고자 하는 경우에는 어떻게 해야 할까요? <shortcut>Double⇧</shortcut>를 눌러 <strong>어디서나 검색</strong> 대화상자를 여십시오.
swift.navigation.search.action=마지막으로 <strong>액션 검색</strong>({0})을 사용하여 IDE 액션을 빠르게 찾고 실행하십시오. 예를 들어 ''plugins''를 입력하고 <strong>환경 설정 | 플러그인</strong>을 여십시오.
swift.navigation.todo.name=TODO \\& 북마크
swift.navigation.todo.activate=Have you ever wondered how many todos there are in your code? In <ide/>, there is the dedicated <strong>TODO</strong> tool window for them. Press {0} to activate it.
swift.navigation.todo.custom=You can define your own custom <strong>TODO</strong> filters. Open the TODO filters dialog with {0} → <strong>Edit Filters</strong> and then add your filters using RegExps.
swift.navigation.todo.go.back=Press {0} to return to the editor.
swift.navigation.todo.bookmark=Now press {0}. This shortcut sets toggles a bookmark in your code. Bookmarks are saved in the project directory and are useful if you want to point your colleague to a specific place in your code.
swift.navigation.todo.all.bookmarks=View all the bookmarks with the {0} shortcut.
swift.navigation.todo.change.bookmark=북마크 이름을 변경할 수 있습니다. {0} 을/를 누른 후 새 이름을 입력하십시오.
swift.navigation.todo.favorites={0} 을/를 사용하여 <strong>북마크</strong> 대화상자를 닫으십시오. {1} 을/를 누르십시오. 표시되는 <strong>즐겨찾기</strong> 도구 창은 북마크, 중단점, 즐겨찾기를 종합합니다.
swift.refactoring.change.signature.name=시그니처 변경
swift.refactoring.change.signature.intro=<strong>시그니처 변경</strong>은 메소드 및 함수 이름을 변경하고 내부 및 외부 매개변수 이름과 순서를 수정하며 메소드 및 함수의 가시성을 한 번에 변경할 수 있는 리팩토링입니다.
swift.refactoring.change.signature.exec={0} 을/를 눌러 {1} 이름을 {2} (으)로 변경하십시오.
swift.refactoring.change.signature.exec.again={0} 을/를 다시 누르십시오. {1} 매개변수가 있는 행을 클릭하고 이를 {2} (으)로 변경하거나 내부 매개변수 이름을 추가하십시오.
swift.refactoring.change.signature.final=마지막으로 <strong>시그니처 변경</strong>을 다시 호출하여 {0}/{1} 버튼 또는 <shortcut>⌥↑</shortcut>/<shortcut>⌥↓</shortcut> 단축키를 사용해 매개변수 순서를 변경하십시오.
swift.refactoring.extract.closure.name=클로저 추출
swift.refactoring.extract.closure.intro=클로저 추출을 사용하면 사용자 지정 가능한 매개변수와 반환 유형과 함께 코드 선택 범위를 새 클로저로 캡슐화할 수 있습니다. 이는 추출 메소드 리팩토링과 비슷하게 작동합니다.
swift.refactoring.extract.closure.exec={0} 을/를 누른 다음 <strong>클로저...</strong>를 선택하십시오.
swift.refactoring.extract.method.name=메소드 추출
swift.refactoring.extract.method.intro=Extract Method is a refactoring that lets you encapsulate a code selection into a new method with customizable parameters and return type. Extract some lines of code into a new {0} function. Press {1}.
swift.refactoring.extract.method.undo={0} 을/를 눌러 변경을 실행 취소하십시오.
swift.refactoring.extract.method.change.params=<ide/> 내 메소드 추출 시 시그니처를 변경할 수 있습니다.<strong>매개변수</strong> 섹션에서 매개변수 중 하나를 클릭하고 {0}/{1} 아이콘을 사용하여 매개변수 순서를 변경하십시오. 매개변수 행을 클릭하여 이름 지정을 변경하십시오.
swift.refactoring.extract.method.exec.again=Now press {0} and try to change the signature of the extracted method.
swift.refactoring.extract.variable.name=변수 추출
swift.refactoring.extract.variable.exec=Press {0} to extract the constant {1} to a variable or field {2}.
swift.refactoring.extract.variable.description=Extract Variable does not require you to select the exact code fragment you want to extract. You can place the caret at the statement and select the needed expression.
swift.refactoring.extract.variable.exec.again=이제 {0} 을/를 누르고 목록에서 변수를 선택하여 {1} 을/를 변수 {2} (으)로 추출하십시오.
swift.refactoring.rename.name=이름 바꾸기
swift.refactoring.rename.any=You can rename anything by placing the caret at a symbol and using the Rename refactoring.
swift.refactoring.rename.go.to.file=Press {1} to navigate to {0}.
swift.refactoring.rename.var=Let''s start with something simple like renaming the {0} field to {1}. Press {2}, enter a new name, and press {3}.
swift.refactoring.rename.class=Repeat the same actions and rename the {0} type to something new value.
swift.refactoring.rename.check=Press {0}. As you can see, the Rename refactoring works globally, even renaming occurrences in .xib and .storyboard files.
swift.rdt.debug.name=디버그
swift.rdt.debug.intro=Now let's learn how to debug your code.
swift.rdt.debug.prepare=Press {1} to navigate to {0}.
swift.rdt.debug.toggle.break=Place a breakpoint at line 11 with {0} and then press {1}.
swift.rdt.debug.step.into=Press {0} to step into, and then {1} to step over.
swift.rdt.debug.run.cursor=Now set the caret atthe line 21 and execute <strong>Run to cursor</strong> with {0}.
swift.rdt.debug.step.over.next.line=다음 줄로 스텝오버하십시오.
swift.rdt.debug.eval=Select {0} with {1} and use <strong>Evaluate Expression</strong> ({2} → {3}).
swift.rdt.debug.eval.again=Enter the dot symbol, select some property, and then press {0} to evaluate it without switching to the LLDB console.
swift.rdt.debug.stop={0} 을/를 눌러 애플리케이션 디버그를 중지하십시오.
swift.rdt.run.name=실행
swift.rdt.run.actions=<ide/> has two different actions for running the project and for debugging it (because in general, debugging is slower). Press {0} to run your application.
swift.rdt.run.stop=Stop your application with {0}.
swift.rdt.run.another=Great\! To select another Run Configuration or simulator for the current run configuration and quickly run your application, press {0}, select a target Run Configuration or simulator, and then press {1}.
swift.rdt.run.final=Stop your application with {0}.
swift.rdt.test.name=테스트
swift.rdt.test.prepare={0} 을/를 눌러 {0} (으)로 이동하십시오.
swift.rdt.test.intro=<ide/> supports many testing frameworks including XCTest, Quick, Kiwi, Catch, Boost.Test, and Google Test. Let's explore all the common features you can use when testing your application.
swift.rdt.test.intro.tests=<ide/> automatically identifies the test scope based on the caret position. When caret is somewhere in the test file, all tests in this file can be executed. The same applies to a single test. To run a single test, place the caret inside the test method.
swift.rdt.test.suite={0} 을/를 눌러 테스트 도구 내 모든 테스트를 실행하십시오.
swift.rdt.test.show=Now preview let''s show tests in the tree view. Click the {0} icon.
swift.rdt.test.single=같은 {0} 단축키를 사용해 단일 테스트를 실행하십시오.
swift.rdt.test.debug.single=Now let''s debug the test. Place line breakpoint by using {0} and then debug the test with {1}.
swift.rdt.test.resume={0} 을/를 눌러 계속 실행하십시오.
swift.rdt.test.stop.debug={0} 을/를 눌러 디버그를 중지하십시오.
swift.rdt.test.go.back={0} 을/를 눌러 {0} (으)로 다시 이동하십시오.
swift.rdt.test.failing=실패 테스트를 해봅시다. {0} 단축키로 모든 테스트를 다시 실행하십시오.
swift.rdt.test.filter.failed=Filter out only the failed tests by clicking the {0} icon.
swift.rdt.test.delete.failed=Delete {0} with {1}.
swift.rdt.test.rerun.failed=이제 {0} 을/를 클릭하여 실패한 테스트만 다시 실행하십시오.
swift.rdt.test.additional= Specific icons in the <strong>Test Runner</strong> tool window allow you to sort tests by duration ({0}) or alphabetically ({1}). Run all the tests again by pressing {2} and then sort them by duration.
swift.rdt.test.history=The built-in test history automatically saves the results of several most recent test runs and can also load them in the test runner tool window. Load one of the previous test runs by clicking the {0} icon and selecting one of the items in the list.
swift.rdt.test.more=이상입니다\! <ide/>는 <strong>Quick</strong>과 같은 일부 프레임워크에 대해서 더 향상된 테스트 결과 렌더링을 제공합니다. <ide/>에서 지원되는 모든 테스트 프레임워크의 개요를 보려면 <a href\="https\://www.youtube.com/watch?v\=DXvx6xNG_jc">이 동영상</a>을 시청하십시오.
