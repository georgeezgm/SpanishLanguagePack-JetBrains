python.f.string.completion.lesson.name=f 문자열 코드 완성
python.f.string.completion.type.prefix=<ide/> supports automatic f-string conversion. Just start typing {0}.
python.f.string.completion.invoke.manually={0} 을(를) 사용해 코드 완성 기능을 수동으로 호출할 수 있습니다.
python.f.string.completion.complete.it={0} (으)로 구문을 완성하십시오. {1} 을(를) 누르기만 하면 첫 번째 항목이 적용됩니다.
python.f.string.completion.result.message=코드 완성 후에 단순 Python 문자열이 f 문자열로 교체된 것을 확인할 수 있습니다.

python.postfix.completion.select.item=Select {0} item from the completion list.

python.smart.completion.lesson.name=스마트 코드 완성
python.smart.completion.try.basic.completion=Try using Basic Completion by pressing {0}.
python.smart.completion.use.smart.completion=Unfortunately, <ide/> has no direct information on the {0} type. But sometimes, it can suggest completion by the context\! Use {1} to invoke Smart Completion.
python.smart.completion.finish.completion=Now just choose the {0} item to finish this lesson.

python.tab.completion.lesson.name=탭 완성
python.tab.completion.start.completion=Suppose that you want to replace {0} with {1}. Invoke completion by pressing {2}.
python.tab.completion.select.item=Select the {0} item using the keyboard arrows or just start typing it.
python.tab.completion.use.tab.completion=If you press {0}, you will insert {1} before {2}. Instead, press {3} to replace {2} with {1}.

python.in.place.refactoring.lesson.name=즉시 리팩토링
python.in.place.refactoring.start.type.new.name=Let''s consider an alternative approach to performing refactorings. Suppose that we want to rename the local variable {0} to {1}. Just start typing the new name.
python.in.place.refactoring.invoke.intentions=<ide/> is guessing that you are going to rename the variable. You can notice it by the {0} icon in the gutter. Invoke intentions by {1} when you finish typing the new name.
python.in.place.refactoring.finish.rename={0} 을(를) 눌러 이름 변경을 완료하십시오.
python.in.place.refactoring.add.parameter=Let''s add an argument to this method. We place the editor caret just after the first parameter. Now type a comma and parameter''s name\: {0}.
python.in.place.refactoring.invoke.intention.for.parameter=<ide/> expects that you are going to change the method''s signature. You can notice it by seeing the same icon {0} in the gutter. When you finish typing the new parameter’s name, invoke intentions by pressing {1}.
python.in.place.refactoring.update.callers={0} 을(를) 눌러 호출자를 업데이트하십시오.
python.in.place.refactoring.signature.preview=<ide/>는 짧은 시그니처 미리보기를 표시하고 있습니다. {0} 을/를 눌러 계속 진행하십시오.
python.in.place.refactoring.set.default.value=Now you need to type the value that will be inserted as an argument into each call. You can choose {0} for this sample. Then press {1} to continue.
python.in.place.refactoring.remark.about.application.scope=참고\: 즉시 리팩토링은 정의 위치에서만 적용될 수 있으나 이름 변경 직접 호출이나 시그니처 변경 리팩토링은 정의 및 사용 위치 모두에서 호출될 수 있습니다.

python.quick.fix.refactoring.lesson.name=Quick-fix refactoring
python.quick.fix.refactoring.type.new.argument=Several refactorings can be performed as quick-fixes. Suppose we want to add a parameter to the method {0} and pass the variable {1} to it. Let''s type {2} after the first argument.
python.quick.fix.refactoring.wait.completion.showed=잠시 코드 완성 목록을 기다려주십시오...
python.quick.fix.refactoring.close.completion.list=현재는 어떠한 코드 완성 기능도 적용하지 않으려 합니다. 목록을 닫으십시오({0}).
python.quick.fix.refactoring.invoke.intentions=As you might have noticed, <ide/> is showing you a warning here. Let''s invoke intentions by pressing {0}.
python.quick.fix.refactoring.choose.change.signature=Choose the {0} quick fix.
python.quick.fix.refactoring.select.new.parameter=Let''s set the default value for the new parameter. Click the new parameter line. Alternatively, you can switch focus to the parameter by pressing {0} and then {1}.
python.quick.fix.refactoring.set.default.value=You may navigate through the fields and the checkbox by using {0}. With the checkbox selected, <ide/> either inlines the default value to the other callers or sets it as the default value for the new parameter. The Signature Preview will help you understand the difference. Now set the default value to 0.
python.quick.fix.refactoring.finish.refactoring={0} 을(를) 눌러(또는 {1} 을(를) 클릭하여) 리팩토링을 종료합니다.

python.rename.press.rename=Press {0} and rename the {1} field(e.g., to {2}).
python.rename.expand.dynamic.references=In simple cases, {0} will just perform the rename refactoring without confirmation. But in this sample, <ide/> detects two calls of the {0} method for objects with unknown types. Expand the {1} item.
python.rename.exclude.item=It seems that {0} should be excluded from the rename refactoring. Select it and press {1}.
python.rename.finish.refactoring=Finish the rename refactoring with the {0} button.

python.editor.coding.assistance.fix.error=Let''s fix this error. Press {0} and select {1} or {2} <strong>→ math</strong>

python.run.configuration.lets.run={0} 을(를) 사용하여 간단한 예시를 실행해봅시다.

python.debug.workflow.rerun=Let''s rerun our program. Just click {0} again or use {1}.
