### This file contains strings from lessons.

###############################################################################
## Common lessons
###############################################################################

## Essential module
essential.module.name=필수 요소
essential.module.description=Discover the most essential capabilities of {0}

context.actions.lesson.name=컨텍스트 액션
context.actions.invoke.intentions.for.warning=In many cases, <ide/> can guess your <strong>intention</strong> or propose a fix for a warning or an error. Let''s invoke one of the most useful actions, {0}. Press {1}.
context.actions.fix.warning=이 경고에 첫 번쨰 빠른 수정을 적용해봅시다\: {0}.
context.actions.invoke.general.intentions=<ide/> has a lot of intentions\! Try to invoke {0} every time you think there might be a good solution or intention. You will save a lot of time and make the coding process much more fun\! Now let''s look what we can apply to the piece of code where the caret is. Press {1} again.
context.actions.apply.intention={0} 인텐션을 적용해봅시다.
context.actions.refactorings.promotion=Note that a lot of useful refactorings are not available via {0}. Go to the {1} module to learn how to invoke and use them.

## Editor basics module
editor.basics.module.name=에디터 기초
editor.basics.module.description=스마트 단축키로 코드를 추가, 삭제, 선택, 이동, 복제하십시오

goto.action.lesson.name=액션 검색
goto.action.mac.workaround=If the <strong>Terminal</strong> search opens instead of {0}, refer to <a href\="{1}">this article</a>.
goto.action.use.find.action.1=One of the most useful shortcuts is {0}. It lets you search through all available actions without having to know their individual shortcuts. Try it now with {1}.
goto.action.use.find.action.2=Alternatively, you can invoke {0} by pressing {1} twice. By using {0}, you can look for your project code entities <strong>and</strong> other IDE objects at the same time. It is up to you what to use.
goto.action.invoke.about.action=For example, if you want to learn about <ide/>, type {0} and press {1}.
goto.action.to.return.to.the.editor={0} 을(를) 눌러 에디터로 되돌아가십시오.
goto.action.invoke.again=그리고 {0} 이나 더블 {1} 을(를) 사용하여 설정을 변경할 수 있습니다. 다시 호출해보십시오. 다시 호출해보십시오.
goto.action.show.line.numbers.request=Type {0} to see the {1} selector.
goto.action.first.lines.toggle=줄 번호 표시를 {0, choice, 0 \#끄기|1 \#켜기}로 전환하십시오.
goto.action.second.lines.toggle=이제 줄 번호 표시를 {0, choice, 0 \#켜기|1 \#끄기}로 전환하십시오.
goto.action.propose.to.go.next.new.ui=좋습니다\! {0} 을/를 누르거나 아래 버튼을 클릭하고 다음 강의를 시작하십시오.
# This message will be removed soon
goto.action.propose.to.go.next=좋습니다\! 아래 버튼을 클릭하고 다음 강의를 시작하십시오.

collapse.lesson.name=접기
collapse.try.collapse=더 나은 가독성을 위해 코드의 일부를 접어야 하는 경우가 있습니다. {0} (으)로 코드 조각을 접어보십시오.
collapse.hit.expand=코드 영역을 확장하려면 {0}을 누르십시오.
collapse.all.collapse=파일 내 모든 영역을 접고자 할 경우 {0} 을(를) 누르십시오.
collapse.all.expand=마찬가지로 {0} 을(를) 눌러 사용 가능한 모든 영역을 확장하십시오.

duplicate.and.delete.lines.lesson.name=줄 복제 및 삭제
duplicate.and.delete.lines.duplicate.line={0} (으)로 어느 줄이든 복제하십시오.
duplicate.and.delete.lines.duplicate.several.lines=You can apply the same action to multiple lines. Simply select two or more lines and duplicate them with {0}.
duplicate.and.delete.lines.delete.line=To delete the current line, you can use action {0}.

move.lesson.name=Move code fragments
move.pull.down=Rearranging lines usually involves two actions\: cut and paste. With <ide/>, you can do it with just one action. Press {0} to pull down the current line.
move.pull.up=마찬가지로 줄을 위로 이동하려면 {0} 을(를) 누르십시오.
move.whole.method.up=Try to move the whole method up with {0}. Note that the caret should be at the header of the method.
move.whole.method.down=이제 {0} (으)로 아래로 이동하십시오.

multiple.selections.lesson.name=여러 선택 범위
multiple.selections.select.symbol={0} 을(를) 눌러 캐럿에 위치한 심볼을 선택하십시오.
multiple.selections.select.next.symbol={0} 을(를) 눌러 이 심볼의 다음 사용 위치를 선택하십시오.
multiple.selections.deselect.symbol={0}을(를) 눌러 마지막 사용 위치를 선택 해제하십시오.
multiple.selections.select.all={0} 을(를) 눌러 이 파일의 모든 사용 위치를 선택하십시오.
multiple.selections.replace={0} 을(를) 눌러 {1} 사용 위치를 {0} (으)로 교체하십시오.

selection.lesson.name=코드 선택 범위 확장 및 축소
selection.select.word=캐럿을 단어 앞에 배치하십시오. {0} 을(를) 눌러 캐럿을 다음 단어로 이동하고 그 사이의 모든 것을 선택하십시오.
selection.extend.selection={0} 을(를) 눌러 선택 범위를 다음 코드 블록으로 확장하십시오.
selection.extend.until.whole.file=Try to increase your selection with {0} until the whole file is selected.
selection.shrink.selection={0} shrinks the selection. Try it.

comment.line.lesson.name=주석 줄
comment.line.comment.any.line={0} (으)로 어느 줄이든 주석 처리하십시오.
comment.line.uncomment.that.line=Uncomment the commented line with the same shortcut. Press {0}.
comment.line.comment.several.lines=Select several lines and then comment them out with {0}.

surround.and.unwrap.lesson.name=둘러싸기 및 래핑 해제
surround.and.unwrap.invoke.surround={0} 을(를) 눌러 선택한 코드 조각을 일부 템플릿 코드로 둘러싸십시오.
surround.and.unwrap.choose.surround.item={0} 항목을 선택하십시오.
surround.and.unwrap.invoke.unwrap={0} 의 래핑 해제 액션으로 초기 파일로 되돌아가봅시다.
surround.and.unwrap.choose.unwrap.item=Choose the {0} item.
surround.and.unwrap.help.surround.code.fragments=코드 조각 둘러싸기
surround.and.unwrap.help.unwrapping.and.removing.statements=구문 래핑 해제 및 제거

## Completion module
code.completion.module.name=코드 완성
code.completion.module.description=IDE가 코드를 완성합니다. 기본, 스마트 및 기타 유형의 코드 완성 기능을 사용해보십시오.

basic.completion.lesson.name=기본 코드 완성
basic.completion.start.typing=By default, <ide/> proposes completion for your code instantly. Start typing {0} right where the caret is, and you will see the completion list with matching suggestions.
basic.completion.continue.typing=Continue typing {0} until it becomes the first item.
basic.completion.just.press.to.complete=이제 {0} 을(를) 눌러 이 구문을 완료하십시오.
basic.completion.activate.explicitly=To activate basic completion explicitly, press {0}.
basic.completion.finish.explicit.completion={0} 을(를) 선택한 후 {1} 을(를) 누르세요.

completion.with.tab.lesson.name=탭 코드 완성
completion.with.tab.begin.completion=Press {0} to show the completion suggestions.
completion.with.tab.finish.with.tab=For example, choose {0} and press {1}. This replaces the word at the caret rather than simply inserts it.

postfix.completion.lesson.name=접미사 완성
postfix.completion.type.template=<ide/>는 접미사 단축키를 제공할 수 있습니다. {0} 을/를 입력하십시오.

## Refactoring module
refactorings.module.name=리팩토링
refactorings.module.description=이름 변경, 추출 및 기타 유형의 리팩토링을 사용하여 코드를 정리하십시오.

rename.lesson.name=이름 변경

refactoring.menu.lesson.name=메뉴 리팩토링 중
refactoring.menu.show.refactoring.list=<ide/> supports a variety of refactorings. Many of them have their own shortcuts. But for rare refactorings, you can press {0} and preview a partial list of them.
refactoring.menu.introduce.parameter=이 표현식을 매개변수로 교체하고자 한다고 가정해봅시다. 그러면 {0} 을/를 선택해야 합니다. 이제 제안 목록을 줄이기 위해 <strong>pa</strong> (introduce <strong>pa</strong>rameter) 또는 <strong>ip</strong> (<strong>i<strong>ntroduce <strong>p</strong>areameter)를 입력하십시오.
refactoring.menu.start.refactoring=Press {0} to start the {1} refactoring. <strong>Note</strong> that you can learn refactoring shortcuts from the refactoring menu.
refactoring.menu.finish.refactoring=To complete refactoring, you need to choose some name or leave the default one and press {0}.

## Code Assistance module
code.assistance.module.name=코드 지원
code.assistance.module.description=Learn how to format your code, obtain parameter info, and preview quick popups.

code.format.lesson.name=코드 서식
code.format.reformat.selection=<ide/> can help you correct code formatting with just one action. to reformat the selected code fragment with {0}.
code.format.reformat.file=줄이 선택되지 않은 경우 전체 파일의 서식을 다시 지정하려면, {0} 을/를 사용하십시오.
code.format.show.reformat.file.dialog=서식 다시 지정 설정을 표시하려면 {0} 을(를) 사용하십시오.
code.format.optimize.imports=여기서 서식 다시 지정 옵션을 구성할 수 있습니다. 예를 들어 {0} 을/를 켜고 {1} 을/를 클릭하십시오.

parameter.info.lesson.name=매개변수 정보
parameter.info.use.action=Press {0} to see the method''s signature.
parameter.info.add.parameters={0} 의 width 및 {1} 의 height를 사용하십시오.

quick.popups.lesson.name=빠른 팝업
quick.popups.show.documentation=Press {0} to see the documentation for the symbol at the caret.
quick.popups.press.escape={0} 을/를 눌러 팝업을 닫으십시오.
quick.popups.show.implementation={0} 을/를 눌러 캐럿에 위치한 심볼의 정의를 확인하십시오.

editor.coding.assistance.lesson.name=에디터 코딩 지원
editor.coding.assistance.goto.next.error={0} 을/를 눌러 파일 내 강조 표시된 다음 오류로 이동하십시오.
editor.coding.assistance.fix.error=Let''s fix this error. Press {0} and select {1}.
editor.coding.assistance.goto.next.warning=Let''s go to the next warning. Press {0}.
editor.coding.assistance.show.warning.description=Also, you can see the warning or error description of the item at the caret. Press {0} to see a short description and press {0} again to expand it.
editor.coding.assistance.fix.warning=Let''s fix this warning too. Press {0} and select {1}.
editor.coding.assistance.highlight.usages=Another useful tool is the usages highlighting. Press {0} to highlight all usages of the symbol at the caret within the file.

## Navigation module
navigation.module.name=탐색
navigation.module.description=Jump to source, navigate to declarations, implementations, and a file structure.

declaration.and.usages.lesson.name=선언 및 사용 위치
declaration.and.usages.jump.to.declaration={0} 을/를 눌러 메소드 선언으로 이동하십시오.
declaration.and.usages.show.usages=Now the caret is at the method''s declaration. Use the same shortcut {0} to see all of its usages, then select one of them.
declaration.and.usages.find.usages=Press {0} to see a more detailed view of usages. You can invoke {0} on either a declaration or a usage.
declaration.and.usages.pin.motivation=From the {0} view you can navigate both to usages and declarations. The next search will override these results in the {0} view. To prevent it, pin the results\:
declaration.and.usages.right.click.tab=Right-click the tab title, {0}.
declaration.and.usages.select.pin.item={0} 을(를) 선택하십시오.
declaration.and.usages.hide.view=사용 위치 찾아보기가 종료된 경우 {0} 을(를) 눌러 뷰를 숨기십시오.
declaration.and.usages.open.find.view={0} 을(를) {1} 뷰를 다시 여십시오.

file.structure.lesson.name=파일 구조
file.structure.open.popup=A large source file can be difficult to read and navigate. Sometimes you only need to preview it. Press {0} to open the file structure.
file.structure.request.prefixes=Suppose you want to find a method with {0} and {1} words in its name. Type {2} (prefixes of the required words) to filter the file structure.
file.structure.navigate=남아있는 아이템은 하나 뿐입니다. 이제 {0} 을(를) 눌러 선택한 항목으로 이동하십시오.
file.structure.toolwindow=<ide/>는 파일 구조를 도구 창으로서 표시할 수도 있습니다. {0} (으)로 여십시오.

recent.files.lesson.name=최근 파일 및 위치
recent.files.first.transition={0} 메소드의 구현 방식이 궁금하시나요? {1} 을/를 사용해 메소드 선언으로 이동해봅시다.
recent.files.dialog.message=We want to simulate a basic workflow\: quick navigation between files. Don't move the mouse until we finish.
recent.files.dialog.title=워크플로 시뮬레이션
recent.files.show.recent.files=We dived deeply into the library files. How can we get back to our file? <ide/> has a feature that can help us show recently opened files. Press {0}.
recent.files.search.typing=이름으로 파일을 검색할 수 있습니다. {0}(필요한 단어의 접두사)을/를 입력하십시오.
recent.files.search.jump=오직 하나의 파일만 남아 있습니다. 이제 {0} 을/를 눌러 선택한 항목으로 이동하십시오.
recent.files.use.recent.files.again=We are back to our file. But let''s view the recent files again by using {0}.
recent.files.delete=This list contains many source files that we don''t want to open anymore. Let''s delete {0} files from our recent files history by using {1}.
recent.files.close.popup=Now the history of our recent files is cleaner. Click somewhere outside the popup to close it or use {0}.
recent.files.show.recent.locations=Another useful action can show you the code in the recently visited locations. Use {0}.
recent.files.locations.search.typing=여기서 기억나는 코드 조각으로 검색할 수 있습니다. {0} 을/를 입력하십시오.
recent.files.locations.search.jump=이제 {0} 을/를 눌러 선택한 코드 조각으로 이동하십시오.

search.everywhere.lesson.name=전체 검색
search.everywhere.invoke.search.everywhere=To open {0} you need to press {1} twice.
search.everywhere.type.prefixes=Suppose you are looking for a class with the {0} and {1} words in the name. Type {2} (prefixes of the required words) in the search field.
search.everywhere.navigate.to.class=Select {0} by using the keyboard arrows and press {1} to jump to the definition of this class.
search.everywhere.goto.class=좋습니다\! 하지만 검색 도구 창에서 파일, 클래스, 변수를 보는 것이 불편한 경우가 있습니다. {0} 을/를 사용해 클래스만 검색하거나 특정 장소에서만 검색하십시오.
search.everywhere.type.class.name=Suppose you need some library class responsible for buffered reading from an input stream. Type {0} (prefixes of the required words). But do not navigate to it yet\!
search.everywhere.use.all.places=Now you see a class inside this demo project. However, we need to find its implementation in libraries. Let''s switch the {0} filter to {1}, and you will see the content of available libraries.
search.everywhere.quick.documentation={0} 을(를) 눌러 사용 가능한 문서를 미리보기하십시오.
search.everywhere.finish=<strong>Done\!</strong> In the same way, you can use {0} to look for a method or global variable and use {1} to look for a file.
search.everywhere.navigation.promotion={0} 모듈에서 다른 이동 액션 및 워크플로 사용 사례를 찾을 수 있습니다.

extract.method.lesson.name=메소드 추출
extract.method.invoke.action={0} 을(를) 눌러 선택한 코드 블록을 메소드로 추출하십시오.
extract.method.start.refactoring={0} 을(를) 클릭하여 리팩토링을 시작하십시오.
extract.method.confirm.several.replaces=Cocktail sort has two swap places. The first fragment has just been extracted. Click {0} to extract both of them.
extract.method.second.fragment=이제 두 번째 조각의 교체를 확인 또는 거부할 수 있습니다.

extract.variable.lesson.name=변수 추출
extract.variable.start.refactoring=Press {0} to extract a local variable from the {1} expression.
extract.variable.replace.all=이 코드 블록에는 선택한 표현식이 3번 사용되었습니다. 목록의 두 번째 항목을 선택하여 모두 교체하십시오.
extract.variable.choose.name=새 변수의 이름을 선택하거나 그대로 두십시오. {0} 을(를) 눌러 리팩토링을 완료하십시오.

## Run/Debug module
run.debug.module.name=실행 및 디버그
run.debug.module.description=코드를 실행하고 IDE 비주얼 디버거로 오류를 수정하십시오.

run.configuration.lesson.name=실행 구성
run.configuration.hide.toolwindow=<ide/> automatically opened the {0} tool window. Tip\: at the top of the {0} tool window, you can see the full run command. Now let''s hide the tool window with {1}.
run.configuration.temporary.to.permanent=For each new run, <ide/> creates a temporary run configuration. Temporary configurations are automatically deleted if the default limit of five is reached. Let's convert the temporary configuration into a permanent one. Open the drop-down menu with run configurations.
run.configuration.select.save.configuration={0} 을(를) 선택하십시오.
run.configuration.edit.configuration=Suppose you want to change a configuration or create another one manually. Then you need to open the drop-down menu again and click {0}. Alternatively, you can use the {1} action.
run.configuration.settings.description=This is a place for managing run/debug configurations. Here you can set program parameters, JVM arguments, environment variables, and so on.
run.configuration.tip.about.save.configuration.into.file=Tip\: Sometimes you might want to save a configuration to its own file. Such configurations will be easy to share between colleagues (usually, by using a version control system). Now close the settings dialog to finish this lesson.

debug.workflow.lesson.name=디버그 워크플로
debug.workflow.incorrect.breakpoints=이 수업의 중단점이 잘못 설정되어 있습니다.
debug.workflow.run.program=Before debugging, let''s run the program and see what is going wrong {0}.
debug.workflow.toggle.breakpoint=So, there is a problem. Let''s start investigation by placing a breakpoint. To set a breakpoint, you click the editor gutter or just press {0}.
debug.workflow.start.debug=To start debugging the selected run configuration, click {0} or press {1}.
debug.workflow.need.restart.lesson=The debug session has been stopped. Restart the lesson.
debug.workflow.return.to.editor=Many trace actions shift focus to the debug tool window. Let''s return to the editor with {0}.
debug.workflow.use.watches=<ide/> has several ways to show variable values. For this step, we selected the call. Let''s add it to {0}. You can copy the expression to the clipboard, click the {1} button on the debug tool window, and paste the copied text. Alternatively, you can just use action {2} {3}.
debug.workflow.consider.to.add.a.shortcut=(consider assigning a shortcut for it later)
debug.workflow.step.into=Let''s step into. You can use the {0} action or the {1} option on the debug panel.
debug.workflow.choose.method.to.step.in=In most cases, you might want to skip argument calculating, so the Smart Step Into feature suggests the wrapping method by default. However, here we need to choose the second one\: {0}. You can choose it with the keyboard {1} and press {2}, or you can click the call.
debug.workflow.quick.evaluate={0} 에 무엇을 전달할지 봅시다. 선택한 인수의 표현식 {1} 빠른 평가를 호출하십시오.
debug.workflow.fix.error=Oh, we made a mistake in the array index\! Let''s fix it right now. Close the ({0}) popup and change 0 to 1.
debug.workflow.step.over=Let''s check if the call of {0} will not throw an exception now. Use the Step Over action {1} or click the {2} option.
debug.workflow.mute.breakpoints=Oops, the same breakpoint again. Now we don''t need to stop at this breakpoint. So, let''s mute breakpoints by clicking the {0} option or with the {1} action.
debug.workflow.run.to.cursor={0}의 결과를 확인해봅시다. 에디터 커서를 {1} 문으로 이동했습니다. {2}을(를) 누르거나 {3}을(를) 클릭하세요. {4}은(는) 중단점이 꺼진 경우에도 작동합니다.
debug.workflow.evaluate.expression=It seems the {0} value is not an average value we want to find. We forgot to divide it by length. It seems we need to return {1}. Let''s check the guess. Press {2} or click the {3} option.
debug.workflow.type.result={1} 필드에 {0} 을(를) 입력하면 코드 완성 기능이 작동합니다.
debug.workflow.evaluate.it={0} 을(를) 누르거나 {1} 을(를) 클릭하십시오.
debug.workflow.stop.debug=It is a correct answer\! Let''s close the dialog and stop debugging with {0} or the {1} button.
debug.workflow.resume=It seems there are no exceptions by now. Let''s continue execution with {0} or by clicking the {1} button.
